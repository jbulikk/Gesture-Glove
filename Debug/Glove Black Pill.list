
Glove Black Pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdfc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800ffa0  0800ffa0  0001ffa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010510  08010510  000302dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010510  08010510  00020510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010518  08010518  000302dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010518  08010518  00020518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801051c  0801051c  0002051c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08010520  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f04  200002dc  080107fc  000302dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021e0  080107fc  000321e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b21e  00000000  00000000  0003030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043ad  00000000  00000000  0004b52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0004f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  00050d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd91  00000000  00000000  00051fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d873  00000000  00000000  0006dd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c64d  00000000  00000000  0008b5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127c11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064f8  00000000  00000000  00127c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002dc 	.word	0x200002dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ff84 	.word	0x0800ff84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e0 	.word	0x200002e0
 80001dc:	0800ff84 	.word	0x0800ff84

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f6e:	4b4a      	ldr	r3, [pc, #296]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f70:	4a4a      	ldr	r2, [pc, #296]	; (800109c <MX_ADC1_Init+0x140>)
 8000f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f74:	4b48      	ldr	r3, [pc, #288]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7a:	4b47      	ldr	r3, [pc, #284]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f80:	4b45      	ldr	r3, [pc, #276]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f86:	4b44      	ldr	r3, [pc, #272]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8c:	4b42      	ldr	r3, [pc, #264]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f94:	4b40      	ldr	r3, [pc, #256]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f9c:	4a40      	ldr	r2, [pc, #256]	; (80010a0 <MX_ADC1_Init+0x144>)
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa0:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fac:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb4:	4b38      	ldr	r3, [pc, #224]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fba:	4837      	ldr	r0, [pc, #220]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fbc:	f001 f8c8 	bl	8002150 <HAL_ADC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fc6:	f000 fe13 	bl	8001bf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fca:	2309      	movs	r3, #9
 8000fcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482f      	ldr	r0, [pc, #188]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fdc:	f001 fb24 	bl	8002628 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fe6:	f000 fe03 	bl	8001bf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fea:	2308      	movs	r3, #8
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4828      	ldr	r0, [pc, #160]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000ff8:	f001 fb16 	bl	8002628 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001002:	f000 fdf5 	bl	8001bf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001006:	2307      	movs	r3, #7
 8001008:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800100a:	2303      	movs	r3, #3
 800100c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	4619      	mov	r1, r3
 8001012:	4821      	ldr	r0, [pc, #132]	; (8001098 <MX_ADC1_Init+0x13c>)
 8001014:	f001 fb08 	bl	8002628 <HAL_ADC_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800101e:	f000 fde7 	bl	8001bf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001022:	2306      	movs	r3, #6
 8001024:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001026:	2304      	movs	r3, #4
 8001028:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	481a      	ldr	r0, [pc, #104]	; (8001098 <MX_ADC1_Init+0x13c>)
 8001030:	f001 fafa 	bl	8002628 <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800103a:	f000 fdd9 	bl	8001bf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800103e:	2305      	movs	r3, #5
 8001040:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001042:	2305      	movs	r3, #5
 8001044:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	4619      	mov	r1, r3
 800104a:	4813      	ldr	r0, [pc, #76]	; (8001098 <MX_ADC1_Init+0x13c>)
 800104c:	f001 faec 	bl	8002628 <HAL_ADC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001056:	f000 fdcb 	bl	8001bf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 800105a:	2306      	movs	r3, #6
 800105c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <MX_ADC1_Init+0x13c>)
 8001064:	f001 fae0 	bl	8002628 <HAL_ADC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800106e:	f000 fdbf 	bl	8001bf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8001072:	2307      	movs	r3, #7
 8001074:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <MX_ADC1_Init+0x13c>)
 8001080:	f001 fad2 	bl	8002628 <HAL_ADC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800108a:	f000 fdb1 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200002f8 	.word	0x200002f8
 800109c:	40012000 	.word	0x40012000
 80010a0:	0f000001 	.word	0x0f000001

080010a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a40      	ldr	r2, [pc, #256]	; (80011c4 <HAL_ADC_MspInit+0x120>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d179      	bne.n	80011ba <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a3e      	ldr	r2, [pc, #248]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a37      	ldr	r2, [pc, #220]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a30      	ldr	r2, [pc, #192]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800111a:	23e0      	movs	r3, #224	; 0xe0
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4827      	ldr	r0, [pc, #156]	; (80011cc <HAL_ADC_MspInit+0x128>)
 800112e:	f002 f9f3 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001132:	2303      	movs	r3, #3
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001136:	2303      	movs	r3, #3
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4822      	ldr	r0, [pc, #136]	; (80011d0 <HAL_ADC_MspInit+0x12c>)
 8001146:	f002 f9e7 	bl	8003518 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800114c:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <HAL_ADC_MspInit+0x134>)
 800114e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001168:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800116c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001170:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001174:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001178:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800117c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001180:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800118e:	4811      	ldr	r0, [pc, #68]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001190:	f001 fe16 	bl	8002dc0 <HAL_DMA_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800119a:	f000 fd29 	bl	8001bf0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 80011a2:	639a      	str	r2, [r3, #56]	; 0x38
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2012      	movs	r0, #18
 80011b0:	f001 fdcf 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011b4:	2012      	movs	r0, #18
 80011b6:	f001 fde8 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40012000 	.word	0x40012000
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400
 80011d4:	20000340 	.word	0x20000340
 80011d8:	40026410 	.word	0x40026410

080011dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_DMA_Init+0x68>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a16      	ldr	r2, [pc, #88]	; (8001244 <MX_DMA_Init+0x68>)
 80011ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_DMA_Init+0x68>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_DMA_Init+0x68>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <MX_DMA_Init+0x68>)
 8001208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <MX_DMA_Init+0x68>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	200b      	movs	r0, #11
 8001220:	f001 fd97 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001224:	200b      	movs	r0, #11
 8001226:	f001 fdb0 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2038      	movs	r0, #56	; 0x38
 8001230:	f001 fd8f 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001234:	2038      	movs	r0, #56	; 0x38
 8001236:	f001 fda8 	bl	8002d8a <HAL_NVIC_EnableIRQ>

}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <flex_assign_raw_values_to_fingers>:
#include "flex.h"

void flex_assign_raw_values_to_fingers(uint16_t *data_buffer, FlexHandRaw *handStructure)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
    handStructure->thumb = data_buffer[ORDER_THUMB];
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	881a      	ldrh	r2, [r3, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	801a      	strh	r2, [r3, #0]
    handStructure->index = data_buffer[ORDER_INDEX];
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	885a      	ldrh	r2, [r3, #2]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	805a      	strh	r2, [r3, #2]
    handStructure->middle = data_buffer[ORDER_MIDDLE];
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	889a      	ldrh	r2, [r3, #4]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	809a      	strh	r2, [r3, #4]
    handStructure->ring = data_buffer[ORDER_RING];
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	88da      	ldrh	r2, [r3, #6]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	80da      	strh	r2, [r3, #6]
    handStructure->pinky = data_buffer[ORDER_PINKY];
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	891a      	ldrh	r2, [r3, #8]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	811a      	strh	r2, [r3, #8]
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a2b      	ldr	r2, [pc, #172]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a24      	ldr	r2, [pc, #144]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_GPIO_Init+0xcc>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012f8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fe:	2301      	movs	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4619      	mov	r1, r3
 8001308:	4813      	ldr	r0, [pc, #76]	; (8001358 <MX_GPIO_Init+0xd0>)
 800130a:	f002 f905 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_5;
 800130e:	f244 0320 	movw	r3, #16416	; 0x4020
 8001312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001314:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	4619      	mov	r1, r3
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <MX_GPIO_Init+0xd0>)
 8001326:	f002 f8f7 	bl	8003518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2017      	movs	r0, #23
 8001330:	f001 fd0f 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001334:	2017      	movs	r0, #23
 8001336:	f001 fd28 	bl	8002d8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2028      	movs	r0, #40	; 0x28
 8001340:	f001 fd07 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001344:	2028      	movs	r0, #40	; 0x28
 8001346:	f001 fd20 	bl	8002d8a <HAL_NVIC_EnableIRQ>

}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40020400 	.word	0x40020400

0800135c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_I2C1_Init+0x50>)
 8001362:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <MX_I2C1_Init+0x54>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_I2C1_Init+0x50>)
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <MX_I2C1_Init+0x58>)
 800136a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_I2C1_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_I2C1_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_I2C1_Init+0x50>)
 800137a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800137e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <MX_I2C1_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_I2C1_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_I2C1_Init+0x50>)
 800139a:	f002 fa71 	bl	8003880 <HAL_I2C_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a4:	f000 fc24 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200003a0 	.word	0x200003a0
 80013b0:	40005400 	.word	0x40005400
 80013b4:	00061a80 	.word	0x00061a80

080013b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a38      	ldr	r2, [pc, #224]	; (80014b8 <HAL_I2C_MspInit+0x100>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d169      	bne.n	80014ae <HAL_I2C_MspInit+0xf6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b37      	ldr	r3, [pc, #220]	; (80014bc <HAL_I2C_MspInit+0x104>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a36      	ldr	r2, [pc, #216]	; (80014bc <HAL_I2C_MspInit+0x104>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b34      	ldr	r3, [pc, #208]	; (80014bc <HAL_I2C_MspInit+0x104>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013f6:	23c0      	movs	r3, #192	; 0xc0
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fa:	2312      	movs	r3, #18
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001406:	2304      	movs	r3, #4
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	482b      	ldr	r0, [pc, #172]	; (80014c0 <HAL_I2C_MspInit+0x108>)
 8001412:	f002 f881 	bl	8003518 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b28      	ldr	r3, [pc, #160]	; (80014bc <HAL_I2C_MspInit+0x104>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a27      	ldr	r2, [pc, #156]	; (80014bc <HAL_I2C_MspInit+0x104>)
 8001420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <HAL_I2C_MspInit+0x104>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_I2C_MspInit+0x10c>)
 8001434:	4a24      	ldr	r2, [pc, #144]	; (80014c8 <HAL_I2C_MspInit+0x110>)
 8001436:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_I2C_MspInit+0x10c>)
 800143a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800143e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001440:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_I2C_MspInit+0x10c>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001446:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <HAL_I2C_MspInit+0x10c>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_I2C_MspInit+0x10c>)
 800144e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001452:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_I2C_MspInit+0x10c>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_I2C_MspInit+0x10c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_I2C_MspInit+0x10c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_I2C_MspInit+0x10c>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_I2C_MspInit+0x10c>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <HAL_I2C_MspInit+0x10c>)
 8001474:	f001 fca4 	bl	8002dc0 <HAL_DMA_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800147e:	f000 fbb7 	bl	8001bf0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_I2C_MspInit+0x10c>)
 8001486:	639a      	str	r2, [r3, #56]	; 0x38
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_I2C_MspInit+0x10c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	201f      	movs	r0, #31
 8001494:	f001 fc5d 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001498:	201f      	movs	r0, #31
 800149a:	f001 fc76 	bl	8002d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2020      	movs	r0, #32
 80014a4:	f001 fc55 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014a8:	2020      	movs	r0, #32
 80014aa:	f001 fc6e 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40005400 	.word	0x40005400
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020400 	.word	0x40020400
 80014c4:	200003f4 	.word	0x200003f4
 80014c8:	40026010 	.word	0x40026010

080014cc <MPU6050_DMA_mode_init>:
uint8_t acc_sens = 16384.0;
float current_angle = 0.0;
char msg2[128];

uint8_t MPU6050_DMA_mode_init(I2C_HandleTypeDef *I2Cx)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af04      	add	r7, sp, #16
 80014d2:	6078      	str	r0, [r7, #4]
    I2C_HandleTypeDef *i2c = I2Cx;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	60fb      	str	r3, [r7, #12]
    uint8_t counter = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	75fb      	strb	r3, [r7, #23]
    uint8_t check;
    uint8_t Data;
    
    for(int i = 0; i < 5; i++){
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	e02e      	b.n	8001540 <MPU6050_DMA_mode_init+0x74>
        HAL_Delay(1000);
 80014e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e6:	f000 fe0f 	bl	8002108 <HAL_Delay>
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &check, 1, 10);
 80014ea:	230a      	movs	r3, #10
 80014ec:	9302      	str	r3, [sp, #8]
 80014ee:	2301      	movs	r3, #1
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	f107 030b 	add.w	r3, r7, #11
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	2275      	movs	r2, #117	; 0x75
 80014fc:	21d0      	movs	r1, #208	; 0xd0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f002 fbfc 	bl	8003cfc <HAL_I2C_Mem_Read>

        if(check == 104)
 8001504:	7afb      	ldrb	r3, [r7, #11]
 8001506:	2b68      	cmp	r3, #104	; 0x68
 8001508:	d105      	bne.n	8001516 <MPU6050_DMA_mode_init+0x4a>
        {
            counter++;
 800150a:	7dfb      	ldrb	r3, [r7, #23]
 800150c:	3301      	adds	r3, #1
 800150e:	75fb      	strb	r3, [r7, #23]
            if(counter >= 2)
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d818      	bhi.n	8001548 <MPU6050_DMA_mode_init+0x7c>
            {
                break;
            }
        }
        sprintf(msg2, "WHO_AM_I check: %d \n\r", check);
 8001516:	7afb      	ldrb	r3, [r7, #11]
 8001518:	461a      	mov	r2, r3
 800151a:	494a      	ldr	r1, [pc, #296]	; (8001644 <MPU6050_DMA_mode_init+0x178>)
 800151c:	484a      	ldr	r0, [pc, #296]	; (8001648 <MPU6050_DMA_mode_init+0x17c>)
 800151e:	f00c f83f 	bl	800d5a0 <siprintf>
        CDC_Transmit_FS((uint8_t *)msg2, strlen(msg2));
 8001522:	4849      	ldr	r0, [pc, #292]	; (8001648 <MPU6050_DMA_mode_init+0x17c>)
 8001524:	f7fe fe5c 	bl	80001e0 <strlen>
 8001528:	4603      	mov	r3, r0
 800152a:	4619      	mov	r1, r3
 800152c:	4846      	ldr	r0, [pc, #280]	; (8001648 <MPU6050_DMA_mode_init+0x17c>)
 800152e:	f00a ff49 	bl	800c3c4 <CDC_Transmit_FS>
        HAL_Delay(1000);
 8001532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001536:	f000 fde7 	bl	8002108 <HAL_Delay>
    for(int i = 0; i < 5; i++){
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	3301      	adds	r3, #1
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	2b04      	cmp	r3, #4
 8001544:	ddcd      	ble.n	80014e2 <MPU6050_DMA_mode_init+0x16>
 8001546:	e000      	b.n	800154a <MPU6050_DMA_mode_init+0x7e>
                break;
 8001548:	bf00      	nop
    }

    Data = MPU6050_CLOCK_PLL_ZGYRO;
 800154a:	2303      	movs	r3, #3
 800154c:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &Data, 1, i2c_timeout);//PLL with Z axis gyroscope reference
 800154e:	2364      	movs	r3, #100	; 0x64
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	2301      	movs	r3, #1
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	f107 030a 	add.w	r3, r7, #10
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2301      	movs	r3, #1
 800155e:	226b      	movs	r2, #107	; 0x6b
 8001560:	21d0      	movs	r1, #208	; 0xd0
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f002 fad0 	bl	8003b08 <HAL_I2C_Mem_Write>

    Data = 0x05;
 8001568:	2305      	movs	r3, #5
 800156a:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &Data, 1, i2c_timeout);        //DLPF_CFG = 1: Fs=1khz; bandwidth=42hz 
 800156c:	2364      	movs	r3, #100	; 0x64
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	2301      	movs	r3, #1
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	f107 030a 	add.w	r3, r7, #10
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2301      	movs	r3, #1
 800157c:	221a      	movs	r2, #26
 800157e:	21d0      	movs	r1, #208	; 0xd0
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f002 fac1 	bl	8003b08 <HAL_I2C_Mem_Write>

    Data = 0x13;
 8001586:	2313      	movs	r3, #19
 8001588:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &Data, 1, i2c_timeout);    //50Hz sample rate
 800158a:	2364      	movs	r3, #100	; 0x64
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	2301      	movs	r3, #1
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f107 030a 	add.w	r3, r7, #10
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2301      	movs	r3, #1
 800159a:	2219      	movs	r2, #25
 800159c:	21d0      	movs	r1, #208	; 0xd0
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f002 fab2 	bl	8003b08 <HAL_I2C_Mem_Write>

    Data = MPU6050_GYRO_FS_250;
 80015a4:	2300      	movs	r3, #0
 80015a6:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &Data, 1, i2c_timeout);    //Gyro full scale setting
 80015a8:	2364      	movs	r3, #100	; 0x64
 80015aa:	9302      	str	r3, [sp, #8]
 80015ac:	2301      	movs	r3, #1
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	f107 030a 	add.w	r3, r7, #10
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2301      	movs	r3, #1
 80015b8:	221b      	movs	r2, #27
 80015ba:	21d0      	movs	r1, #208	; 0xd0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f002 faa3 	bl	8003b08 <HAL_I2C_Mem_Write>

    Data = MPU6050_ACCEL_FS_2;
 80015c2:	2300      	movs	r3, #0
 80015c4:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);    //Accel full scale setting
 80015c6:	2364      	movs	r3, #100	; 0x64
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	2301      	movs	r3, #1
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	f107 030a 	add.w	r3, r7, #10
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	221c      	movs	r2, #28
 80015d8:	21d0      	movs	r1, #208	; 0xd0
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f002 fa94 	bl	8003b08 <HAL_I2C_Mem_Write>

    // Data = 1<<4;
    Data = 0x30;
 80015e0:	2330      	movs	r3, #48	; 0x30
 80015e2:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &Data , 1, i2c_timeout);        //interrupt status bits are cleared on any read operation
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	9302      	str	r3, [sp, #8]
 80015e8:	2301      	movs	r3, #1
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	f107 030a 	add.w	r3, r7, #10
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2301      	movs	r3, #1
 80015f4:	2237      	movs	r2, #55	; 0x37
 80015f6:	21d0      	movs	r1, #208	; 0xd0
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f002 fa85 	bl	8003b08 <HAL_I2C_Mem_Write>

    Data = 1<<0;
 80015fe:	2301      	movs	r3, #1
 8001600:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &Data, 1, i2c_timeout);        //interupt occurs when data is ready. The interupt routine is in the receiver.c file.   
 8001602:	2364      	movs	r3, #100	; 0x64
 8001604:	9302      	str	r3, [sp, #8]
 8001606:	2301      	movs	r3, #1
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	f107 030a 	add.w	r3, r7, #10
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	2238      	movs	r2, #56	; 0x38
 8001614:	21d0      	movs	r1, #208	; 0xd0
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f002 fa76 	bl	8003b08 <HAL_I2C_Mem_Write>

    Data = 0x07;
 800161c:	2307      	movs	r3, #7
 800161e:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_SIGNAL_PATH_RESET, 1, &Data, 1, i2c_timeout);//reset gyro and accel sensor  
 8001620:	2364      	movs	r3, #100	; 0x64
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	2301      	movs	r3, #1
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	f107 030a 	add.w	r3, r7, #10
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2301      	movs	r3, #1
 8001630:	2268      	movs	r2, #104	; 0x68
 8001632:	21d0      	movs	r1, #208	; 0xd0
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f002 fa67 	bl	8003b08 <HAL_I2C_Mem_Write>
}
 800163a:	bf00      	nop
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	0800ffa0 	.word	0x0800ffa0
 8001648:	20000454 	.word	0x20000454

0800164c <MPU6050_DMA_read_all_data>:
{
    HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data_buffer, 6);
}

void MPU6050_DMA_read_all_data(I2C_HandleTypeDef *I2Cx, uint8_t *data_buffer)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af02      	add	r7, sp, #8
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data_buffer, 14);
 8001656:	230e      	movs	r3, #14
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2301      	movs	r3, #1
 8001660:	223b      	movs	r2, #59	; 0x3b
 8001662:	21d0      	movs	r1, #208	; 0xd0
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f002 fd6f 	bl	8004148 <HAL_I2C_Mem_Read_DMA>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	0000      	movs	r0, r0
 8001674:	0000      	movs	r0, r0
	...

08001678 <MPU6050_process_6_axis_data_and_calculate_angles>:
    // imuStruct->accel_angle = -atan2(imuStruct->accelerometer.z, -imuStruct->accelerometer.x) * (180/M_PI);
    // imuStruct->gyro_angle = imuStruct->gyroscope.y / 131.0;  
}

void MPU6050_process_6_axis_data_and_calculate_angles(uint8_t *data_buffer, ImuData *imuStruct)
{
 8001678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af04      	add	r7, sp, #16
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]

    imuStruct->accelerometer_raw.x = (int16_t)(data_buffer[0] << 8 | data_buffer[1]);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b21a      	sxth	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3301      	adds	r3, #1
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b21b      	sxth	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	b21a      	sxth	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	801a      	strh	r2, [r3, #0]
    imuStruct->accelerometer_raw.y= (int16_t)(data_buffer[2] << 8 | data_buffer[3]);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3302      	adds	r3, #2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3303      	adds	r3, #3
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	805a      	strh	r2, [r3, #2]
    imuStruct->accelerometer_raw.z= (int16_t)(data_buffer[4] << 8 | data_buffer[5]);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3304      	adds	r3, #4
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21a      	sxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3305      	adds	r3, #5
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	809a      	strh	r2, [r3, #4]

    imuStruct->gyroscope_raw.x = (int16_t)(data_buffer[8] << 8 | data_buffer[9]);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3308      	adds	r3, #8
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b21a      	sxth	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3309      	adds	r3, #9
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	80da      	strh	r2, [r3, #6]
    imuStruct->gyroscope_raw.y = (int16_t)(data_buffer[10] << 8 | data_buffer[11]);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	330a      	adds	r3, #10
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	330b      	adds	r3, #11
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b21a      	sxth	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	811a      	strh	r2, [r3, #8]
    imuStruct->gyroscope_raw.z = (int16_t)(data_buffer[12] << 8 | data_buffer[13]);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	330c      	adds	r3, #12
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b21a      	sxth	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	330d      	adds	r3, #13
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b21b      	sxth	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b21a      	sxth	r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	815a      	strh	r2, [r3, #10]

    imuStruct->accelerometer_scaled.x = (float)imuStruct->accelerometer_raw.x / acc_sens;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	b21b      	sxth	r3, r3
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800172c:	4b96      	ldr	r3, [pc, #600]	; (8001988 <MPU6050_process_6_axis_data_and_calculate_angles+0x310>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800173c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001740:	ee17 3a90 	vmov	r3, s15
 8001744:	b21a      	sxth	r2, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	819a      	strh	r2, [r3, #12]
	imuStruct->accelerometer_scaled.y = (float)imuStruct->accelerometer_raw.y / acc_sens;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	885b      	ldrh	r3, [r3, #2]
 800174e:	b21b      	sxth	r3, r3
 8001750:	ee07 3a90 	vmov	s15, r3
 8001754:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001758:	4b8b      	ldr	r3, [pc, #556]	; (8001988 <MPU6050_process_6_axis_data_and_calculate_angles+0x310>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800176c:	ee17 3a90 	vmov	r3, s15
 8001770:	b21a      	sxth	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	81da      	strh	r2, [r3, #14]
	imuStruct->accelerometer_scaled.z = (float)imuStruct->accelerometer_raw.z / acc_sens;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	889b      	ldrh	r3, [r3, #4]
 800177a:	b21b      	sxth	r3, r3
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001784:	4b80      	ldr	r3, [pc, #512]	; (8001988 <MPU6050_process_6_axis_data_and_calculate_angles+0x310>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001798:	ee17 3a90 	vmov	r3, s15
 800179c:	b21a      	sxth	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	821a      	strh	r2, [r3, #16]

    imuStruct->gyroscope_scaled.x = (float)imuStruct->gyroscope_raw.x / gyro_sens;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	88db      	ldrh	r3, [r3, #6]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017b0:	4b76      	ldr	r3, [pc, #472]	; (800198c <MPU6050_process_6_axis_data_and_calculate_angles+0x314>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c4:	ee17 3a90 	vmov	r3, s15
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	825a      	strh	r2, [r3, #18]
    imuStruct->gyroscope_scaled.y = (float)imuStruct->gyroscope_raw.y / gyro_sens;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	891b      	ldrh	r3, [r3, #8]
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017dc:	4b6b      	ldr	r3, [pc, #428]	; (800198c <MPU6050_process_6_axis_data_and_calculate_angles+0x314>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	ee07 3a90 	vmov	s15, r3
 80017e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f0:	ee17 3a90 	vmov	r3, s15
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	829a      	strh	r2, [r3, #20]
    imuStruct->gyroscope_scaled.z = (float)imuStruct->gyroscope_raw.z / gyro_sens;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	895b      	ldrh	r3, [r3, #10]
 80017fe:	b21b      	sxth	r3, r3
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001808:	4b60      	ldr	r3, [pc, #384]	; (800198c <MPU6050_process_6_axis_data_and_calculate_angles+0x314>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181c:	ee17 3a90 	vmov	r3, s15
 8001820:	b21a      	sxth	r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	82da      	strh	r2, [r3, #22]

    imuStruct->roll_acc = atan2(imuStruct->accelerometer_scaled.x, imuStruct->accelerometer_scaled.z) * 180.0/M_PI;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	899b      	ldrh	r3, [r3, #12]
 800182a:	b21b      	sxth	r3, r3
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe81 	bl	8000534 <__aeabi_i2d>
 8001832:	4604      	mov	r4, r0
 8001834:	460d      	mov	r5, r1
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	8a1b      	ldrh	r3, [r3, #16]
 800183a:	b21b      	sxth	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe79 	bl	8000534 <__aeabi_i2d>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	ec43 2b11 	vmov	d1, r2, r3
 800184a:	ec45 4b10 	vmov	d0, r4, r5
 800184e:	f00e f91f 	bl	800fa90 <atan2>
 8001852:	ec51 0b10 	vmov	r0, r1, d0
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <MPU6050_process_6_axis_data_and_calculate_angles+0x318>)
 800185c:	f7fe fed4 	bl	8000608 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	a345      	add	r3, pc, #276	; (adr r3, 8001980 <MPU6050_process_6_axis_data_and_calculate_angles+0x308>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fff5 	bl	800085c <__aeabi_ddiv>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f99d 	bl	8000bb8 <__aeabi_d2f>
 800187e:	4602      	mov	r2, r0
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	61da      	str	r2, [r3, #28]
    imuStruct->roll_gyro = imuStruct->gyroscope_scaled.y;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	8a9b      	ldrh	r3, [r3, #20]
 8001888:	b21b      	sxth	r3, r3
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    imuStruct->roll_complementary = alpha * (imuStruct->roll_complementary + imuStruct->roll_gyro * sampling_time_sec) + (1.0 - alpha) * imuStruct->roll_acc;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80018a4:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <MPU6050_process_6_axis_data_and_calculate_angles+0x31c>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <MPU6050_process_6_axis_data_and_calculate_angles+0x320>)
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018bc:	ee17 0a90 	vmov	r0, s15
 80018c0:	f7fe fe4a 	bl	8000558 <__aeabi_f2d>
 80018c4:	4604      	mov	r4, r0
 80018c6:	460d      	mov	r5, r1
 80018c8:	4b33      	ldr	r3, [pc, #204]	; (8001998 <MPU6050_process_6_axis_data_and_calculate_angles+0x320>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fe43 	bl	8000558 <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	f04f 0000 	mov.w	r0, #0
 80018da:	4930      	ldr	r1, [pc, #192]	; (800199c <MPU6050_process_6_axis_data_and_calculate_angles+0x324>)
 80018dc:	f7fe fcdc 	bl	8000298 <__aeabi_dsub>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4690      	mov	r8, r2
 80018e6:	4699      	mov	r9, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fe33 	bl	8000558 <__aeabi_f2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4640      	mov	r0, r8
 80018f8:	4649      	mov	r1, r9
 80018fa:	f7fe fe85 	bl	8000608 <__aeabi_dmul>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4620      	mov	r0, r4
 8001904:	4629      	mov	r1, r5
 8001906:	f7fe fcc9 	bl	800029c <__adddf3>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f951 	bl	8000bb8 <__aeabi_d2f>
 8001916:	4602      	mov	r2, r0
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	635a      	str	r2, [r3, #52]	; 0x34
    
    
    if(debug == 2)
 800191c:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <MPU6050_process_6_axis_data_and_calculate_angles+0x328>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d127      	bne.n	8001974 <MPU6050_process_6_axis_data_and_calculate_angles+0x2fc>
    {
        sprintf(msg2, "0:=%d, 1:=%d 2:=%d, 3:=%d, 4:=%d 5:=%d\n\r", data_buffer[0], data_buffer[1],data_buffer[2],data_buffer[3],data_buffer[4],data_buffer[5]);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461c      	mov	r4, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3301      	adds	r3, #1
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461d      	mov	r5, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3302      	adds	r3, #2
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3303      	adds	r3, #3
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3305      	adds	r3, #5
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	9303      	str	r3, [sp, #12]
 8001952:	9002      	str	r0, [sp, #8]
 8001954:	9101      	str	r1, [sp, #4]
 8001956:	9200      	str	r2, [sp, #0]
 8001958:	462b      	mov	r3, r5
 800195a:	4622      	mov	r2, r4
 800195c:	4911      	ldr	r1, [pc, #68]	; (80019a4 <MPU6050_process_6_axis_data_and_calculate_angles+0x32c>)
 800195e:	4812      	ldr	r0, [pc, #72]	; (80019a8 <MPU6050_process_6_axis_data_and_calculate_angles+0x330>)
 8001960:	f00b fe1e 	bl	800d5a0 <siprintf>
        CDC_Transmit_FS((uint8_t *)msg2, strlen(msg2));
 8001964:	4810      	ldr	r0, [pc, #64]	; (80019a8 <MPU6050_process_6_axis_data_and_calculate_angles+0x330>)
 8001966:	f7fe fc3b 	bl	80001e0 <strlen>
 800196a:	4603      	mov	r3, r0
 800196c:	4619      	mov	r1, r3
 800196e:	480e      	ldr	r0, [pc, #56]	; (80019a8 <MPU6050_process_6_axis_data_and_calculate_angles+0x330>)
 8001970:	f00a fd28 	bl	800c3c4 <CDC_Transmit_FS>
    }

 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800197e:	bf00      	nop
 8001980:	54442d18 	.word	0x54442d18
 8001984:	400921fb 	.word	0x400921fb
 8001988:	2000000d 	.word	0x2000000d
 800198c:	2000000c 	.word	0x2000000c
 8001990:	40668000 	.word	0x40668000
 8001994:	20000000 	.word	0x20000000
 8001998:	20000008 	.word	0x20000008
 800199c:	3ff00000 	.word	0x3ff00000
 80019a0:	20000004 	.word	0x20000004
 80019a4:	08010014 	.word	0x08010014
 80019a8:	20000454 	.word	0x20000454

080019ac <main>:
void SystemClock_Config(void);
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);

int main(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  HAL_Init();
 80019b0:	f000 fb38 	bl	8002024 <HAL_Init>
  SystemClock_Config();
 80019b4:	f000 f8b4 	bl	8001b20 <SystemClock_Config>
  MX_GPIO_Init();
 80019b8:	f7ff fc66 	bl	8001288 <MX_GPIO_Init>
  MX_DMA_Init();
 80019bc:	f7ff fc0e 	bl	80011dc <MX_DMA_Init>
  MX_ADC1_Init();
 80019c0:	f7ff facc 	bl	8000f5c <MX_ADC1_Init>
  MX_I2C1_Init();
 80019c4:	f7ff fcca 	bl	800135c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80019c8:	f00a fc3e 	bl	800c248 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80019cc:	f000 fa8e 	bl	8001eec <MX_USART1_UART_Init>
  MPU6050_DMA_mode_init(&hi2c1);
 80019d0:	4806      	ldr	r0, [pc, #24]	; (80019ec <main+0x40>)
 80019d2:	f7ff fd7b 	bl	80014cc <MPU6050_DMA_mode_init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 7);
 80019d6:	2207      	movs	r2, #7
 80019d8:	4905      	ldr	r1, [pc, #20]	; (80019f0 <main+0x44>)
 80019da:	4806      	ldr	r0, [pc, #24]	; (80019f4 <main+0x48>)
 80019dc:	f000 fd0c 	bl	80023f8 <HAL_ADC_Start_DMA>

  while (1)
  {
    HAL_Delay(1000);
 80019e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019e4:	f000 fb90 	bl	8002108 <HAL_Delay>
 80019e8:	e7fa      	b.n	80019e0 <main+0x34>
 80019ea:	bf00      	nop
 80019ec:	200003a0 	.word	0x200003a0
 80019f0:	20000518 	.word	0x20000518
 80019f4:	200002f8 	.word	0x200002f8

080019f8 <SysTick_Handler>:
    // recognise_gesture_and_send_by_CDC(&imu_sensor_data, &hand);
  }
}

void SysTick_Handler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80019fc:	f000 fb64 	bl	80020c8 <HAL_IncTick>
  tick++;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <SysTick_Handler+0x2c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <SysTick_Handler+0x2c>)
 8001a08:	6013      	str	r3, [r2, #0]

  // sprintf(msg, "1:=%u, 2:%u\n\r", hand.pinky, hand.index);
  // CDC_Transmit_FS((uint8_t *)msg, strlen(msg));

  if(tick >= 20)
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <SysTick_Handler+0x2c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b13      	cmp	r3, #19
 8001a10:	d906      	bls.n	8001a20 <SysTick_Handler+0x28>
  {
    flex_assign_raw_values_to_fingers(&adc_value, &hand);
 8001a12:	4905      	ldr	r1, [pc, #20]	; (8001a28 <SysTick_Handler+0x30>)
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <SysTick_Handler+0x34>)
 8001a16:	f7ff fc17 	bl	8001248 <flex_assign_raw_values_to_fingers>

    tick = 0;
 8001a1a:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <SysTick_Handler+0x2c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
  }
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000056c 	.word	0x2000056c
 8001a28:	2000055c 	.word	0x2000055c
 8001a2c:	20000518 	.word	0x20000518

08001a30 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  MPU6050_process_6_axis_data_and_calculate_angles(&MPU6050_buff, &imu_sensor_data);
 8001a38:	4903      	ldr	r1, [pc, #12]	; (8001a48 <HAL_I2C_MemRxCpltCallback+0x18>)
 8001a3a:	4804      	ldr	r0, [pc, #16]	; (8001a4c <HAL_I2C_MemRxCpltCallback+0x1c>)
 8001a3c:	f7ff fe1c 	bl	8001678 <MPU6050_process_6_axis_data_and_calculate_angles>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000524 	.word	0x20000524
 8001a4c:	20000508 	.word	0x20000508

08001a50 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_5)
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d103      	bne.n	8001a68 <HAL_GPIO_EXTI_Callback+0x18>
  {
    MPU6050_DMA_read_all_data(&hi2c1, &MPU6050_buff);
 8001a60:	4926      	ldr	r1, [pc, #152]	; (8001afc <HAL_GPIO_EXTI_Callback+0xac>)
 8001a62:	4827      	ldr	r0, [pc, #156]	; (8001b00 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001a64:	f7ff fdf2 	bl	800164c <MPU6050_DMA_read_all_data>
  }

  if (GPIO_Pin == GPIO_PIN_12) 
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a6e:	d140      	bne.n	8001af2 <HAL_GPIO_EXTI_Callback+0xa2>
  {
    uint32_t current_time = HAL_GetTick();
 8001a70:	f000 fb3e 	bl	80020f0 <HAL_GetTick>
 8001a74:	6178      	str	r0, [r7, #20]
    last_debounce_time = 0;
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

    GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001a7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a80:	4821      	ldr	r0, [pc, #132]	; (8001b08 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001a82:	f001 fecd 	bl	8003820 <HAL_GPIO_ReadPin>
 8001a86:	4603      	mov	r3, r0
 8001a88:	74fb      	strb	r3, [r7, #19]

    if (GPIO_Pin == GPIO_PIN_12) 
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a90:	d12f      	bne.n	8001af2 <HAL_GPIO_EXTI_Callback+0xa2>
    {
      uint32_t current_time = HAL_GetTick();
 8001a92:	f000 fb2d 	bl	80020f0 <HAL_GetTick>
 8001a96:	60f8      	str	r0, [r7, #12]
      static uint32_t last_debounce_time = 0;
      static GPIO_PinState last_state = GPIO_PIN_SET;

      GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001a98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a9c:	481a      	ldr	r0, [pc, #104]	; (8001b08 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001a9e:	f001 febf 	bl	8003820 <HAL_GPIO_ReadPin>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	72fb      	strb	r3, [r7, #11]

      if ((current_time - last_debounce_time) > debounce_delay && current_state != last_state) 
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2232      	movs	r2, #50	; 0x32
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d91e      	bls.n	8001af2 <HAL_GPIO_EXTI_Callback+0xa2>
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	7afa      	ldrb	r2, [r7, #11]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d019      	beq.n	8001af2 <HAL_GPIO_EXTI_Callback+0xa2>
      {
          last_debounce_time = current_time;
 8001abe:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6013      	str	r3, [r2, #0]
          last_state = current_state;
 8001ac4:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001ac6:	7afb      	ldrb	r3, [r7, #11]
 8001ac8:	7013      	strb	r3, [r2, #0]

          if (current_state == GPIO_PIN_SET)
 8001aca:	7afb      	ldrb	r3, [r7, #11]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d104      	bne.n	8001ada <HAL_GPIO_EXTI_Callback+0x8a>
          {
              sprintf(msg, "12:=gora\n\r");
 8001ad0:	4910      	ldr	r1, [pc, #64]	; (8001b14 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001ad2:	4811      	ldr	r0, [pc, #68]	; (8001b18 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001ad4:	f00b fd64 	bl	800d5a0 <siprintf>
 8001ad8:	e003      	b.n	8001ae2 <HAL_GPIO_EXTI_Callback+0x92>
          }
          else
          {
              sprintf(msg, "12:=dol\n\r");
 8001ada:	4910      	ldr	r1, [pc, #64]	; (8001b1c <HAL_GPIO_EXTI_Callback+0xcc>)
 8001adc:	480e      	ldr	r0, [pc, #56]	; (8001b18 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001ade:	f00b fd5f 	bl	800d5a0 <siprintf>
          }

          CDC_Transmit_FS((uint8_t *)msg, strlen(msg)); // Wyślij dane
 8001ae2:	480d      	ldr	r0, [pc, #52]	; (8001b18 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001ae4:	f7fe fb7c 	bl	80001e0 <strlen>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4619      	mov	r1, r3
 8001aec:	480a      	ldr	r0, [pc, #40]	; (8001b18 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001aee:	f00a fc69 	bl	800c3c4 <CDC_Transmit_FS>
      }
    }
  }
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000508 	.word	0x20000508
 8001b00:	200003a0 	.word	0x200003a0
 8001b04:	20000570 	.word	0x20000570
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	20000574 	.word	0x20000574
 8001b10:	2000000e 	.word	0x2000000e
 8001b14:	08010040 	.word	0x08010040
 8001b18:	200004d4 	.word	0x200004d4
 8001b1c:	0801004c 	.word	0x0801004c

08001b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b094      	sub	sp, #80	; 0x50
 8001b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b26:	f107 0320 	add.w	r3, r7, #32
 8001b2a:	2230      	movs	r2, #48	; 0x30
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00b f8c4 	bl	800ccbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <SystemClock_Config+0xc8>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	4a26      	ldr	r2, [pc, #152]	; (8001be8 <SystemClock_Config+0xc8>)
 8001b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b52:	6413      	str	r3, [r2, #64]	; 0x40
 8001b54:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <SystemClock_Config+0xc8>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	4b21      	ldr	r3, [pc, #132]	; (8001bec <SystemClock_Config+0xcc>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a20      	ldr	r2, [pc, #128]	; (8001bec <SystemClock_Config+0xcc>)
 8001b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <SystemClock_Config+0xcc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b86:	2302      	movs	r3, #2
 8001b88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b90:	2319      	movs	r3, #25
 8001b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001b94:	2390      	movs	r3, #144	; 0x90
 8001b96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba0:	f107 0320 	add.w	r3, r7, #32
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f006 f81f 	bl	8007be8 <HAL_RCC_OscConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bb0:	f000 f81e 	bl	8001bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	2102      	movs	r1, #2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f006 fa81 	bl	80080d8 <HAL_RCC_ClockConfig>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001bdc:	f000 f808 	bl	8001bf0 <Error_Handler>
  }
}
 8001be0:	bf00      	nop
 8001be2:	3750      	adds	r7, #80	; 0x50
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40007000 	.word	0x40007000

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <Error_Handler+0x8>
	...

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <NMI_Handler+0x4>

08001c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <HardFault_Handler+0x4>

08001c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <MemManage_Handler+0x4>

08001c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <DMA1_Stream0_IRQHandler+0x10>)
 8001c9a:	f001 f9b9 	bl	8003010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200003f4 	.word	0x200003f4

08001ca8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <ADC_IRQHandler+0x10>)
 8001cae:	f000 fa92 	bl	80021d6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200002f8 	.word	0x200002f8

08001cbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001cc0:	2020      	movs	r0, #32
 8001cc2:	f001 fdc5 	bl	8003850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <I2C1_EV_IRQHandler+0x10>)
 8001cd2:	f002 fbcd 	bl	8004470 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200003a0 	.word	0x200003a0

08001ce0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <I2C1_ER_IRQHandler+0x10>)
 8001ce6:	f002 fd34 	bl	8004752 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200003a0 	.word	0x200003a0

08001cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001cf8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cfc:	f001 fda8 	bl	8003850 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d04:	f001 fda4 	bl	8003850 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001d08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d0c:	f001 fda0 	bl	8003850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <DMA2_Stream0_IRQHandler+0x10>)
 8001d1a:	f001 f979 	bl	8003010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000340 	.word	0x20000340

08001d28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <OTG_FS_IRQHandler+0x10>)
 8001d2e:	f004 fe2d 	bl	800698c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20001aa4 	.word	0x20001aa4

08001d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_kill>:

int _kill(int pid, int sig)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d56:	f00a ff87 	bl	800cc68 <__errno>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2216      	movs	r2, #22
 8001d5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_exit>:

void _exit (int status)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ffe7 	bl	8001d4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d7e:	e7fe      	b.n	8001d7e <_exit+0x12>

08001d80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	e00a      	b.n	8001da8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d92:	f3af 8000 	nop.w
 8001d96:	4601      	mov	r1, r0
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	60ba      	str	r2, [r7, #8]
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbf0      	blt.n	8001d92 <_read+0x12>
  }

  return len;
 8001db0:	687b      	ldr	r3, [r7, #4]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e009      	b.n	8001de0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	60ba      	str	r2, [r7, #8]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dbf1      	blt.n	8001dcc <_write+0x12>
  }
  return len;
 8001de8:	687b      	ldr	r3, [r7, #4]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_close>:

int _close(int file)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_isatty>:

int _isatty(int file)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e64:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <_sbrk+0x5c>)
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <_sbrk+0x60>)
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <_sbrk+0x64>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <_sbrk+0x68>)
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d207      	bcs.n	8001e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e8c:	f00a feec 	bl	800cc68 <__errno>
 8001e90:	4603      	mov	r3, r0
 8001e92:	220c      	movs	r2, #12
 8001e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	e009      	b.n	8001eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea2:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <_sbrk+0x64>)
 8001eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20020000 	.word	0x20020000
 8001ebc:	00000400 	.word	0x00000400
 8001ec0:	20000578 	.word	0x20000578
 8001ec4:	200021e0 	.word	0x200021e0

08001ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <SystemInit+0x20>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <SystemInit+0x20>)
 8001ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <MX_USART1_UART_Init+0x50>)
 8001ef4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001efc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f12:	220c      	movs	r2, #12
 8001f14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f24:	f006 fab8 	bl	8008498 <HAL_UART_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f2e:	f7ff fe5f 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2000057c 	.word	0x2000057c
 8001f3c:	40011000 	.word	0x40011000

08001f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_UART_MspInit+0x84>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12c      	bne.n	8001fbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f6c:	f043 0310 	orr.w	r3, r3, #16
 8001f70:	6453      	str	r3, [r2, #68]	; 0x44
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fac:	2307      	movs	r3, #7
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <HAL_UART_MspInit+0x8c>)
 8001fb8:	f001 faae 	bl	8003518 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	3728      	adds	r7, #40	; 0x28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020000 	.word	0x40020000

08001fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002008 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd4:	480d      	ldr	r0, [pc, #52]	; (800200c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fd6:	490e      	ldr	r1, [pc, #56]	; (8002010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fd8:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fec:	4c0b      	ldr	r4, [pc, #44]	; (800201c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ffa:	f7ff ff65 	bl	8001ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffe:	f00a fe39 	bl	800cc74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002002:	f7ff fcd3 	bl	80019ac <main>
  bx  lr    
 8002006:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8002014:	08010520 	.word	0x08010520
  ldr r2, =_sbss
 8002018:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 800201c:	200021e0 	.word	0x200021e0

08002020 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <DMA1_Stream1_IRQHandler>
	...

08002024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <HAL_Init+0x40>)
 800202e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_Init+0x40>)
 800203a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a07      	ldr	r2, [pc, #28]	; (8002064 <HAL_Init+0x40>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204c:	2003      	movs	r0, #3
 800204e:	f000 fe75 	bl	8002d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002052:	200f      	movs	r0, #15
 8002054:	f000 f808 	bl	8002068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002058:	f7ff fdd0 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023c00 	.word	0x40023c00

08002068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x54>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x58>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fe8d 	bl	8002da6 <HAL_SYSTICK_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00e      	b.n	80020b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d80a      	bhi.n	80020b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209c:	2200      	movs	r2, #0
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f000 fe55 	bl	8002d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <HAL_InitTick+0x5c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000010 	.word	0x20000010
 80020c0:	20000018 	.word	0x20000018
 80020c4:	20000014 	.word	0x20000014

080020c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x24>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_IncTick+0x24>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000018 	.word	0x20000018
 80020ec:	200005c0 	.word	0x200005c0

080020f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	200005c0 	.word	0x200005c0

08002108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff ffee 	bl	80020f0 <HAL_GetTick>
 8002114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d005      	beq.n	800212e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_Delay+0x44>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800212e:	bf00      	nop
 8002130:	f7ff ffde 	bl	80020f0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d8f7      	bhi.n	8002130 <HAL_Delay+0x28>
  {
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000018 	.word	0x20000018

08002150 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e033      	b.n	80021ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe ff98 	bl	80010a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d118      	bne.n	80021c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002196:	f023 0302 	bic.w	r3, r3, #2
 800219a:	f043 0202 	orr.w	r2, r3, #2
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fb72 	bl	800288c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f023 0303 	bic.w	r3, r3, #3
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40
 80021be:	e001      	b.n	80021c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d049      	beq.n	80022a0 <HAL_ADC_IRQHandler+0xca>
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d046      	beq.n	80022a0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d12b      	bne.n	8002290 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800223c:	2b00      	cmp	r3, #0
 800223e:	d127      	bne.n	8002290 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800224a:	2b00      	cmp	r3, #0
 800224c:	d006      	beq.n	800225c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002258:	2b00      	cmp	r3, #0
 800225a:	d119      	bne.n	8002290 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0220 	bic.w	r2, r2, #32
 800226a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f9a1 	bl	80025d8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f06f 0212 	mvn.w	r2, #18
 800229e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d057      	beq.n	8002366 <HAL_ADC_IRQHandler+0x190>
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d054      	beq.n	8002366 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d105      	bne.n	80022d4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d139      	bne.n	8002356 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d12b      	bne.n	8002356 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002308:	2b00      	cmp	r3, #0
 800230a:	d124      	bne.n	8002356 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d11d      	bne.n	8002356 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800231e:	2b00      	cmp	r3, #0
 8002320:	d119      	bne.n	8002356 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002330:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fc16 	bl	8002b88 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 020c 	mvn.w	r2, #12
 8002364:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d017      	beq.n	80023ac <HAL_ADC_IRQHandler+0x1d6>
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d014      	beq.n	80023ac <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	d10d      	bne.n	80023ac <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f92f 	bl	8002600 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f06f 0201 	mvn.w	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ba:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d015      	beq.n	80023ee <HAL_ADC_IRQHandler+0x218>
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	f043 0202 	orr.w	r2, r3, #2
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0220 	mvn.w	r2, #32
 80023dc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f918 	bl	8002614 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0220 	mvn.w	r2, #32
 80023ec:	601a      	str	r2, [r3, #0]
  }
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_ADC_Start_DMA+0x1e>
 8002412:	2302      	movs	r3, #2
 8002414:	e0ce      	b.n	80025b4 <HAL_ADC_Start_DMA+0x1bc>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d018      	beq.n	800245e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800243c:	4b5f      	ldr	r3, [pc, #380]	; (80025bc <HAL_ADC_Start_DMA+0x1c4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a5f      	ldr	r2, [pc, #380]	; (80025c0 <HAL_ADC_Start_DMA+0x1c8>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0c9a      	lsrs	r2, r3, #18
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002450:	e002      	b.n	8002458 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	3b01      	subs	r3, #1
 8002456:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f9      	bne.n	8002452 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800246c:	d107      	bne.n	800247e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800247c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	f040 8086 	bne.w	800259a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024cc:	d106      	bne.n	80024dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f023 0206 	bic.w	r2, r3, #6
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	645a      	str	r2, [r3, #68]	; 0x44
 80024da:	e002      	b.n	80024e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ea:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <HAL_ADC_Start_DMA+0x1cc>)
 80024ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	4a35      	ldr	r2, [pc, #212]	; (80025c8 <HAL_ADC_Start_DMA+0x1d0>)
 80024f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	4a34      	ldr	r2, [pc, #208]	; (80025cc <HAL_ADC_Start_DMA+0x1d4>)
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	4a33      	ldr	r2, [pc, #204]	; (80025d0 <HAL_ADC_Start_DMA+0x1d8>)
 8002504:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800250e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800251e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800252e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	334c      	adds	r3, #76	; 0x4c
 800253a:	4619      	mov	r1, r3
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f000 fcec 	bl	8002f1c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10f      	bne.n	8002570 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d129      	bne.n	80025b2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	e020      	b.n	80025b2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_ADC_Start_DMA+0x1dc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d11b      	bne.n	80025b2 <HAL_ADC_Start_DMA+0x1ba>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d114      	bne.n	80025b2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	e00b      	b.n	80025b2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f043 0210 	orr.w	r2, r3, #16
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f043 0201 	orr.w	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000010 	.word	0x20000010
 80025c0:	431bde83 	.word	0x431bde83
 80025c4:	40012300 	.word	0x40012300
 80025c8:	08002a85 	.word	0x08002a85
 80025cc:	08002b3f 	.word	0x08002b3f
 80025d0:	08002b5b 	.word	0x08002b5b
 80025d4:	40012000 	.word	0x40012000

080025d8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1c>
 8002640:	2302      	movs	r3, #2
 8002642:	e113      	b.n	800286c <HAL_ADC_ConfigChannel+0x244>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b09      	cmp	r3, #9
 8002652:	d925      	bls.n	80026a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68d9      	ldr	r1, [r3, #12]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	3b1e      	subs	r3, #30
 800266a:	2207      	movs	r2, #7
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43da      	mvns	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	400a      	ands	r2, r1
 8002678:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68d9      	ldr	r1, [r3, #12]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	4618      	mov	r0, r3
 800268c:	4603      	mov	r3, r0
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4403      	add	r3, r0
 8002692:	3b1e      	subs	r3, #30
 8002694:	409a      	lsls	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	e022      	b.n	80026e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6919      	ldr	r1, [r3, #16]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	2207      	movs	r2, #7
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	400a      	ands	r2, r1
 80026c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6919      	ldr	r1, [r3, #16]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4403      	add	r3, r0
 80026dc:	409a      	lsls	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d824      	bhi.n	8002738 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	3b05      	subs	r3, #5
 8002700:	221f      	movs	r2, #31
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	400a      	ands	r2, r1
 800270e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	4618      	mov	r0, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	3b05      	subs	r3, #5
 800272a:	fa00 f203 	lsl.w	r2, r0, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	635a      	str	r2, [r3, #52]	; 0x34
 8002736:	e04c      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d824      	bhi.n	800278a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	3b23      	subs	r3, #35	; 0x23
 8002752:	221f      	movs	r2, #31
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43da      	mvns	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	400a      	ands	r2, r1
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	4618      	mov	r0, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	3b23      	subs	r3, #35	; 0x23
 800277c:	fa00 f203 	lsl.w	r2, r0, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
 8002788:	e023      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	3b41      	subs	r3, #65	; 0x41
 800279c:	221f      	movs	r2, #31
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	400a      	ands	r2, r1
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4618      	mov	r0, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	3b41      	subs	r3, #65	; 0x41
 80027c6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027d2:	4b29      	ldr	r3, [pc, #164]	; (8002878 <HAL_ADC_ConfigChannel+0x250>)
 80027d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a28      	ldr	r2, [pc, #160]	; (800287c <HAL_ADC_ConfigChannel+0x254>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d10f      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x1d8>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b12      	cmp	r3, #18
 80027e6:	d10b      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1d      	ldr	r2, [pc, #116]	; (800287c <HAL_ADC_ConfigChannel+0x254>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d12b      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x23a>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <HAL_ADC_ConfigChannel+0x258>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d003      	beq.n	800281c <HAL_ADC_ConfigChannel+0x1f4>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b11      	cmp	r3, #17
 800281a:	d122      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a11      	ldr	r2, [pc, #68]	; (8002880 <HAL_ADC_ConfigChannel+0x258>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d111      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_ADC_ConfigChannel+0x25c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a11      	ldr	r2, [pc, #68]	; (8002888 <HAL_ADC_ConfigChannel+0x260>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	0c9a      	lsrs	r2, r3, #18
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002854:	e002      	b.n	800285c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	3b01      	subs	r3, #1
 800285a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f9      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	40012300 	.word	0x40012300
 800287c:	40012000 	.word	0x40012000
 8002880:	10000012 	.word	0x10000012
 8002884:	20000010 	.word	0x20000010
 8002888:	431bde83 	.word	0x431bde83

0800288c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002894:	4b79      	ldr	r3, [pc, #484]	; (8002a7c <ADC_Init+0x1f0>)
 8002896:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	021a      	lsls	r2, r3, #8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <ADC_Init+0x1f4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d022      	beq.n	800296a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002932:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6899      	ldr	r1, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6899      	ldr	r1, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	e00f      	b.n	800298a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002988:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0202 	bic.w	r2, r2, #2
 8002998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6899      	ldr	r1, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	7e1b      	ldrb	r3, [r3, #24]
 80029a4:	005a      	lsls	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01b      	beq.n	80029f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	3b01      	subs	r3, #1
 80029e4:	035a      	lsls	r2, r3, #13
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	e007      	b.n	8002a00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	051a      	lsls	r2, r3, #20
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a42:	025a      	lsls	r2, r3, #9
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6899      	ldr	r1, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	029a      	lsls	r2, r3, #10
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	40012300 	.word	0x40012300
 8002a80:	0f000001 	.word	0x0f000001

08002a84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d13c      	bne.n	8002b18 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d12b      	bne.n	8002b10 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d127      	bne.n	8002b10 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d119      	bne.n	8002b10 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0220 	bic.w	r2, r2, #32
 8002aea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff fd61 	bl	80025d8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b16:	e00e      	b.n	8002b36 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f7ff fd75 	bl	8002614 <HAL_ADC_ErrorCallback>
}
 8002b2a:	e004      	b.n	8002b36 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	4798      	blx	r3
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f7ff fd4d 	bl	80025ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2240      	movs	r2, #64	; 0x40
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f043 0204 	orr.w	r2, r3, #4
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7ff fd4a 	bl	8002614 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bce:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	60d3      	str	r3, [r2, #12]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <__NVIC_GetPriorityGrouping+0x18>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	f003 0307 	and.w	r3, r3, #7
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	db0b      	blt.n	8002c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	f003 021f 	and.w	r2, r3, #31
 8002c18:	4907      	ldr	r1, [pc, #28]	; (8002c38 <__NVIC_EnableIRQ+0x38>)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2001      	movs	r0, #1
 8002c22:	fa00 f202 	lsl.w	r2, r0, r2
 8002c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000e100 	.word	0xe000e100

08002c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	6039      	str	r1, [r7, #0]
 8002c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	db0a      	blt.n	8002c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	490c      	ldr	r1, [pc, #48]	; (8002c88 <__NVIC_SetPriority+0x4c>)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	0112      	lsls	r2, r2, #4
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	440b      	add	r3, r1
 8002c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c64:	e00a      	b.n	8002c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	4908      	ldr	r1, [pc, #32]	; (8002c8c <__NVIC_SetPriority+0x50>)
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	3b04      	subs	r3, #4
 8002c74:	0112      	lsls	r2, r2, #4
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	440b      	add	r3, r1
 8002c7a:	761a      	strb	r2, [r3, #24]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000e100 	.word	0xe000e100
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b089      	sub	sp, #36	; 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f1c3 0307 	rsb	r3, r3, #7
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	bf28      	it	cs
 8002cae:	2304      	movcs	r3, #4
 8002cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	2b06      	cmp	r3, #6
 8002cb8:	d902      	bls.n	8002cc0 <NVIC_EncodePriority+0x30>
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3b03      	subs	r3, #3
 8002cbe:	e000      	b.n	8002cc2 <NVIC_EncodePriority+0x32>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	43d9      	mvns	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	4313      	orrs	r3, r2
         );
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3724      	adds	r7, #36	; 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d08:	d301      	bcc.n	8002d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00f      	b.n	8002d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <SysTick_Config+0x40>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d16:	210f      	movs	r1, #15
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	f7ff ff8e 	bl	8002c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <SysTick_Config+0x40>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d26:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <SysTick_Config+0x40>)
 8002d28:	2207      	movs	r2, #7
 8002d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	e000e010 	.word	0xe000e010

08002d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff ff29 	bl	8002b9c <__NVIC_SetPriorityGrouping>
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d64:	f7ff ff3e 	bl	8002be4 <__NVIC_GetPriorityGrouping>
 8002d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	6978      	ldr	r0, [r7, #20]
 8002d70:	f7ff ff8e 	bl	8002c90 <NVIC_EncodePriority>
 8002d74:	4602      	mov	r2, r0
 8002d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff5d 	bl	8002c3c <__NVIC_SetPriority>
}
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff31 	bl	8002c00 <__NVIC_EnableIRQ>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ffa2 	bl	8002cf8 <SysTick_Config>
 8002db4:	4603      	mov	r3, r0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dcc:	f7ff f990 	bl	80020f0 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e099      	b.n	8002f10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dfc:	e00f      	b.n	8002e1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dfe:	f7ff f977 	bl	80020f0 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d908      	bls.n	8002e1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2203      	movs	r2, #3
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e078      	b.n	8002f10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e8      	bne.n	8002dfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <HAL_DMA_Init+0x158>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d107      	bne.n	8002e88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	4313      	orrs	r3, r2
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f023 0307 	bic.w	r3, r3, #7
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d117      	bne.n	8002ee2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00e      	beq.n	8002ee2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 faab 	bl	8003420 <DMA_CheckFifoParam>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2240      	movs	r2, #64	; 0x40
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e016      	b.n	8002f10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa62 	bl	80033b4 <DMA_CalcBaseAndBitshift>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	223f      	movs	r2, #63	; 0x3f
 8002efa:	409a      	lsls	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	f010803f 	.word	0xf010803f

08002f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_DMA_Start_IT+0x26>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e040      	b.n	8002fc4 <HAL_DMA_Start_IT+0xa8>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d12f      	bne.n	8002fb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f9f4 	bl	8003358 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	223f      	movs	r2, #63	; 0x3f
 8002f76:	409a      	lsls	r2, r3
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0216 	orr.w	r2, r2, #22
 8002f8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0208 	orr.w	r2, r2, #8
 8002fa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e005      	b.n	8002fc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d004      	beq.n	8002fea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e00c      	b.n	8003004 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2205      	movs	r2, #5
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800301c:	4b8e      	ldr	r3, [pc, #568]	; (8003258 <HAL_DMA_IRQHandler+0x248>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a8e      	ldr	r2, [pc, #568]	; (800325c <HAL_DMA_IRQHandler+0x24c>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	0a9b      	lsrs	r3, r3, #10
 8003028:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303a:	2208      	movs	r2, #8
 800303c:	409a      	lsls	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01a      	beq.n	800307c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d013      	beq.n	800307c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0204 	bic.w	r2, r2, #4
 8003062:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	2208      	movs	r2, #8
 800306a:	409a      	lsls	r2, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003074:	f043 0201 	orr.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	2201      	movs	r2, #1
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d012      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	2201      	movs	r2, #1
 80030a0:	409a      	lsls	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030aa:	f043 0202 	orr.w	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	2204      	movs	r2, #4
 80030b8:	409a      	lsls	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d012      	beq.n	80030e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d4:	2204      	movs	r2, #4
 80030d6:	409a      	lsls	r2, r3
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e0:	f043 0204 	orr.w	r2, r3, #4
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	2210      	movs	r2, #16
 80030ee:	409a      	lsls	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d043      	beq.n	8003180 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d03c      	beq.n	8003180 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	2210      	movs	r2, #16
 800310c:	409a      	lsls	r2, r3
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d018      	beq.n	8003152 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d024      	beq.n	8003180 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	4798      	blx	r3
 800313e:	e01f      	b.n	8003180 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01b      	beq.n	8003180 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
 8003150:	e016      	b.n	8003180 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0208 	bic.w	r2, r2, #8
 800316e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	2220      	movs	r2, #32
 8003186:	409a      	lsls	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 808f 	beq.w	80032b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8087 	beq.w	80032b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	2220      	movs	r2, #32
 80031a8:	409a      	lsls	r2, r3
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d136      	bne.n	8003228 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0216 	bic.w	r2, r2, #22
 80031c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d103      	bne.n	80031ea <HAL_DMA_IRQHandler+0x1da>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0208 	bic.w	r2, r2, #8
 80031f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	223f      	movs	r2, #63	; 0x3f
 8003200:	409a      	lsls	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321a:	2b00      	cmp	r3, #0
 800321c:	d07e      	beq.n	800331c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4798      	blx	r3
        }
        return;
 8003226:	e079      	b.n	800331c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01d      	beq.n	8003272 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10d      	bne.n	8003260 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003248:	2b00      	cmp	r3, #0
 800324a:	d031      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
 8003254:	e02c      	b.n	80032b0 <HAL_DMA_IRQHandler+0x2a0>
 8003256:	bf00      	nop
 8003258:	20000010 	.word	0x20000010
 800325c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d023      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4798      	blx	r3
 8003270:	e01e      	b.n	80032b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10f      	bne.n	80032a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0210 	bic.w	r2, r2, #16
 800328e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d032      	beq.n	800331e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d022      	beq.n	800330a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2205      	movs	r2, #5
 80032c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	3301      	adds	r3, #1
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d307      	bcc.n	80032f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f2      	bne.n	80032dc <HAL_DMA_IRQHandler+0x2cc>
 80032f6:	e000      	b.n	80032fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	4798      	blx	r3
 800331a:	e000      	b.n	800331e <HAL_DMA_IRQHandler+0x30e>
        return;
 800331c:	bf00      	nop
    }
  }
}
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003332:	b2db      	uxtb	r3, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003374:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b40      	cmp	r3, #64	; 0x40
 8003384:	d108      	bne.n	8003398 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003396:	e007      	b.n	80033a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	3b10      	subs	r3, #16
 80033c4:	4a14      	ldr	r2, [pc, #80]	; (8003418 <DMA_CalcBaseAndBitshift+0x64>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033ce:	4a13      	ldr	r2, [pc, #76]	; (800341c <DMA_CalcBaseAndBitshift+0x68>)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d909      	bls.n	80033f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	1d1a      	adds	r2, r3, #4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	659a      	str	r2, [r3, #88]	; 0x58
 80033f4:	e007      	b.n	8003406 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033fe:	f023 0303 	bic.w	r3, r3, #3
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	aaaaaaab 	.word	0xaaaaaaab
 800341c:	080100b8 	.word	0x080100b8

08003420 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11f      	bne.n	800347a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d856      	bhi.n	80034ee <DMA_CheckFifoParam+0xce>
 8003440:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <DMA_CheckFifoParam+0x28>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	08003459 	.word	0x08003459
 800344c:	0800346b 	.word	0x0800346b
 8003450:	08003459 	.word	0x08003459
 8003454:	080034ef 	.word	0x080034ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d046      	beq.n	80034f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003468:	e043      	b.n	80034f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003472:	d140      	bne.n	80034f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003478:	e03d      	b.n	80034f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003482:	d121      	bne.n	80034c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d837      	bhi.n	80034fa <DMA_CheckFifoParam+0xda>
 800348a:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <DMA_CheckFifoParam+0x70>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	080034a1 	.word	0x080034a1
 8003494:	080034a7 	.word	0x080034a7
 8003498:	080034a1 	.word	0x080034a1
 800349c:	080034b9 	.word	0x080034b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
      break;
 80034a4:	e030      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d025      	beq.n	80034fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b6:	e022      	b.n	80034fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034c0:	d11f      	bne.n	8003502 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034c6:	e01c      	b.n	8003502 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d903      	bls.n	80034d6 <DMA_CheckFifoParam+0xb6>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d003      	beq.n	80034dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034d4:	e018      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
      break;
 80034da:	e015      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00e      	beq.n	8003506 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      break;
 80034ec:	e00b      	b.n	8003506 <DMA_CheckFifoParam+0xe6>
      break;
 80034ee:	bf00      	nop
 80034f0:	e00a      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 80034f2:	bf00      	nop
 80034f4:	e008      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 80034f6:	bf00      	nop
 80034f8:	e006      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 80034fa:	bf00      	nop
 80034fc:	e004      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 80034fe:	bf00      	nop
 8003500:	e002      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;   
 8003502:	bf00      	nop
 8003504:	e000      	b.n	8003508 <DMA_CheckFifoParam+0xe8>
      break;
 8003506:	bf00      	nop
    }
  } 
  
  return status; 
 8003508:	7bfb      	ldrb	r3, [r7, #15]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop

08003518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	e159      	b.n	80037e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003534:	2201      	movs	r2, #1
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	429a      	cmp	r2, r3
 800354e:	f040 8148 	bne.w	80037e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d005      	beq.n	800356a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003566:	2b02      	cmp	r3, #2
 8003568:	d130      	bne.n	80035cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	2203      	movs	r2, #3
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a0:	2201      	movs	r2, #1
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 0201 	and.w	r2, r3, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d017      	beq.n	8003608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d123      	bne.n	800365c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	08da      	lsrs	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3208      	adds	r2, #8
 800361c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	220f      	movs	r2, #15
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	08da      	lsrs	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3208      	adds	r2, #8
 8003656:	69b9      	ldr	r1, [r7, #24]
 8003658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0203 	and.w	r2, r3, #3
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80a2 	beq.w	80037e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	4b57      	ldr	r3, [pc, #348]	; (8003800 <HAL_GPIO_Init+0x2e8>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	4a56      	ldr	r2, [pc, #344]	; (8003800 <HAL_GPIO_Init+0x2e8>)
 80036a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ac:	6453      	str	r3, [r2, #68]	; 0x44
 80036ae:	4b54      	ldr	r3, [pc, #336]	; (8003800 <HAL_GPIO_Init+0x2e8>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ba:	4a52      	ldr	r2, [pc, #328]	; (8003804 <HAL_GPIO_Init+0x2ec>)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	089b      	lsrs	r3, r3, #2
 80036c0:	3302      	adds	r3, #2
 80036c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	220f      	movs	r2, #15
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a49      	ldr	r2, [pc, #292]	; (8003808 <HAL_GPIO_Init+0x2f0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d019      	beq.n	800371a <HAL_GPIO_Init+0x202>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a48      	ldr	r2, [pc, #288]	; (800380c <HAL_GPIO_Init+0x2f4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d013      	beq.n	8003716 <HAL_GPIO_Init+0x1fe>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a47      	ldr	r2, [pc, #284]	; (8003810 <HAL_GPIO_Init+0x2f8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00d      	beq.n	8003712 <HAL_GPIO_Init+0x1fa>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a46      	ldr	r2, [pc, #280]	; (8003814 <HAL_GPIO_Init+0x2fc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d007      	beq.n	800370e <HAL_GPIO_Init+0x1f6>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a45      	ldr	r2, [pc, #276]	; (8003818 <HAL_GPIO_Init+0x300>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d101      	bne.n	800370a <HAL_GPIO_Init+0x1f2>
 8003706:	2304      	movs	r3, #4
 8003708:	e008      	b.n	800371c <HAL_GPIO_Init+0x204>
 800370a:	2307      	movs	r3, #7
 800370c:	e006      	b.n	800371c <HAL_GPIO_Init+0x204>
 800370e:	2303      	movs	r3, #3
 8003710:	e004      	b.n	800371c <HAL_GPIO_Init+0x204>
 8003712:	2302      	movs	r3, #2
 8003714:	e002      	b.n	800371c <HAL_GPIO_Init+0x204>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_GPIO_Init+0x204>
 800371a:	2300      	movs	r3, #0
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	f002 0203 	and.w	r2, r2, #3
 8003722:	0092      	lsls	r2, r2, #2
 8003724:	4093      	lsls	r3, r2
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800372c:	4935      	ldr	r1, [pc, #212]	; (8003804 <HAL_GPIO_Init+0x2ec>)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	3302      	adds	r3, #2
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800373a:	4b38      	ldr	r3, [pc, #224]	; (800381c <HAL_GPIO_Init+0x304>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800375e:	4a2f      	ldr	r2, [pc, #188]	; (800381c <HAL_GPIO_Init+0x304>)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003764:	4b2d      	ldr	r3, [pc, #180]	; (800381c <HAL_GPIO_Init+0x304>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003788:	4a24      	ldr	r2, [pc, #144]	; (800381c <HAL_GPIO_Init+0x304>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800378e:	4b23      	ldr	r3, [pc, #140]	; (800381c <HAL_GPIO_Init+0x304>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037b2:	4a1a      	ldr	r2, [pc, #104]	; (800381c <HAL_GPIO_Init+0x304>)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037b8:	4b18      	ldr	r3, [pc, #96]	; (800381c <HAL_GPIO_Init+0x304>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037dc:	4a0f      	ldr	r2, [pc, #60]	; (800381c <HAL_GPIO_Init+0x304>)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3301      	adds	r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b0f      	cmp	r3, #15
 80037ec:	f67f aea2 	bls.w	8003534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	3724      	adds	r7, #36	; 0x24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	40013800 	.word	0x40013800
 8003808:	40020000 	.word	0x40020000
 800380c:	40020400 	.word	0x40020400
 8003810:	40020800 	.word	0x40020800
 8003814:	40020c00 	.word	0x40020c00
 8003818:	40021000 	.word	0x40021000
 800381c:	40013c00 	.word	0x40013c00

08003820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	887b      	ldrh	r3, [r7, #2]
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
 800383c:	e001      	b.n	8003842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d006      	beq.n	8003874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003866:	4a05      	ldr	r2, [pc, #20]	; (800387c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe f8ee 	bl	8001a50 <HAL_GPIO_EXTI_Callback>
  }
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40013c00 	.word	0x40013c00

08003880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e12b      	b.n	8003aea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fd fd86 	bl	80013b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2224      	movs	r2, #36	; 0x24
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e4:	f004 fdb0 	bl	8008448 <HAL_RCC_GetPCLK1Freq>
 80038e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4a81      	ldr	r2, [pc, #516]	; (8003af4 <HAL_I2C_Init+0x274>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d807      	bhi.n	8003904 <HAL_I2C_Init+0x84>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a80      	ldr	r2, [pc, #512]	; (8003af8 <HAL_I2C_Init+0x278>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	bf94      	ite	ls
 80038fc:	2301      	movls	r3, #1
 80038fe:	2300      	movhi	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e006      	b.n	8003912 <HAL_I2C_Init+0x92>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a7d      	ldr	r2, [pc, #500]	; (8003afc <HAL_I2C_Init+0x27c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	bf94      	ite	ls
 800390c:	2301      	movls	r3, #1
 800390e:	2300      	movhi	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0e7      	b.n	8003aea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a78      	ldr	r2, [pc, #480]	; (8003b00 <HAL_I2C_Init+0x280>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	0c9b      	lsrs	r3, r3, #18
 8003924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a6a      	ldr	r2, [pc, #424]	; (8003af4 <HAL_I2C_Init+0x274>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d802      	bhi.n	8003954 <HAL_I2C_Init+0xd4>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3301      	adds	r3, #1
 8003952:	e009      	b.n	8003968 <HAL_I2C_Init+0xe8>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	4a69      	ldr	r2, [pc, #420]	; (8003b04 <HAL_I2C_Init+0x284>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	3301      	adds	r3, #1
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	430b      	orrs	r3, r1
 800396e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800397a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	495c      	ldr	r1, [pc, #368]	; (8003af4 <HAL_I2C_Init+0x274>)
 8003984:	428b      	cmp	r3, r1
 8003986:	d819      	bhi.n	80039bc <HAL_I2C_Init+0x13c>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e59      	subs	r1, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	fbb1 f3f3 	udiv	r3, r1, r3
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	f640 73fc 	movw	r3, #4092	; 0xffc
 800399c:	400b      	ands	r3, r1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_I2C_Init+0x138>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1e59      	subs	r1, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b6:	e051      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 80039b8:	2304      	movs	r3, #4
 80039ba:	e04f      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d111      	bne.n	80039e8 <HAL_I2C_Init+0x168>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e58      	subs	r0, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	440b      	add	r3, r1
 80039d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e012      	b.n	8003a0e <HAL_I2C_Init+0x18e>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e58      	subs	r0, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	0099      	lsls	r1, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fe:	3301      	adds	r3, #1
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_Init+0x196>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e022      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10e      	bne.n	8003a3c <HAL_I2C_Init+0x1bc>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1e58      	subs	r0, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	440b      	add	r3, r1
 8003a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3a:	e00f      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	0099      	lsls	r1, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	6809      	ldr	r1, [r1, #0]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6911      	ldr	r1, [r2, #16]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68d2      	ldr	r2, [r2, #12]
 8003a96:	4311      	orrs	r1, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	000186a0 	.word	0x000186a0
 8003af8:	001e847f 	.word	0x001e847f
 8003afc:	003d08ff 	.word	0x003d08ff
 8003b00:	431bde83 	.word	0x431bde83
 8003b04:	10624dd3 	.word	0x10624dd3

08003b08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	817b      	strh	r3, [r7, #10]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	813b      	strh	r3, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b22:	f7fe fae5 	bl	80020f0 <HAL_GetTick>
 8003b26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	f040 80d9 	bne.w	8003ce8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	2319      	movs	r3, #25
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	496d      	ldr	r1, [pc, #436]	; (8003cf4 <HAL_I2C_Mem_Write+0x1ec>)
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f002 fba9 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e0cc      	b.n	8003cea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_I2C_Mem_Write+0x56>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e0c5      	b.n	8003cea <HAL_I2C_Mem_Write+0x1e2>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d007      	beq.n	8003b84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2221      	movs	r2, #33	; 0x21
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2240      	movs	r2, #64	; 0x40
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a3a      	ldr	r2, [r7, #32]
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a4d      	ldr	r2, [pc, #308]	; (8003cf8 <HAL_I2C_Mem_Write+0x1f0>)
 8003bc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bc6:	88f8      	ldrh	r0, [r7, #6]
 8003bc8:	893a      	ldrh	r2, [r7, #8]
 8003bca:	8979      	ldrh	r1, [r7, #10]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f002 f826 	bl	8005c28 <I2C_RequestMemoryWrite>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d052      	beq.n	8003c88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e081      	b.n	8003cea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f002 fc2a 	bl	8006444 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d107      	bne.n	8003c0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e06b      	b.n	8003cea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d11b      	bne.n	8003c88 <HAL_I2C_Mem_Write+0x180>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d017      	beq.n	8003c88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	781a      	ldrb	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1aa      	bne.n	8003be6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f002 fc16 	bl	80064c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00d      	beq.n	8003cbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d107      	bne.n	8003cb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e016      	b.n	8003cea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	00100002 	.word	0x00100002
 8003cf8:	ffff0000 	.word	0xffff0000

08003cfc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08c      	sub	sp, #48	; 0x30
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	4608      	mov	r0, r1
 8003d06:	4611      	mov	r1, r2
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	817b      	strh	r3, [r7, #10]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	813b      	strh	r3, [r7, #8]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d16:	f7fe f9eb 	bl	80020f0 <HAL_GetTick>
 8003d1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	f040 8208 	bne.w	800413a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	2319      	movs	r3, #25
 8003d30:	2201      	movs	r2, #1
 8003d32:	497b      	ldr	r1, [pc, #492]	; (8003f20 <HAL_I2C_Mem_Read+0x224>)
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f002 faaf 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
 8003d42:	e1fb      	b.n	800413c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2C_Mem_Read+0x56>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e1f4      	b.n	800413c <HAL_I2C_Mem_Read+0x440>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d007      	beq.n	8003d78 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2222      	movs	r2, #34	; 0x22
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2240      	movs	r2, #64	; 0x40
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003da8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a5b      	ldr	r2, [pc, #364]	; (8003f24 <HAL_I2C_Mem_Read+0x228>)
 8003db8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dba:	88f8      	ldrh	r0, [r7, #6]
 8003dbc:	893a      	ldrh	r2, [r7, #8]
 8003dbe:	8979      	ldrh	r1, [r7, #10]
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	4603      	mov	r3, r0
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f001 ffc2 	bl	8005d54 <I2C_RequestMemoryRead>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e1b0      	b.n	800413c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d113      	bne.n	8003e0a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de2:	2300      	movs	r3, #0
 8003de4:	623b      	str	r3, [r7, #32]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	623b      	str	r3, [r7, #32]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	623b      	str	r3, [r7, #32]
 8003df6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	e184      	b.n	8004114 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d11b      	bne.n	8003e4a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e164      	b.n	8004114 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d11b      	bne.n	8003e8a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	e144      	b.n	8004114 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ea0:	e138      	b.n	8004114 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	f200 80f1 	bhi.w	800408e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d123      	bne.n	8003efc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f002 fb77 	bl	80065ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e139      	b.n	800413c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003efa:	e10b      	b.n	8004114 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d14e      	bne.n	8003fa2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	4906      	ldr	r1, [pc, #24]	; (8003f28 <HAL_I2C_Mem_Read+0x22c>)
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f002 f9c2 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e10e      	b.n	800413c <HAL_I2C_Mem_Read+0x440>
 8003f1e:	bf00      	nop
 8003f20:	00100002 	.word	0x00100002
 8003f24:	ffff0000 	.word	0xffff0000
 8003f28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fa0:	e0b8      	b.n	8004114 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	2200      	movs	r2, #0
 8003faa:	4966      	ldr	r1, [pc, #408]	; (8004144 <HAL_I2C_Mem_Read+0x448>)
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f002 f973 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0bf      	b.n	800413c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004004:	2200      	movs	r2, #0
 8004006:	494f      	ldr	r1, [pc, #316]	; (8004144 <HAL_I2C_Mem_Read+0x448>)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f002 f945 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e091      	b.n	800413c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800408c:	e042      	b.n	8004114 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004090:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f002 fa8a 	bl	80065ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e04c      	b.n	800413c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d118      	bne.n	8004114 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	f47f aec2 	bne.w	8003ea2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	3728      	adds	r7, #40	; 0x28
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	00010004 	.word	0x00010004

08004148 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08c      	sub	sp, #48	; 0x30
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	461a      	mov	r2, r3
 8004156:	4603      	mov	r3, r0
 8004158:	817b      	strh	r3, [r7, #10]
 800415a:	460b      	mov	r3, r1
 800415c:	813b      	strh	r3, [r7, #8]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004162:	f7fd ffc5 	bl	80020f0 <HAL_GetTick>
 8004166:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b20      	cmp	r3, #32
 8004176:	f040 8176 	bne.w	8004466 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800417a:	4b95      	ldr	r3, [pc, #596]	; (80043d0 <HAL_I2C_Mem_Read_DMA+0x288>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	08db      	lsrs	r3, r3, #3
 8004180:	4a94      	ldr	r2, [pc, #592]	; (80043d4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	0a1a      	lsrs	r2, r3, #8
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009a      	lsls	r2, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	3b01      	subs	r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d116      	bne.n	80041ce <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f043 0220 	orr.w	r2, r3, #32
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e14c      	b.n	8004468 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d0db      	beq.n	8004194 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_I2C_Mem_Read_DMA+0xa2>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e13e      	b.n	8004468 <HAL_I2C_Mem_Read_DMA+0x320>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d007      	beq.n	8004210 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800421e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2222      	movs	r2, #34	; 0x22
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2240      	movs	r2, #64	; 0x40
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004240:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4a62      	ldr	r2, [pc, #392]	; (80043d8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004250:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004252:	897a      	ldrh	r2, [r7, #10]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004258:	893a      	ldrh	r2, [r7, #8]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 80cc 	beq.w	800440c <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	2b00      	cmp	r3, #0
 800427a:	d02d      	beq.n	80042d8 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	4a56      	ldr	r2, [pc, #344]	; (80043dc <HAL_I2C_Mem_Read_DMA+0x294>)
 8004282:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	4a55      	ldr	r2, [pc, #340]	; (80043e0 <HAL_I2C_Mem_Read_DMA+0x298>)
 800428a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	2200      	movs	r2, #0
 8004292:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	2200      	movs	r2, #0
 800429a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	2200      	movs	r2, #0
 80042a2:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	2200      	movs	r2, #0
 80042aa:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3310      	adds	r3, #16
 80042b6:	4619      	mov	r1, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	461a      	mov	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c2:	f7fe fe2b 	bl	8002f1c <HAL_DMA_Start_IT>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80042cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f040 8087 	bne.w	80043e4 <HAL_I2C_Mem_Read_DMA+0x29c>
 80042d6:	e013      	b.n	8004300 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0b3      	b.n	8004468 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004300:	88f8      	ldrh	r0, [r7, #6]
 8004302:	893a      	ldrh	r2, [r7, #8]
 8004304:	8979      	ldrh	r1, [r7, #10]
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	2323      	movs	r3, #35	; 0x23
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	4603      	mov	r3, r0
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f001 fd1f 	bl	8005d54 <I2C_RequestMemoryRead>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d023      	beq.n	8004364 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fe53 	bl	8002fcc <HAL_DMA_Abort_IT>
 8004326:	4603      	mov	r3, r0
 8004328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	2200      	movs	r2, #0
 8004332:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004342:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0201 	bic.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e081      	b.n	8004468 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	2b01      	cmp	r3, #1
 800436a:	d108      	bne.n	800437e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	e007      	b.n	800438e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800438c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438e:	2300      	movs	r3, #0
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ba:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	e049      	b.n	8004462 <HAL_I2C_Mem_Read_DMA+0x31a>
 80043ce:	bf00      	nop
 80043d0:	20000010 	.word	0x20000010
 80043d4:	14f8b589 	.word	0x14f8b589
 80043d8:	ffff0000 	.word	0xffff0000
 80043dc:	08005f25 	.word	0x08005f25
 80043e0:	080060cf 	.word	0x080060cf
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	f043 0210 	orr.w	r2, r3, #16
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e02d      	b.n	8004468 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800440c:	88f8      	ldrh	r0, [r7, #6]
 800440e:	893a      	ldrh	r2, [r7, #8]
 8004410:	8979      	ldrh	r1, [r7, #10]
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	2323      	movs	r3, #35	; 0x23
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	4603      	mov	r3, r0
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f001 fc99 	bl	8005d54 <I2C_RequestMemoryRead>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e01d      	b.n	8004468 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004450:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e000      	b.n	8004468 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8004466:	2302      	movs	r3, #2
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3728      	adds	r7, #40	; 0x28
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004490:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	2b10      	cmp	r3, #16
 800449e:	d003      	beq.n	80044a8 <HAL_I2C_EV_IRQHandler+0x38>
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	f040 80c1 	bne.w	800462a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10d      	bne.n	80044de <HAL_I2C_EV_IRQHandler+0x6e>
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80044c8:	d003      	beq.n	80044d2 <HAL_I2C_EV_IRQHandler+0x62>
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044d0:	d101      	bne.n	80044d6 <HAL_I2C_EV_IRQHandler+0x66>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_I2C_EV_IRQHandler+0x68>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b01      	cmp	r3, #1
 80044da:	f000 8132 	beq.w	8004742 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00c      	beq.n	8004502 <HAL_I2C_EV_IRQHandler+0x92>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	0a5b      	lsrs	r3, r3, #9
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d006      	beq.n	8004502 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f002 f8de 	bl	80066b6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fd79 	bl	8004ff2 <I2C_Master_SB>
 8004500:	e092      	b.n	8004628 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	08db      	lsrs	r3, r3, #3
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d009      	beq.n	8004522 <HAL_I2C_EV_IRQHandler+0xb2>
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	0a5b      	lsrs	r3, r3, #9
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fdef 	bl	80050fe <I2C_Master_ADD10>
 8004520:	e082      	b.n	8004628 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <HAL_I2C_EV_IRQHandler+0xd2>
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	0a5b      	lsrs	r3, r3, #9
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fe09 	bl	8005152 <I2C_Master_ADDR>
 8004540:	e072      	b.n	8004628 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	089b      	lsrs	r3, r3, #2
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d03b      	beq.n	80045c6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455c:	f000 80f3 	beq.w	8004746 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	09db      	lsrs	r3, r3, #7
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00f      	beq.n	800458c <HAL_I2C_EV_IRQHandler+0x11c>
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	0a9b      	lsrs	r3, r3, #10
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d009      	beq.n	800458c <HAL_I2C_EV_IRQHandler+0x11c>
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f9e9 	bl	800495c <I2C_MasterTransmit_TXE>
 800458a:	e04d      	b.n	8004628 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	089b      	lsrs	r3, r3, #2
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80d6 	beq.w	8004746 <HAL_I2C_EV_IRQHandler+0x2d6>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	0a5b      	lsrs	r3, r3, #9
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 80cf 	beq.w	8004746 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80045a8:	7bbb      	ldrb	r3, [r7, #14]
 80045aa:	2b21      	cmp	r3, #33	; 0x21
 80045ac:	d103      	bne.n	80045b6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa70 	bl	8004a94 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045b4:	e0c7      	b.n	8004746 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	f040 80c4 	bne.w	8004746 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fade 	bl	8004b80 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045c4:	e0bf      	b.n	8004746 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d4:	f000 80b7 	beq.w	8004746 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	099b      	lsrs	r3, r3, #6
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00f      	beq.n	8004604 <HAL_I2C_EV_IRQHandler+0x194>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	0a9b      	lsrs	r3, r3, #10
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d009      	beq.n	8004604 <HAL_I2C_EV_IRQHandler+0x194>
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	089b      	lsrs	r3, r3, #2
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d103      	bne.n	8004604 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fb53 	bl	8004ca8 <I2C_MasterReceive_RXNE>
 8004602:	e011      	b.n	8004628 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	089b      	lsrs	r3, r3, #2
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 809a 	beq.w	8004746 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	0a5b      	lsrs	r3, r3, #9
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8093 	beq.w	8004746 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fbfc 	bl	8004e1e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004626:	e08e      	b.n	8004746 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004628:	e08d      	b.n	8004746 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	d004      	beq.n	800463c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	61fb      	str	r3, [r7, #28]
 800463a:	e007      	b.n	800464c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d012      	beq.n	800467e <HAL_I2C_EV_IRQHandler+0x20e>
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	0a5b      	lsrs	r3, r3, #9
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00c      	beq.n	800467e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004674:	69b9      	ldr	r1, [r7, #24]
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 ffba 	bl	80055f0 <I2C_Slave_ADDR>
 800467c:	e066      	b.n	800474c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d009      	beq.n	800469e <HAL_I2C_EV_IRQHandler+0x22e>
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	0a5b      	lsrs	r3, r3, #9
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fff4 	bl	8005684 <I2C_Slave_STOPF>
 800469c:	e056      	b.n	800474c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800469e:	7bbb      	ldrb	r3, [r7, #14]
 80046a0:	2b21      	cmp	r3, #33	; 0x21
 80046a2:	d002      	beq.n	80046aa <HAL_I2C_EV_IRQHandler+0x23a>
 80046a4:	7bbb      	ldrb	r3, [r7, #14]
 80046a6:	2b29      	cmp	r3, #41	; 0x29
 80046a8:	d125      	bne.n	80046f6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	09db      	lsrs	r3, r3, #7
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00f      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0x266>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	0a9b      	lsrs	r3, r3, #10
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0x266>
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	089b      	lsrs	r3, r3, #2
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d103      	bne.n	80046d6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fed0 	bl	8005474 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046d4:	e039      	b.n	800474a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d033      	beq.n	800474a <HAL_I2C_EV_IRQHandler+0x2da>
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	0a5b      	lsrs	r3, r3, #9
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d02d      	beq.n	800474a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fefd 	bl	80054ee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046f4:	e029      	b.n	800474a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	099b      	lsrs	r3, r3, #6
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00f      	beq.n	8004722 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	0a9b      	lsrs	r3, r3, #10
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <HAL_I2C_EV_IRQHandler+0x2b2>
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	089b      	lsrs	r3, r3, #2
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d103      	bne.n	8004722 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 ff08 	bl	8005530 <I2C_SlaveReceive_RXNE>
 8004720:	e014      	b.n	800474c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	089b      	lsrs	r3, r3, #2
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00e      	beq.n	800474c <HAL_I2C_EV_IRQHandler+0x2dc>
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	0a5b      	lsrs	r3, r3, #9
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 ff36 	bl	80055ac <I2C_SlaveReceive_BTF>
 8004740:	e004      	b.n	800474c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004742:	bf00      	nop
 8004744:	e002      	b.n	800474c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004746:	bf00      	nop
 8004748:	e000      	b.n	800474c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800474a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b08a      	sub	sp, #40	; 0x28
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800476a:	2300      	movs	r3, #0
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004774:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	0a1b      	lsrs	r3, r3, #8
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00e      	beq.n	80047a0 <HAL_I2C_ER_IRQHandler+0x4e>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	0a1b      	lsrs	r3, r3, #8
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800479e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	0a5b      	lsrs	r3, r3, #9
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00e      	beq.n	80047ca <HAL_I2C_ER_IRQHandler+0x78>
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	0a1b      	lsrs	r3, r3, #8
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	f043 0302 	orr.w	r3, r3, #2
 80047be:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80047c8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	0a9b      	lsrs	r3, r3, #10
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d03f      	beq.n	8004856 <HAL_I2C_ER_IRQHandler+0x104>
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	0a1b      	lsrs	r3, r3, #8
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d039      	beq.n	8004856 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80047e2:	7efb      	ldrb	r3, [r7, #27]
 80047e4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80047fc:	7ebb      	ldrb	r3, [r7, #26]
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d112      	bne.n	8004828 <HAL_I2C_ER_IRQHandler+0xd6>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10f      	bne.n	8004828 <HAL_I2C_ER_IRQHandler+0xd6>
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	2b21      	cmp	r3, #33	; 0x21
 800480c:	d008      	beq.n	8004820 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800480e:	7cfb      	ldrb	r3, [r7, #19]
 8004810:	2b29      	cmp	r3, #41	; 0x29
 8004812:	d005      	beq.n	8004820 <HAL_I2C_ER_IRQHandler+0xce>
 8004814:	7cfb      	ldrb	r3, [r7, #19]
 8004816:	2b28      	cmp	r3, #40	; 0x28
 8004818:	d106      	bne.n	8004828 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b21      	cmp	r3, #33	; 0x21
 800481e:	d103      	bne.n	8004828 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f001 f85f 	bl	80058e4 <I2C_Slave_AF>
 8004826:	e016      	b.n	8004856 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004830:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	f043 0304 	orr.w	r3, r3, #4
 8004838:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800483a:	7efb      	ldrb	r3, [r7, #27]
 800483c:	2b10      	cmp	r3, #16
 800483e:	d002      	beq.n	8004846 <HAL_I2C_ER_IRQHandler+0xf4>
 8004840:	7efb      	ldrb	r3, [r7, #27]
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d107      	bne.n	8004856 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004854:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	0adb      	lsrs	r3, r3, #11
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00e      	beq.n	8004880 <HAL_I2C_ER_IRQHandler+0x12e>
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	0a1b      	lsrs	r3, r3, #8
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d008      	beq.n	8004880 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	f043 0308 	orr.w	r3, r3, #8
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800487e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f001 f896 	bl	80059c4 <I2C_ITError>
  }
}
 8004898:	bf00      	nop
 800489a:	3728      	adds	r7, #40	; 0x28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
 80048fc:	4613      	mov	r3, r2
 80048fe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004972:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497e:	2b00      	cmp	r3, #0
 8004980:	d150      	bne.n	8004a24 <I2C_MasterTransmit_TXE+0xc8>
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	2b21      	cmp	r3, #33	; 0x21
 8004986:	d14d      	bne.n	8004a24 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b08      	cmp	r3, #8
 800498c:	d01d      	beq.n	80049ca <I2C_MasterTransmit_TXE+0x6e>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b20      	cmp	r3, #32
 8004992:	d01a      	beq.n	80049ca <I2C_MasterTransmit_TXE+0x6e>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800499a:	d016      	beq.n	80049ca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049aa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2211      	movs	r2, #17
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff ff6c 	bl	80048a0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049c8:	e060      	b.n	8004a8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049d8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d107      	bne.n	8004a14 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ff87 	bl	8004920 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a12:	e03b      	b.n	8004a8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ff3f 	bl	80048a0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a22:	e033      	b.n	8004a8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2b21      	cmp	r3, #33	; 0x21
 8004a28:	d005      	beq.n	8004a36 <I2C_MasterTransmit_TXE+0xda>
 8004a2a:	7bbb      	ldrb	r3, [r7, #14]
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	d12d      	bne.n	8004a8c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2b22      	cmp	r3, #34	; 0x22
 8004a34:	d12a      	bne.n	8004a8c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d108      	bne.n	8004a52 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a50:	e01c      	b.n	8004a8c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d103      	bne.n	8004a66 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f88e 	bl	8004b80 <I2C_MemoryTransmit_TXE_BTF>
}
 8004a64:	e012      	b.n	8004a8c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	781a      	ldrb	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a8a:	e7ff      	b.n	8004a8c <I2C_MasterTransmit_TXE+0x130>
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b21      	cmp	r3, #33	; 0x21
 8004aac:	d164      	bne.n	8004b78 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d012      	beq.n	8004ade <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004adc:	e04c      	b.n	8004b78 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d01d      	beq.n	8004b20 <I2C_MasterTransmit_BTF+0x8c>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d01a      	beq.n	8004b20 <I2C_MasterTransmit_BTF+0x8c>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004af0:	d016      	beq.n	8004b20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2211      	movs	r2, #17
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff fec1 	bl	80048a0 <HAL_I2C_MasterTxCpltCallback>
}
 8004b1e:	e02b      	b.n	8004b78 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b40      	cmp	r3, #64	; 0x40
 8004b58:	d107      	bne.n	8004b6a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff fedc 	bl	8004920 <HAL_I2C_MemTxCpltCallback>
}
 8004b68:	e006      	b.n	8004b78 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff fe94 	bl	80048a0 <HAL_I2C_MasterTxCpltCallback>
}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d11d      	bne.n	8004bd4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d10b      	bne.n	8004bb8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	1c9a      	adds	r2, r3, #2
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004bb6:	e073      	b.n	8004ca0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	121b      	asrs	r3, r3, #8
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bd2:	e065      	b.n	8004ca0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d10b      	bne.n	8004bf4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bf2:	e055      	b.n	8004ca0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d151      	bne.n	8004ca0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b22      	cmp	r3, #34	; 0x22
 8004c00:	d10d      	bne.n	8004c1e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c10:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c1c:	e040      	b.n	8004ca0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d015      	beq.n	8004c54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	2b21      	cmp	r3, #33	; 0x21
 8004c2c:	d112      	bne.n	8004c54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	781a      	ldrb	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c52:	e025      	b.n	8004ca0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d120      	bne.n	8004ca0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	2b21      	cmp	r3, #33	; 0x21
 8004c62:	d11d      	bne.n	8004ca0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c72:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff fe40 	bl	8004920 <HAL_I2C_MemTxCpltCallback>
}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b22      	cmp	r3, #34	; 0x22
 8004cba:	f040 80ac 	bne.w	8004e16 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d921      	bls.n	8004d10 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	f040 808c 	bne.w	8004e16 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004d0e:	e082      	b.n	8004e16 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d075      	beq.n	8004e04 <I2C_MasterReceive_RXNE+0x15c>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d002      	beq.n	8004d24 <I2C_MasterReceive_RXNE+0x7c>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d16f      	bne.n	8004e04 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f001 fc0f 	bl	8006548 <I2C_WaitOnSTOPRequestThroughIT>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d142      	bne.n	8004db6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d4e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b40      	cmp	r3, #64	; 0x40
 8004d88:	d10a      	bne.n	8004da0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7fc fe49 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d9e:	e03a      	b.n	8004e16 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2212      	movs	r2, #18
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fd80 	bl	80048b4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004db4:	e02f      	b.n	8004e16 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dc4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff fd99 	bl	8004934 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e02:	e008      	b.n	8004e16 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e12:	605a      	str	r2, [r3, #4]
}
 8004e14:	e7ff      	b.n	8004e16 <I2C_MasterReceive_RXNE+0x16e>
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d11b      	bne.n	8004e6e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e44:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e6c:	e0bd      	b.n	8004fea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d129      	bne.n	8004ecc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e86:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d00a      	beq.n	8004ea4 <I2C_MasterReceive_BTF+0x86>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d007      	beq.n	8004ea4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004eca:	e08e      	b.n	8004fea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d176      	bne.n	8004fc4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d002      	beq.n	8004ee2 <I2C_MasterReceive_BTF+0xc4>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b10      	cmp	r3, #16
 8004ee0:	d108      	bne.n	8004ef4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	e019      	b.n	8004f28 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d002      	beq.n	8004f00 <I2C_MasterReceive_BTF+0xe2>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d108      	bne.n	8004f12 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e00a      	b.n	8004f28 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d007      	beq.n	8004f28 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f26:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f82:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d10a      	bne.n	8004fae <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fc fd42 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
}
 8004fac:	e01d      	b.n	8004fea <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2212      	movs	r2, #18
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff fc79 	bl	80048b4 <HAL_I2C_MasterRxCpltCallback>
}
 8004fc2:	e012      	b.n	8004fea <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b40      	cmp	r3, #64	; 0x40
 8005004:	d117      	bne.n	8005036 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	b2db      	uxtb	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800501e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005020:	e067      	b.n	80050f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	b2db      	uxtb	r3, r3
 8005028:	f043 0301 	orr.w	r3, r3, #1
 800502c:	b2da      	uxtb	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	611a      	str	r2, [r3, #16]
}
 8005034:	e05d      	b.n	80050f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800503e:	d133      	bne.n	80050a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b21      	cmp	r3, #33	; 0x21
 800504a:	d109      	bne.n	8005060 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005050:	b2db      	uxtb	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800505c:	611a      	str	r2, [r3, #16]
 800505e:	e008      	b.n	8005072 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	b2da      	uxtb	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005076:	2b00      	cmp	r3, #0
 8005078:	d004      	beq.n	8005084 <I2C_Master_SB+0x92>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d108      	bne.n	8005096 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	2b00      	cmp	r3, #0
 800508a:	d032      	beq.n	80050f2 <I2C_Master_SB+0x100>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d02d      	beq.n	80050f2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a4:	605a      	str	r2, [r3, #4]
}
 80050a6:	e024      	b.n	80050f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10e      	bne.n	80050ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	11db      	asrs	r3, r3, #7
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f003 0306 	and.w	r3, r3, #6
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	f063 030f 	orn	r3, r3, #15
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	611a      	str	r2, [r3, #16]
}
 80050cc:	e011      	b.n	80050f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d10d      	bne.n	80050f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	b29b      	uxth	r3, r3
 80050dc:	11db      	asrs	r3, r3, #7
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f003 0306 	and.w	r3, r3, #6
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	f063 030e 	orn	r3, r3, #14
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	611a      	str	r2, [r3, #16]
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	b2da      	uxtb	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005116:	2b00      	cmp	r3, #0
 8005118:	d004      	beq.n	8005124 <I2C_Master_ADD10+0x26>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d108      	bne.n	8005136 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00c      	beq.n	8005146 <I2C_Master_ADD10+0x48>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005144:	605a      	str	r2, [r3, #4]
  }
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005152:	b480      	push	{r7}
 8005154:	b091      	sub	sp, #68	; 0x44
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005160:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b22      	cmp	r3, #34	; 0x22
 800517a:	f040 8169 	bne.w	8005450 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10f      	bne.n	80051a6 <I2C_Master_ADDR+0x54>
 8005186:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800518a:	2b40      	cmp	r3, #64	; 0x40
 800518c:	d10b      	bne.n	80051a6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518e:	2300      	movs	r3, #0
 8005190:	633b      	str	r3, [r7, #48]	; 0x30
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	633b      	str	r3, [r7, #48]	; 0x30
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	633b      	str	r3, [r7, #48]	; 0x30
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	e160      	b.n	8005468 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d11d      	bne.n	80051ea <I2C_Master_ADDR+0x98>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051b6:	d118      	bne.n	80051ea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b8:	2300      	movs	r3, #0
 80051ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051dc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	651a      	str	r2, [r3, #80]	; 0x50
 80051e8:	e13e      	b.n	8005468 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d113      	bne.n	800521c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f4:	2300      	movs	r3, #0
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	62bb      	str	r3, [r7, #40]	; 0x28
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e115      	b.n	8005448 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b01      	cmp	r3, #1
 8005224:	f040 808a 	bne.w	800533c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800522e:	d137      	bne.n	80052a0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800524a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800524e:	d113      	bne.n	8005278 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005260:	2300      	movs	r3, #0
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	e0e7      	b.n	8005448 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005278:	2300      	movs	r3, #0
 800527a:	623b      	str	r3, [r7, #32]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	623b      	str	r3, [r7, #32]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	623b      	str	r3, [r7, #32]
 800528c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e0d3      	b.n	8005448 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d02e      	beq.n	8005304 <I2C_Master_ADDR+0x1b2>
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d02b      	beq.n	8005304 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80052ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ae:	2b12      	cmp	r3, #18
 80052b0:	d102      	bne.n	80052b8 <I2C_Master_ADDR+0x166>
 80052b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d125      	bne.n	8005304 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d00e      	beq.n	80052dc <I2C_Master_ADDR+0x18a>
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d00b      	beq.n	80052dc <I2C_Master_ADDR+0x18a>
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	2b10      	cmp	r3, #16
 80052c8:	d008      	beq.n	80052dc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e007      	b.n	80052ec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052ea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ec:	2300      	movs	r3, #0
 80052ee:	61fb      	str	r3, [r7, #28]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	e0a1      	b.n	8005448 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005312:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005314:	2300      	movs	r3, #0
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	e085      	b.n	8005448 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d14d      	bne.n	80053e2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	2b04      	cmp	r3, #4
 800534a:	d016      	beq.n	800537a <I2C_Master_ADDR+0x228>
 800534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534e:	2b02      	cmp	r3, #2
 8005350:	d013      	beq.n	800537a <I2C_Master_ADDR+0x228>
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	2b10      	cmp	r3, #16
 8005356:	d010      	beq.n	800537a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005366:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	e007      	b.n	800538a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005388:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005398:	d117      	bne.n	80053ca <I2C_Master_ADDR+0x278>
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053a0:	d00b      	beq.n	80053ba <I2C_Master_ADDR+0x268>
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d008      	beq.n	80053ba <I2C_Master_ADDR+0x268>
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d005      	beq.n	80053ba <I2C_Master_ADDR+0x268>
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d002      	beq.n	80053ba <I2C_Master_ADDR+0x268>
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d107      	bne.n	80053ca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	e032      	b.n	8005448 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053f0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005400:	d117      	bne.n	8005432 <I2C_Master_ADDR+0x2e0>
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005408:	d00b      	beq.n	8005422 <I2C_Master_ADDR+0x2d0>
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	2b01      	cmp	r3, #1
 800540e:	d008      	beq.n	8005422 <I2C_Master_ADDR+0x2d0>
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	2b08      	cmp	r3, #8
 8005414:	d005      	beq.n	8005422 <I2C_Master_ADDR+0x2d0>
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	2b10      	cmp	r3, #16
 800541a:	d002      	beq.n	8005422 <I2C_Master_ADDR+0x2d0>
 800541c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541e:	2b20      	cmp	r3, #32
 8005420:	d107      	bne.n	8005432 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005430:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800544e:	e00b      	b.n	8005468 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
}
 8005466:	e7ff      	b.n	8005468 <I2C_Master_ADDR+0x316>
 8005468:	bf00      	nop
 800546a:	3744      	adds	r7, #68	; 0x44
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005482:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d02b      	beq.n	80054e6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	781a      	ldrb	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d114      	bne.n	80054e6 <I2C_SlaveTransmit_TXE+0x72>
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	2b29      	cmp	r3, #41	; 0x29
 80054c0:	d111      	bne.n	80054e6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2221      	movs	r2, #33	; 0x21
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2228      	movs	r2, #40	; 0x28
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff f9f1 	bl	80048c8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054e6:	bf00      	nop
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d011      	beq.n	8005524 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d02c      	beq.n	80055a4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d114      	bne.n	80055a4 <I2C_SlaveReceive_RXNE+0x74>
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	2b2a      	cmp	r3, #42	; 0x2a
 800557e:	d111      	bne.n	80055a4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2222      	movs	r2, #34	; 0x22
 8005594:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2228      	movs	r2, #40	; 0x28
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff f99c 	bl	80048dc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055a4:	bf00      	nop
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d012      	beq.n	80055e4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800560a:	2b28      	cmp	r3, #40	; 0x28
 800560c:	d127      	bne.n	800565e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	089b      	lsrs	r3, r3, #2
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800562a:	2301      	movs	r3, #1
 800562c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	09db      	lsrs	r3, r3, #7
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d103      	bne.n	8005642 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	81bb      	strh	r3, [r7, #12]
 8005640:	e002      	b.n	8005648 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005650:	89ba      	ldrh	r2, [r7, #12]
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	4619      	mov	r1, r3
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff f94a 	bl	80048f0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800565c:	e00e      	b.n	800567c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800565e:	2300      	movs	r3, #0
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005692:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80056a4:	2300      	movs	r3, #0
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	60bb      	str	r3, [r7, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056e0:	d172      	bne.n	80057c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	2b22      	cmp	r3, #34	; 0x22
 80056e6:	d002      	beq.n	80056ee <I2C_Slave_STOPF+0x6a>
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	2b2a      	cmp	r3, #42	; 0x2a
 80056ec:	d135      	bne.n	800575a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	f043 0204 	orr.w	r2, r3, #4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005720:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	4618      	mov	r0, r3
 8005728:	f7fd fdfc 	bl	8003324 <HAL_DMA_GetState>
 800572c:	4603      	mov	r3, r0
 800572e:	2b01      	cmp	r3, #1
 8005730:	d049      	beq.n	80057c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	4a69      	ldr	r2, [pc, #420]	; (80058dc <I2C_Slave_STOPF+0x258>)
 8005738:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	4618      	mov	r0, r3
 8005740:	f7fd fc44 	bl	8002fcc <HAL_DMA_Abort_IT>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d03d      	beq.n	80057c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005758:	e035      	b.n	80057c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	b29a      	uxth	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	f043 0204 	orr.w	r2, r3, #4
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800578c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005792:	4618      	mov	r0, r3
 8005794:	f7fd fdc6 	bl	8003324 <HAL_DMA_GetState>
 8005798:	4603      	mov	r3, r0
 800579a:	2b01      	cmp	r3, #1
 800579c:	d014      	beq.n	80057c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	4a4e      	ldr	r2, [pc, #312]	; (80058dc <I2C_Slave_STOPF+0x258>)
 80057a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fd fc0e 	bl	8002fcc <HAL_DMA_Abort_IT>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d008      	beq.n	80057c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057c0:	4610      	mov	r0, r2
 80057c2:	4798      	blx	r3
 80057c4:	e000      	b.n	80057c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d03e      	beq.n	8005850 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d112      	bne.n	8005806 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d112      	bne.n	800583a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	f043 0204 	orr.w	r2, r3, #4
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f8b3 	bl	80059c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800585e:	e039      	b.n	80058d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b2a      	cmp	r3, #42	; 0x2a
 8005864:	d109      	bne.n	800587a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2228      	movs	r2, #40	; 0x28
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff f831 	bl	80048dc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b28      	cmp	r3, #40	; 0x28
 8005884:	d111      	bne.n	80058aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a15      	ldr	r2, [pc, #84]	; (80058e0 <I2C_Slave_STOPF+0x25c>)
 800588a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff f832 	bl	800490c <HAL_I2C_ListenCpltCallback>
}
 80058a8:	e014      	b.n	80058d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	2b22      	cmp	r3, #34	; 0x22
 80058b0:	d002      	beq.n	80058b8 <I2C_Slave_STOPF+0x234>
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	2b22      	cmp	r3, #34	; 0x22
 80058b6:	d10d      	bne.n	80058d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff f804 	bl	80048dc <HAL_I2C_SlaveRxCpltCallback>
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	08006149 	.word	0x08006149
 80058e0:	ffff0000 	.word	0xffff0000

080058e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d002      	beq.n	8005906 <I2C_Slave_AF+0x22>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b20      	cmp	r3, #32
 8005904:	d129      	bne.n	800595a <I2C_Slave_AF+0x76>
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	2b28      	cmp	r3, #40	; 0x28
 800590a:	d126      	bne.n	800595a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a2c      	ldr	r2, [pc, #176]	; (80059c0 <I2C_Slave_AF+0xdc>)
 8005910:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005920:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800592a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fe ffda 	bl	800490c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005958:	e02e      	b.n	80059b8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b21      	cmp	r3, #33	; 0x21
 800595e:	d126      	bne.n	80059ae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a17      	ldr	r2, [pc, #92]	; (80059c0 <I2C_Slave_AF+0xdc>)
 8005964:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2221      	movs	r2, #33	; 0x21
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800598a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005994:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fe ff8e 	bl	80048c8 <HAL_I2C_SlaveTxCpltCallback>
}
 80059ac:	e004      	b.n	80059b8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059b6:	615a      	str	r2, [r3, #20]
}
 80059b8:	bf00      	nop
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	ffff0000 	.word	0xffff0000

080059c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059dc:	7bbb      	ldrb	r3, [r7, #14]
 80059de:	2b10      	cmp	r3, #16
 80059e0:	d002      	beq.n	80059e8 <I2C_ITError+0x24>
 80059e2:	7bbb      	ldrb	r3, [r7, #14]
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d10a      	bne.n	80059fe <I2C_ITError+0x3a>
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b22      	cmp	r3, #34	; 0x22
 80059ec:	d107      	bne.n	80059fe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a04:	2b28      	cmp	r3, #40	; 0x28
 8005a06:	d107      	bne.n	8005a18 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2228      	movs	r2, #40	; 0x28
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a16:	e015      	b.n	8005a44 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a26:	d00a      	beq.n	8005a3e <I2C_ITError+0x7a>
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	2b60      	cmp	r3, #96	; 0x60
 8005a2c:	d007      	beq.n	8005a3e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a52:	d162      	bne.n	8005b1a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a62:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d020      	beq.n	8005ab4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	4a6a      	ldr	r2, [pc, #424]	; (8005c20 <I2C_ITError+0x25c>)
 8005a78:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fd faa4 	bl	8002fcc <HAL_DMA_Abort_IT>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 8089 	beq.w	8005b9e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0201 	bic.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4798      	blx	r3
 8005ab2:	e074      	b.n	8005b9e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	4a59      	ldr	r2, [pc, #356]	; (8005c20 <I2C_ITError+0x25c>)
 8005aba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fd fa83 	bl	8002fcc <HAL_DMA_Abort_IT>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d068      	beq.n	8005b9e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b40      	cmp	r3, #64	; 0x40
 8005ad8:	d10b      	bne.n	8005af2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0201 	bic.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b14:	4610      	mov	r0, r2
 8005b16:	4798      	blx	r3
 8005b18:	e041      	b.n	8005b9e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b60      	cmp	r3, #96	; 0x60
 8005b24:	d125      	bne.n	8005b72 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b40      	cmp	r3, #64	; 0x40
 8005b40:	d10b      	bne.n	8005b5a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fe feec 	bl	8004948 <HAL_I2C_AbortCpltCallback>
 8005b70:	e015      	b.n	8005b9e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7c:	2b40      	cmp	r3, #64	; 0x40
 8005b7e:	d10b      	bne.n	8005b98 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7fe fecb 	bl	8004934 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10e      	bne.n	8005bcc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d109      	bne.n	8005bcc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d104      	bne.n	8005bcc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d007      	beq.n	8005bdc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bda:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d113      	bne.n	8005c18 <I2C_ITError+0x254>
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	2b28      	cmp	r3, #40	; 0x28
 8005bf4:	d110      	bne.n	8005c18 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a0a      	ldr	r2, [pc, #40]	; (8005c24 <I2C_ITError+0x260>)
 8005bfa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fe fe7a 	bl	800490c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c18:	bf00      	nop
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	08006149 	.word	0x08006149
 8005c24:	ffff0000 	.word	0xffff0000

08005c28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	4608      	mov	r0, r1
 8005c32:	4611      	mov	r1, r2
 8005c34:	461a      	mov	r2, r3
 8005c36:	4603      	mov	r3, r0
 8005c38:	817b      	strh	r3, [r7, #10]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	813b      	strh	r3, [r7, #8]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fb1a 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00d      	beq.n	8005c86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c78:	d103      	bne.n	8005c82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e05f      	b.n	8005d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c86:	897b      	ldrh	r3, [r7, #10]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	6a3a      	ldr	r2, [r7, #32]
 8005c9a:	492d      	ldr	r1, [pc, #180]	; (8005d50 <I2C_RequestMemoryWrite+0x128>)
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 fb52 	bl	8006346 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e04c      	b.n	8005d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc4:	6a39      	ldr	r1, [r7, #32]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fbbc 	bl	8006444 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00d      	beq.n	8005cee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d107      	bne.n	8005cea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e02b      	b.n	8005d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cee:	88fb      	ldrh	r3, [r7, #6]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d105      	bne.n	8005d00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cf4:	893b      	ldrh	r3, [r7, #8]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	611a      	str	r2, [r3, #16]
 8005cfe:	e021      	b.n	8005d44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d00:	893b      	ldrh	r3, [r7, #8]
 8005d02:	0a1b      	lsrs	r3, r3, #8
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d10:	6a39      	ldr	r1, [r7, #32]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fb96 	bl	8006444 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00d      	beq.n	8005d3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d107      	bne.n	8005d36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e005      	b.n	8005d46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d3a:	893b      	ldrh	r3, [r7, #8]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	00010002 	.word	0x00010002

08005d54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	4603      	mov	r3, r0
 8005d64:	817b      	strh	r3, [r7, #10]
 8005d66:	460b      	mov	r3, r1
 8005d68:	813b      	strh	r3, [r7, #8]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 fa7c 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00d      	beq.n	8005dc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db4:	d103      	bne.n	8005dbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e0aa      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dc2:	897b      	ldrh	r3, [r7, #10]
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005dd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	6a3a      	ldr	r2, [r7, #32]
 8005dd6:	4952      	ldr	r1, [pc, #328]	; (8005f20 <I2C_RequestMemoryRead+0x1cc>)
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 fab4 	bl	8006346 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e097      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e00:	6a39      	ldr	r1, [r7, #32]
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fb1e 	bl	8006444 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00d      	beq.n	8005e2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d107      	bne.n	8005e26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e076      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d105      	bne.n	8005e3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e30:	893b      	ldrh	r3, [r7, #8]
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	611a      	str	r2, [r3, #16]
 8005e3a:	e021      	b.n	8005e80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e3c:	893b      	ldrh	r3, [r7, #8]
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4c:	6a39      	ldr	r1, [r7, #32]
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 faf8 	bl	8006444 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00d      	beq.n	8005e76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d107      	bne.n	8005e72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e050      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e76:	893b      	ldrh	r3, [r7, #8]
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e82:	6a39      	ldr	r1, [r7, #32]
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 fadd 	bl	8006444 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00d      	beq.n	8005eac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d107      	bne.n	8005ea8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e035      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f9e5 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00d      	beq.n	8005ef0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee2:	d103      	bne.n	8005eec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e013      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ef0:	897b      	ldrh	r3, [r7, #10]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f043 0301 	orr.w	r3, r3, #1
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	6a3a      	ldr	r2, [r7, #32]
 8005f04:	4906      	ldr	r1, [pc, #24]	; (8005f20 <I2C_RequestMemoryRead+0x1cc>)
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fa1d 	bl	8006346 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	00010002 	.word	0x00010002

08005f24 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f38:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f40:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f56:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f64:	2200      	movs	r2, #0
 8005f66:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	2200      	movs	r2, #0
 8005f76:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005f78:	7cfb      	ldrb	r3, [r7, #19]
 8005f7a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005f7e:	2b21      	cmp	r3, #33	; 0x21
 8005f80:	d007      	beq.n	8005f92 <I2C_DMAXferCplt+0x6e>
 8005f82:	7cfb      	ldrb	r3, [r7, #19]
 8005f84:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005f88:	2b22      	cmp	r3, #34	; 0x22
 8005f8a:	d131      	bne.n	8005ff0 <I2C_DMAXferCplt+0xcc>
 8005f8c:	7cbb      	ldrb	r3, [r7, #18]
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d12e      	bne.n	8005ff0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fa0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005fa8:	7cfb      	ldrb	r3, [r7, #19]
 8005faa:	2b29      	cmp	r3, #41	; 0x29
 8005fac:	d10a      	bne.n	8005fc4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2221      	movs	r2, #33	; 0x21
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2228      	movs	r2, #40	; 0x28
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fbc:	6978      	ldr	r0, [r7, #20]
 8005fbe:	f7fe fc83 	bl	80048c8 <HAL_I2C_SlaveTxCpltCallback>
 8005fc2:	e00c      	b.n	8005fde <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005fc4:	7cfb      	ldrb	r3, [r7, #19]
 8005fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc8:	d109      	bne.n	8005fde <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2222      	movs	r2, #34	; 0x22
 8005fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2228      	movs	r2, #40	; 0x28
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fd8:	6978      	ldr	r0, [r7, #20]
 8005fda:	f7fe fc7f 	bl	80048dc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005fec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005fee:	e06a      	b.n	80060c6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d064      	beq.n	80060c6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d107      	bne.n	8006016 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006014:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006024:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800602c:	d009      	beq.n	8006042 <I2C_DMAXferCplt+0x11e>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b08      	cmp	r3, #8
 8006032:	d006      	beq.n	8006042 <I2C_DMAXferCplt+0x11e>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800603a:	d002      	beq.n	8006042 <I2C_DMAXferCplt+0x11e>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b20      	cmp	r3, #32
 8006040:	d107      	bne.n	8006052 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006050:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006060:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006070:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2200      	movs	r2, #0
 8006076:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006080:	6978      	ldr	r0, [r7, #20]
 8006082:	f7fe fc57 	bl	8004934 <HAL_I2C_ErrorCallback>
}
 8006086:	e01e      	b.n	80060c6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b40      	cmp	r3, #64	; 0x40
 800609a:	d10a      	bne.n	80060b2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80060aa:	6978      	ldr	r0, [r7, #20]
 80060ac:	f7fb fcc0 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
}
 80060b0:	e009      	b.n	80060c6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2212      	movs	r2, #18
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80060c0:	6978      	ldr	r0, [r7, #20]
 80060c2:	f7fe fbf7 	bl	80048b4 <HAL_I2C_MasterRxCpltCallback>
}
 80060c6:	bf00      	nop
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e8:	2200      	movs	r2, #0
 80060ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	2200      	movs	r2, #0
 80060fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7fd f91f 	bl	8003340 <HAL_DMA_GetError>
 8006102:	4603      	mov	r3, r0
 8006104:	2b02      	cmp	r3, #2
 8006106:	d01b      	beq.n	8006140 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006116:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f043 0210 	orr.w	r2, r3, #16
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7fe fbfa 	bl	8004934 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006140:	bf00      	nop
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006160:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006162:	4b4b      	ldr	r3, [pc, #300]	; (8006290 <I2C_DMAAbort+0x148>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	08db      	lsrs	r3, r3, #3
 8006168:	4a4a      	ldr	r2, [pc, #296]	; (8006294 <I2C_DMAAbort+0x14c>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	0a1a      	lsrs	r2, r3, #8
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	00da      	lsls	r2, r3, #3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	f043 0220 	orr.w	r2, r3, #32
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800618e:	e00a      	b.n	80061a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3b01      	subs	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a4:	d0ea      	beq.n	800617c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b2:	2200      	movs	r2, #0
 80061b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c2:	2200      	movs	r2, #0
 80061c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2200      	movs	r2, #0
 80061da:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e8:	2200      	movs	r2, #0
 80061ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	2200      	movs	r2, #0
 80061fa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0201 	bic.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b60      	cmp	r3, #96	; 0x60
 8006216:	d10e      	bne.n	8006236 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2200      	movs	r2, #0
 800622c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800622e:	6978      	ldr	r0, [r7, #20]
 8006230:	f7fe fb8a 	bl	8004948 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006234:	e027      	b.n	8006286 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006236:	7cfb      	ldrb	r3, [r7, #19]
 8006238:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800623c:	2b28      	cmp	r3, #40	; 0x28
 800623e:	d117      	bne.n	8006270 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800625e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2200      	movs	r2, #0
 8006264:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2228      	movs	r2, #40	; 0x28
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800626e:	e007      	b.n	8006280 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006280:	6978      	ldr	r0, [r7, #20]
 8006282:	f7fe fb57 	bl	8004934 <HAL_I2C_ErrorCallback>
}
 8006286:	bf00      	nop
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20000010 	.word	0x20000010
 8006294:	14f8b589 	.word	0x14f8b589

08006298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	4613      	mov	r3, r2
 80062a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062a8:	e025      	b.n	80062f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b0:	d021      	beq.n	80062f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b2:	f7fb ff1d 	bl	80020f0 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d302      	bcc.n	80062c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d116      	bne.n	80062f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	f043 0220 	orr.w	r2, r3, #32
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e023      	b.n	800633e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	0c1b      	lsrs	r3, r3, #16
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d10d      	bne.n	800631c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	43da      	mvns	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4013      	ands	r3, r2
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	bf0c      	ite	eq
 8006312:	2301      	moveq	r3, #1
 8006314:	2300      	movne	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	461a      	mov	r2, r3
 800631a:	e00c      	b.n	8006336 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	43da      	mvns	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4013      	ands	r3, r2
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	bf0c      	ite	eq
 800632e:	2301      	moveq	r3, #1
 8006330:	2300      	movne	r3, #0
 8006332:	b2db      	uxtb	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	429a      	cmp	r2, r3
 800633a:	d0b6      	beq.n	80062aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	607a      	str	r2, [r7, #4]
 8006352:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006354:	e051      	b.n	80063fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006364:	d123      	bne.n	80063ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006374:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800637e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2220      	movs	r2, #32
 800638a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	f043 0204 	orr.w	r2, r3, #4
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e046      	b.n	800643c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d021      	beq.n	80063fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b6:	f7fb fe9b 	bl	80020f0 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d302      	bcc.n	80063cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d116      	bne.n	80063fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	f043 0220 	orr.w	r2, r3, #32
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e020      	b.n	800643c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	0c1b      	lsrs	r3, r3, #16
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	d10c      	bne.n	800641e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	43da      	mvns	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4013      	ands	r3, r2
 8006410:	b29b      	uxth	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	bf14      	ite	ne
 8006416:	2301      	movne	r3, #1
 8006418:	2300      	moveq	r3, #0
 800641a:	b2db      	uxtb	r3, r3
 800641c:	e00b      	b.n	8006436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	43da      	mvns	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4013      	ands	r3, r2
 800642a:	b29b      	uxth	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	bf14      	ite	ne
 8006430:	2301      	movne	r3, #1
 8006432:	2300      	moveq	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d18d      	bne.n	8006356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006450:	e02d      	b.n	80064ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f900 	bl	8006658 <I2C_IsAcknowledgeFailed>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e02d      	b.n	80064be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d021      	beq.n	80064ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646a:	f7fb fe41 	bl	80020f0 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	429a      	cmp	r2, r3
 8006478:	d302      	bcc.n	8006480 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d116      	bne.n	80064ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2220      	movs	r2, #32
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	f043 0220 	orr.w	r2, r3, #32
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e007      	b.n	80064be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b8:	2b80      	cmp	r3, #128	; 0x80
 80064ba:	d1ca      	bne.n	8006452 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064d2:	e02d      	b.n	8006530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f8bf 	bl	8006658 <I2C_IsAcknowledgeFailed>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e02d      	b.n	8006540 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ea:	d021      	beq.n	8006530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ec:	f7fb fe00 	bl	80020f0 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d302      	bcc.n	8006502 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d116      	bne.n	8006530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	f043 0220 	orr.w	r2, r3, #32
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e007      	b.n	8006540 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b04      	cmp	r3, #4
 800653c:	d1ca      	bne.n	80064d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006554:	4b13      	ldr	r3, [pc, #76]	; (80065a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	08db      	lsrs	r3, r3, #3
 800655a:	4a13      	ldr	r2, [pc, #76]	; (80065a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800655c:	fba2 2303 	umull	r2, r3, r2, r3
 8006560:	0a1a      	lsrs	r2, r3, #8
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3b01      	subs	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d107      	bne.n	8006586 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f043 0220 	orr.w	r2, r3, #32
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e008      	b.n	8006598 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006594:	d0e9      	beq.n	800656a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	20000010 	.word	0x20000010
 80065a8:	14f8b589 	.word	0x14f8b589

080065ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065b8:	e042      	b.n	8006640 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d119      	bne.n	80065fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f06f 0210 	mvn.w	r2, #16
 80065d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e029      	b.n	8006650 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065fc:	f7fb fd78 	bl	80020f0 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	429a      	cmp	r2, r3
 800660a:	d302      	bcc.n	8006612 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d116      	bne.n	8006640 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662c:	f043 0220 	orr.w	r2, r3, #32
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e007      	b.n	8006650 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664a:	2b40      	cmp	r3, #64	; 0x40
 800664c:	d1b5      	bne.n	80065ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800666a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800666e:	d11b      	bne.n	80066a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006678:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	f043 0204 	orr.w	r2, r3, #4
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80066c6:	d103      	bne.n	80066d0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80066ce:	e007      	b.n	80066e0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80066d8:	d102      	bne.n	80066e0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2208      	movs	r2, #8
 80066de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80066ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ee:	b08f      	sub	sp, #60	; 0x3c
 80066f0:	af0a      	add	r7, sp, #40	; 0x28
 80066f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e10f      	b.n	800691e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	d106      	bne.n	800671e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f005 ff9b 	bl	800c654 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2203      	movs	r2, #3
 8006722:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4618      	mov	r0, r3
 800673e:	f002 fa82 	bl	8008c46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	687e      	ldr	r6, [r7, #4]
 800674a:	466d      	mov	r5, sp
 800674c:	f106 0410 	add.w	r4, r6, #16
 8006750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006758:	e894 0003 	ldmia.w	r4, {r0, r1}
 800675c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006760:	1d33      	adds	r3, r6, #4
 8006762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006764:	6838      	ldr	r0, [r7, #0]
 8006766:	f002 f959 	bl	8008a1c <USB_CoreInit>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e0d0      	b.n	800691e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2100      	movs	r1, #0
 8006782:	4618      	mov	r0, r3
 8006784:	f002 fa70 	bl	8008c68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]
 800678c:	e04a      	b.n	8006824 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800678e:	7bfa      	ldrb	r2, [r7, #15]
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	4613      	mov	r3, r2
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	440b      	add	r3, r1
 800679c:	333d      	adds	r3, #61	; 0x3d
 800679e:	2201      	movs	r2, #1
 80067a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80067a2:	7bfa      	ldrb	r2, [r7, #15]
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	4613      	mov	r3, r2
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	333c      	adds	r3, #60	; 0x3c
 80067b2:	7bfa      	ldrb	r2, [r7, #15]
 80067b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80067b6:	7bfa      	ldrb	r2, [r7, #15]
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	b298      	uxth	r0, r3
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	440b      	add	r3, r1
 80067c8:	3344      	adds	r3, #68	; 0x44
 80067ca:	4602      	mov	r2, r0
 80067cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80067ce:	7bfa      	ldrb	r2, [r7, #15]
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	3340      	adds	r3, #64	; 0x40
 80067de:	2200      	movs	r2, #0
 80067e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80067e2:	7bfa      	ldrb	r2, [r7, #15]
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	4613      	mov	r3, r2
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	4413      	add	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	440b      	add	r3, r1
 80067f0:	3348      	adds	r3, #72	; 0x48
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80067f6:	7bfa      	ldrb	r2, [r7, #15]
 80067f8:	6879      	ldr	r1, [r7, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	440b      	add	r3, r1
 8006804:	334c      	adds	r3, #76	; 0x4c
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800680a:	7bfa      	ldrb	r2, [r7, #15]
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	4613      	mov	r3, r2
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4413      	add	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	440b      	add	r3, r1
 8006818:	3354      	adds	r3, #84	; 0x54
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	3301      	adds	r3, #1
 8006822:	73fb      	strb	r3, [r7, #15]
 8006824:	7bfa      	ldrb	r2, [r7, #15]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	429a      	cmp	r2, r3
 800682c:	d3af      	bcc.n	800678e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800682e:	2300      	movs	r3, #0
 8006830:	73fb      	strb	r3, [r7, #15]
 8006832:	e044      	b.n	80068be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006834:	7bfa      	ldrb	r2, [r7, #15]
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	4613      	mov	r3, r2
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	4413      	add	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	440b      	add	r3, r1
 8006842:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006846:	2200      	movs	r2, #0
 8006848:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800684a:	7bfa      	ldrb	r2, [r7, #15]
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	4613      	mov	r3, r2
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	440b      	add	r3, r1
 8006858:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800685c:	7bfa      	ldrb	r2, [r7, #15]
 800685e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006860:	7bfa      	ldrb	r2, [r7, #15]
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	4613      	mov	r3, r2
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006872:	2200      	movs	r2, #0
 8006874:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006876:	7bfa      	ldrb	r2, [r7, #15]
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	4613      	mov	r3, r2
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	440b      	add	r3, r1
 8006884:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800688c:	7bfa      	ldrb	r2, [r7, #15]
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	4613      	mov	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800689e:	2200      	movs	r2, #0
 80068a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80068a2:	7bfa      	ldrb	r2, [r7, #15]
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	4613      	mov	r3, r2
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	3301      	adds	r3, #1
 80068bc:	73fb      	strb	r3, [r7, #15]
 80068be:	7bfa      	ldrb	r2, [r7, #15]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d3b5      	bcc.n	8006834 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	603b      	str	r3, [r7, #0]
 80068ce:	687e      	ldr	r6, [r7, #4]
 80068d0:	466d      	mov	r5, sp
 80068d2:	f106 0410 	add.w	r4, r6, #16
 80068d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80068e6:	1d33      	adds	r3, r6, #4
 80068e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068ea:	6838      	ldr	r0, [r7, #0]
 80068ec:	f002 fa08 	bl	8008d00 <USB_DevInit>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d005      	beq.n	8006902 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e00d      	b.n	800691e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f003 fb57 	bl	8009fca <USB_DevDisconnect>

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006926 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <HAL_PCD_Start+0x1c>
 800693e:	2302      	movs	r3, #2
 8006940:	e020      	b.n	8006984 <HAL_PCD_Start+0x5e>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694e:	2b01      	cmp	r3, #1
 8006950:	d109      	bne.n	8006966 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006956:	2b01      	cmp	r3, #1
 8006958:	d005      	beq.n	8006966 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f002 f95a 	bl	8008c24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4618      	mov	r0, r3
 8006976:	f003 fb07 	bl	8009f88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800698c:	b590      	push	{r4, r7, lr}
 800698e:	b08d      	sub	sp, #52	; 0x34
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f003 fbc5 	bl	800a132 <USB_GetMode>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f040 848a 	bne.w	80072c4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f003 fb29 	bl	800a00c <USB_ReadInterrupts>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 8480 	beq.w	80072c2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	0a1b      	lsrs	r3, r3, #8
 80069cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f003 fb16 	bl	800a00c <USB_ReadInterrupts>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d107      	bne.n	80069fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695a      	ldr	r2, [r3, #20]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f002 0202 	and.w	r2, r2, #2
 80069f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f003 fb04 	bl	800a00c <USB_ReadInterrupts>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d161      	bne.n	8006ad2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	699a      	ldr	r2, [r3, #24]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0210 	bic.w	r2, r2, #16
 8006a1c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	f003 020f 	and.w	r2, r3, #15
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	4413      	add	r3, r2
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	0c5b      	lsrs	r3, r3, #17
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d124      	bne.n	8006a94 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d035      	beq.n	8006ac2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	091b      	lsrs	r3, r3, #4
 8006a5e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	461a      	mov	r2, r3
 8006a68:	6a38      	ldr	r0, [r7, #32]
 8006a6a:	f003 f93b 	bl	8009ce4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	691a      	ldr	r2, [r3, #16]
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	091b      	lsrs	r3, r3, #4
 8006a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a7a:	441a      	add	r2, r3
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	091b      	lsrs	r3, r3, #4
 8006a88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a8c:	441a      	add	r2, r3
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	621a      	str	r2, [r3, #32]
 8006a92:	e016      	b.n	8006ac2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	0c5b      	lsrs	r3, r3, #17
 8006a98:	f003 030f 	and.w	r3, r3, #15
 8006a9c:	2b06      	cmp	r3, #6
 8006a9e:	d110      	bne.n	8006ac2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006aa6:	2208      	movs	r2, #8
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6a38      	ldr	r0, [r7, #32]
 8006aac:	f003 f91a 	bl	8009ce4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	6a1a      	ldr	r2, [r3, #32]
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	091b      	lsrs	r3, r3, #4
 8006ab8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006abc:	441a      	add	r2, r3
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0210 	orr.w	r2, r2, #16
 8006ad0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f003 fa98 	bl	800a00c <USB_ReadInterrupts>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ae2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ae6:	f040 80a7 	bne.w	8006c38 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f003 fa9d 	bl	800a032 <USB_ReadDevAllOutEpInterrupt>
 8006af8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006afa:	e099      	b.n	8006c30 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 808e 	beq.w	8006c24 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	4611      	mov	r1, r2
 8006b12:	4618      	mov	r0, r3
 8006b14:	f003 fac1 	bl	800a09a <USB_ReadDevOutEPInterrupt>
 8006b18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00c      	beq.n	8006b3e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b30:	461a      	mov	r2, r3
 8006b32:	2301      	movs	r3, #1
 8006b34:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fec3 	bl	80078c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00c      	beq.n	8006b62 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b54:	461a      	mov	r2, r3
 8006b56:	2308      	movs	r3, #8
 8006b58:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006b5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 ff99 	bl	8007a94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b78:	461a      	mov	r2, r3
 8006b7a:	2310      	movs	r3, #16
 8006b7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d030      	beq.n	8006bea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b90:	2b80      	cmp	r3, #128	; 0x80
 8006b92:	d109      	bne.n	8006ba8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ba6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006baa:	4613      	mov	r3, r2
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	4413      	add	r3, r2
 8006bba:	3304      	adds	r3, #4
 8006bbc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	78db      	ldrb	r3, [r3, #3]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d108      	bne.n	8006bd8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f005 fe3a 	bl	800c84c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be4:	461a      	mov	r2, r3
 8006be6:	2302      	movs	r3, #2
 8006be8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f003 0320 	and.w	r3, r3, #32
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d008      	beq.n	8006c06 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c00:	461a      	mov	r2, r3
 8006c02:	2320      	movs	r3, #32
 8006c04:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d009      	beq.n	8006c24 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c22:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	3301      	adds	r3, #1
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	085b      	lsrs	r3, r3, #1
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f47f af62 	bne.w	8006afc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f003 f9e5 	bl	800a00c <USB_ReadInterrupts>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c4c:	f040 80db 	bne.w	8006e06 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f003 fa06 	bl	800a066 <USB_ReadDevAllInEpInterrupt>
 8006c5a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006c60:	e0cd      	b.n	8006dfe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 80c2 	beq.w	8006df2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	4611      	mov	r1, r2
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f003 fa2c 	bl	800a0d6 <USB_ReadDevInEPInterrupt>
 8006c7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d057      	beq.n	8006d3a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	2201      	movs	r2, #1
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	43db      	mvns	r3, r3
 8006ca4:	69f9      	ldr	r1, [r7, #28]
 8006ca6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006caa:	4013      	ands	r3, r2
 8006cac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cba:	461a      	mov	r2, r3
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d132      	bne.n	8006d2e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ccc:	4613      	mov	r3, r2
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	440b      	add	r3, r1
 8006cd6:	334c      	adds	r3, #76	; 0x4c
 8006cd8:	6819      	ldr	r1, [r3, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cde:	4613      	mov	r3, r2
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4403      	add	r3, r0
 8006ce8:	3348      	adds	r3, #72	; 0x48
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4419      	add	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4403      	add	r3, r0
 8006cfc:	334c      	adds	r3, #76	; 0x4c
 8006cfe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d113      	bne.n	8006d2e <HAL_PCD_IRQHandler+0x3a2>
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	440b      	add	r3, r1
 8006d14:	3354      	adds	r3, #84	; 0x54
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d108      	bne.n	8006d2e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d26:	461a      	mov	r2, r3
 8006d28:	2101      	movs	r1, #1
 8006d2a:	f003 fa33 	bl	800a194 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f005 fd0e 	bl	800c756 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d50:	461a      	mov	r2, r3
 8006d52:	2308      	movs	r3, #8
 8006d54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f003 0310 	and.w	r3, r3, #16
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d008      	beq.n	8006d72 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	2310      	movs	r3, #16
 8006d70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d008      	beq.n	8006d8e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d88:	461a      	mov	r2, r3
 8006d8a:	2340      	movs	r3, #64	; 0x40
 8006d8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d023      	beq.n	8006de0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d9a:	6a38      	ldr	r0, [r7, #32]
 8006d9c:	f002 f914 	bl	8008fc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da2:	4613      	mov	r3, r2
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	3338      	adds	r3, #56	; 0x38
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	4413      	add	r3, r2
 8006db0:	3304      	adds	r3, #4
 8006db2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	78db      	ldrb	r3, [r3, #3]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d108      	bne.n	8006dce <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f005 fd51 	bl	800c870 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dda:	461a      	mov	r2, r3
 8006ddc:	2302      	movs	r3, #2
 8006dde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006dea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fcdb 	bl	80077a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	3301      	adds	r3, #1
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f47f af2e 	bne.w	8006c62 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f003 f8fe 	bl	800a00c <USB_ReadInterrupts>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e1a:	d122      	bne.n	8006e62 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	69fa      	ldr	r2, [r7, #28]
 8006e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e2a:	f023 0301 	bic.w	r3, r3, #1
 8006e2e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d108      	bne.n	8006e4c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e42:	2100      	movs	r1, #0
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fec3 	bl	8007bd0 <HAL_PCDEx_LPM_Callback>
 8006e4a:	e002      	b.n	8006e52 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f005 fcef 	bl	800c830 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695a      	ldr	r2, [r3, #20]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f003 f8d0 	bl	800a00c <USB_ReadInterrupts>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e76:	d112      	bne.n	8006e9e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d102      	bne.n	8006e8e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f005 fcab 	bl	800c7e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	695a      	ldr	r2, [r3, #20]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006e9c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f003 f8b2 	bl	800a00c <USB_ReadInterrupts>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb2:	f040 80b7 	bne.w	8007024 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	69fa      	ldr	r2, [r7, #28]
 8006ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2110      	movs	r1, #16
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f002 f879 	bl	8008fc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eda:	e046      	b.n	8006f6a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f00:	0151      	lsls	r1, r2, #5
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	440a      	add	r2, r1
 8006f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f22:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f34:	0151      	lsls	r1, r2, #5
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	440a      	add	r2, r1
 8006f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f62:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	3301      	adds	r3, #1
 8006f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d3b3      	bcc.n	8006edc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	69fa      	ldr	r2, [r7, #28]
 8006f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f82:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006f86:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d016      	beq.n	8006fbe <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fa0:	f043 030b 	orr.w	r3, r3, #11
 8006fa4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fb6:	f043 030b 	orr.w	r3, r3, #11
 8006fba:	6453      	str	r3, [r2, #68]	; 0x44
 8006fbc:	e015      	b.n	8006fea <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	69fa      	ldr	r2, [r7, #28]
 8006fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006fd0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006fd4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fe4:	f043 030b 	orr.w	r3, r3, #11
 8006fe8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ff8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ffc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800700e:	461a      	mov	r2, r3
 8007010:	f003 f8c0 	bl	800a194 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695a      	ldr	r2, [r3, #20]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007022:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f002 ffef 	bl	800a00c <USB_ReadInterrupts>
 800702e:	4603      	mov	r3, r0
 8007030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007038:	d124      	bne.n	8007084 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4618      	mov	r0, r3
 8007040:	f003 f885 	bl	800a14e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4618      	mov	r0, r3
 800704a:	f002 f83a 	bl	80090c2 <USB_GetDevSpeed>
 800704e:	4603      	mov	r3, r0
 8007050:	461a      	mov	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681c      	ldr	r4, [r3, #0]
 800705a:	f001 f9e9 	bl	8008430 <HAL_RCC_GetHCLKFreq>
 800705e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007064:	b2db      	uxtb	r3, r3
 8007066:	461a      	mov	r2, r3
 8007068:	4620      	mov	r0, r4
 800706a:	f001 fd39 	bl	8008ae0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f005 fb99 	bl	800c7a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695a      	ldr	r2, [r3, #20]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007082:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4618      	mov	r0, r3
 800708a:	f002 ffbf 	bl	800a00c <USB_ReadInterrupts>
 800708e:	4603      	mov	r3, r0
 8007090:	f003 0308 	and.w	r3, r3, #8
 8007094:	2b08      	cmp	r3, #8
 8007096:	d10a      	bne.n	80070ae <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f005 fb76 	bl	800c78a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	695a      	ldr	r2, [r3, #20]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f002 0208 	and.w	r2, r2, #8
 80070ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f002 ffaa 	bl	800a00c <USB_ReadInterrupts>
 80070b8:	4603      	mov	r3, r0
 80070ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070be:	2b80      	cmp	r3, #128	; 0x80
 80070c0:	d122      	bne.n	8007108 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80070ce:	2301      	movs	r3, #1
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
 80070d2:	e014      	b.n	80070fe <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80070d4:	6879      	ldr	r1, [r7, #4]
 80070d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d8:	4613      	mov	r3, r2
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d105      	bne.n	80070f8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fb27 	bl	8007746 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	3301      	adds	r3, #1
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007104:	429a      	cmp	r2, r3
 8007106:	d3e5      	bcc.n	80070d4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f002 ff7d 	bl	800a00c <USB_ReadInterrupts>
 8007112:	4603      	mov	r3, r0
 8007114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800711c:	d13b      	bne.n	8007196 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800711e:	2301      	movs	r3, #1
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
 8007122:	e02b      	b.n	800717c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007138:	4613      	mov	r3, r2
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	440b      	add	r3, r1
 8007142:	3340      	adds	r3, #64	; 0x40
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d115      	bne.n	8007176 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800714a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800714c:	2b00      	cmp	r3, #0
 800714e:	da12      	bge.n	8007176 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007154:	4613      	mov	r3, r2
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	440b      	add	r3, r1
 800715e:	333f      	adds	r3, #63	; 0x3f
 8007160:	2201      	movs	r2, #1
 8007162:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	b2db      	uxtb	r3, r3
 8007168:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800716c:	b2db      	uxtb	r3, r3
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fae8 	bl	8007746 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	3301      	adds	r3, #1
 800717a:	627b      	str	r3, [r7, #36]	; 0x24
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007182:	429a      	cmp	r2, r3
 8007184:	d3ce      	bcc.n	8007124 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	695a      	ldr	r2, [r3, #20]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4618      	mov	r0, r3
 800719c:	f002 ff36 	bl	800a00c <USB_ReadInterrupts>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071aa:	d155      	bne.n	8007258 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071ac:	2301      	movs	r3, #1
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
 80071b0:	e045      	b.n	800723e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c6:	4613      	mov	r3, r2
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	440b      	add	r3, r1
 80071d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d12e      	bne.n	8007238 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80071da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80071dc:	2b00      	cmp	r3, #0
 80071de:	da2b      	bge.n	8007238 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80071ec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d121      	bne.n	8007238 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f8:	4613      	mov	r3, r2
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	4413      	add	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	440b      	add	r3, r1
 8007202:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007206:	2201      	movs	r2, #1
 8007208:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007234:	6053      	str	r3, [r2, #4]
            break;
 8007236:	e007      	b.n	8007248 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	3301      	adds	r3, #1
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007244:	429a      	cmp	r2, r3
 8007246:	d3b4      	bcc.n	80071b2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695a      	ldr	r2, [r3, #20]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007256:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f002 fed5 	bl	800a00c <USB_ReadInterrupts>
 8007262:	4603      	mov	r3, r0
 8007264:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726c:	d10a      	bne.n	8007284 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f005 fb10 	bl	800c894 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695a      	ldr	r2, [r3, #20]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4618      	mov	r0, r3
 800728a:	f002 febf 	bl	800a00c <USB_ReadInterrupts>
 800728e:	4603      	mov	r3, r0
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b04      	cmp	r3, #4
 8007296:	d115      	bne.n	80072c4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f005 fb00 	bl	800c8b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6859      	ldr	r1, [r3, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	430a      	orrs	r2, r1
 80072be:	605a      	str	r2, [r3, #4]
 80072c0:	e000      	b.n	80072c4 <HAL_PCD_IRQHandler+0x938>
      return;
 80072c2:	bf00      	nop
    }
  }
}
 80072c4:	3734      	adds	r7, #52	; 0x34
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd90      	pop	{r4, r7, pc}

080072ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	460b      	mov	r3, r1
 80072d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d101      	bne.n	80072e4 <HAL_PCD_SetAddress+0x1a>
 80072e0:	2302      	movs	r3, #2
 80072e2:	e013      	b.n	800730c <HAL_PCD_SetAddress+0x42>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	78fa      	ldrb	r2, [r7, #3]
 80072f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	78fa      	ldrb	r2, [r7, #3]
 80072fa:	4611      	mov	r1, r2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f002 fe1d 	bl	8009f3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	4608      	mov	r0, r1
 800731e:	4611      	mov	r1, r2
 8007320:	461a      	mov	r2, r3
 8007322:	4603      	mov	r3, r0
 8007324:	70fb      	strb	r3, [r7, #3]
 8007326:	460b      	mov	r3, r1
 8007328:	803b      	strh	r3, [r7, #0]
 800732a:	4613      	mov	r3, r2
 800732c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007336:	2b00      	cmp	r3, #0
 8007338:	da0f      	bge.n	800735a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	f003 020f 	and.w	r2, r3, #15
 8007340:	4613      	mov	r3, r2
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	3338      	adds	r3, #56	; 0x38
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	3304      	adds	r3, #4
 8007350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	705a      	strb	r2, [r3, #1]
 8007358:	e00f      	b.n	800737a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	f003 020f 	and.w	r2, r3, #15
 8007360:	4613      	mov	r3, r2
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	4413      	add	r3, r2
 8007370:	3304      	adds	r3, #4
 8007372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	b2da      	uxtb	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007386:	883a      	ldrh	r2, [r7, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	78ba      	ldrb	r2, [r7, #2]
 8007390:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d004      	beq.n	80073a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80073a4:	78bb      	ldrb	r3, [r7, #2]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d102      	bne.n	80073b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <HAL_PCD_EP_Open+0xaa>
 80073ba:	2302      	movs	r3, #2
 80073bc:	e00e      	b.n	80073dc <HAL_PCD_EP_Open+0xc8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 fe9d 	bl	800910c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80073da:	7afb      	ldrb	r3, [r7, #11]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80073f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	da0f      	bge.n	8007418 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	f003 020f 	and.w	r2, r3, #15
 80073fe:	4613      	mov	r3, r2
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	3338      	adds	r3, #56	; 0x38
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	4413      	add	r3, r2
 800740c:	3304      	adds	r3, #4
 800740e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2201      	movs	r2, #1
 8007414:	705a      	strb	r2, [r3, #1]
 8007416:	e00f      	b.n	8007438 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	f003 020f 	and.w	r2, r3, #15
 800741e:	4613      	mov	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	3304      	adds	r3, #4
 8007430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	f003 030f 	and.w	r3, r3, #15
 800743e:	b2da      	uxtb	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800744a:	2b01      	cmp	r3, #1
 800744c:	d101      	bne.n	8007452 <HAL_PCD_EP_Close+0x6e>
 800744e:	2302      	movs	r3, #2
 8007450:	e00e      	b.n	8007470 <HAL_PCD_EP_Close+0x8c>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68f9      	ldr	r1, [r7, #12]
 8007460:	4618      	mov	r0, r3
 8007462:	f001 fedb 	bl	800921c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	607a      	str	r2, [r7, #4]
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	460b      	mov	r3, r1
 8007486:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007488:	7afb      	ldrb	r3, [r7, #11]
 800748a:	f003 020f 	and.w	r2, r3, #15
 800748e:	4613      	mov	r3, r2
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4413      	add	r3, r2
 800749e:	3304      	adds	r3, #4
 80074a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2200      	movs	r2, #0
 80074b2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2200      	movs	r2, #0
 80074b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074ba:	7afb      	ldrb	r3, [r7, #11]
 80074bc:	f003 030f 	and.w	r3, r3, #15
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d102      	bne.n	80074d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80074d4:	7afb      	ldrb	r3, [r7, #11]
 80074d6:	f003 030f 	and.w	r3, r3, #15
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d109      	bne.n	80074f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6818      	ldr	r0, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	6979      	ldr	r1, [r7, #20]
 80074ec:	f002 f9ba 	bl	8009864 <USB_EP0StartXfer>
 80074f0:	e008      	b.n	8007504 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	461a      	mov	r2, r3
 80074fe:	6979      	ldr	r1, [r7, #20]
 8007500:	f001 ff68 	bl	80093d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	460b      	mov	r3, r1
 8007518:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800751a:	78fb      	ldrb	r3, [r7, #3]
 800751c:	f003 020f 	and.w	r2, r3, #15
 8007520:	6879      	ldr	r1, [r7, #4]
 8007522:	4613      	mov	r3, r2
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007530:	681b      	ldr	r3, [r3, #0]
}
 8007532:	4618      	mov	r0, r3
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b086      	sub	sp, #24
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
 800754a:	460b      	mov	r3, r1
 800754c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800754e:	7afb      	ldrb	r3, [r7, #11]
 8007550:	f003 020f 	and.w	r2, r3, #15
 8007554:	4613      	mov	r3, r2
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	3338      	adds	r3, #56	; 0x38
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4413      	add	r3, r2
 8007562:	3304      	adds	r3, #4
 8007564:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2200      	movs	r2, #0
 8007576:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	2201      	movs	r2, #1
 800757c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	b2da      	uxtb	r2, r3
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d102      	bne.n	8007598 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007598:	7afb      	ldrb	r3, [r7, #11]
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	6979      	ldr	r1, [r7, #20]
 80075b0:	f002 f958 	bl	8009864 <USB_EP0StartXfer>
 80075b4:	e008      	b.n	80075c8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	461a      	mov	r2, r3
 80075c2:	6979      	ldr	r1, [r7, #20]
 80075c4:	f001 ff06 	bl	80093d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	460b      	mov	r3, r1
 80075dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	f003 020f 	and.w	r2, r3, #15
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d901      	bls.n	80075f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e050      	b.n	8007692 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80075f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	da0f      	bge.n	8007618 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	f003 020f 	and.w	r2, r3, #15
 80075fe:	4613      	mov	r3, r2
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	3338      	adds	r3, #56	; 0x38
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	4413      	add	r3, r2
 800760c:	3304      	adds	r3, #4
 800760e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	705a      	strb	r2, [r3, #1]
 8007616:	e00d      	b.n	8007634 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007618:	78fa      	ldrb	r2, [r7, #3]
 800761a:	4613      	mov	r3, r2
 800761c:	00db      	lsls	r3, r3, #3
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	4413      	add	r3, r2
 800762a:	3304      	adds	r3, #4
 800762c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2201      	movs	r2, #1
 8007638:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	f003 030f 	and.w	r3, r3, #15
 8007640:	b2da      	uxtb	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800764c:	2b01      	cmp	r3, #1
 800764e:	d101      	bne.n	8007654 <HAL_PCD_EP_SetStall+0x82>
 8007650:	2302      	movs	r3, #2
 8007652:	e01e      	b.n	8007692 <HAL_PCD_EP_SetStall+0xc0>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68f9      	ldr	r1, [r7, #12]
 8007662:	4618      	mov	r0, r3
 8007664:	f002 fb96 	bl	8009d94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007668:	78fb      	ldrb	r3, [r7, #3]
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6818      	ldr	r0, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	b2d9      	uxtb	r1, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007682:	461a      	mov	r2, r3
 8007684:	f002 fd86 	bl	800a194 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	f003 020f 	and.w	r2, r3, #15
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d901      	bls.n	80076b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e042      	b.n	800773e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	da0f      	bge.n	80076e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	f003 020f 	and.w	r2, r3, #15
 80076c6:	4613      	mov	r3, r2
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	3338      	adds	r3, #56	; 0x38
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	4413      	add	r3, r2
 80076d4:	3304      	adds	r3, #4
 80076d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2201      	movs	r2, #1
 80076dc:	705a      	strb	r2, [r3, #1]
 80076de:	e00f      	b.n	8007700 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	f003 020f 	and.w	r2, r3, #15
 80076e6:	4613      	mov	r3, r2
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	4413      	add	r3, r2
 80076f6:	3304      	adds	r3, #4
 80076f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007706:	78fb      	ldrb	r3, [r7, #3]
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	b2da      	uxtb	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_PCD_EP_ClrStall+0x86>
 800771c:	2302      	movs	r3, #2
 800771e:	e00e      	b.n	800773e <HAL_PCD_EP_ClrStall+0xa4>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68f9      	ldr	r1, [r7, #12]
 800772e:	4618      	mov	r0, r3
 8007730:	f002 fb9e 	bl	8009e70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	460b      	mov	r3, r1
 8007750:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007756:	2b00      	cmp	r3, #0
 8007758:	da0c      	bge.n	8007774 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800775a:	78fb      	ldrb	r3, [r7, #3]
 800775c:	f003 020f 	and.w	r2, r3, #15
 8007760:	4613      	mov	r3, r2
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4413      	add	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	3338      	adds	r3, #56	; 0x38
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	4413      	add	r3, r2
 800776e:	3304      	adds	r3, #4
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	e00c      	b.n	800778e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	f003 020f 	and.w	r2, r3, #15
 800777a:	4613      	mov	r3, r2
 800777c:	00db      	lsls	r3, r3, #3
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	3304      	adds	r3, #4
 800778c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68f9      	ldr	r1, [r7, #12]
 8007794:	4618      	mov	r0, r3
 8007796:	f002 f9bd 	bl	8009b14 <USB_EPStopXfer>
 800779a:	4603      	mov	r3, r0
 800779c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800779e:	7afb      	ldrb	r3, [r7, #11]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	4613      	mov	r3, r2
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	3338      	adds	r3, #56	; 0x38
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	4413      	add	r3, r2
 80077cc:	3304      	adds	r3, #4
 80077ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a1a      	ldr	r2, [r3, #32]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d901      	bls.n	80077e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e06c      	b.n	80078ba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	699a      	ldr	r2, [r3, #24]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	69fa      	ldr	r2, [r7, #28]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d902      	bls.n	80077fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	3303      	adds	r3, #3
 8007800:	089b      	lsrs	r3, r3, #2
 8007802:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007804:	e02b      	b.n	800785e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	699a      	ldr	r2, [r3, #24]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	69fa      	ldr	r2, [r7, #28]
 8007818:	429a      	cmp	r2, r3
 800781a:	d902      	bls.n	8007822 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	3303      	adds	r3, #3
 8007826:	089b      	lsrs	r3, r3, #2
 8007828:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6919      	ldr	r1, [r3, #16]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	b2da      	uxtb	r2, r3
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800783a:	b2db      	uxtb	r3, r3
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	4603      	mov	r3, r0
 8007840:	6978      	ldr	r0, [r7, #20]
 8007842:	f002 fa11 	bl	8009c68 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	691a      	ldr	r2, [r3, #16]
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	441a      	add	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6a1a      	ldr	r2, [r3, #32]
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	441a      	add	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	b29b      	uxth	r3, r3
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	429a      	cmp	r2, r3
 8007872:	d809      	bhi.n	8007888 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6a1a      	ldr	r2, [r3, #32]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800787c:	429a      	cmp	r2, r3
 800787e:	d203      	bcs.n	8007888 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1be      	bne.n	8007806 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	699a      	ldr	r2, [r3, #24]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	429a      	cmp	r2, r3
 8007892:	d811      	bhi.n	80078b8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	2201      	movs	r2, #1
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	43db      	mvns	r3, r3
 80078ae:	6939      	ldr	r1, [r7, #16]
 80078b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078b4:	4013      	ands	r3, r2
 80078b6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3720      	adds	r7, #32
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b088      	sub	sp, #32
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	333c      	adds	r3, #60	; 0x3c
 80078dc:	3304      	adds	r3, #4
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d17b      	bne.n	80079f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f003 0308 	and.w	r3, r3, #8
 8007900:	2b00      	cmp	r3, #0
 8007902:	d015      	beq.n	8007930 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	4a61      	ldr	r2, [pc, #388]	; (8007a8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007908:	4293      	cmp	r3, r2
 800790a:	f240 80b9 	bls.w	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 80b3 	beq.w	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007926:	461a      	mov	r2, r3
 8007928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800792c:	6093      	str	r3, [r2, #8]
 800792e:	e0a7      	b.n	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d009      	beq.n	800794e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	461a      	mov	r2, r3
 8007948:	2320      	movs	r3, #32
 800794a:	6093      	str	r3, [r2, #8]
 800794c:	e098      	b.n	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007954:	2b00      	cmp	r3, #0
 8007956:	f040 8093 	bne.w	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	4a4b      	ldr	r2, [pc, #300]	; (8007a8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d90f      	bls.n	8007982 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007978:	461a      	mov	r2, r3
 800797a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800797e:	6093      	str	r3, [r2, #8]
 8007980:	e07e      	b.n	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	4613      	mov	r3, r2
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	4413      	add	r3, r2
 8007994:	3304      	adds	r3, #4
 8007996:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	69da      	ldr	r2, [r3, #28]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	0159      	lsls	r1, r3, #5
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	440b      	add	r3, r1
 80079a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ae:	1ad2      	subs	r2, r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d114      	bne.n	80079e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d109      	bne.n	80079d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80079cc:	461a      	mov	r2, r3
 80079ce:	2101      	movs	r1, #1
 80079d0:	f002 fbe0 	bl	800a194 <USB_EP0_OutStart>
 80079d4:	e006      	b.n	80079e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	441a      	add	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f004 fe98 	bl	800c720 <HAL_PCD_DataOutStageCallback>
 80079f0:	e046      	b.n	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	4a26      	ldr	r2, [pc, #152]	; (8007a90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d124      	bne.n	8007a44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a10:	461a      	mov	r2, r3
 8007a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a16:	6093      	str	r3, [r2, #8]
 8007a18:	e032      	b.n	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f003 0320 	and.w	r3, r3, #32
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d008      	beq.n	8007a36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a30:	461a      	mov	r2, r3
 8007a32:	2320      	movs	r3, #32
 8007a34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f004 fe6f 	bl	800c720 <HAL_PCD_DataOutStageCallback>
 8007a42:	e01d      	b.n	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d114      	bne.n	8007a74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	440b      	add	r3, r1
 8007a58:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d108      	bne.n	8007a74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	2100      	movs	r1, #0
 8007a70:	f002 fb90 	bl	800a194 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f004 fe50 	bl	800c720 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3720      	adds	r7, #32
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	4f54300a 	.word	0x4f54300a
 8007a90:	4f54310a 	.word	0x4f54310a

08007a94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	333c      	adds	r3, #60	; 0x3c
 8007aac:	3304      	adds	r3, #4
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4a15      	ldr	r2, [pc, #84]	; (8007b1c <PCD_EP_OutSetupPacket_int+0x88>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d90e      	bls.n	8007ae8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d009      	beq.n	8007ae8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ae6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f004 fe07 	bl	800c6fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <PCD_EP_OutSetupPacket_int+0x88>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d90c      	bls.n	8007b10 <PCD_EP_OutSetupPacket_int+0x7c>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d108      	bne.n	8007b10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6818      	ldr	r0, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b08:	461a      	mov	r2, r3
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	f002 fb42 	bl	800a194 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	4f54300a 	.word	0x4f54300a

08007b20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007b38:	78fb      	ldrb	r3, [r7, #3]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d107      	bne.n	8007b4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007b3e:	883b      	ldrh	r3, [r7, #0]
 8007b40:	0419      	lsls	r1, r3, #16
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8007b4c:	e028      	b.n	8007ba0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b54:	0c1b      	lsrs	r3, r3, #16
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	4413      	add	r3, r2
 8007b5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73fb      	strb	r3, [r7, #15]
 8007b60:	e00d      	b.n	8007b7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	3340      	adds	r3, #64	; 0x40
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	0c1b      	lsrs	r3, r3, #16
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	4413      	add	r3, r2
 8007b76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	73fb      	strb	r3, [r7, #15]
 8007b7e:	7bfa      	ldrb	r2, [r7, #15]
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d3ec      	bcc.n	8007b62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007b88:	883b      	ldrh	r3, [r7, #0]
 8007b8a:	0418      	lsls	r0, r3, #16
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6819      	ldr	r1, [r3, #0]
 8007b90:	78fb      	ldrb	r3, [r7, #3]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	4302      	orrs	r2, r0
 8007b98:	3340      	adds	r3, #64	; 0x40
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b083      	sub	sp, #12
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	887a      	ldrh	r2, [r7, #2]
 8007bc0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e267      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d075      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c06:	4b88      	ldr	r3, [pc, #544]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f003 030c 	and.w	r3, r3, #12
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d00c      	beq.n	8007c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c12:	4b85      	ldr	r3, [pc, #532]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c1a:	2b08      	cmp	r3, #8
 8007c1c:	d112      	bne.n	8007c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c1e:	4b82      	ldr	r3, [pc, #520]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c2a:	d10b      	bne.n	8007c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c2c:	4b7e      	ldr	r3, [pc, #504]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d05b      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x108>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d157      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e242      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c4c:	d106      	bne.n	8007c5c <HAL_RCC_OscConfig+0x74>
 8007c4e:	4b76      	ldr	r3, [pc, #472]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a75      	ldr	r2, [pc, #468]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	e01d      	b.n	8007c98 <HAL_RCC_OscConfig+0xb0>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c64:	d10c      	bne.n	8007c80 <HAL_RCC_OscConfig+0x98>
 8007c66:	4b70      	ldr	r3, [pc, #448]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a6f      	ldr	r2, [pc, #444]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	4b6d      	ldr	r3, [pc, #436]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a6c      	ldr	r2, [pc, #432]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	e00b      	b.n	8007c98 <HAL_RCC_OscConfig+0xb0>
 8007c80:	4b69      	ldr	r3, [pc, #420]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a68      	ldr	r2, [pc, #416]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	4b66      	ldr	r3, [pc, #408]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a65      	ldr	r2, [pc, #404]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d013      	beq.n	8007cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ca0:	f7fa fa26 	bl	80020f0 <HAL_GetTick>
 8007ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ca6:	e008      	b.n	8007cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ca8:	f7fa fa22 	bl	80020f0 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b64      	cmp	r3, #100	; 0x64
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e207      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cba:	4b5b      	ldr	r3, [pc, #364]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0f0      	beq.n	8007ca8 <HAL_RCC_OscConfig+0xc0>
 8007cc6:	e014      	b.n	8007cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cc8:	f7fa fa12 	bl	80020f0 <HAL_GetTick>
 8007ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cce:	e008      	b.n	8007ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cd0:	f7fa fa0e 	bl	80020f0 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b64      	cmp	r3, #100	; 0x64
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e1f3      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ce2:	4b51      	ldr	r3, [pc, #324]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1f0      	bne.n	8007cd0 <HAL_RCC_OscConfig+0xe8>
 8007cee:	e000      	b.n	8007cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d063      	beq.n	8007dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007cfe:	4b4a      	ldr	r3, [pc, #296]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 030c 	and.w	r3, r3, #12
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00b      	beq.n	8007d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d0a:	4b47      	ldr	r3, [pc, #284]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	d11c      	bne.n	8007d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d16:	4b44      	ldr	r3, [pc, #272]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d116      	bne.n	8007d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d22:	4b41      	ldr	r3, [pc, #260]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <HAL_RCC_OscConfig+0x152>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d001      	beq.n	8007d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e1c7      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d3a:	4b3b      	ldr	r3, [pc, #236]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	4937      	ldr	r1, [pc, #220]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d4e:	e03a      	b.n	8007dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d020      	beq.n	8007d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d58:	4b34      	ldr	r3, [pc, #208]	; (8007e2c <HAL_RCC_OscConfig+0x244>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d5e:	f7fa f9c7 	bl	80020f0 <HAL_GetTick>
 8007d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d64:	e008      	b.n	8007d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d66:	f7fa f9c3 	bl	80020f0 <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d901      	bls.n	8007d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e1a8      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d78:	4b2b      	ldr	r3, [pc, #172]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0302 	and.w	r3, r3, #2
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d0f0      	beq.n	8007d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d84:	4b28      	ldr	r3, [pc, #160]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	00db      	lsls	r3, r3, #3
 8007d92:	4925      	ldr	r1, [pc, #148]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	600b      	str	r3, [r1, #0]
 8007d98:	e015      	b.n	8007dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d9a:	4b24      	ldr	r3, [pc, #144]	; (8007e2c <HAL_RCC_OscConfig+0x244>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da0:	f7fa f9a6 	bl	80020f0 <HAL_GetTick>
 8007da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007da6:	e008      	b.n	8007dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007da8:	f7fa f9a2 	bl	80020f0 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d901      	bls.n	8007dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e187      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dba:	4b1b      	ldr	r3, [pc, #108]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1f0      	bne.n	8007da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0308 	and.w	r3, r3, #8
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d036      	beq.n	8007e40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d016      	beq.n	8007e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dda:	4b15      	ldr	r3, [pc, #84]	; (8007e30 <HAL_RCC_OscConfig+0x248>)
 8007ddc:	2201      	movs	r2, #1
 8007dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de0:	f7fa f986 	bl	80020f0 <HAL_GetTick>
 8007de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007de8:	f7fa f982 	bl	80020f0 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e167      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dfa:	4b0b      	ldr	r3, [pc, #44]	; (8007e28 <HAL_RCC_OscConfig+0x240>)
 8007dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0f0      	beq.n	8007de8 <HAL_RCC_OscConfig+0x200>
 8007e06:	e01b      	b.n	8007e40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e08:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <HAL_RCC_OscConfig+0x248>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e0e:	f7fa f96f 	bl	80020f0 <HAL_GetTick>
 8007e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e14:	e00e      	b.n	8007e34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e16:	f7fa f96b 	bl	80020f0 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d907      	bls.n	8007e34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e150      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
 8007e28:	40023800 	.word	0x40023800
 8007e2c:	42470000 	.word	0x42470000
 8007e30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e34:	4b88      	ldr	r3, [pc, #544]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1ea      	bne.n	8007e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0304 	and.w	r3, r3, #4
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 8097 	beq.w	8007f7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e52:	4b81      	ldr	r3, [pc, #516]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10f      	bne.n	8007e7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60bb      	str	r3, [r7, #8]
 8007e62:	4b7d      	ldr	r3, [pc, #500]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	4a7c      	ldr	r2, [pc, #496]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e6e:	4b7a      	ldr	r3, [pc, #488]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e76:	60bb      	str	r3, [r7, #8]
 8007e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e7e:	4b77      	ldr	r3, [pc, #476]	; (800805c <HAL_RCC_OscConfig+0x474>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d118      	bne.n	8007ebc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e8a:	4b74      	ldr	r3, [pc, #464]	; (800805c <HAL_RCC_OscConfig+0x474>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a73      	ldr	r2, [pc, #460]	; (800805c <HAL_RCC_OscConfig+0x474>)
 8007e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e96:	f7fa f92b 	bl	80020f0 <HAL_GetTick>
 8007e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e9c:	e008      	b.n	8007eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e9e:	f7fa f927 	bl	80020f0 <HAL_GetTick>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d901      	bls.n	8007eb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e10c      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eb0:	4b6a      	ldr	r3, [pc, #424]	; (800805c <HAL_RCC_OscConfig+0x474>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d0f0      	beq.n	8007e9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d106      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x2ea>
 8007ec4:	4b64      	ldr	r3, [pc, #400]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec8:	4a63      	ldr	r2, [pc, #396]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007eca:	f043 0301 	orr.w	r3, r3, #1
 8007ece:	6713      	str	r3, [r2, #112]	; 0x70
 8007ed0:	e01c      	b.n	8007f0c <HAL_RCC_OscConfig+0x324>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	2b05      	cmp	r3, #5
 8007ed8:	d10c      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x30c>
 8007eda:	4b5f      	ldr	r3, [pc, #380]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ede:	4a5e      	ldr	r2, [pc, #376]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007ee0:	f043 0304 	orr.w	r3, r3, #4
 8007ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ee6:	4b5c      	ldr	r3, [pc, #368]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eea:	4a5b      	ldr	r2, [pc, #364]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007eec:	f043 0301 	orr.w	r3, r3, #1
 8007ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ef2:	e00b      	b.n	8007f0c <HAL_RCC_OscConfig+0x324>
 8007ef4:	4b58      	ldr	r3, [pc, #352]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef8:	4a57      	ldr	r2, [pc, #348]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007efa:	f023 0301 	bic.w	r3, r3, #1
 8007efe:	6713      	str	r3, [r2, #112]	; 0x70
 8007f00:	4b55      	ldr	r3, [pc, #340]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f04:	4a54      	ldr	r2, [pc, #336]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007f06:	f023 0304 	bic.w	r3, r3, #4
 8007f0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d015      	beq.n	8007f40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f14:	f7fa f8ec 	bl	80020f0 <HAL_GetTick>
 8007f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f1a:	e00a      	b.n	8007f32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f1c:	f7fa f8e8 	bl	80020f0 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d901      	bls.n	8007f32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e0cb      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f32:	4b49      	ldr	r3, [pc, #292]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d0ee      	beq.n	8007f1c <HAL_RCC_OscConfig+0x334>
 8007f3e:	e014      	b.n	8007f6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f40:	f7fa f8d6 	bl	80020f0 <HAL_GetTick>
 8007f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f46:	e00a      	b.n	8007f5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f48:	f7fa f8d2 	bl	80020f0 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d901      	bls.n	8007f5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e0b5      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f5e:	4b3e      	ldr	r3, [pc, #248]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1ee      	bne.n	8007f48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f6a:	7dfb      	ldrb	r3, [r7, #23]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d105      	bne.n	8007f7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f70:	4b39      	ldr	r3, [pc, #228]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f74:	4a38      	ldr	r2, [pc, #224]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 80a1 	beq.w	80080c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f86:	4b34      	ldr	r3, [pc, #208]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 030c 	and.w	r3, r3, #12
 8007f8e:	2b08      	cmp	r3, #8
 8007f90:	d05c      	beq.n	800804c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d141      	bne.n	800801e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f9a:	4b31      	ldr	r3, [pc, #196]	; (8008060 <HAL_RCC_OscConfig+0x478>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fa0:	f7fa f8a6 	bl	80020f0 <HAL_GetTick>
 8007fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fa6:	e008      	b.n	8007fba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fa8:	f7fa f8a2 	bl	80020f0 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e087      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fba:	4b27      	ldr	r3, [pc, #156]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1f0      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	69da      	ldr	r2, [r3, #28]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	019b      	lsls	r3, r3, #6
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fdc:	085b      	lsrs	r3, r3, #1
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	041b      	lsls	r3, r3, #16
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	061b      	lsls	r3, r3, #24
 8007fea:	491b      	ldr	r1, [pc, #108]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ff0:	4b1b      	ldr	r3, [pc, #108]	; (8008060 <HAL_RCC_OscConfig+0x478>)
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ff6:	f7fa f87b 	bl	80020f0 <HAL_GetTick>
 8007ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ffc:	e008      	b.n	8008010 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ffe:	f7fa f877 	bl	80020f0 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	2b02      	cmp	r3, #2
 800800a:	d901      	bls.n	8008010 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e05c      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008010:	4b11      	ldr	r3, [pc, #68]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0f0      	beq.n	8007ffe <HAL_RCC_OscConfig+0x416>
 800801c:	e054      	b.n	80080c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800801e:	4b10      	ldr	r3, [pc, #64]	; (8008060 <HAL_RCC_OscConfig+0x478>)
 8008020:	2200      	movs	r2, #0
 8008022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008024:	f7fa f864 	bl	80020f0 <HAL_GetTick>
 8008028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800802a:	e008      	b.n	800803e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800802c:	f7fa f860 	bl	80020f0 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d901      	bls.n	800803e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e045      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800803e:	4b06      	ldr	r3, [pc, #24]	; (8008058 <HAL_RCC_OscConfig+0x470>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1f0      	bne.n	800802c <HAL_RCC_OscConfig+0x444>
 800804a:	e03d      	b.n	80080c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d107      	bne.n	8008064 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e038      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
 8008058:	40023800 	.word	0x40023800
 800805c:	40007000 	.word	0x40007000
 8008060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008064:	4b1b      	ldr	r3, [pc, #108]	; (80080d4 <HAL_RCC_OscConfig+0x4ec>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d028      	beq.n	80080c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800807c:	429a      	cmp	r2, r3
 800807e:	d121      	bne.n	80080c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800808a:	429a      	cmp	r2, r3
 800808c:	d11a      	bne.n	80080c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008094:	4013      	ands	r3, r2
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800809a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800809c:	4293      	cmp	r3, r2
 800809e:	d111      	bne.n	80080c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080aa:	085b      	lsrs	r3, r3, #1
 80080ac:	3b01      	subs	r3, #1
 80080ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d107      	bne.n	80080c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d001      	beq.n	80080c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40023800 	.word	0x40023800

080080d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e0cc      	b.n	8008286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80080ec:	4b68      	ldr	r3, [pc, #416]	; (8008290 <HAL_RCC_ClockConfig+0x1b8>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d90c      	bls.n	8008114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080fa:	4b65      	ldr	r3, [pc, #404]	; (8008290 <HAL_RCC_ClockConfig+0x1b8>)
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	b2d2      	uxtb	r2, r2
 8008100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008102:	4b63      	ldr	r3, [pc, #396]	; (8008290 <HAL_RCC_ClockConfig+0x1b8>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	429a      	cmp	r2, r3
 800810e:	d001      	beq.n	8008114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e0b8      	b.n	8008286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d020      	beq.n	8008162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b00      	cmp	r3, #0
 800812a:	d005      	beq.n	8008138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800812c:	4b59      	ldr	r3, [pc, #356]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	4a58      	ldr	r2, [pc, #352]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 8008132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0308 	and.w	r3, r3, #8
 8008140:	2b00      	cmp	r3, #0
 8008142:	d005      	beq.n	8008150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008144:	4b53      	ldr	r3, [pc, #332]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	4a52      	ldr	r2, [pc, #328]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 800814a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800814e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008150:	4b50      	ldr	r3, [pc, #320]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	494d      	ldr	r1, [pc, #308]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 800815e:	4313      	orrs	r3, r2
 8008160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d044      	beq.n	80081f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d107      	bne.n	8008186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008176:	4b47      	ldr	r3, [pc, #284]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d119      	bne.n	80081b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e07f      	b.n	8008286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	2b02      	cmp	r3, #2
 800818c:	d003      	beq.n	8008196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008192:	2b03      	cmp	r3, #3
 8008194:	d107      	bne.n	80081a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008196:	4b3f      	ldr	r3, [pc, #252]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d109      	bne.n	80081b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e06f      	b.n	8008286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081a6:	4b3b      	ldr	r3, [pc, #236]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e067      	b.n	8008286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081b6:	4b37      	ldr	r3, [pc, #220]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f023 0203 	bic.w	r2, r3, #3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	4934      	ldr	r1, [pc, #208]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80081c8:	f7f9 ff92 	bl	80020f0 <HAL_GetTick>
 80081cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081ce:	e00a      	b.n	80081e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081d0:	f7f9 ff8e 	bl	80020f0 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	f241 3288 	movw	r2, #5000	; 0x1388
 80081de:	4293      	cmp	r3, r2
 80081e0:	d901      	bls.n	80081e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e04f      	b.n	8008286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081e6:	4b2b      	ldr	r3, [pc, #172]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f003 020c 	and.w	r2, r3, #12
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d1eb      	bne.n	80081d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80081f8:	4b25      	ldr	r3, [pc, #148]	; (8008290 <HAL_RCC_ClockConfig+0x1b8>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d20c      	bcs.n	8008220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008206:	4b22      	ldr	r3, [pc, #136]	; (8008290 <HAL_RCC_ClockConfig+0x1b8>)
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	b2d2      	uxtb	r2, r2
 800820c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800820e:	4b20      	ldr	r3, [pc, #128]	; (8008290 <HAL_RCC_ClockConfig+0x1b8>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0307 	and.w	r3, r3, #7
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d001      	beq.n	8008220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e032      	b.n	8008286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0304 	and.w	r3, r3, #4
 8008228:	2b00      	cmp	r3, #0
 800822a:	d008      	beq.n	800823e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800822c:	4b19      	ldr	r3, [pc, #100]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	4916      	ldr	r1, [pc, #88]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 800823a:	4313      	orrs	r3, r2
 800823c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0308 	and.w	r3, r3, #8
 8008246:	2b00      	cmp	r3, #0
 8008248:	d009      	beq.n	800825e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800824a:	4b12      	ldr	r3, [pc, #72]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	490e      	ldr	r1, [pc, #56]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 800825a:	4313      	orrs	r3, r2
 800825c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800825e:	f000 f821 	bl	80082a4 <HAL_RCC_GetSysClockFreq>
 8008262:	4602      	mov	r2, r0
 8008264:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <HAL_RCC_ClockConfig+0x1bc>)
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	091b      	lsrs	r3, r3, #4
 800826a:	f003 030f 	and.w	r3, r3, #15
 800826e:	490a      	ldr	r1, [pc, #40]	; (8008298 <HAL_RCC_ClockConfig+0x1c0>)
 8008270:	5ccb      	ldrb	r3, [r1, r3]
 8008272:	fa22 f303 	lsr.w	r3, r2, r3
 8008276:	4a09      	ldr	r2, [pc, #36]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800827a:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f7f9 fef2 	bl	8002068 <HAL_InitTick>

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	40023c00 	.word	0x40023c00
 8008294:	40023800 	.word	0x40023800
 8008298:	080100a0 	.word	0x080100a0
 800829c:	20000010 	.word	0x20000010
 80082a0:	20000014 	.word	0x20000014

080082a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082a8:	b090      	sub	sp, #64	; 0x40
 80082aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	637b      	str	r3, [r7, #52]	; 0x34
 80082b0:	2300      	movs	r3, #0
 80082b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082b4:	2300      	movs	r3, #0
 80082b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082bc:	4b59      	ldr	r3, [pc, #356]	; (8008424 <HAL_RCC_GetSysClockFreq+0x180>)
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f003 030c 	and.w	r3, r3, #12
 80082c4:	2b08      	cmp	r3, #8
 80082c6:	d00d      	beq.n	80082e4 <HAL_RCC_GetSysClockFreq+0x40>
 80082c8:	2b08      	cmp	r3, #8
 80082ca:	f200 80a1 	bhi.w	8008410 <HAL_RCC_GetSysClockFreq+0x16c>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <HAL_RCC_GetSysClockFreq+0x34>
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	d003      	beq.n	80082de <HAL_RCC_GetSysClockFreq+0x3a>
 80082d6:	e09b      	b.n	8008410 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80082d8:	4b53      	ldr	r3, [pc, #332]	; (8008428 <HAL_RCC_GetSysClockFreq+0x184>)
 80082da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80082dc:	e09b      	b.n	8008416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80082de:	4b53      	ldr	r3, [pc, #332]	; (800842c <HAL_RCC_GetSysClockFreq+0x188>)
 80082e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80082e2:	e098      	b.n	8008416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082e4:	4b4f      	ldr	r3, [pc, #316]	; (8008424 <HAL_RCC_GetSysClockFreq+0x180>)
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80082ee:	4b4d      	ldr	r3, [pc, #308]	; (8008424 <HAL_RCC_GetSysClockFreq+0x180>)
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d028      	beq.n	800834c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082fa:	4b4a      	ldr	r3, [pc, #296]	; (8008424 <HAL_RCC_GetSysClockFreq+0x180>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	099b      	lsrs	r3, r3, #6
 8008300:	2200      	movs	r2, #0
 8008302:	623b      	str	r3, [r7, #32]
 8008304:	627a      	str	r2, [r7, #36]	; 0x24
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800830c:	2100      	movs	r1, #0
 800830e:	4b47      	ldr	r3, [pc, #284]	; (800842c <HAL_RCC_GetSysClockFreq+0x188>)
 8008310:	fb03 f201 	mul.w	r2, r3, r1
 8008314:	2300      	movs	r3, #0
 8008316:	fb00 f303 	mul.w	r3, r0, r3
 800831a:	4413      	add	r3, r2
 800831c:	4a43      	ldr	r2, [pc, #268]	; (800842c <HAL_RCC_GetSysClockFreq+0x188>)
 800831e:	fba0 1202 	umull	r1, r2, r0, r2
 8008322:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008324:	460a      	mov	r2, r1
 8008326:	62ba      	str	r2, [r7, #40]	; 0x28
 8008328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800832a:	4413      	add	r3, r2
 800832c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800832e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008330:	2200      	movs	r2, #0
 8008332:	61bb      	str	r3, [r7, #24]
 8008334:	61fa      	str	r2, [r7, #28]
 8008336:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800833a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800833e:	f7f8 fc8b 	bl	8000c58 <__aeabi_uldivmod>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4613      	mov	r3, r2
 8008348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800834a:	e053      	b.n	80083f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800834c:	4b35      	ldr	r3, [pc, #212]	; (8008424 <HAL_RCC_GetSysClockFreq+0x180>)
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	099b      	lsrs	r3, r3, #6
 8008352:	2200      	movs	r2, #0
 8008354:	613b      	str	r3, [r7, #16]
 8008356:	617a      	str	r2, [r7, #20]
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800835e:	f04f 0b00 	mov.w	fp, #0
 8008362:	4652      	mov	r2, sl
 8008364:	465b      	mov	r3, fp
 8008366:	f04f 0000 	mov.w	r0, #0
 800836a:	f04f 0100 	mov.w	r1, #0
 800836e:	0159      	lsls	r1, r3, #5
 8008370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008374:	0150      	lsls	r0, r2, #5
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	ebb2 080a 	subs.w	r8, r2, sl
 800837e:	eb63 090b 	sbc.w	r9, r3, fp
 8008382:	f04f 0200 	mov.w	r2, #0
 8008386:	f04f 0300 	mov.w	r3, #0
 800838a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800838e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008392:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008396:	ebb2 0408 	subs.w	r4, r2, r8
 800839a:	eb63 0509 	sbc.w	r5, r3, r9
 800839e:	f04f 0200 	mov.w	r2, #0
 80083a2:	f04f 0300 	mov.w	r3, #0
 80083a6:	00eb      	lsls	r3, r5, #3
 80083a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083ac:	00e2      	lsls	r2, r4, #3
 80083ae:	4614      	mov	r4, r2
 80083b0:	461d      	mov	r5, r3
 80083b2:	eb14 030a 	adds.w	r3, r4, sl
 80083b6:	603b      	str	r3, [r7, #0]
 80083b8:	eb45 030b 	adc.w	r3, r5, fp
 80083bc:	607b      	str	r3, [r7, #4]
 80083be:	f04f 0200 	mov.w	r2, #0
 80083c2:	f04f 0300 	mov.w	r3, #0
 80083c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80083ca:	4629      	mov	r1, r5
 80083cc:	028b      	lsls	r3, r1, #10
 80083ce:	4621      	mov	r1, r4
 80083d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80083d4:	4621      	mov	r1, r4
 80083d6:	028a      	lsls	r2, r1, #10
 80083d8:	4610      	mov	r0, r2
 80083da:	4619      	mov	r1, r3
 80083dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083de:	2200      	movs	r2, #0
 80083e0:	60bb      	str	r3, [r7, #8]
 80083e2:	60fa      	str	r2, [r7, #12]
 80083e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083e8:	f7f8 fc36 	bl	8000c58 <__aeabi_uldivmod>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4613      	mov	r3, r2
 80083f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80083f4:	4b0b      	ldr	r3, [pc, #44]	; (8008424 <HAL_RCC_GetSysClockFreq+0x180>)
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	0c1b      	lsrs	r3, r3, #16
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	3301      	adds	r3, #1
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008404:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	fbb2 f3f3 	udiv	r3, r2, r3
 800840c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800840e:	e002      	b.n	8008416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008410:	4b05      	ldr	r3, [pc, #20]	; (8008428 <HAL_RCC_GetSysClockFreq+0x184>)
 8008412:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008418:	4618      	mov	r0, r3
 800841a:	3740      	adds	r7, #64	; 0x40
 800841c:	46bd      	mov	sp, r7
 800841e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008422:	bf00      	nop
 8008424:	40023800 	.word	0x40023800
 8008428:	00f42400 	.word	0x00f42400
 800842c:	017d7840 	.word	0x017d7840

08008430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008430:	b480      	push	{r7}
 8008432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008434:	4b03      	ldr	r3, [pc, #12]	; (8008444 <HAL_RCC_GetHCLKFreq+0x14>)
 8008436:	681b      	ldr	r3, [r3, #0]
}
 8008438:	4618      	mov	r0, r3
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	20000010 	.word	0x20000010

08008448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800844c:	f7ff fff0 	bl	8008430 <HAL_RCC_GetHCLKFreq>
 8008450:	4602      	mov	r2, r0
 8008452:	4b05      	ldr	r3, [pc, #20]	; (8008468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	0a9b      	lsrs	r3, r3, #10
 8008458:	f003 0307 	and.w	r3, r3, #7
 800845c:	4903      	ldr	r1, [pc, #12]	; (800846c <HAL_RCC_GetPCLK1Freq+0x24>)
 800845e:	5ccb      	ldrb	r3, [r1, r3]
 8008460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008464:	4618      	mov	r0, r3
 8008466:	bd80      	pop	{r7, pc}
 8008468:	40023800 	.word	0x40023800
 800846c:	080100b0 	.word	0x080100b0

08008470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008474:	f7ff ffdc 	bl	8008430 <HAL_RCC_GetHCLKFreq>
 8008478:	4602      	mov	r2, r0
 800847a:	4b05      	ldr	r3, [pc, #20]	; (8008490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	0b5b      	lsrs	r3, r3, #13
 8008480:	f003 0307 	and.w	r3, r3, #7
 8008484:	4903      	ldr	r1, [pc, #12]	; (8008494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008486:	5ccb      	ldrb	r3, [r1, r3]
 8008488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800848c:	4618      	mov	r0, r3
 800848e:	bd80      	pop	{r7, pc}
 8008490:	40023800 	.word	0x40023800
 8008494:	080100b0 	.word	0x080100b0

08008498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e03f      	b.n	800852a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d106      	bne.n	80084c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7f9 fd3e 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2224      	movs	r2, #36	; 0x24
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f829 	bl	8008534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	691a      	ldr	r2, [r3, #16]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	695a      	ldr	r2, [r3, #20]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2220      	movs	r2, #32
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2220      	movs	r2, #32
 8008524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008538:	b0c0      	sub	sp, #256	; 0x100
 800853a:	af00      	add	r7, sp, #0
 800853c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800854c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008550:	68d9      	ldr	r1, [r3, #12]
 8008552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	ea40 0301 	orr.w	r3, r0, r1
 800855c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800855e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	431a      	orrs	r2, r3
 800856c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	431a      	orrs	r2, r3
 8008574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008578:	69db      	ldr	r3, [r3, #28]
 800857a:	4313      	orrs	r3, r2
 800857c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800858c:	f021 010c 	bic.w	r1, r1, #12
 8008590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800859a:	430b      	orrs	r3, r1
 800859c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800859e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80085aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ae:	6999      	ldr	r1, [r3, #24]
 80085b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	ea40 0301 	orr.w	r3, r0, r1
 80085ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4b8f      	ldr	r3, [pc, #572]	; (8008800 <UART_SetConfig+0x2cc>)
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d005      	beq.n	80085d4 <UART_SetConfig+0xa0>
 80085c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	4b8d      	ldr	r3, [pc, #564]	; (8008804 <UART_SetConfig+0x2d0>)
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d104      	bne.n	80085de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085d4:	f7ff ff4c 	bl	8008470 <HAL_RCC_GetPCLK2Freq>
 80085d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80085dc:	e003      	b.n	80085e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085de:	f7ff ff33 	bl	8008448 <HAL_RCC_GetPCLK1Freq>
 80085e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085f0:	f040 810c 	bne.w	800880c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085f8:	2200      	movs	r2, #0
 80085fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008602:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008606:	4622      	mov	r2, r4
 8008608:	462b      	mov	r3, r5
 800860a:	1891      	adds	r1, r2, r2
 800860c:	65b9      	str	r1, [r7, #88]	; 0x58
 800860e:	415b      	adcs	r3, r3
 8008610:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008612:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008616:	4621      	mov	r1, r4
 8008618:	eb12 0801 	adds.w	r8, r2, r1
 800861c:	4629      	mov	r1, r5
 800861e:	eb43 0901 	adc.w	r9, r3, r1
 8008622:	f04f 0200 	mov.w	r2, #0
 8008626:	f04f 0300 	mov.w	r3, #0
 800862a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800862e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008636:	4690      	mov	r8, r2
 8008638:	4699      	mov	r9, r3
 800863a:	4623      	mov	r3, r4
 800863c:	eb18 0303 	adds.w	r3, r8, r3
 8008640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008644:	462b      	mov	r3, r5
 8008646:	eb49 0303 	adc.w	r3, r9, r3
 800864a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800864e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800865a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800865e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008662:	460b      	mov	r3, r1
 8008664:	18db      	adds	r3, r3, r3
 8008666:	653b      	str	r3, [r7, #80]	; 0x50
 8008668:	4613      	mov	r3, r2
 800866a:	eb42 0303 	adc.w	r3, r2, r3
 800866e:	657b      	str	r3, [r7, #84]	; 0x54
 8008670:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008674:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008678:	f7f8 faee 	bl	8000c58 <__aeabi_uldivmod>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4b61      	ldr	r3, [pc, #388]	; (8008808 <UART_SetConfig+0x2d4>)
 8008682:	fba3 2302 	umull	r2, r3, r3, r2
 8008686:	095b      	lsrs	r3, r3, #5
 8008688:	011c      	lsls	r4, r3, #4
 800868a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800868e:	2200      	movs	r2, #0
 8008690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008694:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008698:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800869c:	4642      	mov	r2, r8
 800869e:	464b      	mov	r3, r9
 80086a0:	1891      	adds	r1, r2, r2
 80086a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80086a4:	415b      	adcs	r3, r3
 80086a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086ac:	4641      	mov	r1, r8
 80086ae:	eb12 0a01 	adds.w	sl, r2, r1
 80086b2:	4649      	mov	r1, r9
 80086b4:	eb43 0b01 	adc.w	fp, r3, r1
 80086b8:	f04f 0200 	mov.w	r2, #0
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086cc:	4692      	mov	sl, r2
 80086ce:	469b      	mov	fp, r3
 80086d0:	4643      	mov	r3, r8
 80086d2:	eb1a 0303 	adds.w	r3, sl, r3
 80086d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086da:	464b      	mov	r3, r9
 80086dc:	eb4b 0303 	adc.w	r3, fp, r3
 80086e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80086f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80086f8:	460b      	mov	r3, r1
 80086fa:	18db      	adds	r3, r3, r3
 80086fc:	643b      	str	r3, [r7, #64]	; 0x40
 80086fe:	4613      	mov	r3, r2
 8008700:	eb42 0303 	adc.w	r3, r2, r3
 8008704:	647b      	str	r3, [r7, #68]	; 0x44
 8008706:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800870a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800870e:	f7f8 faa3 	bl	8000c58 <__aeabi_uldivmod>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4611      	mov	r1, r2
 8008718:	4b3b      	ldr	r3, [pc, #236]	; (8008808 <UART_SetConfig+0x2d4>)
 800871a:	fba3 2301 	umull	r2, r3, r3, r1
 800871e:	095b      	lsrs	r3, r3, #5
 8008720:	2264      	movs	r2, #100	; 0x64
 8008722:	fb02 f303 	mul.w	r3, r2, r3
 8008726:	1acb      	subs	r3, r1, r3
 8008728:	00db      	lsls	r3, r3, #3
 800872a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800872e:	4b36      	ldr	r3, [pc, #216]	; (8008808 <UART_SetConfig+0x2d4>)
 8008730:	fba3 2302 	umull	r2, r3, r3, r2
 8008734:	095b      	lsrs	r3, r3, #5
 8008736:	005b      	lsls	r3, r3, #1
 8008738:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800873c:	441c      	add	r4, r3
 800873e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008742:	2200      	movs	r2, #0
 8008744:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008748:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800874c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008750:	4642      	mov	r2, r8
 8008752:	464b      	mov	r3, r9
 8008754:	1891      	adds	r1, r2, r2
 8008756:	63b9      	str	r1, [r7, #56]	; 0x38
 8008758:	415b      	adcs	r3, r3
 800875a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800875c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008760:	4641      	mov	r1, r8
 8008762:	1851      	adds	r1, r2, r1
 8008764:	6339      	str	r1, [r7, #48]	; 0x30
 8008766:	4649      	mov	r1, r9
 8008768:	414b      	adcs	r3, r1
 800876a:	637b      	str	r3, [r7, #52]	; 0x34
 800876c:	f04f 0200 	mov.w	r2, #0
 8008770:	f04f 0300 	mov.w	r3, #0
 8008774:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008778:	4659      	mov	r1, fp
 800877a:	00cb      	lsls	r3, r1, #3
 800877c:	4651      	mov	r1, sl
 800877e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008782:	4651      	mov	r1, sl
 8008784:	00ca      	lsls	r2, r1, #3
 8008786:	4610      	mov	r0, r2
 8008788:	4619      	mov	r1, r3
 800878a:	4603      	mov	r3, r0
 800878c:	4642      	mov	r2, r8
 800878e:	189b      	adds	r3, r3, r2
 8008790:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008794:	464b      	mov	r3, r9
 8008796:	460a      	mov	r2, r1
 8008798:	eb42 0303 	adc.w	r3, r2, r3
 800879c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80087ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80087b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80087b4:	460b      	mov	r3, r1
 80087b6:	18db      	adds	r3, r3, r3
 80087b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80087ba:	4613      	mov	r3, r2
 80087bc:	eb42 0303 	adc.w	r3, r2, r3
 80087c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80087ca:	f7f8 fa45 	bl	8000c58 <__aeabi_uldivmod>
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	4b0d      	ldr	r3, [pc, #52]	; (8008808 <UART_SetConfig+0x2d4>)
 80087d4:	fba3 1302 	umull	r1, r3, r3, r2
 80087d8:	095b      	lsrs	r3, r3, #5
 80087da:	2164      	movs	r1, #100	; 0x64
 80087dc:	fb01 f303 	mul.w	r3, r1, r3
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	3332      	adds	r3, #50	; 0x32
 80087e6:	4a08      	ldr	r2, [pc, #32]	; (8008808 <UART_SetConfig+0x2d4>)
 80087e8:	fba2 2303 	umull	r2, r3, r2, r3
 80087ec:	095b      	lsrs	r3, r3, #5
 80087ee:	f003 0207 	and.w	r2, r3, #7
 80087f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4422      	add	r2, r4
 80087fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087fc:	e105      	b.n	8008a0a <UART_SetConfig+0x4d6>
 80087fe:	bf00      	nop
 8008800:	40011000 	.word	0x40011000
 8008804:	40011400 	.word	0x40011400
 8008808:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800880c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008810:	2200      	movs	r2, #0
 8008812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008816:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800881a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800881e:	4642      	mov	r2, r8
 8008820:	464b      	mov	r3, r9
 8008822:	1891      	adds	r1, r2, r2
 8008824:	6239      	str	r1, [r7, #32]
 8008826:	415b      	adcs	r3, r3
 8008828:	627b      	str	r3, [r7, #36]	; 0x24
 800882a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800882e:	4641      	mov	r1, r8
 8008830:	1854      	adds	r4, r2, r1
 8008832:	4649      	mov	r1, r9
 8008834:	eb43 0501 	adc.w	r5, r3, r1
 8008838:	f04f 0200 	mov.w	r2, #0
 800883c:	f04f 0300 	mov.w	r3, #0
 8008840:	00eb      	lsls	r3, r5, #3
 8008842:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008846:	00e2      	lsls	r2, r4, #3
 8008848:	4614      	mov	r4, r2
 800884a:	461d      	mov	r5, r3
 800884c:	4643      	mov	r3, r8
 800884e:	18e3      	adds	r3, r4, r3
 8008850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008854:	464b      	mov	r3, r9
 8008856:	eb45 0303 	adc.w	r3, r5, r3
 800885a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800885e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800886a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800886e:	f04f 0200 	mov.w	r2, #0
 8008872:	f04f 0300 	mov.w	r3, #0
 8008876:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800887a:	4629      	mov	r1, r5
 800887c:	008b      	lsls	r3, r1, #2
 800887e:	4621      	mov	r1, r4
 8008880:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008884:	4621      	mov	r1, r4
 8008886:	008a      	lsls	r2, r1, #2
 8008888:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800888c:	f7f8 f9e4 	bl	8000c58 <__aeabi_uldivmod>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4b60      	ldr	r3, [pc, #384]	; (8008a18 <UART_SetConfig+0x4e4>)
 8008896:	fba3 2302 	umull	r2, r3, r3, r2
 800889a:	095b      	lsrs	r3, r3, #5
 800889c:	011c      	lsls	r4, r3, #4
 800889e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80088ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80088b0:	4642      	mov	r2, r8
 80088b2:	464b      	mov	r3, r9
 80088b4:	1891      	adds	r1, r2, r2
 80088b6:	61b9      	str	r1, [r7, #24]
 80088b8:	415b      	adcs	r3, r3
 80088ba:	61fb      	str	r3, [r7, #28]
 80088bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088c0:	4641      	mov	r1, r8
 80088c2:	1851      	adds	r1, r2, r1
 80088c4:	6139      	str	r1, [r7, #16]
 80088c6:	4649      	mov	r1, r9
 80088c8:	414b      	adcs	r3, r1
 80088ca:	617b      	str	r3, [r7, #20]
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	f04f 0300 	mov.w	r3, #0
 80088d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088d8:	4659      	mov	r1, fp
 80088da:	00cb      	lsls	r3, r1, #3
 80088dc:	4651      	mov	r1, sl
 80088de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088e2:	4651      	mov	r1, sl
 80088e4:	00ca      	lsls	r2, r1, #3
 80088e6:	4610      	mov	r0, r2
 80088e8:	4619      	mov	r1, r3
 80088ea:	4603      	mov	r3, r0
 80088ec:	4642      	mov	r2, r8
 80088ee:	189b      	adds	r3, r3, r2
 80088f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088f4:	464b      	mov	r3, r9
 80088f6:	460a      	mov	r2, r1
 80088f8:	eb42 0303 	adc.w	r3, r2, r3
 80088fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	67bb      	str	r3, [r7, #120]	; 0x78
 800890a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800890c:	f04f 0200 	mov.w	r2, #0
 8008910:	f04f 0300 	mov.w	r3, #0
 8008914:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008918:	4649      	mov	r1, r9
 800891a:	008b      	lsls	r3, r1, #2
 800891c:	4641      	mov	r1, r8
 800891e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008922:	4641      	mov	r1, r8
 8008924:	008a      	lsls	r2, r1, #2
 8008926:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800892a:	f7f8 f995 	bl	8000c58 <__aeabi_uldivmod>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	4b39      	ldr	r3, [pc, #228]	; (8008a18 <UART_SetConfig+0x4e4>)
 8008934:	fba3 1302 	umull	r1, r3, r3, r2
 8008938:	095b      	lsrs	r3, r3, #5
 800893a:	2164      	movs	r1, #100	; 0x64
 800893c:	fb01 f303 	mul.w	r3, r1, r3
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	011b      	lsls	r3, r3, #4
 8008944:	3332      	adds	r3, #50	; 0x32
 8008946:	4a34      	ldr	r2, [pc, #208]	; (8008a18 <UART_SetConfig+0x4e4>)
 8008948:	fba2 2303 	umull	r2, r3, r2, r3
 800894c:	095b      	lsrs	r3, r3, #5
 800894e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008952:	441c      	add	r4, r3
 8008954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008958:	2200      	movs	r2, #0
 800895a:	673b      	str	r3, [r7, #112]	; 0x70
 800895c:	677a      	str	r2, [r7, #116]	; 0x74
 800895e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008962:	4642      	mov	r2, r8
 8008964:	464b      	mov	r3, r9
 8008966:	1891      	adds	r1, r2, r2
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	415b      	adcs	r3, r3
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008972:	4641      	mov	r1, r8
 8008974:	1851      	adds	r1, r2, r1
 8008976:	6039      	str	r1, [r7, #0]
 8008978:	4649      	mov	r1, r9
 800897a:	414b      	adcs	r3, r1
 800897c:	607b      	str	r3, [r7, #4]
 800897e:	f04f 0200 	mov.w	r2, #0
 8008982:	f04f 0300 	mov.w	r3, #0
 8008986:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800898a:	4659      	mov	r1, fp
 800898c:	00cb      	lsls	r3, r1, #3
 800898e:	4651      	mov	r1, sl
 8008990:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008994:	4651      	mov	r1, sl
 8008996:	00ca      	lsls	r2, r1, #3
 8008998:	4610      	mov	r0, r2
 800899a:	4619      	mov	r1, r3
 800899c:	4603      	mov	r3, r0
 800899e:	4642      	mov	r2, r8
 80089a0:	189b      	adds	r3, r3, r2
 80089a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80089a4:	464b      	mov	r3, r9
 80089a6:	460a      	mov	r2, r1
 80089a8:	eb42 0303 	adc.w	r3, r2, r3
 80089ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	663b      	str	r3, [r7, #96]	; 0x60
 80089b8:	667a      	str	r2, [r7, #100]	; 0x64
 80089ba:	f04f 0200 	mov.w	r2, #0
 80089be:	f04f 0300 	mov.w	r3, #0
 80089c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80089c6:	4649      	mov	r1, r9
 80089c8:	008b      	lsls	r3, r1, #2
 80089ca:	4641      	mov	r1, r8
 80089cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089d0:	4641      	mov	r1, r8
 80089d2:	008a      	lsls	r2, r1, #2
 80089d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80089d8:	f7f8 f93e 	bl	8000c58 <__aeabi_uldivmod>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4b0d      	ldr	r3, [pc, #52]	; (8008a18 <UART_SetConfig+0x4e4>)
 80089e2:	fba3 1302 	umull	r1, r3, r3, r2
 80089e6:	095b      	lsrs	r3, r3, #5
 80089e8:	2164      	movs	r1, #100	; 0x64
 80089ea:	fb01 f303 	mul.w	r3, r1, r3
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	3332      	adds	r3, #50	; 0x32
 80089f4:	4a08      	ldr	r2, [pc, #32]	; (8008a18 <UART_SetConfig+0x4e4>)
 80089f6:	fba2 2303 	umull	r2, r3, r2, r3
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	f003 020f 	and.w	r2, r3, #15
 8008a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4422      	add	r2, r4
 8008a08:	609a      	str	r2, [r3, #8]
}
 8008a0a:	bf00      	nop
 8008a0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008a10:	46bd      	mov	sp, r7
 8008a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a16:	bf00      	nop
 8008a18:	51eb851f 	.word	0x51eb851f

08008a1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	f107 001c 	add.w	r0, r7, #28
 8008a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d122      	bne.n	8008a7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d105      	bne.n	8008a6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f001 fbee 	bl	800a250 <USB_CoreReset>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]
 8008a78:	e01a      	b.n	8008ab0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f001 fbe2 	bl	800a250 <USB_CoreReset>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d106      	bne.n	8008aa4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	639a      	str	r2, [r3, #56]	; 0x38
 8008aa2:	e005      	b.n	8008ab0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d10b      	bne.n	8008ace <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f043 0206 	orr.w	r2, r3, #6
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f043 0220 	orr.w	r2, r3, #32
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ada:	b004      	add	sp, #16
 8008adc:	4770      	bx	lr
	...

08008ae0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	4613      	mov	r3, r2
 8008aec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d165      	bne.n	8008bc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	4a41      	ldr	r2, [pc, #260]	; (8008bfc <USB_SetTurnaroundTime+0x11c>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d906      	bls.n	8008b0a <USB_SetTurnaroundTime+0x2a>
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	4a40      	ldr	r2, [pc, #256]	; (8008c00 <USB_SetTurnaroundTime+0x120>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d202      	bcs.n	8008b0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b04:	230f      	movs	r3, #15
 8008b06:	617b      	str	r3, [r7, #20]
 8008b08:	e062      	b.n	8008bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	4a3c      	ldr	r2, [pc, #240]	; (8008c00 <USB_SetTurnaroundTime+0x120>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d306      	bcc.n	8008b20 <USB_SetTurnaroundTime+0x40>
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	4a3b      	ldr	r2, [pc, #236]	; (8008c04 <USB_SetTurnaroundTime+0x124>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d202      	bcs.n	8008b20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b1a:	230e      	movs	r3, #14
 8008b1c:	617b      	str	r3, [r7, #20]
 8008b1e:	e057      	b.n	8008bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	4a38      	ldr	r2, [pc, #224]	; (8008c04 <USB_SetTurnaroundTime+0x124>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d306      	bcc.n	8008b36 <USB_SetTurnaroundTime+0x56>
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	4a37      	ldr	r2, [pc, #220]	; (8008c08 <USB_SetTurnaroundTime+0x128>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d202      	bcs.n	8008b36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b30:	230d      	movs	r3, #13
 8008b32:	617b      	str	r3, [r7, #20]
 8008b34:	e04c      	b.n	8008bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	4a33      	ldr	r2, [pc, #204]	; (8008c08 <USB_SetTurnaroundTime+0x128>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d306      	bcc.n	8008b4c <USB_SetTurnaroundTime+0x6c>
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	4a32      	ldr	r2, [pc, #200]	; (8008c0c <USB_SetTurnaroundTime+0x12c>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d802      	bhi.n	8008b4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b46:	230c      	movs	r3, #12
 8008b48:	617b      	str	r3, [r7, #20]
 8008b4a:	e041      	b.n	8008bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4a2f      	ldr	r2, [pc, #188]	; (8008c0c <USB_SetTurnaroundTime+0x12c>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d906      	bls.n	8008b62 <USB_SetTurnaroundTime+0x82>
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	4a2e      	ldr	r2, [pc, #184]	; (8008c10 <USB_SetTurnaroundTime+0x130>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d802      	bhi.n	8008b62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b5c:	230b      	movs	r3, #11
 8008b5e:	617b      	str	r3, [r7, #20]
 8008b60:	e036      	b.n	8008bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	4a2a      	ldr	r2, [pc, #168]	; (8008c10 <USB_SetTurnaroundTime+0x130>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d906      	bls.n	8008b78 <USB_SetTurnaroundTime+0x98>
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	4a29      	ldr	r2, [pc, #164]	; (8008c14 <USB_SetTurnaroundTime+0x134>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d802      	bhi.n	8008b78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b72:	230a      	movs	r3, #10
 8008b74:	617b      	str	r3, [r7, #20]
 8008b76:	e02b      	b.n	8008bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4a26      	ldr	r2, [pc, #152]	; (8008c14 <USB_SetTurnaroundTime+0x134>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d906      	bls.n	8008b8e <USB_SetTurnaroundTime+0xae>
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	4a25      	ldr	r2, [pc, #148]	; (8008c18 <USB_SetTurnaroundTime+0x138>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d202      	bcs.n	8008b8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b88:	2309      	movs	r3, #9
 8008b8a:	617b      	str	r3, [r7, #20]
 8008b8c:	e020      	b.n	8008bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	4a21      	ldr	r2, [pc, #132]	; (8008c18 <USB_SetTurnaroundTime+0x138>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d306      	bcc.n	8008ba4 <USB_SetTurnaroundTime+0xc4>
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	4a20      	ldr	r2, [pc, #128]	; (8008c1c <USB_SetTurnaroundTime+0x13c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d802      	bhi.n	8008ba4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b9e:	2308      	movs	r3, #8
 8008ba0:	617b      	str	r3, [r7, #20]
 8008ba2:	e015      	b.n	8008bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4a1d      	ldr	r2, [pc, #116]	; (8008c1c <USB_SetTurnaroundTime+0x13c>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d906      	bls.n	8008bba <USB_SetTurnaroundTime+0xda>
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	4a1c      	ldr	r2, [pc, #112]	; (8008c20 <USB_SetTurnaroundTime+0x140>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d202      	bcs.n	8008bba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008bb4:	2307      	movs	r3, #7
 8008bb6:	617b      	str	r3, [r7, #20]
 8008bb8:	e00a      	b.n	8008bd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008bba:	2306      	movs	r3, #6
 8008bbc:	617b      	str	r3, [r7, #20]
 8008bbe:	e007      	b.n	8008bd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d102      	bne.n	8008bcc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008bc6:	2309      	movs	r3, #9
 8008bc8:	617b      	str	r3, [r7, #20]
 8008bca:	e001      	b.n	8008bd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bcc:	2309      	movs	r3, #9
 8008bce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	029b      	lsls	r3, r3, #10
 8008be4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008be8:	431a      	orrs	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	371c      	adds	r7, #28
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	00d8acbf 	.word	0x00d8acbf
 8008c00:	00e4e1c0 	.word	0x00e4e1c0
 8008c04:	00f42400 	.word	0x00f42400
 8008c08:	01067380 	.word	0x01067380
 8008c0c:	011a499f 	.word	0x011a499f
 8008c10:	01312cff 	.word	0x01312cff
 8008c14:	014ca43f 	.word	0x014ca43f
 8008c18:	016e3600 	.word	0x016e3600
 8008c1c:	01a6ab1f 	.word	0x01a6ab1f
 8008c20:	01e84800 	.word	0x01e84800

08008c24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f043 0201 	orr.w	r2, r3, #1
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f023 0201 	bic.w	r2, r3, #1
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c84:	78fb      	ldrb	r3, [r7, #3]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d115      	bne.n	8008cb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c96:	2001      	movs	r0, #1
 8008c98:	f7f9 fa36 	bl	8002108 <HAL_Delay>
      ms++;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 fa45 	bl	800a132 <USB_GetMode>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d01e      	beq.n	8008cec <USB_SetCurrentMode+0x84>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2b31      	cmp	r3, #49	; 0x31
 8008cb2:	d9f0      	bls.n	8008c96 <USB_SetCurrentMode+0x2e>
 8008cb4:	e01a      	b.n	8008cec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cb6:	78fb      	ldrb	r3, [r7, #3]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d115      	bne.n	8008ce8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cc8:	2001      	movs	r0, #1
 8008cca:	f7f9 fa1d 	bl	8002108 <HAL_Delay>
      ms++;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f001 fa2c 	bl	800a132 <USB_GetMode>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <USB_SetCurrentMode+0x84>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2b31      	cmp	r3, #49	; 0x31
 8008ce4:	d9f0      	bls.n	8008cc8 <USB_SetCurrentMode+0x60>
 8008ce6:	e001      	b.n	8008cec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e005      	b.n	8008cf8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b32      	cmp	r3, #50	; 0x32
 8008cf0:	d101      	bne.n	8008cf6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d00:	b084      	sub	sp, #16
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	613b      	str	r3, [r7, #16]
 8008d1e:	e009      	b.n	8008d34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	3340      	adds	r3, #64	; 0x40
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	3301      	adds	r3, #1
 8008d32:	613b      	str	r3, [r7, #16]
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	2b0e      	cmp	r3, #14
 8008d38:	d9f2      	bls.n	8008d20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d11c      	bne.n	8008d7a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d4e:	f043 0302 	orr.w	r3, r3, #2
 8008d52:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	639a      	str	r2, [r3, #56]	; 0x38
 8008d78:	e00b      	b.n	8008d92 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d98:	461a      	mov	r2, r3
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da4:	4619      	mov	r1, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dac:	461a      	mov	r2, r3
 8008dae:	680b      	ldr	r3, [r1, #0]
 8008db0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d10c      	bne.n	8008dd2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d104      	bne.n	8008dc8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f965 	bl	8009090 <USB_SetDevSpeed>
 8008dc6:	e008      	b.n	8008dda <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008dc8:	2101      	movs	r1, #1
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f960 	bl	8009090 <USB_SetDevSpeed>
 8008dd0:	e003      	b.n	8008dda <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008dd2:	2103      	movs	r1, #3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f95b 	bl	8009090 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dda:	2110      	movs	r1, #16
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f8f3 	bl	8008fc8 <USB_FlushTxFifo>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f91f 	bl	8009030 <USB_FlushRxFifo>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e02:	461a      	mov	r2, r3
 8008e04:	2300      	movs	r3, #0
 8008e06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0e:	461a      	mov	r2, r3
 8008e10:	2300      	movs	r3, #0
 8008e12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e20:	2300      	movs	r3, #0
 8008e22:	613b      	str	r3, [r7, #16]
 8008e24:	e043      	b.n	8008eae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e3c:	d118      	bne.n	8008e70 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10a      	bne.n	8008e5a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e50:	461a      	mov	r2, r3
 8008e52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	e013      	b.n	8008e82 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e66:	461a      	mov	r2, r3
 8008e68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	e008      	b.n	8008e82 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	2300      	movs	r3, #0
 8008e80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8e:	461a      	mov	r2, r3
 8008e90:	2300      	movs	r3, #0
 8008e92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ea6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	613b      	str	r3, [r7, #16]
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d3b7      	bcc.n	8008e26 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	613b      	str	r3, [r7, #16]
 8008eba:	e043      	b.n	8008f44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ed2:	d118      	bne.n	8008f06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10a      	bne.n	8008ef0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	015a      	lsls	r2, r3, #5
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	e013      	b.n	8008f18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efc:	461a      	mov	r2, r3
 8008efe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f02:	6013      	str	r3, [r2, #0]
 8008f04:	e008      	b.n	8008f18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f12:	461a      	mov	r2, r3
 8008f14:	2300      	movs	r3, #0
 8008f16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f24:	461a      	mov	r2, r3
 8008f26:	2300      	movs	r3, #0
 8008f28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	015a      	lsls	r2, r3, #5
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	4413      	add	r3, r2
 8008f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f36:	461a      	mov	r2, r3
 8008f38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	3301      	adds	r3, #1
 8008f42:	613b      	str	r3, [r7, #16]
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d3b7      	bcc.n	8008ebc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d105      	bne.n	8008f80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	f043 0210 	orr.w	r2, r3, #16
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	699a      	ldr	r2, [r3, #24]
 8008f84:	4b0f      	ldr	r3, [pc, #60]	; (8008fc4 <USB_DevInit+0x2c4>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d005      	beq.n	8008f9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	f043 0208 	orr.w	r2, r3, #8
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d107      	bne.n	8008fb4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fac:	f043 0304 	orr.w	r3, r3, #4
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fc0:	b004      	add	sp, #16
 8008fc2:	4770      	bx	lr
 8008fc4:	803c3800 	.word	0x803c3800

08008fc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4a13      	ldr	r2, [pc, #76]	; (800902c <USB_FlushTxFifo+0x64>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d901      	bls.n	8008fe8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e01b      	b.n	8009020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	daf2      	bge.n	8008fd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	019b      	lsls	r3, r3, #6
 8008ff8:	f043 0220 	orr.w	r2, r3, #32
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	3301      	adds	r3, #1
 8009004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	4a08      	ldr	r2, [pc, #32]	; (800902c <USB_FlushTxFifo+0x64>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d901      	bls.n	8009012 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e006      	b.n	8009020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b20      	cmp	r3, #32
 800901c:	d0f0      	beq.n	8009000 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	00030d40 	.word	0x00030d40

08009030 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009038:	2300      	movs	r3, #0
 800903a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	3301      	adds	r3, #1
 8009040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	4a11      	ldr	r2, [pc, #68]	; (800908c <USB_FlushRxFifo+0x5c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d901      	bls.n	800904e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e018      	b.n	8009080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	2b00      	cmp	r3, #0
 8009054:	daf2      	bge.n	800903c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2210      	movs	r2, #16
 800905e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3301      	adds	r3, #1
 8009064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4a08      	ldr	r2, [pc, #32]	; (800908c <USB_FlushRxFifo+0x5c>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d901      	bls.n	8009072 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e006      	b.n	8009080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	f003 0310 	and.w	r3, r3, #16
 800907a:	2b10      	cmp	r3, #16
 800907c:	d0f0      	beq.n	8009060 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	00030d40 	.word	0x00030d40

08009090 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	78fb      	ldrb	r3, [r7, #3]
 80090aa:	68f9      	ldr	r1, [r7, #12]
 80090ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b0:	4313      	orrs	r3, r2
 80090b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b087      	sub	sp, #28
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f003 0306 	and.w	r3, r3, #6
 80090da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d102      	bne.n	80090e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80090e2:	2300      	movs	r3, #0
 80090e4:	75fb      	strb	r3, [r7, #23]
 80090e6:	e00a      	b.n	80090fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d002      	beq.n	80090f4 <USB_GetDevSpeed+0x32>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b06      	cmp	r3, #6
 80090f2:	d102      	bne.n	80090fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80090f4:	2302      	movs	r3, #2
 80090f6:	75fb      	strb	r3, [r7, #23]
 80090f8:	e001      	b.n	80090fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80090fa:	230f      	movs	r3, #15
 80090fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009100:	4618      	mov	r0, r3
 8009102:	371c      	adds	r7, #28
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	785b      	ldrb	r3, [r3, #1]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d13a      	bne.n	800919e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912e:	69da      	ldr	r2, [r3, #28]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	f003 030f 	and.w	r3, r3, #15
 8009138:	2101      	movs	r1, #1
 800913a:	fa01 f303 	lsl.w	r3, r1, r3
 800913e:	b29b      	uxth	r3, r3
 8009140:	68f9      	ldr	r1, [r7, #12]
 8009142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009146:	4313      	orrs	r3, r2
 8009148:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d155      	bne.n	800920c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	791b      	ldrb	r3, [r3, #4]
 800917a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800917c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	059b      	lsls	r3, r3, #22
 8009182:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009184:	4313      	orrs	r3, r2
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	0151      	lsls	r1, r2, #5
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	440a      	add	r2, r1
 800918e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800919a:	6013      	str	r3, [r2, #0]
 800919c:	e036      	b.n	800920c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a4:	69da      	ldr	r2, [r3, #28]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	f003 030f 	and.w	r3, r3, #15
 80091ae:	2101      	movs	r1, #1
 80091b0:	fa01 f303 	lsl.w	r3, r1, r3
 80091b4:	041b      	lsls	r3, r3, #16
 80091b6:	68f9      	ldr	r1, [r7, #12]
 80091b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091bc:	4313      	orrs	r3, r2
 80091be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	015a      	lsls	r2, r3, #5
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d11a      	bne.n	800920c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	015a      	lsls	r2, r3, #5
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	791b      	ldrb	r3, [r3, #4]
 80091f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091f2:	430b      	orrs	r3, r1
 80091f4:	4313      	orrs	r3, r2
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	0151      	lsls	r1, r2, #5
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	440a      	add	r2, r1
 80091fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800920a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
	...

0800921c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	785b      	ldrb	r3, [r3, #1]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d161      	bne.n	80092fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800924a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800924e:	d11f      	bne.n	8009290 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	0151      	lsls	r1, r2, #5
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	440a      	add	r2, r1
 8009266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800926a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800926e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	0151      	lsls	r1, r2, #5
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	440a      	add	r2, r1
 8009286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800928a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800928e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	2101      	movs	r1, #1
 80092a2:	fa01 f303 	lsl.w	r3, r1, r3
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	43db      	mvns	r3, r3
 80092aa:	68f9      	ldr	r1, [r7, #12]
 80092ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092b0:	4013      	ands	r3, r2
 80092b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ba:	69da      	ldr	r2, [r3, #28]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	f003 030f 	and.w	r3, r3, #15
 80092c4:	2101      	movs	r1, #1
 80092c6:	fa01 f303 	lsl.w	r3, r1, r3
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	43db      	mvns	r3, r3
 80092ce:	68f9      	ldr	r1, [r7, #12]
 80092d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092d4:	4013      	ands	r3, r2
 80092d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	0159      	lsls	r1, r3, #5
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	440b      	add	r3, r1
 80092ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f2:	4619      	mov	r1, r3
 80092f4:	4b35      	ldr	r3, [pc, #212]	; (80093cc <USB_DeactivateEndpoint+0x1b0>)
 80092f6:	4013      	ands	r3, r2
 80092f8:	600b      	str	r3, [r1, #0]
 80092fa:	e060      	b.n	80093be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800930e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009312:	d11f      	bne.n	8009354 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	015a      	lsls	r2, r3, #5
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4413      	add	r3, r2
 800931c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	0151      	lsls	r1, r2, #5
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	440a      	add	r2, r1
 800932a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800932e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009332:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	0151      	lsls	r1, r2, #5
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	440a      	add	r2, r1
 800934a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009352:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	f003 030f 	and.w	r3, r3, #15
 8009364:	2101      	movs	r1, #1
 8009366:	fa01 f303 	lsl.w	r3, r1, r3
 800936a:	041b      	lsls	r3, r3, #16
 800936c:	43db      	mvns	r3, r3
 800936e:	68f9      	ldr	r1, [r7, #12]
 8009370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009374:	4013      	ands	r3, r2
 8009376:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937e:	69da      	ldr	r2, [r3, #28]
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	f003 030f 	and.w	r3, r3, #15
 8009388:	2101      	movs	r1, #1
 800938a:	fa01 f303 	lsl.w	r3, r1, r3
 800938e:	041b      	lsls	r3, r3, #16
 8009390:	43db      	mvns	r3, r3
 8009392:	68f9      	ldr	r1, [r7, #12]
 8009394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009398:	4013      	ands	r3, r2
 800939a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	015a      	lsls	r2, r3, #5
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	0159      	lsls	r1, r3, #5
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	440b      	add	r3, r1
 80093b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b6:	4619      	mov	r1, r3
 80093b8:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <USB_DeactivateEndpoint+0x1b4>)
 80093ba:	4013      	ands	r3, r2
 80093bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr
 80093cc:	ec337800 	.word	0xec337800
 80093d0:	eff37800 	.word	0xeff37800

080093d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b08a      	sub	sp, #40	; 0x28
 80093d8:	af02      	add	r7, sp, #8
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	4613      	mov	r3, r2
 80093e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	f040 815c 	bne.w	80096ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d132      	bne.n	8009464 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	4413      	add	r3, r2
 8009406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	0151      	lsls	r1, r2, #5
 8009410:	69fa      	ldr	r2, [r7, #28]
 8009412:	440a      	add	r2, r1
 8009414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009418:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800941c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009420:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	015a      	lsls	r2, r3, #5
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	4413      	add	r3, r2
 800942a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	69ba      	ldr	r2, [r7, #24]
 8009432:	0151      	lsls	r1, r2, #5
 8009434:	69fa      	ldr	r2, [r7, #28]
 8009436:	440a      	add	r2, r1
 8009438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800943c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009440:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	4413      	add	r3, r2
 800944a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	69ba      	ldr	r2, [r7, #24]
 8009452:	0151      	lsls	r1, r2, #5
 8009454:	69fa      	ldr	r2, [r7, #28]
 8009456:	440a      	add	r2, r1
 8009458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800945c:	0cdb      	lsrs	r3, r3, #19
 800945e:	04db      	lsls	r3, r3, #19
 8009460:	6113      	str	r3, [r2, #16]
 8009462:	e074      	b.n	800954e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	4413      	add	r3, r2
 800946c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	69ba      	ldr	r2, [r7, #24]
 8009474:	0151      	lsls	r1, r2, #5
 8009476:	69fa      	ldr	r2, [r7, #28]
 8009478:	440a      	add	r2, r1
 800947a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800947e:	0cdb      	lsrs	r3, r3, #19
 8009480:	04db      	lsls	r3, r3, #19
 8009482:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	0151      	lsls	r1, r2, #5
 8009496:	69fa      	ldr	r2, [r7, #28]
 8009498:	440a      	add	r2, r1
 800949a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800949e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	015a      	lsls	r2, r3, #5
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	4413      	add	r3, r2
 80094b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	6999      	ldr	r1, [r3, #24]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	440b      	add	r3, r1
 80094c0:	1e59      	subs	r1, r3, #1
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80094ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094cc:	4b9d      	ldr	r3, [pc, #628]	; (8009744 <USB_EPStartXfer+0x370>)
 80094ce:	400b      	ands	r3, r1
 80094d0:	69b9      	ldr	r1, [r7, #24]
 80094d2:	0148      	lsls	r0, r1, #5
 80094d4:	69f9      	ldr	r1, [r7, #28]
 80094d6:	4401      	add	r1, r0
 80094d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094dc:	4313      	orrs	r3, r2
 80094de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ec:	691a      	ldr	r2, [r3, #16]
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094f6:	69b9      	ldr	r1, [r7, #24]
 80094f8:	0148      	lsls	r0, r1, #5
 80094fa:	69f9      	ldr	r1, [r7, #28]
 80094fc:	4401      	add	r1, r0
 80094fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009502:	4313      	orrs	r3, r2
 8009504:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	791b      	ldrb	r3, [r3, #4]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d11f      	bne.n	800954e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	015a      	lsls	r2, r3, #5
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	4413      	add	r3, r2
 8009516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	69ba      	ldr	r2, [r7, #24]
 800951e:	0151      	lsls	r1, r2, #5
 8009520:	69fa      	ldr	r2, [r7, #28]
 8009522:	440a      	add	r2, r1
 8009524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009528:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800952c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	0151      	lsls	r1, r2, #5
 8009540:	69fa      	ldr	r2, [r7, #28]
 8009542:	440a      	add	r2, r1
 8009544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009548:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800954c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800954e:	79fb      	ldrb	r3, [r7, #7]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d14b      	bne.n	80095ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d009      	beq.n	8009570 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009568:	461a      	mov	r2, r3
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	791b      	ldrb	r3, [r3, #4]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d128      	bne.n	80095ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009584:	2b00      	cmp	r3, #0
 8009586:	d110      	bne.n	80095aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	0151      	lsls	r1, r2, #5
 800959a:	69fa      	ldr	r2, [r7, #28]
 800959c:	440a      	add	r2, r1
 800959e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	e00f      	b.n	80095ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	015a      	lsls	r2, r3, #5
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	4413      	add	r3, r2
 80095b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	69ba      	ldr	r2, [r7, #24]
 80095ba:	0151      	lsls	r1, r2, #5
 80095bc:	69fa      	ldr	r2, [r7, #28]
 80095be:	440a      	add	r2, r1
 80095c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	0151      	lsls	r1, r2, #5
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	440a      	add	r2, r1
 80095e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095e8:	6013      	str	r3, [r2, #0]
 80095ea:	e133      	b.n	8009854 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	69ba      	ldr	r2, [r7, #24]
 80095fc:	0151      	lsls	r1, r2, #5
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	440a      	add	r2, r1
 8009602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009606:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800960a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	791b      	ldrb	r3, [r3, #4]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d015      	beq.n	8009640 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 811b 	beq.w	8009854 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	f003 030f 	and.w	r3, r3, #15
 800962e:	2101      	movs	r1, #1
 8009630:	fa01 f303 	lsl.w	r3, r1, r3
 8009634:	69f9      	ldr	r1, [r7, #28]
 8009636:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800963a:	4313      	orrs	r3, r2
 800963c:	634b      	str	r3, [r1, #52]	; 0x34
 800963e:	e109      	b.n	8009854 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800964c:	2b00      	cmp	r3, #0
 800964e:	d110      	bne.n	8009672 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	69ba      	ldr	r2, [r7, #24]
 8009660:	0151      	lsls	r1, r2, #5
 8009662:	69fa      	ldr	r2, [r7, #28]
 8009664:	440a      	add	r2, r1
 8009666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800966a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800966e:	6013      	str	r3, [r2, #0]
 8009670:	e00f      	b.n	8009692 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	0151      	lsls	r1, r2, #5
 8009684:	69fa      	ldr	r2, [r7, #28]
 8009686:	440a      	add	r2, r1
 8009688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800968c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009690:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	6919      	ldr	r1, [r3, #16]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	781a      	ldrb	r2, [r3, #0]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	b298      	uxth	r0, r3
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	4603      	mov	r3, r0
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 fade 	bl	8009c68 <USB_WritePacket>
 80096ac:	e0d2      	b.n	8009854 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	015a      	lsls	r2, r3, #5
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	0151      	lsls	r1, r2, #5
 80096c0:	69fa      	ldr	r2, [r7, #28]
 80096c2:	440a      	add	r2, r1
 80096c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c8:	0cdb      	lsrs	r3, r3, #19
 80096ca:	04db      	lsls	r3, r3, #19
 80096cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	0151      	lsls	r1, r2, #5
 80096e0:	69fa      	ldr	r2, [r7, #28]
 80096e2:	440a      	add	r2, r1
 80096e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d126      	bne.n	8009748 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	4413      	add	r3, r2
 8009702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009706:	691a      	ldr	r2, [r3, #16]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009710:	69b9      	ldr	r1, [r7, #24]
 8009712:	0148      	lsls	r0, r1, #5
 8009714:	69f9      	ldr	r1, [r7, #28]
 8009716:	4401      	add	r1, r0
 8009718:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800971c:	4313      	orrs	r3, r2
 800971e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	69ba      	ldr	r2, [r7, #24]
 8009730:	0151      	lsls	r1, r2, #5
 8009732:	69fa      	ldr	r2, [r7, #28]
 8009734:	440a      	add	r2, r1
 8009736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800973a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800973e:	6113      	str	r3, [r2, #16]
 8009740:	e03a      	b.n	80097b8 <USB_EPStartXfer+0x3e4>
 8009742:	bf00      	nop
 8009744:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	4413      	add	r3, r2
 8009752:	1e5a      	subs	r2, r3, #1
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	fbb2 f3f3 	udiv	r3, r2, r3
 800975c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	8afa      	ldrh	r2, [r7, #22]
 8009764:	fb03 f202 	mul.w	r2, r3, r2
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009778:	691a      	ldr	r2, [r3, #16]
 800977a:	8afb      	ldrh	r3, [r7, #22]
 800977c:	04d9      	lsls	r1, r3, #19
 800977e:	4b38      	ldr	r3, [pc, #224]	; (8009860 <USB_EPStartXfer+0x48c>)
 8009780:	400b      	ands	r3, r1
 8009782:	69b9      	ldr	r1, [r7, #24]
 8009784:	0148      	lsls	r0, r1, #5
 8009786:	69f9      	ldr	r1, [r7, #28]
 8009788:	4401      	add	r1, r0
 800978a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800978e:	4313      	orrs	r3, r2
 8009790:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	4413      	add	r3, r2
 800979a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800979e:	691a      	ldr	r2, [r3, #16]
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097a8:	69b9      	ldr	r1, [r7, #24]
 80097aa:	0148      	lsls	r0, r1, #5
 80097ac:	69f9      	ldr	r1, [r7, #28]
 80097ae:	4401      	add	r1, r0
 80097b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097b4:	4313      	orrs	r3, r2
 80097b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80097b8:	79fb      	ldrb	r3, [r7, #7]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d10d      	bne.n	80097da <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d009      	beq.n	80097da <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	6919      	ldr	r1, [r3, #16]
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d6:	460a      	mov	r2, r1
 80097d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	791b      	ldrb	r3, [r3, #4]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d128      	bne.n	8009834 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d110      	bne.n	8009814 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	69ba      	ldr	r2, [r7, #24]
 8009802:	0151      	lsls	r1, r2, #5
 8009804:	69fa      	ldr	r2, [r7, #28]
 8009806:	440a      	add	r2, r1
 8009808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800980c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	e00f      	b.n	8009834 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	0151      	lsls	r1, r2, #5
 8009826:	69fa      	ldr	r2, [r7, #28]
 8009828:	440a      	add	r2, r1
 800982a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800982e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009832:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69ba      	ldr	r2, [r7, #24]
 8009844:	0151      	lsls	r1, r2, #5
 8009846:	69fa      	ldr	r2, [r7, #28]
 8009848:	440a      	add	r2, r1
 800984a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800984e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009852:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3720      	adds	r7, #32
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	1ff80000 	.word	0x1ff80000

08009864 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009864:	b480      	push	{r7}
 8009866:	b087      	sub	sp, #28
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	4613      	mov	r3, r2
 8009870:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	785b      	ldrb	r3, [r3, #1]
 8009880:	2b01      	cmp	r3, #1
 8009882:	f040 80ce 	bne.w	8009a22 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d132      	bne.n	80098f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	0151      	lsls	r1, r2, #5
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	440a      	add	r2, r1
 80098a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	015a      	lsls	r2, r3, #5
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	4413      	add	r3, r2
 80098ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	0151      	lsls	r1, r2, #5
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	440a      	add	r2, r1
 80098c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	0151      	lsls	r1, r2, #5
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	440a      	add	r2, r1
 80098e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ec:	0cdb      	lsrs	r3, r3, #19
 80098ee:	04db      	lsls	r3, r3, #19
 80098f0:	6113      	str	r3, [r2, #16]
 80098f2:	e04e      	b.n	8009992 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	015a      	lsls	r2, r3, #5
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	4413      	add	r3, r2
 80098fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	0151      	lsls	r1, r2, #5
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	440a      	add	r2, r1
 800990a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800990e:	0cdb      	lsrs	r3, r3, #19
 8009910:	04db      	lsls	r3, r3, #19
 8009912:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	4413      	add	r3, r2
 800991c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	0151      	lsls	r1, r2, #5
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	440a      	add	r2, r1
 800992a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800992e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009932:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009936:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	699a      	ldr	r2, [r3, #24]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	429a      	cmp	r2, r3
 8009942:	d903      	bls.n	800994c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	68da      	ldr	r2, [r3, #12]
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	0151      	lsls	r1, r2, #5
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	440a      	add	r2, r1
 8009962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800996a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009978:	691a      	ldr	r2, [r3, #16]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	699b      	ldr	r3, [r3, #24]
 800997e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009982:	6939      	ldr	r1, [r7, #16]
 8009984:	0148      	lsls	r0, r1, #5
 8009986:	6979      	ldr	r1, [r7, #20]
 8009988:	4401      	add	r1, r0
 800998a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800998e:	4313      	orrs	r3, r2
 8009990:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009992:	79fb      	ldrb	r3, [r7, #7]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d11e      	bne.n	80099d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d009      	beq.n	80099b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	015a      	lsls	r2, r3, #5
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	4413      	add	r3, r2
 80099a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ac:	461a      	mov	r2, r3
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	0151      	lsls	r1, r2, #5
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	440a      	add	r2, r1
 80099ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	e097      	b.n	8009b06 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	015a      	lsls	r2, r3, #5
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	4413      	add	r3, r2
 80099de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	0151      	lsls	r1, r2, #5
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	440a      	add	r2, r1
 80099ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 8083 	beq.w	8009b06 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	f003 030f 	and.w	r3, r3, #15
 8009a10:	2101      	movs	r1, #1
 8009a12:	fa01 f303 	lsl.w	r3, r1, r3
 8009a16:	6979      	ldr	r1, [r7, #20]
 8009a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	634b      	str	r3, [r1, #52]	; 0x34
 8009a20:	e071      	b.n	8009b06 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	015a      	lsls	r2, r3, #5
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	0151      	lsls	r1, r2, #5
 8009a34:	697a      	ldr	r2, [r7, #20]
 8009a36:	440a      	add	r2, r1
 8009a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a3c:	0cdb      	lsrs	r3, r3, #19
 8009a3e:	04db      	lsls	r3, r3, #19
 8009a40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	0151      	lsls	r1, r2, #5
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	440a      	add	r2, r1
 8009a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d003      	beq.n	8009a76 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	68da      	ldr	r2, [r3, #12]
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	68da      	ldr	r2, [r3, #12]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	015a      	lsls	r2, r3, #5
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	4413      	add	r3, r2
 8009a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	0151      	lsls	r1, r2, #5
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	440a      	add	r2, r1
 8009a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	015a      	lsls	r2, r3, #5
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aaa:	691a      	ldr	r2, [r3, #16]
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ab4:	6939      	ldr	r1, [r7, #16]
 8009ab6:	0148      	lsls	r0, r1, #5
 8009ab8:	6979      	ldr	r1, [r7, #20]
 8009aba:	4401      	add	r1, r0
 8009abc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d10d      	bne.n	8009ae6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d009      	beq.n	8009ae6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	6919      	ldr	r1, [r3, #16]
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	015a      	lsls	r2, r3, #5
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	4413      	add	r3, r2
 8009ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae2:	460a      	mov	r2, r1
 8009ae4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	693a      	ldr	r2, [r7, #16]
 8009af6:	0151      	lsls	r1, r2, #5
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	440a      	add	r2, r1
 8009afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	371c      	adds	r7, #28
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	785b      	ldrb	r3, [r3, #1]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d14a      	bne.n	8009bc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b4a:	f040 8086 	bne.w	8009c5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	015a      	lsls	r2, r3, #5
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	4413      	add	r3, r2
 8009b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	7812      	ldrb	r2, [r2, #0]
 8009b62:	0151      	lsls	r1, r2, #5
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	440a      	add	r2, r1
 8009b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	7812      	ldrb	r2, [r2, #0]
 8009b86:	0151      	lsls	r1, r2, #5
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	440a      	add	r2, r1
 8009b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d902      	bls.n	8009bac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	75fb      	strb	r3, [r7, #23]
          break;
 8009baa:	e056      	b.n	8009c5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bc4:	d0e7      	beq.n	8009b96 <USB_EPStopXfer+0x82>
 8009bc6:	e048      	b.n	8009c5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009be0:	d13b      	bne.n	8009c5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	7812      	ldrb	r2, [r2, #0]
 8009bf6:	0151      	lsls	r1, r2, #5
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	440a      	add	r2, r1
 8009bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	015a      	lsls	r2, r3, #5
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	4413      	add	r3, r2
 8009c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	7812      	ldrb	r2, [r2, #0]
 8009c1a:	0151      	lsls	r1, r2, #5
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	440a      	add	r2, r1
 8009c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d902      	bls.n	8009c40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	75fb      	strb	r3, [r7, #23]
          break;
 8009c3e:	e00c      	b.n	8009c5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	015a      	lsls	r2, r3, #5
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	4413      	add	r3, r2
 8009c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c58:	d0e7      	beq.n	8009c2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	371c      	adds	r7, #28
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b089      	sub	sp, #36	; 0x24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	4611      	mov	r1, r2
 8009c74:	461a      	mov	r2, r3
 8009c76:	460b      	mov	r3, r1
 8009c78:	71fb      	strb	r3, [r7, #7]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009c86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d123      	bne.n	8009cd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009c8e:	88bb      	ldrh	r3, [r7, #4]
 8009c90:	3303      	adds	r3, #3
 8009c92:	089b      	lsrs	r3, r3, #2
 8009c94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009c96:	2300      	movs	r3, #0
 8009c98:	61bb      	str	r3, [r7, #24]
 8009c9a:	e018      	b.n	8009cce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009c9c:	79fb      	ldrb	r3, [r7, #7]
 8009c9e:	031a      	lsls	r2, r3, #12
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca8:	461a      	mov	r2, r3
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	61bb      	str	r3, [r7, #24]
 8009cce:	69ba      	ldr	r2, [r7, #24]
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d3e2      	bcc.n	8009c9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3724      	adds	r7, #36	; 0x24
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b08b      	sub	sp, #44	; 0x2c
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009cfa:	88fb      	ldrh	r3, [r7, #6]
 8009cfc:	089b      	lsrs	r3, r3, #2
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d02:	88fb      	ldrh	r3, [r7, #6]
 8009d04:	f003 0303 	and.w	r3, r3, #3
 8009d08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	623b      	str	r3, [r7, #32]
 8009d0e:	e014      	b.n	8009d3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	3301      	adds	r3, #1
 8009d20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	3301      	adds	r3, #1
 8009d26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	3301      	adds	r3, #1
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	3301      	adds	r3, #1
 8009d38:	623b      	str	r3, [r7, #32]
 8009d3a:	6a3a      	ldr	r2, [r7, #32]
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d3e6      	bcc.n	8009d10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d42:	8bfb      	ldrh	r3, [r7, #30]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d01e      	beq.n	8009d86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d52:	461a      	mov	r2, r3
 8009d54:	f107 0310 	add.w	r3, r7, #16
 8009d58:	6812      	ldr	r2, [r2, #0]
 8009d5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	00db      	lsls	r3, r3, #3
 8009d64:	fa22 f303 	lsr.w	r3, r2, r3
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6c:	701a      	strb	r2, [r3, #0]
      i++;
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	3301      	adds	r3, #1
 8009d72:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	3301      	adds	r3, #1
 8009d78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009d7a:	8bfb      	ldrh	r3, [r7, #30]
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009d80:	8bfb      	ldrh	r3, [r7, #30]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1ea      	bne.n	8009d5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	372c      	adds	r7, #44	; 0x2c
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	785b      	ldrb	r3, [r3, #1]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d12c      	bne.n	8009e0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	db12      	blt.n	8009de8 <USB_EPSetStall+0x54>
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00f      	beq.n	8009de8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	015a      	lsls	r2, r3, #5
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	4413      	add	r3, r2
 8009dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	0151      	lsls	r1, r2, #5
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	440a      	add	r2, r1
 8009dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009de2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009de6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	0151      	lsls	r1, r2, #5
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	440a      	add	r2, r1
 8009dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	e02b      	b.n	8009e62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	db12      	blt.n	8009e42 <USB_EPSetStall+0xae>
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00f      	beq.n	8009e42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	0151      	lsls	r1, r2, #5
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	440a      	add	r2, r1
 8009e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	015a      	lsls	r2, r3, #5
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	0151      	lsls	r1, r2, #5
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	440a      	add	r2, r1
 8009e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	785b      	ldrb	r3, [r3, #1]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d128      	bne.n	8009ede <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	015a      	lsls	r2, r3, #5
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	0151      	lsls	r1, r2, #5
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	440a      	add	r2, r1
 8009ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ea6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009eaa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	791b      	ldrb	r3, [r3, #4]
 8009eb0:	2b03      	cmp	r3, #3
 8009eb2:	d003      	beq.n	8009ebc <USB_EPClearStall+0x4c>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	791b      	ldrb	r3, [r3, #4]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d138      	bne.n	8009f2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	0151      	lsls	r1, r2, #5
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	440a      	add	r2, r1
 8009ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eda:	6013      	str	r3, [r2, #0]
 8009edc:	e027      	b.n	8009f2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	0151      	lsls	r1, r2, #5
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	440a      	add	r2, r1
 8009ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ef8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009efc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	791b      	ldrb	r3, [r3, #4]
 8009f02:	2b03      	cmp	r3, #3
 8009f04:	d003      	beq.n	8009f0e <USB_EPClearStall+0x9e>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	791b      	ldrb	r3, [r3, #4]
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d10f      	bne.n	8009f2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	015a      	lsls	r2, r3, #5
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	4413      	add	r3, r2
 8009f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	0151      	lsls	r1, r2, #5
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	440a      	add	r2, r1
 8009f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009f5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	78fb      	ldrb	r3, [r7, #3]
 8009f6a:	011b      	lsls	r3, r3, #4
 8009f6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009f70:	68f9      	ldr	r1, [r7, #12]
 8009f72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f76:	4313      	orrs	r3, r2
 8009f78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fa2:	f023 0303 	bic.w	r3, r3, #3
 8009fa6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fb6:	f023 0302 	bic.w	r3, r3, #2
 8009fba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b085      	sub	sp, #20
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fe4:	f023 0303 	bic.w	r3, r3, #3
 8009fe8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ff8:	f043 0302 	orr.w	r3, r3, #2
 8009ffc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	695b      	ldr	r3, [r3, #20]
 800a018:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	4013      	ands	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a024:	68fb      	ldr	r3, [r7, #12]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a032:	b480      	push	{r7}
 800a034:	b085      	sub	sp, #20
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a04e:	69db      	ldr	r3, [r3, #28]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	4013      	ands	r3, r2
 800a054:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	0c1b      	lsrs	r3, r3, #16
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3714      	adds	r7, #20
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a066:	b480      	push	{r7}
 800a068:	b085      	sub	sp, #20
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a082:	69db      	ldr	r3, [r3, #28]
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	4013      	ands	r3, r2
 800a088:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	b29b      	uxth	r3, r3
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b085      	sub	sp, #20
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a0aa:	78fb      	ldrb	r3, [r7, #3]
 800a0ac:	015a      	lsls	r2, r3, #5
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0c8:	68bb      	ldr	r3, [r7, #8]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b087      	sub	sp, #28
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
 800a0de:	460b      	mov	r3, r1
 800a0e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a0fa:	78fb      	ldrb	r3, [r7, #3]
 800a0fc:	f003 030f 	and.w	r3, r3, #15
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	fa22 f303 	lsr.w	r3, r2, r3
 800a106:	01db      	lsls	r3, r3, #7
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	4413      	add	r3, r2
 800a118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	693a      	ldr	r2, [r7, #16]
 800a120:	4013      	ands	r3, r2
 800a122:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a124:	68bb      	ldr	r3, [r7, #8]
}
 800a126:	4618      	mov	r0, r3
 800a128:	371c      	adds	r7, #28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	f003 0301 	and.w	r3, r3, #1
}
 800a142:	4618      	mov	r0, r3
 800a144:	370c      	adds	r7, #12
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a14e:	b480      	push	{r7}
 800a150:	b085      	sub	sp, #20
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a168:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a16c:	f023 0307 	bic.w	r3, r3, #7
 800a170:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a184:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	460b      	mov	r3, r1
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	333c      	adds	r3, #60	; 0x3c
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	4a26      	ldr	r2, [pc, #152]	; (800a24c <USB_EP0_OutStart+0xb8>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d90a      	bls.n	800a1ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1c8:	d101      	bne.n	800a1ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e037      	b.n	800a23e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1fc:	f043 0318 	orr.w	r3, r3, #24
 800a200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a210:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a214:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a216:	7afb      	ldrb	r3, [r7, #11]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d10f      	bne.n	800a23c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a222:	461a      	mov	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a236:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a23a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	371c      	adds	r7, #28
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	4f54300a 	.word	0x4f54300a

0800a250 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a258:	2300      	movs	r3, #0
 800a25a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	3301      	adds	r3, #1
 800a260:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	4a13      	ldr	r2, [pc, #76]	; (800a2b4 <USB_CoreReset+0x64>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d901      	bls.n	800a26e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e01b      	b.n	800a2a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	daf2      	bge.n	800a25c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	f043 0201 	orr.w	r2, r3, #1
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3301      	adds	r3, #1
 800a28a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4a09      	ldr	r2, [pc, #36]	; (800a2b4 <USB_CoreReset+0x64>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d901      	bls.n	800a298 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a294:	2303      	movs	r3, #3
 800a296:	e006      	b.n	800a2a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	f003 0301 	and.w	r3, r3, #1
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d0f0      	beq.n	800a286 <USB_CoreReset+0x36>

  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	00030d40 	.word	0x00030d40

0800a2b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a2c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a2c8:	f002 fc8a 	bl	800cbe0 <USBD_static_malloc>
 800a2cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d109      	bne.n	800a2e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	32b0      	adds	r2, #176	; 0xb0
 800a2de:	2100      	movs	r1, #0
 800a2e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	e0d4      	b.n	800a492 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a2e8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f002 fce4 	bl	800ccbc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	32b0      	adds	r2, #176	; 0xb0
 800a2fe:	68f9      	ldr	r1, [r7, #12]
 800a300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	32b0      	adds	r2, #176	; 0xb0
 800a30e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	7c1b      	ldrb	r3, [r3, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d138      	bne.n	800a392 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a320:	4b5e      	ldr	r3, [pc, #376]	; (800a49c <USBD_CDC_Init+0x1e4>)
 800a322:	7819      	ldrb	r1, [r3, #0]
 800a324:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a328:	2202      	movs	r2, #2
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f002 fb35 	bl	800c99a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a330:	4b5a      	ldr	r3, [pc, #360]	; (800a49c <USBD_CDC_Init+0x1e4>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	f003 020f 	and.w	r2, r3, #15
 800a338:	6879      	ldr	r1, [r7, #4]
 800a33a:	4613      	mov	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	4413      	add	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	440b      	add	r3, r1
 800a344:	3324      	adds	r3, #36	; 0x24
 800a346:	2201      	movs	r2, #1
 800a348:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a34a:	4b55      	ldr	r3, [pc, #340]	; (800a4a0 <USBD_CDC_Init+0x1e8>)
 800a34c:	7819      	ldrb	r1, [r3, #0]
 800a34e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a352:	2202      	movs	r2, #2
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f002 fb20 	bl	800c99a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a35a:	4b51      	ldr	r3, [pc, #324]	; (800a4a0 <USBD_CDC_Init+0x1e8>)
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	f003 020f 	and.w	r2, r3, #15
 800a362:	6879      	ldr	r1, [r7, #4]
 800a364:	4613      	mov	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	440b      	add	r3, r1
 800a36e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a372:	2201      	movs	r2, #1
 800a374:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a376:	4b4b      	ldr	r3, [pc, #300]	; (800a4a4 <USBD_CDC_Init+0x1ec>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	f003 020f 	and.w	r2, r3, #15
 800a37e:	6879      	ldr	r1, [r7, #4]
 800a380:	4613      	mov	r3, r2
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	440b      	add	r3, r1
 800a38a:	3326      	adds	r3, #38	; 0x26
 800a38c:	2210      	movs	r2, #16
 800a38e:	801a      	strh	r2, [r3, #0]
 800a390:	e035      	b.n	800a3fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a392:	4b42      	ldr	r3, [pc, #264]	; (800a49c <USBD_CDC_Init+0x1e4>)
 800a394:	7819      	ldrb	r1, [r3, #0]
 800a396:	2340      	movs	r3, #64	; 0x40
 800a398:	2202      	movs	r2, #2
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f002 fafd 	bl	800c99a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a3a0:	4b3e      	ldr	r3, [pc, #248]	; (800a49c <USBD_CDC_Init+0x1e4>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	f003 020f 	and.w	r2, r3, #15
 800a3a8:	6879      	ldr	r1, [r7, #4]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	440b      	add	r3, r1
 800a3b4:	3324      	adds	r3, #36	; 0x24
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a3ba:	4b39      	ldr	r3, [pc, #228]	; (800a4a0 <USBD_CDC_Init+0x1e8>)
 800a3bc:	7819      	ldrb	r1, [r3, #0]
 800a3be:	2340      	movs	r3, #64	; 0x40
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f002 fae9 	bl	800c99a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a3c8:	4b35      	ldr	r3, [pc, #212]	; (800a4a0 <USBD_CDC_Init+0x1e8>)
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	f003 020f 	and.w	r2, r3, #15
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	440b      	add	r3, r1
 800a3dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a3e4:	4b2f      	ldr	r3, [pc, #188]	; (800a4a4 <USBD_CDC_Init+0x1ec>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	f003 020f 	and.w	r2, r3, #15
 800a3ec:	6879      	ldr	r1, [r7, #4]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	440b      	add	r3, r1
 800a3f8:	3326      	adds	r3, #38	; 0x26
 800a3fa:	2210      	movs	r2, #16
 800a3fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a3fe:	4b29      	ldr	r3, [pc, #164]	; (800a4a4 <USBD_CDC_Init+0x1ec>)
 800a400:	7819      	ldrb	r1, [r3, #0]
 800a402:	2308      	movs	r3, #8
 800a404:	2203      	movs	r2, #3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f002 fac7 	bl	800c99a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a40c:	4b25      	ldr	r3, [pc, #148]	; (800a4a4 <USBD_CDC_Init+0x1ec>)
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	f003 020f 	and.w	r2, r3, #15
 800a414:	6879      	ldr	r1, [r7, #4]
 800a416:	4613      	mov	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4413      	add	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	440b      	add	r3, r1
 800a420:	3324      	adds	r3, #36	; 0x24
 800a422:	2201      	movs	r2, #1
 800a424:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	33b0      	adds	r3, #176	; 0xb0
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a45c:	2302      	movs	r3, #2
 800a45e:	e018      	b.n	800a492 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	7c1b      	ldrb	r3, [r3, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10a      	bne.n	800a47e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a468:	4b0d      	ldr	r3, [pc, #52]	; (800a4a0 <USBD_CDC_Init+0x1e8>)
 800a46a:	7819      	ldrb	r1, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a472:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f002 fb7e 	bl	800cb78 <USBD_LL_PrepareReceive>
 800a47c:	e008      	b.n	800a490 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a47e:	4b08      	ldr	r3, [pc, #32]	; (800a4a0 <USBD_CDC_Init+0x1e8>)
 800a480:	7819      	ldrb	r1, [r3, #0]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a488:	2340      	movs	r3, #64	; 0x40
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f002 fb74 	bl	800cb78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	200000a3 	.word	0x200000a3
 800a4a0:	200000a4 	.word	0x200000a4
 800a4a4:	200000a5 	.word	0x200000a5

0800a4a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a4b4:	4b3a      	ldr	r3, [pc, #232]	; (800a5a0 <USBD_CDC_DeInit+0xf8>)
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f002 fa93 	bl	800c9e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a4c0:	4b37      	ldr	r3, [pc, #220]	; (800a5a0 <USBD_CDC_DeInit+0xf8>)
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	f003 020f 	and.w	r2, r3, #15
 800a4c8:	6879      	ldr	r1, [r7, #4]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	440b      	add	r3, r1
 800a4d4:	3324      	adds	r3, #36	; 0x24
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a4da:	4b32      	ldr	r3, [pc, #200]	; (800a5a4 <USBD_CDC_DeInit+0xfc>)
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f002 fa80 	bl	800c9e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a4e6:	4b2f      	ldr	r3, [pc, #188]	; (800a5a4 <USBD_CDC_DeInit+0xfc>)
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	f003 020f 	and.w	r2, r3, #15
 800a4ee:	6879      	ldr	r1, [r7, #4]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	440b      	add	r3, r1
 800a4fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a4fe:	2200      	movs	r2, #0
 800a500:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a502:	4b29      	ldr	r3, [pc, #164]	; (800a5a8 <USBD_CDC_DeInit+0x100>)
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f002 fa6c 	bl	800c9e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a50e:	4b26      	ldr	r3, [pc, #152]	; (800a5a8 <USBD_CDC_DeInit+0x100>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	f003 020f 	and.w	r2, r3, #15
 800a516:	6879      	ldr	r1, [r7, #4]
 800a518:	4613      	mov	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	440b      	add	r3, r1
 800a522:	3324      	adds	r3, #36	; 0x24
 800a524:	2200      	movs	r2, #0
 800a526:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a528:	4b1f      	ldr	r3, [pc, #124]	; (800a5a8 <USBD_CDC_DeInit+0x100>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	f003 020f 	and.w	r2, r3, #15
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	4613      	mov	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	440b      	add	r3, r1
 800a53c:	3326      	adds	r3, #38	; 0x26
 800a53e:	2200      	movs	r2, #0
 800a540:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	32b0      	adds	r2, #176	; 0xb0
 800a54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d01f      	beq.n	800a594 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	33b0      	adds	r3, #176	; 0xb0
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	32b0      	adds	r2, #176	; 0xb0
 800a572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a576:	4618      	mov	r0, r3
 800a578:	f002 fb40 	bl	800cbfc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	32b0      	adds	r2, #176	; 0xb0
 800a586:	2100      	movs	r1, #0
 800a588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	200000a3 	.word	0x200000a3
 800a5a4:	200000a4 	.word	0x200000a4
 800a5a8:	200000a5 	.word	0x200000a5

0800a5ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	32b0      	adds	r2, #176	; 0xb0
 800a5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e0bf      	b.n	800a75c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d050      	beq.n	800a68a <USBD_CDC_Setup+0xde>
 800a5e8:	2b20      	cmp	r3, #32
 800a5ea:	f040 80af 	bne.w	800a74c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	88db      	ldrh	r3, [r3, #6]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d03a      	beq.n	800a66c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	b25b      	sxtb	r3, r3
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	da1b      	bge.n	800a638 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	33b0      	adds	r3, #176	; 0xb0
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a616:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a618:	683a      	ldr	r2, [r7, #0]
 800a61a:	88d2      	ldrh	r2, [r2, #6]
 800a61c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	88db      	ldrh	r3, [r3, #6]
 800a622:	2b07      	cmp	r3, #7
 800a624:	bf28      	it	cs
 800a626:	2307      	movcs	r3, #7
 800a628:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	89fa      	ldrh	r2, [r7, #14]
 800a62e:	4619      	mov	r1, r3
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 fd89 	bl	800c148 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a636:	e090      	b.n	800a75a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	785a      	ldrb	r2, [r3, #1]
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	88db      	ldrh	r3, [r3, #6]
 800a646:	2b3f      	cmp	r3, #63	; 0x3f
 800a648:	d803      	bhi.n	800a652 <USBD_CDC_Setup+0xa6>
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	88db      	ldrh	r3, [r3, #6]
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	e000      	b.n	800a654 <USBD_CDC_Setup+0xa8>
 800a652:	2240      	movs	r2, #64	; 0x40
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a65a:	6939      	ldr	r1, [r7, #16]
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a662:	461a      	mov	r2, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f001 fd9b 	bl	800c1a0 <USBD_CtlPrepareRx>
      break;
 800a66a:	e076      	b.n	800a75a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	33b0      	adds	r3, #176	; 0xb0
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	7850      	ldrb	r0, [r2, #1]
 800a682:	2200      	movs	r2, #0
 800a684:	6839      	ldr	r1, [r7, #0]
 800a686:	4798      	blx	r3
      break;
 800a688:	e067      	b.n	800a75a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	785b      	ldrb	r3, [r3, #1]
 800a68e:	2b0b      	cmp	r3, #11
 800a690:	d851      	bhi.n	800a736 <USBD_CDC_Setup+0x18a>
 800a692:	a201      	add	r2, pc, #4	; (adr r2, 800a698 <USBD_CDC_Setup+0xec>)
 800a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a698:	0800a6c9 	.word	0x0800a6c9
 800a69c:	0800a745 	.word	0x0800a745
 800a6a0:	0800a737 	.word	0x0800a737
 800a6a4:	0800a737 	.word	0x0800a737
 800a6a8:	0800a737 	.word	0x0800a737
 800a6ac:	0800a737 	.word	0x0800a737
 800a6b0:	0800a737 	.word	0x0800a737
 800a6b4:	0800a737 	.word	0x0800a737
 800a6b8:	0800a737 	.word	0x0800a737
 800a6bc:	0800a737 	.word	0x0800a737
 800a6c0:	0800a6f3 	.word	0x0800a6f3
 800a6c4:	0800a71d 	.word	0x0800a71d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	2b03      	cmp	r3, #3
 800a6d2:	d107      	bne.n	800a6e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a6d4:	f107 030a 	add.w	r3, r7, #10
 800a6d8:	2202      	movs	r2, #2
 800a6da:	4619      	mov	r1, r3
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f001 fd33 	bl	800c148 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6e2:	e032      	b.n	800a74a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f001 fcbd 	bl	800c066 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	75fb      	strb	r3, [r7, #23]
          break;
 800a6f0:	e02b      	b.n	800a74a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	d107      	bne.n	800a70e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a6fe:	f107 030d 	add.w	r3, r7, #13
 800a702:	2201      	movs	r2, #1
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f001 fd1e 	bl	800c148 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a70c:	e01d      	b.n	800a74a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f001 fca8 	bl	800c066 <USBD_CtlError>
            ret = USBD_FAIL;
 800a716:	2303      	movs	r3, #3
 800a718:	75fb      	strb	r3, [r7, #23]
          break;
 800a71a:	e016      	b.n	800a74a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b03      	cmp	r3, #3
 800a726:	d00f      	beq.n	800a748 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f001 fc9b 	bl	800c066 <USBD_CtlError>
            ret = USBD_FAIL;
 800a730:	2303      	movs	r3, #3
 800a732:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a734:	e008      	b.n	800a748 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a736:	6839      	ldr	r1, [r7, #0]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f001 fc94 	bl	800c066 <USBD_CtlError>
          ret = USBD_FAIL;
 800a73e:	2303      	movs	r3, #3
 800a740:	75fb      	strb	r3, [r7, #23]
          break;
 800a742:	e002      	b.n	800a74a <USBD_CDC_Setup+0x19e>
          break;
 800a744:	bf00      	nop
 800a746:	e008      	b.n	800a75a <USBD_CDC_Setup+0x1ae>
          break;
 800a748:	bf00      	nop
      }
      break;
 800a74a:	e006      	b.n	800a75a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f001 fc89 	bl	800c066 <USBD_CtlError>
      ret = USBD_FAIL;
 800a754:	2303      	movs	r3, #3
 800a756:	75fb      	strb	r3, [r7, #23]
      break;
 800a758:	bf00      	nop
  }

  return (uint8_t)ret;
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	460b      	mov	r3, r1
 800a76e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a776:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	32b0      	adds	r2, #176	; 0xb0
 800a782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e065      	b.n	800a85a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	32b0      	adds	r2, #176	; 0xb0
 800a798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a79c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a79e:	78fb      	ldrb	r3, [r7, #3]
 800a7a0:	f003 020f 	and.w	r2, r3, #15
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	440b      	add	r3, r1
 800a7b0:	3318      	adds	r3, #24
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d02f      	beq.n	800a818 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a7b8:	78fb      	ldrb	r3, [r7, #3]
 800a7ba:	f003 020f 	and.w	r2, r3, #15
 800a7be:	6879      	ldr	r1, [r7, #4]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4413      	add	r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	440b      	add	r3, r1
 800a7ca:	3318      	adds	r3, #24
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	78fb      	ldrb	r3, [r7, #3]
 800a7d0:	f003 010f 	and.w	r1, r3, #15
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	00db      	lsls	r3, r3, #3
 800a7da:	440b      	add	r3, r1
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4403      	add	r3, r0
 800a7e0:	3348      	adds	r3, #72	; 0x48
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a7e8:	fb01 f303 	mul.w	r3, r1, r3
 800a7ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d112      	bne.n	800a818 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a7f2:	78fb      	ldrb	r3, [r7, #3]
 800a7f4:	f003 020f 	and.w	r2, r3, #15
 800a7f8:	6879      	ldr	r1, [r7, #4]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	440b      	add	r3, r1
 800a804:	3318      	adds	r3, #24
 800a806:	2200      	movs	r2, #0
 800a808:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a80a:	78f9      	ldrb	r1, [r7, #3]
 800a80c:	2300      	movs	r3, #0
 800a80e:	2200      	movs	r2, #0
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f002 f990 	bl	800cb36 <USBD_LL_Transmit>
 800a816:	e01f      	b.n	800a858 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	33b0      	adds	r3, #176	; 0xb0
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4413      	add	r3, r2
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d010      	beq.n	800a858 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	33b0      	adds	r3, #176	; 0xb0
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4413      	add	r3, r2
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a854:	78fa      	ldrb	r2, [r7, #3]
 800a856:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b084      	sub	sp, #16
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	460b      	mov	r3, r1
 800a86c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	32b0      	adds	r2, #176	; 0xb0
 800a878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	32b0      	adds	r2, #176	; 0xb0
 800a888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d101      	bne.n	800a894 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a890:	2303      	movs	r3, #3
 800a892:	e01a      	b.n	800a8ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a894:	78fb      	ldrb	r3, [r7, #3]
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f002 f98e 	bl	800cbba <USBD_LL_GetRxDataSize>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	33b0      	adds	r3, #176	; 0xb0
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	32b0      	adds	r2, #176	; 0xb0
 800a8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d101      	bne.n	800a8f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	e025      	b.n	800a940 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	33b0      	adds	r3, #176	; 0xb0
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d01a      	beq.n	800a93e <USBD_CDC_EP0_RxReady+0x6c>
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a90e:	2bff      	cmp	r3, #255	; 0xff
 800a910:	d015      	beq.n	800a93e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	33b0      	adds	r3, #176	; 0xb0
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a92a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a932:	b292      	uxth	r2, r2
 800a934:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	22ff      	movs	r2, #255	; 0xff
 800a93a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a950:	2182      	movs	r1, #130	; 0x82
 800a952:	4818      	ldr	r0, [pc, #96]	; (800a9b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a954:	f000 fd4f 	bl	800b3f6 <USBD_GetEpDesc>
 800a958:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a95a:	2101      	movs	r1, #1
 800a95c:	4815      	ldr	r0, [pc, #84]	; (800a9b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a95e:	f000 fd4a 	bl	800b3f6 <USBD_GetEpDesc>
 800a962:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a964:	2181      	movs	r1, #129	; 0x81
 800a966:	4813      	ldr	r0, [pc, #76]	; (800a9b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a968:	f000 fd45 	bl	800b3f6 <USBD_GetEpDesc>
 800a96c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	2210      	movs	r2, #16
 800a978:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d006      	beq.n	800a98e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	2200      	movs	r2, #0
 800a984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a988:	711a      	strb	r2, [r3, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d006      	beq.n	800a9a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a99c:	711a      	strb	r2, [r3, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2243      	movs	r2, #67	; 0x43
 800a9a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a9a8:	4b02      	ldr	r3, [pc, #8]	; (800a9b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20000060 	.word	0x20000060

0800a9b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a9c0:	2182      	movs	r1, #130	; 0x82
 800a9c2:	4818      	ldr	r0, [pc, #96]	; (800aa24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9c4:	f000 fd17 	bl	800b3f6 <USBD_GetEpDesc>
 800a9c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a9ca:	2101      	movs	r1, #1
 800a9cc:	4815      	ldr	r0, [pc, #84]	; (800aa24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9ce:	f000 fd12 	bl	800b3f6 <USBD_GetEpDesc>
 800a9d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a9d4:	2181      	movs	r1, #129	; 0x81
 800a9d6:	4813      	ldr	r0, [pc, #76]	; (800aa24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9d8:	f000 fd0d 	bl	800b3f6 <USBD_GetEpDesc>
 800a9dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d002      	beq.n	800a9ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	2210      	movs	r2, #16
 800a9e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d006      	beq.n	800a9fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	711a      	strb	r2, [r3, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f042 0202 	orr.w	r2, r2, #2
 800a9fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d006      	beq.n	800aa12 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	711a      	strb	r2, [r3, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f042 0202 	orr.w	r2, r2, #2
 800aa10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2243      	movs	r2, #67	; 0x43
 800aa16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aa18:	4b02      	ldr	r3, [pc, #8]	; (800aa24 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3718      	adds	r7, #24
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	20000060 	.word	0x20000060

0800aa28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aa30:	2182      	movs	r1, #130	; 0x82
 800aa32:	4818      	ldr	r0, [pc, #96]	; (800aa94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa34:	f000 fcdf 	bl	800b3f6 <USBD_GetEpDesc>
 800aa38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	4815      	ldr	r0, [pc, #84]	; (800aa94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa3e:	f000 fcda 	bl	800b3f6 <USBD_GetEpDesc>
 800aa42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aa44:	2181      	movs	r1, #129	; 0x81
 800aa46:	4813      	ldr	r0, [pc, #76]	; (800aa94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa48:	f000 fcd5 	bl	800b3f6 <USBD_GetEpDesc>
 800aa4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d002      	beq.n	800aa5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	2210      	movs	r2, #16
 800aa58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d006      	beq.n	800aa6e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa68:	711a      	strb	r2, [r3, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d006      	beq.n	800aa82 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa7c:	711a      	strb	r2, [r3, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2243      	movs	r2, #67	; 0x43
 800aa86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aa88:	4b02      	ldr	r3, [pc, #8]	; (800aa94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	20000060 	.word	0x20000060

0800aa98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	220a      	movs	r2, #10
 800aaa4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aaa6:	4b03      	ldr	r3, [pc, #12]	; (800aab4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	2000001c 	.word	0x2000001c

0800aab8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d101      	bne.n	800aacc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e009      	b.n	800aae0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	33b0      	adds	r3, #176	; 0xb0
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	683a      	ldr	r2, [r7, #0]
 800aadc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	32b0      	adds	r2, #176	; 0xb0
 800ab02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab06:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d101      	bne.n	800ab12 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e008      	b.n	800ab24 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	371c      	adds	r7, #28
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	32b0      	adds	r2, #176	; 0xb0
 800ab44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ab50:	2303      	movs	r3, #3
 800ab52:	e004      	b.n	800ab5e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
	...

0800ab6c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	32b0      	adds	r2, #176	; 0xb0
 800ab7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab82:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ab84:	2301      	movs	r3, #1
 800ab86:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	32b0      	adds	r2, #176	; 0xb0
 800ab92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	e025      	b.n	800abea <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d11f      	bne.n	800abe8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2201      	movs	r2, #1
 800abac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800abb0:	4b10      	ldr	r3, [pc, #64]	; (800abf4 <USBD_CDC_TransmitPacket+0x88>)
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	f003 020f 	and.w	r2, r3, #15
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4403      	add	r3, r0
 800abca:	3318      	adds	r3, #24
 800abcc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800abce:	4b09      	ldr	r3, [pc, #36]	; (800abf4 <USBD_CDC_TransmitPacket+0x88>)
 800abd0:	7819      	ldrb	r1, [r3, #0]
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f001 ffa9 	bl	800cb36 <USBD_LL_Transmit>

    ret = USBD_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800abe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	200000a3 	.word	0x200000a3

0800abf8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	32b0      	adds	r2, #176	; 0xb0
 800ac0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac0e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	32b0      	adds	r2, #176	; 0xb0
 800ac1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e018      	b.n	800ac58 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	7c1b      	ldrb	r3, [r3, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10a      	bne.n	800ac44 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac2e:	4b0c      	ldr	r3, [pc, #48]	; (800ac60 <USBD_CDC_ReceivePacket+0x68>)
 800ac30:	7819      	ldrb	r1, [r3, #0]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f001 ff9b 	bl	800cb78 <USBD_LL_PrepareReceive>
 800ac42:	e008      	b.n	800ac56 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac44:	4b06      	ldr	r3, [pc, #24]	; (800ac60 <USBD_CDC_ReceivePacket+0x68>)
 800ac46:	7819      	ldrb	r1, [r3, #0]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac4e:	2340      	movs	r3, #64	; 0x40
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f001 ff91 	bl	800cb78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	200000a4 	.word	0x200000a4

0800ac64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d101      	bne.n	800ac7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	e01f      	b.n	800acbc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	79fa      	ldrb	r2, [r7, #7]
 800acae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f001 fe0b 	bl	800c8cc <USBD_LL_Init>
 800acb6:	4603      	mov	r3, r0
 800acb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800acba:	7dfb      	ldrb	r3, [r7, #23]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3718      	adds	r7, #24
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acce:	2300      	movs	r3, #0
 800acd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d101      	bne.n	800acdc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800acd8:	2303      	movs	r3, #3
 800acda:	e025      	b.n	800ad28 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	32ae      	adds	r2, #174	; 0xae
 800acee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00f      	beq.n	800ad18 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	32ae      	adds	r2, #174	; 0xae
 800ad02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad08:	f107 020e 	add.w	r2, r7, #14
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	4798      	blx	r3
 800ad10:	4602      	mov	r2, r0
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f001 fe13 	bl	800c964 <USBD_LL_Start>
 800ad3e:	4603      	mov	r3, r0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad50:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b084      	sub	sp, #16
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	460b      	mov	r3, r1
 800ad68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d009      	beq.n	800ad8c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	78fa      	ldrb	r2, [r7, #3]
 800ad82:	4611      	mov	r1, r2
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	4798      	blx	r3
 800ad88:	4603      	mov	r3, r0
 800ad8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b084      	sub	sp, #16
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	460b      	mov	r3, r1
 800ada0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ada2:	2300      	movs	r3, #0
 800ada4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	78fa      	ldrb	r2, [r7, #3]
 800adb0:	4611      	mov	r1, r2
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	4798      	blx	r3
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800adbc:	2303      	movs	r3, #3
 800adbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b084      	sub	sp, #16
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	4618      	mov	r0, r3
 800adde:	f001 f908 	bl	800bff2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800adf0:	461a      	mov	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800adfe:	f003 031f 	and.w	r3, r3, #31
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d01a      	beq.n	800ae3c <USBD_LL_SetupStage+0x72>
 800ae06:	2b02      	cmp	r3, #2
 800ae08:	d822      	bhi.n	800ae50 <USBD_LL_SetupStage+0x86>
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d002      	beq.n	800ae14 <USBD_LL_SetupStage+0x4a>
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d00a      	beq.n	800ae28 <USBD_LL_SetupStage+0x5e>
 800ae12:	e01d      	b.n	800ae50 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 fb5f 	bl	800b4e0 <USBD_StdDevReq>
 800ae22:	4603      	mov	r3, r0
 800ae24:	73fb      	strb	r3, [r7, #15]
      break;
 800ae26:	e020      	b.n	800ae6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 fbc7 	bl	800b5c4 <USBD_StdItfReq>
 800ae36:	4603      	mov	r3, r0
 800ae38:	73fb      	strb	r3, [r7, #15]
      break;
 800ae3a:	e016      	b.n	800ae6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fc29 	bl	800b69c <USBD_StdEPReq>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae4e:	e00c      	b.n	800ae6a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f001 fde0 	bl	800ca24 <USBD_LL_StallEP>
 800ae64:	4603      	mov	r3, r0
 800ae66:	73fb      	strb	r3, [r7, #15]
      break;
 800ae68:	bf00      	nop
  }

  return ret;
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ae86:	7afb      	ldrb	r3, [r7, #11]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d16e      	bne.n	800af6a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ae92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	f040 8098 	bne.w	800afd0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	689a      	ldr	r2, [r3, #8]
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d913      	bls.n	800aed4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	689a      	ldr	r2, [r3, #8]
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	1ad2      	subs	r2, r2, r3
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	68da      	ldr	r2, [r3, #12]
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	4293      	cmp	r3, r2
 800aec4:	bf28      	it	cs
 800aec6:	4613      	movcs	r3, r2
 800aec8:	461a      	mov	r2, r3
 800aeca:	6879      	ldr	r1, [r7, #4]
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f001 f984 	bl	800c1da <USBD_CtlContinueRx>
 800aed2:	e07d      	b.n	800afd0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aeda:	f003 031f 	and.w	r3, r3, #31
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d014      	beq.n	800af0c <USBD_LL_DataOutStage+0x98>
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d81d      	bhi.n	800af22 <USBD_LL_DataOutStage+0xae>
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <USBD_LL_DataOutStage+0x7c>
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d003      	beq.n	800aef6 <USBD_LL_DataOutStage+0x82>
 800aeee:	e018      	b.n	800af22 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	75bb      	strb	r3, [r7, #22]
            break;
 800aef4:	e018      	b.n	800af28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	4619      	mov	r1, r3
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 fa5e 	bl	800b3c2 <USBD_CoreFindIF>
 800af06:	4603      	mov	r3, r0
 800af08:	75bb      	strb	r3, [r7, #22]
            break;
 800af0a:	e00d      	b.n	800af28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800af12:	b2db      	uxtb	r3, r3
 800af14:	4619      	mov	r1, r3
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f000 fa60 	bl	800b3dc <USBD_CoreFindEP>
 800af1c:	4603      	mov	r3, r0
 800af1e:	75bb      	strb	r3, [r7, #22]
            break;
 800af20:	e002      	b.n	800af28 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800af22:	2300      	movs	r3, #0
 800af24:	75bb      	strb	r3, [r7, #22]
            break;
 800af26:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800af28:	7dbb      	ldrb	r3, [r7, #22]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d119      	bne.n	800af62 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b03      	cmp	r3, #3
 800af38:	d113      	bne.n	800af62 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800af3a:	7dba      	ldrb	r2, [r7, #22]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	32ae      	adds	r2, #174	; 0xae
 800af40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00b      	beq.n	800af62 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800af4a:	7dba      	ldrb	r2, [r7, #22]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800af52:	7dba      	ldrb	r2, [r7, #22]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	32ae      	adds	r2, #174	; 0xae
 800af58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f001 f94a 	bl	800c1fc <USBD_CtlSendStatus>
 800af68:	e032      	b.n	800afd0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800af6a:	7afb      	ldrb	r3, [r7, #11]
 800af6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af70:	b2db      	uxtb	r3, r3
 800af72:	4619      	mov	r1, r3
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f000 fa31 	bl	800b3dc <USBD_CoreFindEP>
 800af7a:	4603      	mov	r3, r0
 800af7c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af7e:	7dbb      	ldrb	r3, [r7, #22]
 800af80:	2bff      	cmp	r3, #255	; 0xff
 800af82:	d025      	beq.n	800afd0 <USBD_LL_DataOutStage+0x15c>
 800af84:	7dbb      	ldrb	r3, [r7, #22]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d122      	bne.n	800afd0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b03      	cmp	r3, #3
 800af94:	d117      	bne.n	800afc6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800af96:	7dba      	ldrb	r2, [r7, #22]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	32ae      	adds	r2, #174	; 0xae
 800af9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00f      	beq.n	800afc6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800afa6:	7dba      	ldrb	r2, [r7, #22]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800afae:	7dba      	ldrb	r2, [r7, #22]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	32ae      	adds	r2, #174	; 0xae
 800afb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	7afa      	ldrb	r2, [r7, #11]
 800afbc:	4611      	mov	r1, r2
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	4798      	blx	r3
 800afc2:	4603      	mov	r3, r0
 800afc4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800afcc:	7dfb      	ldrb	r3, [r7, #23]
 800afce:	e000      	b.n	800afd2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b086      	sub	sp, #24
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	460b      	mov	r3, r1
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800afe8:	7afb      	ldrb	r3, [r7, #11]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d16f      	bne.n	800b0ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3314      	adds	r3, #20
 800aff2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800affa:	2b02      	cmp	r3, #2
 800affc:	d15a      	bne.n	800b0b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	689a      	ldr	r2, [r3, #8]
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	429a      	cmp	r2, r3
 800b008:	d914      	bls.n	800b034 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	689a      	ldr	r2, [r3, #8]
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	1ad2      	subs	r2, r2, r3
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	461a      	mov	r2, r3
 800b01e:	6879      	ldr	r1, [r7, #4]
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f001 f8ac 	bl	800c17e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b026:	2300      	movs	r3, #0
 800b028:	2200      	movs	r2, #0
 800b02a:	2100      	movs	r1, #0
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f001 fda3 	bl	800cb78 <USBD_LL_PrepareReceive>
 800b032:	e03f      	b.n	800b0b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	68da      	ldr	r2, [r3, #12]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d11c      	bne.n	800b07a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	685a      	ldr	r2, [r3, #4]
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b048:	429a      	cmp	r2, r3
 800b04a:	d316      	bcc.n	800b07a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	685a      	ldr	r2, [r3, #4]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b056:	429a      	cmp	r2, r3
 800b058:	d20f      	bcs.n	800b07a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b05a:	2200      	movs	r2, #0
 800b05c:	2100      	movs	r1, #0
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f001 f88d 	bl	800c17e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b06c:	2300      	movs	r3, #0
 800b06e:	2200      	movs	r2, #0
 800b070:	2100      	movs	r1, #0
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f001 fd80 	bl	800cb78 <USBD_LL_PrepareReceive>
 800b078:	e01c      	b.n	800b0b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b03      	cmp	r3, #3
 800b084:	d10f      	bne.n	800b0a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d009      	beq.n	800b0a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0a6:	2180      	movs	r1, #128	; 0x80
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f001 fcbb 	bl	800ca24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f001 f8b7 	bl	800c222 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d03a      	beq.n	800b134 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f7ff fe42 	bl	800ad48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b0cc:	e032      	b.n	800b134 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b0ce:	7afb      	ldrb	r3, [r7, #11]
 800b0d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f000 f97f 	bl	800b3dc <USBD_CoreFindEP>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
 800b0e4:	2bff      	cmp	r3, #255	; 0xff
 800b0e6:	d025      	beq.n	800b134 <USBD_LL_DataInStage+0x15a>
 800b0e8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d122      	bne.n	800b134 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	2b03      	cmp	r3, #3
 800b0f8:	d11c      	bne.n	800b134 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b0fa:	7dfa      	ldrb	r2, [r7, #23]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	32ae      	adds	r2, #174	; 0xae
 800b100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d014      	beq.n	800b134 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b10a:	7dfa      	ldrb	r2, [r7, #23]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b112:	7dfa      	ldrb	r2, [r7, #23]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	32ae      	adds	r2, #174	; 0xae
 800b118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	7afa      	ldrb	r2, [r7, #11]
 800b120:	4611      	mov	r1, r2
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	4798      	blx	r3
 800b126:	4603      	mov	r3, r0
 800b128:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b12a:	7dbb      	ldrb	r3, [r7, #22]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b130:	7dbb      	ldrb	r3, [r7, #22]
 800b132:	e000      	b.n	800b136 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b084      	sub	sp, #16
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b176:	2b00      	cmp	r3, #0
 800b178:	d014      	beq.n	800b1a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00e      	beq.n	800b1a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	6852      	ldr	r2, [r2, #4]
 800b192:	b2d2      	uxtb	r2, r2
 800b194:	4611      	mov	r1, r2
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	4798      	blx	r3
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d001      	beq.n	800b1a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b1a4:	2340      	movs	r3, #64	; 0x40
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f001 fbf5 	bl	800c99a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2240      	movs	r2, #64	; 0x40
 800b1bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b1c0:	2340      	movs	r3, #64	; 0x40
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2180      	movs	r1, #128	; 0x80
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f001 fbe7 	bl	800c99a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2240      	movs	r2, #64	; 0x40
 800b1d6:	621a      	str	r2, [r3, #32]

  return ret;
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b083      	sub	sp, #12
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	78fa      	ldrb	r2, [r7, #3]
 800b1f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b202:	b480      	push	{r7}
 800b204:	b083      	sub	sp, #12
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b210:	b2da      	uxtb	r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2204      	movs	r2, #4
 800b21c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b22e:	b480      	push	{r7}
 800b230:	b083      	sub	sp, #12
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	2b04      	cmp	r3, #4
 800b240:	d106      	bne.n	800b250 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b082      	sub	sp, #8
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	2b03      	cmp	r3, #3
 800b270:	d110      	bne.n	800b294 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00b      	beq.n	800b294 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b282:	69db      	ldr	r3, [r3, #28]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d005      	beq.n	800b294 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b082      	sub	sp, #8
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	32ae      	adds	r2, #174	; 0xae
 800b2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e01c      	b.n	800b2fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	2b03      	cmp	r3, #3
 800b2ca:	d115      	bne.n	800b2f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	32ae      	adds	r2, #174	; 0xae
 800b2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2da:	6a1b      	ldr	r3, [r3, #32]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00b      	beq.n	800b2f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	32ae      	adds	r2, #174	; 0xae
 800b2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ee:	6a1b      	ldr	r3, [r3, #32]
 800b2f0:	78fa      	ldrb	r2, [r7, #3]
 800b2f2:	4611      	mov	r1, r2
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b082      	sub	sp, #8
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	460b      	mov	r3, r1
 800b30c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	32ae      	adds	r2, #174	; 0xae
 800b318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b320:	2303      	movs	r3, #3
 800b322:	e01c      	b.n	800b35e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	d115      	bne.n	800b35c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	32ae      	adds	r2, #174	; 0xae
 800b33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00b      	beq.n	800b35c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	32ae      	adds	r2, #174	; 0xae
 800b34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b354:	78fa      	ldrb	r2, [r7, #3]
 800b356:	4611      	mov	r1, r2
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b384:	2300      	movs	r3, #0
 800b386:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00e      	beq.n	800b3b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	6852      	ldr	r2, [r2, #4]
 800b3a6:	b2d2      	uxtb	r2, r2
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	4798      	blx	r3
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d001      	beq.n	800b3b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	b083      	sub	sp, #12
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b3ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b3e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	370c      	adds	r7, #12
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b086      	sub	sp, #24
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
 800b3fe:	460b      	mov	r3, r1
 800b400:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b40a:	2300      	movs	r3, #0
 800b40c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	885b      	ldrh	r3, [r3, #2]
 800b412:	b29a      	uxth	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	b29b      	uxth	r3, r3
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d920      	bls.n	800b460 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	b29b      	uxth	r3, r3
 800b424:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b426:	e013      	b.n	800b450 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b428:	f107 030a 	add.w	r3, r7, #10
 800b42c:	4619      	mov	r1, r3
 800b42e:	6978      	ldr	r0, [r7, #20]
 800b430:	f000 f81b 	bl	800b46a <USBD_GetNextDesc>
 800b434:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	785b      	ldrb	r3, [r3, #1]
 800b43a:	2b05      	cmp	r3, #5
 800b43c:	d108      	bne.n	800b450 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	789b      	ldrb	r3, [r3, #2]
 800b446:	78fa      	ldrb	r2, [r7, #3]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d008      	beq.n	800b45e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b44c:	2300      	movs	r3, #0
 800b44e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	885b      	ldrh	r3, [r3, #2]
 800b454:	b29a      	uxth	r2, r3
 800b456:	897b      	ldrh	r3, [r7, #10]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d8e5      	bhi.n	800b428 <USBD_GetEpDesc+0x32>
 800b45c:	e000      	b.n	800b460 <USBD_GetEpDesc+0x6a>
          break;
 800b45e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b460:	693b      	ldr	r3, [r7, #16]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3718      	adds	r7, #24
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b46a:	b480      	push	{r7}
 800b46c:	b085      	sub	sp, #20
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
 800b472:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	881a      	ldrh	r2, [r3, #0]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	b29b      	uxth	r3, r3
 800b482:	4413      	add	r3, r2
 800b484:	b29a      	uxth	r2, r3
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	461a      	mov	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4413      	add	r3, r2
 800b494:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b496:	68fb      	ldr	r3, [r7, #12]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b087      	sub	sp, #28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b4c2:	8a3b      	ldrh	r3, [r7, #16]
 800b4c4:	021b      	lsls	r3, r3, #8
 800b4c6:	b21a      	sxth	r2, r3
 800b4c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	b21b      	sxth	r3, r3
 800b4d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b4d2:	89fb      	ldrh	r3, [r7, #14]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	371c      	adds	r7, #28
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4f6:	2b40      	cmp	r3, #64	; 0x40
 800b4f8:	d005      	beq.n	800b506 <USBD_StdDevReq+0x26>
 800b4fa:	2b40      	cmp	r3, #64	; 0x40
 800b4fc:	d857      	bhi.n	800b5ae <USBD_StdDevReq+0xce>
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00f      	beq.n	800b522 <USBD_StdDevReq+0x42>
 800b502:	2b20      	cmp	r3, #32
 800b504:	d153      	bne.n	800b5ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	32ae      	adds	r2, #174	; 0xae
 800b510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	4798      	blx	r3
 800b51c:	4603      	mov	r3, r0
 800b51e:	73fb      	strb	r3, [r7, #15]
      break;
 800b520:	e04a      	b.n	800b5b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	785b      	ldrb	r3, [r3, #1]
 800b526:	2b09      	cmp	r3, #9
 800b528:	d83b      	bhi.n	800b5a2 <USBD_StdDevReq+0xc2>
 800b52a:	a201      	add	r2, pc, #4	; (adr r2, 800b530 <USBD_StdDevReq+0x50>)
 800b52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b530:	0800b585 	.word	0x0800b585
 800b534:	0800b599 	.word	0x0800b599
 800b538:	0800b5a3 	.word	0x0800b5a3
 800b53c:	0800b58f 	.word	0x0800b58f
 800b540:	0800b5a3 	.word	0x0800b5a3
 800b544:	0800b563 	.word	0x0800b563
 800b548:	0800b559 	.word	0x0800b559
 800b54c:	0800b5a3 	.word	0x0800b5a3
 800b550:	0800b57b 	.word	0x0800b57b
 800b554:	0800b56d 	.word	0x0800b56d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fa3c 	bl	800b9d8 <USBD_GetDescriptor>
          break;
 800b560:	e024      	b.n	800b5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b562:	6839      	ldr	r1, [r7, #0]
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fba1 	bl	800bcac <USBD_SetAddress>
          break;
 800b56a:	e01f      	b.n	800b5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b56c:	6839      	ldr	r1, [r7, #0]
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 fbe0 	bl	800bd34 <USBD_SetConfig>
 800b574:	4603      	mov	r3, r0
 800b576:	73fb      	strb	r3, [r7, #15]
          break;
 800b578:	e018      	b.n	800b5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 fc83 	bl	800be88 <USBD_GetConfig>
          break;
 800b582:	e013      	b.n	800b5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fcb4 	bl	800bef4 <USBD_GetStatus>
          break;
 800b58c:	e00e      	b.n	800b5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fce3 	bl	800bf5c <USBD_SetFeature>
          break;
 800b596:	e009      	b.n	800b5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fd07 	bl	800bfae <USBD_ClrFeature>
          break;
 800b5a0:	e004      	b.n	800b5ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b5a2:	6839      	ldr	r1, [r7, #0]
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fd5e 	bl	800c066 <USBD_CtlError>
          break;
 800b5aa:	bf00      	nop
      }
      break;
 800b5ac:	e004      	b.n	800b5b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b5ae:	6839      	ldr	r1, [r7, #0]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 fd58 	bl	800c066 <USBD_CtlError>
      break;
 800b5b6:	bf00      	nop
  }

  return ret;
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop

0800b5c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5da:	2b40      	cmp	r3, #64	; 0x40
 800b5dc:	d005      	beq.n	800b5ea <USBD_StdItfReq+0x26>
 800b5de:	2b40      	cmp	r3, #64	; 0x40
 800b5e0:	d852      	bhi.n	800b688 <USBD_StdItfReq+0xc4>
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <USBD_StdItfReq+0x26>
 800b5e6:	2b20      	cmp	r3, #32
 800b5e8:	d14e      	bne.n	800b688 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d840      	bhi.n	800b67a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	889b      	ldrh	r3, [r3, #4]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d836      	bhi.n	800b670 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	889b      	ldrh	r3, [r3, #4]
 800b606:	b2db      	uxtb	r3, r3
 800b608:	4619      	mov	r1, r3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff fed9 	bl	800b3c2 <USBD_CoreFindIF>
 800b610:	4603      	mov	r3, r0
 800b612:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	2bff      	cmp	r3, #255	; 0xff
 800b618:	d01d      	beq.n	800b656 <USBD_StdItfReq+0x92>
 800b61a:	7bbb      	ldrb	r3, [r7, #14]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d11a      	bne.n	800b656 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b620:	7bba      	ldrb	r2, [r7, #14]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	32ae      	adds	r2, #174	; 0xae
 800b626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00f      	beq.n	800b650 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b630:	7bba      	ldrb	r2, [r7, #14]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b638:	7bba      	ldrb	r2, [r7, #14]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	32ae      	adds	r2, #174	; 0xae
 800b63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	6839      	ldr	r1, [r7, #0]
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	4798      	blx	r3
 800b64a:	4603      	mov	r3, r0
 800b64c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b64e:	e004      	b.n	800b65a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b650:	2303      	movs	r3, #3
 800b652:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b654:	e001      	b.n	800b65a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b656:	2303      	movs	r3, #3
 800b658:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	88db      	ldrh	r3, [r3, #6]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d110      	bne.n	800b684 <USBD_StdItfReq+0xc0>
 800b662:	7bfb      	ldrb	r3, [r7, #15]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10d      	bne.n	800b684 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fdc7 	bl	800c1fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b66e:	e009      	b.n	800b684 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 fcf7 	bl	800c066 <USBD_CtlError>
          break;
 800b678:	e004      	b.n	800b684 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b67a:	6839      	ldr	r1, [r7, #0]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 fcf2 	bl	800c066 <USBD_CtlError>
          break;
 800b682:	e000      	b.n	800b686 <USBD_StdItfReq+0xc2>
          break;
 800b684:	bf00      	nop
      }
      break;
 800b686:	e004      	b.n	800b692 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fceb 	bl	800c066 <USBD_CtlError>
      break;
 800b690:	bf00      	nop
  }

  return ret;
 800b692:	7bfb      	ldrb	r3, [r7, #15]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	889b      	ldrh	r3, [r3, #4]
 800b6ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6b8:	2b40      	cmp	r3, #64	; 0x40
 800b6ba:	d007      	beq.n	800b6cc <USBD_StdEPReq+0x30>
 800b6bc:	2b40      	cmp	r3, #64	; 0x40
 800b6be:	f200 817f 	bhi.w	800b9c0 <USBD_StdEPReq+0x324>
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d02a      	beq.n	800b71c <USBD_StdEPReq+0x80>
 800b6c6:	2b20      	cmp	r3, #32
 800b6c8:	f040 817a 	bne.w	800b9c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b6cc:	7bbb      	ldrb	r3, [r7, #14]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7ff fe83 	bl	800b3dc <USBD_CoreFindEP>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6da:	7b7b      	ldrb	r3, [r7, #13]
 800b6dc:	2bff      	cmp	r3, #255	; 0xff
 800b6de:	f000 8174 	beq.w	800b9ca <USBD_StdEPReq+0x32e>
 800b6e2:	7b7b      	ldrb	r3, [r7, #13]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f040 8170 	bne.w	800b9ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b6ea:	7b7a      	ldrb	r2, [r7, #13]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b6f2:	7b7a      	ldrb	r2, [r7, #13]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	32ae      	adds	r2, #174	; 0xae
 800b6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f000 8163 	beq.w	800b9ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b704:	7b7a      	ldrb	r2, [r7, #13]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	32ae      	adds	r2, #174	; 0xae
 800b70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	4798      	blx	r3
 800b716:	4603      	mov	r3, r0
 800b718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b71a:	e156      	b.n	800b9ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	785b      	ldrb	r3, [r3, #1]
 800b720:	2b03      	cmp	r3, #3
 800b722:	d008      	beq.n	800b736 <USBD_StdEPReq+0x9a>
 800b724:	2b03      	cmp	r3, #3
 800b726:	f300 8145 	bgt.w	800b9b4 <USBD_StdEPReq+0x318>
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 809b 	beq.w	800b866 <USBD_StdEPReq+0x1ca>
 800b730:	2b01      	cmp	r3, #1
 800b732:	d03c      	beq.n	800b7ae <USBD_StdEPReq+0x112>
 800b734:	e13e      	b.n	800b9b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d002      	beq.n	800b748 <USBD_StdEPReq+0xac>
 800b742:	2b03      	cmp	r3, #3
 800b744:	d016      	beq.n	800b774 <USBD_StdEPReq+0xd8>
 800b746:	e02c      	b.n	800b7a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b748:	7bbb      	ldrb	r3, [r7, #14]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00d      	beq.n	800b76a <USBD_StdEPReq+0xce>
 800b74e:	7bbb      	ldrb	r3, [r7, #14]
 800b750:	2b80      	cmp	r3, #128	; 0x80
 800b752:	d00a      	beq.n	800b76a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b754:	7bbb      	ldrb	r3, [r7, #14]
 800b756:	4619      	mov	r1, r3
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f001 f963 	bl	800ca24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b75e:	2180      	movs	r1, #128	; 0x80
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f001 f95f 	bl	800ca24 <USBD_LL_StallEP>
 800b766:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b768:	e020      	b.n	800b7ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fc7a 	bl	800c066 <USBD_CtlError>
              break;
 800b772:	e01b      	b.n	800b7ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	885b      	ldrh	r3, [r3, #2]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10e      	bne.n	800b79a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b77c:	7bbb      	ldrb	r3, [r7, #14]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00b      	beq.n	800b79a <USBD_StdEPReq+0xfe>
 800b782:	7bbb      	ldrb	r3, [r7, #14]
 800b784:	2b80      	cmp	r3, #128	; 0x80
 800b786:	d008      	beq.n	800b79a <USBD_StdEPReq+0xfe>
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	88db      	ldrh	r3, [r3, #6]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d104      	bne.n	800b79a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b790:	7bbb      	ldrb	r3, [r7, #14]
 800b792:	4619      	mov	r1, r3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f001 f945 	bl	800ca24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 fd2e 	bl	800c1fc <USBD_CtlSendStatus>

              break;
 800b7a0:	e004      	b.n	800b7ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fc5e 	bl	800c066 <USBD_CtlError>
              break;
 800b7aa:	bf00      	nop
          }
          break;
 800b7ac:	e107      	b.n	800b9be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d002      	beq.n	800b7c0 <USBD_StdEPReq+0x124>
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	d016      	beq.n	800b7ec <USBD_StdEPReq+0x150>
 800b7be:	e04b      	b.n	800b858 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7c0:	7bbb      	ldrb	r3, [r7, #14]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00d      	beq.n	800b7e2 <USBD_StdEPReq+0x146>
 800b7c6:	7bbb      	ldrb	r3, [r7, #14]
 800b7c8:	2b80      	cmp	r3, #128	; 0x80
 800b7ca:	d00a      	beq.n	800b7e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7cc:	7bbb      	ldrb	r3, [r7, #14]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f001 f927 	bl	800ca24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7d6:	2180      	movs	r1, #128	; 0x80
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f001 f923 	bl	800ca24 <USBD_LL_StallEP>
 800b7de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b7e0:	e040      	b.n	800b864 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b7e2:	6839      	ldr	r1, [r7, #0]
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 fc3e 	bl	800c066 <USBD_CtlError>
              break;
 800b7ea:	e03b      	b.n	800b864 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	885b      	ldrh	r3, [r3, #2]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d136      	bne.n	800b862 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b7f4:	7bbb      	ldrb	r3, [r7, #14]
 800b7f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d004      	beq.n	800b808 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b7fe:	7bbb      	ldrb	r3, [r7, #14]
 800b800:	4619      	mov	r1, r3
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f001 f92d 	bl	800ca62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fcf7 	bl	800c1fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b80e:	7bbb      	ldrb	r3, [r7, #14]
 800b810:	4619      	mov	r1, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff fde2 	bl	800b3dc <USBD_CoreFindEP>
 800b818:	4603      	mov	r3, r0
 800b81a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b81c:	7b7b      	ldrb	r3, [r7, #13]
 800b81e:	2bff      	cmp	r3, #255	; 0xff
 800b820:	d01f      	beq.n	800b862 <USBD_StdEPReq+0x1c6>
 800b822:	7b7b      	ldrb	r3, [r7, #13]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d11c      	bne.n	800b862 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b828:	7b7a      	ldrb	r2, [r7, #13]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b830:	7b7a      	ldrb	r2, [r7, #13]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	32ae      	adds	r2, #174	; 0xae
 800b836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d010      	beq.n	800b862 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b840:	7b7a      	ldrb	r2, [r7, #13]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	32ae      	adds	r2, #174	; 0xae
 800b846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	4798      	blx	r3
 800b852:	4603      	mov	r3, r0
 800b854:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b856:	e004      	b.n	800b862 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fc03 	bl	800c066 <USBD_CtlError>
              break;
 800b860:	e000      	b.n	800b864 <USBD_StdEPReq+0x1c8>
              break;
 800b862:	bf00      	nop
          }
          break;
 800b864:	e0ab      	b.n	800b9be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d002      	beq.n	800b878 <USBD_StdEPReq+0x1dc>
 800b872:	2b03      	cmp	r3, #3
 800b874:	d032      	beq.n	800b8dc <USBD_StdEPReq+0x240>
 800b876:	e097      	b.n	800b9a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b878:	7bbb      	ldrb	r3, [r7, #14]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d007      	beq.n	800b88e <USBD_StdEPReq+0x1f2>
 800b87e:	7bbb      	ldrb	r3, [r7, #14]
 800b880:	2b80      	cmp	r3, #128	; 0x80
 800b882:	d004      	beq.n	800b88e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b884:	6839      	ldr	r1, [r7, #0]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 fbed 	bl	800c066 <USBD_CtlError>
                break;
 800b88c:	e091      	b.n	800b9b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b88e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b892:	2b00      	cmp	r3, #0
 800b894:	da0b      	bge.n	800b8ae <USBD_StdEPReq+0x212>
 800b896:	7bbb      	ldrb	r3, [r7, #14]
 800b898:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b89c:	4613      	mov	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4413      	add	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	3310      	adds	r3, #16
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	e00b      	b.n	800b8c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
 800b8b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	2202      	movs	r2, #2
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fc37 	bl	800c148 <USBD_CtlSendData>
              break;
 800b8da:	e06a      	b.n	800b9b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b8dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	da11      	bge.n	800b908 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b8e4:	7bbb      	ldrb	r3, [r7, #14]
 800b8e6:	f003 020f 	and.w	r2, r3, #15
 800b8ea:	6879      	ldr	r1, [r7, #4]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	440b      	add	r3, r1
 800b8f6:	3324      	adds	r3, #36	; 0x24
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d117      	bne.n	800b92e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fbb0 	bl	800c066 <USBD_CtlError>
                  break;
 800b906:	e054      	b.n	800b9b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b908:	7bbb      	ldrb	r3, [r7, #14]
 800b90a:	f003 020f 	and.w	r2, r3, #15
 800b90e:	6879      	ldr	r1, [r7, #4]
 800b910:	4613      	mov	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	440b      	add	r3, r1
 800b91a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b91e:	881b      	ldrh	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d104      	bne.n	800b92e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b924:	6839      	ldr	r1, [r7, #0]
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 fb9d 	bl	800c066 <USBD_CtlError>
                  break;
 800b92c:	e041      	b.n	800b9b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b92e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b932:	2b00      	cmp	r3, #0
 800b934:	da0b      	bge.n	800b94e <USBD_StdEPReq+0x2b2>
 800b936:	7bbb      	ldrb	r3, [r7, #14]
 800b938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b93c:	4613      	mov	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4413      	add	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	3310      	adds	r3, #16
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	4413      	add	r3, r2
 800b94a:	3304      	adds	r3, #4
 800b94c:	e00b      	b.n	800b966 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b94e:	7bbb      	ldrb	r3, [r7, #14]
 800b950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b954:	4613      	mov	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	4413      	add	r3, r2
 800b964:	3304      	adds	r3, #4
 800b966:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b968:	7bbb      	ldrb	r3, [r7, #14]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d002      	beq.n	800b974 <USBD_StdEPReq+0x2d8>
 800b96e:	7bbb      	ldrb	r3, [r7, #14]
 800b970:	2b80      	cmp	r3, #128	; 0x80
 800b972:	d103      	bne.n	800b97c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2200      	movs	r2, #0
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	e00e      	b.n	800b99a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b97c:	7bbb      	ldrb	r3, [r7, #14]
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f001 f88d 	bl	800caa0 <USBD_LL_IsStallEP>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2201      	movs	r2, #1
 800b990:	601a      	str	r2, [r3, #0]
 800b992:	e002      	b.n	800b99a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	2200      	movs	r2, #0
 800b998:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	2202      	movs	r2, #2
 800b99e:	4619      	mov	r1, r3
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fbd1 	bl	800c148 <USBD_CtlSendData>
              break;
 800b9a6:	e004      	b.n	800b9b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fb5b 	bl	800c066 <USBD_CtlError>
              break;
 800b9b0:	bf00      	nop
          }
          break;
 800b9b2:	e004      	b.n	800b9be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fb55 	bl	800c066 <USBD_CtlError>
          break;
 800b9bc:	bf00      	nop
      }
      break;
 800b9be:	e005      	b.n	800b9cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fb4f 	bl	800c066 <USBD_CtlError>
      break;
 800b9c8:	e000      	b.n	800b9cc <USBD_StdEPReq+0x330>
      break;
 800b9ca:	bf00      	nop
  }

  return ret;
 800b9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
	...

0800b9d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	885b      	ldrh	r3, [r3, #2]
 800b9f2:	0a1b      	lsrs	r3, r3, #8
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	2b06      	cmp	r3, #6
 800b9fa:	f200 8128 	bhi.w	800bc4e <USBD_GetDescriptor+0x276>
 800b9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ba04 <USBD_GetDescriptor+0x2c>)
 800ba00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba04:	0800ba21 	.word	0x0800ba21
 800ba08:	0800ba39 	.word	0x0800ba39
 800ba0c:	0800ba79 	.word	0x0800ba79
 800ba10:	0800bc4f 	.word	0x0800bc4f
 800ba14:	0800bc4f 	.word	0x0800bc4f
 800ba18:	0800bbef 	.word	0x0800bbef
 800ba1c:	0800bc1b 	.word	0x0800bc1b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	7c12      	ldrb	r2, [r2, #16]
 800ba2c:	f107 0108 	add.w	r1, r7, #8
 800ba30:	4610      	mov	r0, r2
 800ba32:	4798      	blx	r3
 800ba34:	60f8      	str	r0, [r7, #12]
      break;
 800ba36:	e112      	b.n	800bc5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	7c1b      	ldrb	r3, [r3, #16]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10d      	bne.n	800ba5c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba48:	f107 0208 	add.w	r2, r7, #8
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	4798      	blx	r3
 800ba50:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	3301      	adds	r3, #1
 800ba56:	2202      	movs	r2, #2
 800ba58:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ba5a:	e100      	b.n	800bc5e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba64:	f107 0208 	add.w	r2, r7, #8
 800ba68:	4610      	mov	r0, r2
 800ba6a:	4798      	blx	r3
 800ba6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	3301      	adds	r3, #1
 800ba72:	2202      	movs	r2, #2
 800ba74:	701a      	strb	r2, [r3, #0]
      break;
 800ba76:	e0f2      	b.n	800bc5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	885b      	ldrh	r3, [r3, #2]
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	2b05      	cmp	r3, #5
 800ba80:	f200 80ac 	bhi.w	800bbdc <USBD_GetDescriptor+0x204>
 800ba84:	a201      	add	r2, pc, #4	; (adr r2, 800ba8c <USBD_GetDescriptor+0xb4>)
 800ba86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8a:	bf00      	nop
 800ba8c:	0800baa5 	.word	0x0800baa5
 800ba90:	0800bad9 	.word	0x0800bad9
 800ba94:	0800bb0d 	.word	0x0800bb0d
 800ba98:	0800bb41 	.word	0x0800bb41
 800ba9c:	0800bb75 	.word	0x0800bb75
 800baa0:	0800bba9 	.word	0x0800bba9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00b      	beq.n	800bac8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	7c12      	ldrb	r2, [r2, #16]
 800babc:	f107 0108 	add.w	r1, r7, #8
 800bac0:	4610      	mov	r0, r2
 800bac2:	4798      	blx	r3
 800bac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bac6:	e091      	b.n	800bbec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bac8:	6839      	ldr	r1, [r7, #0]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 facb 	bl	800c066 <USBD_CtlError>
            err++;
 800bad0:	7afb      	ldrb	r3, [r7, #11]
 800bad2:	3301      	adds	r3, #1
 800bad4:	72fb      	strb	r3, [r7, #11]
          break;
 800bad6:	e089      	b.n	800bbec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00b      	beq.n	800bafc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	7c12      	ldrb	r2, [r2, #16]
 800baf0:	f107 0108 	add.w	r1, r7, #8
 800baf4:	4610      	mov	r0, r2
 800baf6:	4798      	blx	r3
 800baf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bafa:	e077      	b.n	800bbec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bafc:	6839      	ldr	r1, [r7, #0]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 fab1 	bl	800c066 <USBD_CtlError>
            err++;
 800bb04:	7afb      	ldrb	r3, [r7, #11]
 800bb06:	3301      	adds	r3, #1
 800bb08:	72fb      	strb	r3, [r7, #11]
          break;
 800bb0a:	e06f      	b.n	800bbec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00b      	beq.n	800bb30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	7c12      	ldrb	r2, [r2, #16]
 800bb24:	f107 0108 	add.w	r1, r7, #8
 800bb28:	4610      	mov	r0, r2
 800bb2a:	4798      	blx	r3
 800bb2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb2e:	e05d      	b.n	800bbec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb30:	6839      	ldr	r1, [r7, #0]
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 fa97 	bl	800c066 <USBD_CtlError>
            err++;
 800bb38:	7afb      	ldrb	r3, [r7, #11]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb3e:	e055      	b.n	800bbec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb46:	691b      	ldr	r3, [r3, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00b      	beq.n	800bb64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb52:	691b      	ldr	r3, [r3, #16]
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	7c12      	ldrb	r2, [r2, #16]
 800bb58:	f107 0108 	add.w	r1, r7, #8
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	4798      	blx	r3
 800bb60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb62:	e043      	b.n	800bbec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb64:	6839      	ldr	r1, [r7, #0]
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fa7d 	bl	800c066 <USBD_CtlError>
            err++;
 800bb6c:	7afb      	ldrb	r3, [r7, #11]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	72fb      	strb	r3, [r7, #11]
          break;
 800bb72:	e03b      	b.n	800bbec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb7a:	695b      	ldr	r3, [r3, #20]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00b      	beq.n	800bb98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb86:	695b      	ldr	r3, [r3, #20]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	7c12      	ldrb	r2, [r2, #16]
 800bb8c:	f107 0108 	add.w	r1, r7, #8
 800bb90:	4610      	mov	r0, r2
 800bb92:	4798      	blx	r3
 800bb94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb96:	e029      	b.n	800bbec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb98:	6839      	ldr	r1, [r7, #0]
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 fa63 	bl	800c066 <USBD_CtlError>
            err++;
 800bba0:	7afb      	ldrb	r3, [r7, #11]
 800bba2:	3301      	adds	r3, #1
 800bba4:	72fb      	strb	r3, [r7, #11]
          break;
 800bba6:	e021      	b.n	800bbec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbae:	699b      	ldr	r3, [r3, #24]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00b      	beq.n	800bbcc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbba:	699b      	ldr	r3, [r3, #24]
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	7c12      	ldrb	r2, [r2, #16]
 800bbc0:	f107 0108 	add.w	r1, r7, #8
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	4798      	blx	r3
 800bbc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbca:	e00f      	b.n	800bbec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbcc:	6839      	ldr	r1, [r7, #0]
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 fa49 	bl	800c066 <USBD_CtlError>
            err++;
 800bbd4:	7afb      	ldrb	r3, [r7, #11]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	72fb      	strb	r3, [r7, #11]
          break;
 800bbda:	e007      	b.n	800bbec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fa41 	bl	800c066 <USBD_CtlError>
          err++;
 800bbe4:	7afb      	ldrb	r3, [r7, #11]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bbea:	bf00      	nop
      }
      break;
 800bbec:	e037      	b.n	800bc5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	7c1b      	ldrb	r3, [r3, #16]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d109      	bne.n	800bc0a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfe:	f107 0208 	add.w	r2, r7, #8
 800bc02:	4610      	mov	r0, r2
 800bc04:	4798      	blx	r3
 800bc06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc08:	e029      	b.n	800bc5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc0a:	6839      	ldr	r1, [r7, #0]
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fa2a 	bl	800c066 <USBD_CtlError>
        err++;
 800bc12:	7afb      	ldrb	r3, [r7, #11]
 800bc14:	3301      	adds	r3, #1
 800bc16:	72fb      	strb	r3, [r7, #11]
      break;
 800bc18:	e021      	b.n	800bc5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	7c1b      	ldrb	r3, [r3, #16]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10d      	bne.n	800bc3e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc2a:	f107 0208 	add.w	r2, r7, #8
 800bc2e:	4610      	mov	r0, r2
 800bc30:	4798      	blx	r3
 800bc32:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	3301      	adds	r3, #1
 800bc38:	2207      	movs	r2, #7
 800bc3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc3c:	e00f      	b.n	800bc5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc3e:	6839      	ldr	r1, [r7, #0]
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fa10 	bl	800c066 <USBD_CtlError>
        err++;
 800bc46:	7afb      	ldrb	r3, [r7, #11]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	72fb      	strb	r3, [r7, #11]
      break;
 800bc4c:	e007      	b.n	800bc5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bc4e:	6839      	ldr	r1, [r7, #0]
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 fa08 	bl	800c066 <USBD_CtlError>
      err++;
 800bc56:	7afb      	ldrb	r3, [r7, #11]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	72fb      	strb	r3, [r7, #11]
      break;
 800bc5c:	bf00      	nop
  }

  if (err != 0U)
 800bc5e:	7afb      	ldrb	r3, [r7, #11]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d11e      	bne.n	800bca2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	88db      	ldrh	r3, [r3, #6]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d016      	beq.n	800bc9a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bc6c:	893b      	ldrh	r3, [r7, #8]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00e      	beq.n	800bc90 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	88da      	ldrh	r2, [r3, #6]
 800bc76:	893b      	ldrh	r3, [r7, #8]
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	bf28      	it	cs
 800bc7c:	4613      	movcs	r3, r2
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bc82:	893b      	ldrh	r3, [r7, #8]
 800bc84:	461a      	mov	r2, r3
 800bc86:	68f9      	ldr	r1, [r7, #12]
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fa5d 	bl	800c148 <USBD_CtlSendData>
 800bc8e:	e009      	b.n	800bca4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bc90:	6839      	ldr	r1, [r7, #0]
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 f9e7 	bl	800c066 <USBD_CtlError>
 800bc98:	e004      	b.n	800bca4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 faae 	bl	800c1fc <USBD_CtlSendStatus>
 800bca0:	e000      	b.n	800bca4 <USBD_GetDescriptor+0x2cc>
    return;
 800bca2:	bf00      	nop
  }
}
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop

0800bcac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	889b      	ldrh	r3, [r3, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d131      	bne.n	800bd22 <USBD_SetAddress+0x76>
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	88db      	ldrh	r3, [r3, #6]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d12d      	bne.n	800bd22 <USBD_SetAddress+0x76>
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	885b      	ldrh	r3, [r3, #2]
 800bcca:	2b7f      	cmp	r3, #127	; 0x7f
 800bccc:	d829      	bhi.n	800bd22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	885b      	ldrh	r3, [r3, #2]
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b03      	cmp	r3, #3
 800bce4:	d104      	bne.n	800bcf0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bce6:	6839      	ldr	r1, [r7, #0]
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 f9bc 	bl	800c066 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcee:	e01d      	b.n	800bd2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	7bfa      	ldrb	r2, [r7, #15]
 800bcf4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fefb 	bl	800caf8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 fa7a 	bl	800c1fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bd08:	7bfb      	ldrb	r3, [r7, #15]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d004      	beq.n	800bd18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2202      	movs	r2, #2
 800bd12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd16:	e009      	b.n	800bd2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd20:	e004      	b.n	800bd2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 f99e 	bl	800c066 <USBD_CtlError>
  }
}
 800bd2a:	bf00      	nop
 800bd2c:	bf00      	nop
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	885b      	ldrh	r3, [r3, #2]
 800bd46:	b2da      	uxtb	r2, r3
 800bd48:	4b4e      	ldr	r3, [pc, #312]	; (800be84 <USBD_SetConfig+0x150>)
 800bd4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bd4c:	4b4d      	ldr	r3, [pc, #308]	; (800be84 <USBD_SetConfig+0x150>)
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d905      	bls.n	800bd60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bd54:	6839      	ldr	r1, [r7, #0]
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 f985 	bl	800c066 <USBD_CtlError>
    return USBD_FAIL;
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	e08c      	b.n	800be7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	2b02      	cmp	r3, #2
 800bd6a:	d002      	beq.n	800bd72 <USBD_SetConfig+0x3e>
 800bd6c:	2b03      	cmp	r3, #3
 800bd6e:	d029      	beq.n	800bdc4 <USBD_SetConfig+0x90>
 800bd70:	e075      	b.n	800be5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bd72:	4b44      	ldr	r3, [pc, #272]	; (800be84 <USBD_SetConfig+0x150>)
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d020      	beq.n	800bdbc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bd7a:	4b42      	ldr	r3, [pc, #264]	; (800be84 <USBD_SetConfig+0x150>)
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	461a      	mov	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd84:	4b3f      	ldr	r3, [pc, #252]	; (800be84 <USBD_SetConfig+0x150>)
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	4619      	mov	r1, r3
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7fe ffe7 	bl	800ad5e <USBD_SetClassConfig>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d008      	beq.n	800bdac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bd9a:	6839      	ldr	r1, [r7, #0]
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 f962 	bl	800c066 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2202      	movs	r2, #2
 800bda6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bdaa:	e065      	b.n	800be78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fa25 	bl	800c1fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2203      	movs	r2, #3
 800bdb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bdba:	e05d      	b.n	800be78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fa1d 	bl	800c1fc <USBD_CtlSendStatus>
      break;
 800bdc2:	e059      	b.n	800be78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bdc4:	4b2f      	ldr	r3, [pc, #188]	; (800be84 <USBD_SetConfig+0x150>)
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d112      	bne.n	800bdf2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2202      	movs	r2, #2
 800bdd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bdd4:	4b2b      	ldr	r3, [pc, #172]	; (800be84 <USBD_SetConfig+0x150>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bdde:	4b29      	ldr	r3, [pc, #164]	; (800be84 <USBD_SetConfig+0x150>)
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	4619      	mov	r1, r3
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f7fe ffd6 	bl	800ad96 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 fa06 	bl	800c1fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bdf0:	e042      	b.n	800be78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bdf2:	4b24      	ldr	r3, [pc, #144]	; (800be84 <USBD_SetConfig+0x150>)
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d02a      	beq.n	800be56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	b2db      	uxtb	r3, r3
 800be06:	4619      	mov	r1, r3
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7fe ffc4 	bl	800ad96 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800be0e:	4b1d      	ldr	r3, [pc, #116]	; (800be84 <USBD_SetConfig+0x150>)
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	461a      	mov	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be18:	4b1a      	ldr	r3, [pc, #104]	; (800be84 <USBD_SetConfig+0x150>)
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	4619      	mov	r1, r3
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7fe ff9d 	bl	800ad5e <USBD_SetClassConfig>
 800be24:	4603      	mov	r3, r0
 800be26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800be28:	7bfb      	ldrb	r3, [r7, #15]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00f      	beq.n	800be4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f918 	bl	800c066 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7fe ffa9 	bl	800ad96 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2202      	movs	r2, #2
 800be48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800be4c:	e014      	b.n	800be78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 f9d4 	bl	800c1fc <USBD_CtlSendStatus>
      break;
 800be54:	e010      	b.n	800be78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f9d0 	bl	800c1fc <USBD_CtlSendStatus>
      break;
 800be5c:	e00c      	b.n	800be78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 f900 	bl	800c066 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be66:	4b07      	ldr	r3, [pc, #28]	; (800be84 <USBD_SetConfig+0x150>)
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	4619      	mov	r1, r3
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f7fe ff92 	bl	800ad96 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800be72:	2303      	movs	r3, #3
 800be74:	73fb      	strb	r3, [r7, #15]
      break;
 800be76:	bf00      	nop
  }

  return ret;
 800be78:	7bfb      	ldrb	r3, [r7, #15]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	200005c4 	.word	0x200005c4

0800be88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	88db      	ldrh	r3, [r3, #6]
 800be96:	2b01      	cmp	r3, #1
 800be98:	d004      	beq.n	800bea4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f8e2 	bl	800c066 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bea2:	e023      	b.n	800beec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	2b02      	cmp	r3, #2
 800beae:	dc02      	bgt.n	800beb6 <USBD_GetConfig+0x2e>
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	dc03      	bgt.n	800bebc <USBD_GetConfig+0x34>
 800beb4:	e015      	b.n	800bee2 <USBD_GetConfig+0x5a>
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	d00b      	beq.n	800bed2 <USBD_GetConfig+0x4a>
 800beba:	e012      	b.n	800bee2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	3308      	adds	r3, #8
 800bec6:	2201      	movs	r2, #1
 800bec8:	4619      	mov	r1, r3
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f93c 	bl	800c148 <USBD_CtlSendData>
        break;
 800bed0:	e00c      	b.n	800beec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	3304      	adds	r3, #4
 800bed6:	2201      	movs	r2, #1
 800bed8:	4619      	mov	r1, r3
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f934 	bl	800c148 <USBD_CtlSendData>
        break;
 800bee0:	e004      	b.n	800beec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f8be 	bl	800c066 <USBD_CtlError>
        break;
 800beea:	bf00      	nop
}
 800beec:	bf00      	nop
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	3b01      	subs	r3, #1
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d81e      	bhi.n	800bf4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	88db      	ldrh	r3, [r3, #6]
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d004      	beq.n	800bf1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 f8a5 	bl	800c066 <USBD_CtlError>
        break;
 800bf1c:	e01a      	b.n	800bf54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2201      	movs	r2, #1
 800bf22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d005      	beq.n	800bf3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	f043 0202 	orr.w	r2, r3, #2
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	330c      	adds	r3, #12
 800bf3e:	2202      	movs	r2, #2
 800bf40:	4619      	mov	r1, r3
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 f900 	bl	800c148 <USBD_CtlSendData>
      break;
 800bf48:	e004      	b.n	800bf54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f88a 	bl	800c066 <USBD_CtlError>
      break;
 800bf52:	bf00      	nop
  }
}
 800bf54:	bf00      	nop
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	885b      	ldrh	r3, [r3, #2]
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d107      	bne.n	800bf7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f940 	bl	800c1fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bf7c:	e013      	b.n	800bfa6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	885b      	ldrh	r3, [r3, #2]
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d10b      	bne.n	800bf9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	889b      	ldrh	r3, [r3, #4]
 800bf8a:	0a1b      	lsrs	r3, r3, #8
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 f930 	bl	800c1fc <USBD_CtlSendStatus>
}
 800bf9c:	e003      	b.n	800bfa6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bf9e:	6839      	ldr	r1, [r7, #0]
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 f860 	bl	800c066 <USBD_CtlError>
}
 800bfa6:	bf00      	nop
 800bfa8:	3708      	adds	r7, #8
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b082      	sub	sp, #8
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
 800bfb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d80b      	bhi.n	800bfde <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	885b      	ldrh	r3, [r3, #2]
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d10c      	bne.n	800bfe8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f910 	bl	800c1fc <USBD_CtlSendStatus>
      }
      break;
 800bfdc:	e004      	b.n	800bfe8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 f840 	bl	800c066 <USBD_CtlError>
      break;
 800bfe6:	e000      	b.n	800bfea <USBD_ClrFeature+0x3c>
      break;
 800bfe8:	bf00      	nop
  }
}
 800bfea:	bf00      	nop
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b084      	sub	sp, #16
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
 800bffa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	781a      	ldrb	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	3301      	adds	r3, #1
 800c00c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	781a      	ldrb	r2, [r3, #0]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3301      	adds	r3, #1
 800c01a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f7ff fa41 	bl	800b4a4 <SWAPBYTE>
 800c022:	4603      	mov	r3, r0
 800c024:	461a      	mov	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	3301      	adds	r3, #1
 800c02e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	3301      	adds	r3, #1
 800c034:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f7ff fa34 	bl	800b4a4 <SWAPBYTE>
 800c03c:	4603      	mov	r3, r0
 800c03e:	461a      	mov	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	3301      	adds	r3, #1
 800c048:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	3301      	adds	r3, #1
 800c04e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f7ff fa27 	bl	800b4a4 <SWAPBYTE>
 800c056:	4603      	mov	r3, r0
 800c058:	461a      	mov	r2, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	80da      	strh	r2, [r3, #6]
}
 800c05e:	bf00      	nop
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b082      	sub	sp, #8
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c070:	2180      	movs	r1, #128	; 0x80
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fcd6 	bl	800ca24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c078:	2100      	movs	r1, #0
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fcd2 	bl	800ca24 <USBD_LL_StallEP>
}
 800c080:	bf00      	nop
 800c082:	3708      	adds	r7, #8
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b086      	sub	sp, #24
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60f8      	str	r0, [r7, #12]
 800c090:	60b9      	str	r1, [r7, #8]
 800c092:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c094:	2300      	movs	r3, #0
 800c096:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d036      	beq.n	800c10c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c0a2:	6938      	ldr	r0, [r7, #16]
 800c0a4:	f000 f836 	bl	800c114 <USBD_GetLen>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
 800c0b8:	68ba      	ldr	r2, [r7, #8]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	7812      	ldrb	r2, [r2, #0]
 800c0c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c0c2:	7dfb      	ldrb	r3, [r7, #23]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c0c8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ca:	68ba      	ldr	r2, [r7, #8]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	2203      	movs	r2, #3
 800c0d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c0d2:	7dfb      	ldrb	r3, [r7, #23]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c0d8:	e013      	b.n	800c102 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c0da:	7dfb      	ldrb	r3, [r7, #23]
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	4413      	add	r3, r2
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	7812      	ldrb	r2, [r2, #0]
 800c0e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	613b      	str	r3, [r7, #16]
    idx++;
 800c0ec:	7dfb      	ldrb	r3, [r7, #23]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c0f2:	7dfb      	ldrb	r3, [r7, #23]
 800c0f4:	68ba      	ldr	r2, [r7, #8]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	701a      	strb	r2, [r3, #0]
    idx++;
 800c0fc:	7dfb      	ldrb	r3, [r7, #23]
 800c0fe:	3301      	adds	r3, #1
 800c100:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e7      	bne.n	800c0da <USBD_GetString+0x52>
 800c10a:	e000      	b.n	800c10e <USBD_GetString+0x86>
    return;
 800c10c:	bf00      	nop
  }
}
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c11c:	2300      	movs	r3, #0
 800c11e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c124:	e005      	b.n	800c132 <USBD_GetLen+0x1e>
  {
    len++;
 800c126:	7bfb      	ldrb	r3, [r7, #15]
 800c128:	3301      	adds	r3, #1
 800c12a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	3301      	adds	r3, #1
 800c130:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1f5      	bne.n	800c126 <USBD_GetLen+0x12>
  }

  return len;
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3714      	adds	r7, #20
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2202      	movs	r2, #2
 800c158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	68ba      	ldr	r2, [r7, #8]
 800c16c:	2100      	movs	r1, #0
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	f000 fce1 	bl	800cb36 <USBD_LL_Transmit>

  return USBD_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b084      	sub	sp, #16
 800c182:	af00      	add	r7, sp, #0
 800c184:	60f8      	str	r0, [r7, #12]
 800c186:	60b9      	str	r1, [r7, #8]
 800c188:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	2100      	movs	r1, #0
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f000 fcd0 	bl	800cb36 <USBD_LL_Transmit>

  return USBD_OK;
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2203      	movs	r2, #3
 800c1b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	68ba      	ldr	r2, [r7, #8]
 800c1c8:	2100      	movs	r1, #0
 800c1ca:	68f8      	ldr	r0, [r7, #12]
 800c1cc:	f000 fcd4 	bl	800cb78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	60f8      	str	r0, [r7, #12]
 800c1e2:	60b9      	str	r1, [r7, #8]
 800c1e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f000 fcc3 	bl	800cb78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1f2:	2300      	movs	r3, #0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2204      	movs	r2, #4
 800c208:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c20c:	2300      	movs	r3, #0
 800c20e:	2200      	movs	r2, #0
 800c210:	2100      	movs	r1, #0
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 fc8f 	bl	800cb36 <USBD_LL_Transmit>

  return USBD_OK;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3708      	adds	r7, #8
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b082      	sub	sp, #8
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2205      	movs	r2, #5
 800c22e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c232:	2300      	movs	r3, #0
 800c234:	2200      	movs	r2, #0
 800c236:	2100      	movs	r1, #0
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fc9d 	bl	800cb78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c24c:	2200      	movs	r2, #0
 800c24e:	4912      	ldr	r1, [pc, #72]	; (800c298 <MX_USB_DEVICE_Init+0x50>)
 800c250:	4812      	ldr	r0, [pc, #72]	; (800c29c <MX_USB_DEVICE_Init+0x54>)
 800c252:	f7fe fd07 	bl	800ac64 <USBD_Init>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d001      	beq.n	800c260 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c25c:	f7f5 fcc8 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c260:	490f      	ldr	r1, [pc, #60]	; (800c2a0 <MX_USB_DEVICE_Init+0x58>)
 800c262:	480e      	ldr	r0, [pc, #56]	; (800c29c <MX_USB_DEVICE_Init+0x54>)
 800c264:	f7fe fd2e 	bl	800acc4 <USBD_RegisterClass>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c26e:	f7f5 fcbf 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c272:	490c      	ldr	r1, [pc, #48]	; (800c2a4 <MX_USB_DEVICE_Init+0x5c>)
 800c274:	4809      	ldr	r0, [pc, #36]	; (800c29c <MX_USB_DEVICE_Init+0x54>)
 800c276:	f7fe fc1f 	bl	800aab8 <USBD_CDC_RegisterInterface>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d001      	beq.n	800c284 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c280:	f7f5 fcb6 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c284:	4805      	ldr	r0, [pc, #20]	; (800c29c <MX_USB_DEVICE_Init+0x54>)
 800c286:	f7fe fd53 	bl	800ad30 <USBD_Start>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d001      	beq.n	800c294 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c290:	f7f5 fcae 	bl	8001bf0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c294:	bf00      	nop
 800c296:	bd80      	pop	{r7, pc}
 800c298:	200000bc 	.word	0x200000bc
 800c29c:	200005c8 	.word	0x200005c8
 800c2a0:	20000028 	.word	0x20000028
 800c2a4:	200000a8 	.word	0x200000a8

0800c2a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	4905      	ldr	r1, [pc, #20]	; (800c2c4 <CDC_Init_FS+0x1c>)
 800c2b0:	4805      	ldr	r0, [pc, #20]	; (800c2c8 <CDC_Init_FS+0x20>)
 800c2b2:	f7fe fc1b 	bl	800aaec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c2b6:	4905      	ldr	r1, [pc, #20]	; (800c2cc <CDC_Init_FS+0x24>)
 800c2b8:	4803      	ldr	r0, [pc, #12]	; (800c2c8 <CDC_Init_FS+0x20>)
 800c2ba:	f7fe fc39 	bl	800ab30 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c2be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	200010a4 	.word	0x200010a4
 800c2c8:	200005c8 	.word	0x200005c8
 800c2cc:	200008a4 	.word	0x200008a4

0800c2d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c2d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	6039      	str	r1, [r7, #0]
 800c2ea:	71fb      	strb	r3, [r7, #7]
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c2f0:	79fb      	ldrb	r3, [r7, #7]
 800c2f2:	2b23      	cmp	r3, #35	; 0x23
 800c2f4:	d84a      	bhi.n	800c38c <CDC_Control_FS+0xac>
 800c2f6:	a201      	add	r2, pc, #4	; (adr r2, 800c2fc <CDC_Control_FS+0x1c>)
 800c2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fc:	0800c38d 	.word	0x0800c38d
 800c300:	0800c38d 	.word	0x0800c38d
 800c304:	0800c38d 	.word	0x0800c38d
 800c308:	0800c38d 	.word	0x0800c38d
 800c30c:	0800c38d 	.word	0x0800c38d
 800c310:	0800c38d 	.word	0x0800c38d
 800c314:	0800c38d 	.word	0x0800c38d
 800c318:	0800c38d 	.word	0x0800c38d
 800c31c:	0800c38d 	.word	0x0800c38d
 800c320:	0800c38d 	.word	0x0800c38d
 800c324:	0800c38d 	.word	0x0800c38d
 800c328:	0800c38d 	.word	0x0800c38d
 800c32c:	0800c38d 	.word	0x0800c38d
 800c330:	0800c38d 	.word	0x0800c38d
 800c334:	0800c38d 	.word	0x0800c38d
 800c338:	0800c38d 	.word	0x0800c38d
 800c33c:	0800c38d 	.word	0x0800c38d
 800c340:	0800c38d 	.word	0x0800c38d
 800c344:	0800c38d 	.word	0x0800c38d
 800c348:	0800c38d 	.word	0x0800c38d
 800c34c:	0800c38d 	.word	0x0800c38d
 800c350:	0800c38d 	.word	0x0800c38d
 800c354:	0800c38d 	.word	0x0800c38d
 800c358:	0800c38d 	.word	0x0800c38d
 800c35c:	0800c38d 	.word	0x0800c38d
 800c360:	0800c38d 	.word	0x0800c38d
 800c364:	0800c38d 	.word	0x0800c38d
 800c368:	0800c38d 	.word	0x0800c38d
 800c36c:	0800c38d 	.word	0x0800c38d
 800c370:	0800c38d 	.word	0x0800c38d
 800c374:	0800c38d 	.word	0x0800c38d
 800c378:	0800c38d 	.word	0x0800c38d
 800c37c:	0800c38d 	.word	0x0800c38d
 800c380:	0800c38d 	.word	0x0800c38d
 800c384:	0800c38d 	.word	0x0800c38d
 800c388:	0800c38d 	.word	0x0800c38d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c38c:	bf00      	nop
  }

  return (USBD_OK);
 800c38e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c390:	4618      	mov	r0, r3
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c3a6:	6879      	ldr	r1, [r7, #4]
 800c3a8:	4805      	ldr	r0, [pc, #20]	; (800c3c0 <CDC_Receive_FS+0x24>)
 800c3aa:	f7fe fbc1 	bl	800ab30 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c3ae:	4804      	ldr	r0, [pc, #16]	; (800c3c0 <CDC_Receive_FS+0x24>)
 800c3b0:	f7fe fc22 	bl	800abf8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c3b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	200005c8 	.word	0x200005c8

0800c3c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c3d4:	4b0d      	ldr	r3, [pc, #52]	; (800c40c <CDC_Transmit_FS+0x48>)
 800c3d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d001      	beq.n	800c3ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e00b      	b.n	800c402 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c3ea:	887b      	ldrh	r3, [r7, #2]
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	6879      	ldr	r1, [r7, #4]
 800c3f0:	4806      	ldr	r0, [pc, #24]	; (800c40c <CDC_Transmit_FS+0x48>)
 800c3f2:	f7fe fb7b 	bl	800aaec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c3f6:	4805      	ldr	r0, [pc, #20]	; (800c40c <CDC_Transmit_FS+0x48>)
 800c3f8:	f7fe fbb8 	bl	800ab6c <USBD_CDC_TransmitPacket>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c400:	7bfb      	ldrb	r3, [r7, #15]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	200005c8 	.word	0x200005c8

0800c410 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c410:	b480      	push	{r7}
 800c412:	b087      	sub	sp, #28
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	4613      	mov	r3, r2
 800c41c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c41e:	2300      	movs	r3, #0
 800c420:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c422:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c426:	4618      	mov	r0, r3
 800c428:	371c      	adds	r7, #28
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
	...

0800c434 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	6039      	str	r1, [r7, #0]
 800c43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	2212      	movs	r2, #18
 800c444:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c446:	4b03      	ldr	r3, [pc, #12]	; (800c454 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c448:	4618      	mov	r0, r3
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr
 800c454:	200000d8 	.word	0x200000d8

0800c458 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	4603      	mov	r3, r0
 800c460:	6039      	str	r1, [r7, #0]
 800c462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	2204      	movs	r2, #4
 800c468:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c46a:	4b03      	ldr	r3, [pc, #12]	; (800c478 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	200000ec 	.word	0x200000ec

0800c47c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	4603      	mov	r3, r0
 800c484:	6039      	str	r1, [r7, #0]
 800c486:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c488:	79fb      	ldrb	r3, [r7, #7]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d105      	bne.n	800c49a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c48e:	683a      	ldr	r2, [r7, #0]
 800c490:	4907      	ldr	r1, [pc, #28]	; (800c4b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c492:	4808      	ldr	r0, [pc, #32]	; (800c4b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c494:	f7ff fdf8 	bl	800c088 <USBD_GetString>
 800c498:	e004      	b.n	800c4a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	4904      	ldr	r1, [pc, #16]	; (800c4b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c49e:	4805      	ldr	r0, [pc, #20]	; (800c4b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c4a0:	f7ff fdf2 	bl	800c088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4a4:	4b02      	ldr	r3, [pc, #8]	; (800c4b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	200018a4 	.word	0x200018a4
 800c4b4:	08010058 	.word	0x08010058

0800c4b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	4603      	mov	r3, r0
 800c4c0:	6039      	str	r1, [r7, #0]
 800c4c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	4904      	ldr	r1, [pc, #16]	; (800c4d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c4c8:	4804      	ldr	r0, [pc, #16]	; (800c4dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c4ca:	f7ff fddd 	bl	800c088 <USBD_GetString>
  return USBD_StrDesc;
 800c4ce:	4b02      	ldr	r3, [pc, #8]	; (800c4d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	200018a4 	.word	0x200018a4
 800c4dc:	08010070 	.word	0x08010070

0800c4e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	6039      	str	r1, [r7, #0]
 800c4ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	221a      	movs	r2, #26
 800c4f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c4f2:	f000 f843 	bl	800c57c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c4f6:	4b02      	ldr	r3, [pc, #8]	; (800c500 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	200000f0 	.word	0x200000f0

0800c504 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	4603      	mov	r3, r0
 800c50c:	6039      	str	r1, [r7, #0]
 800c50e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c510:	79fb      	ldrb	r3, [r7, #7]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d105      	bne.n	800c522 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c516:	683a      	ldr	r2, [r7, #0]
 800c518:	4907      	ldr	r1, [pc, #28]	; (800c538 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c51a:	4808      	ldr	r0, [pc, #32]	; (800c53c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c51c:	f7ff fdb4 	bl	800c088 <USBD_GetString>
 800c520:	e004      	b.n	800c52c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c522:	683a      	ldr	r2, [r7, #0]
 800c524:	4904      	ldr	r1, [pc, #16]	; (800c538 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c526:	4805      	ldr	r0, [pc, #20]	; (800c53c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c528:	f7ff fdae 	bl	800c088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c52c:	4b02      	ldr	r3, [pc, #8]	; (800c538 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	200018a4 	.word	0x200018a4
 800c53c:	08010084 	.word	0x08010084

0800c540 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	4603      	mov	r3, r0
 800c548:	6039      	str	r1, [r7, #0]
 800c54a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c54c:	79fb      	ldrb	r3, [r7, #7]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d105      	bne.n	800c55e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c552:	683a      	ldr	r2, [r7, #0]
 800c554:	4907      	ldr	r1, [pc, #28]	; (800c574 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c556:	4808      	ldr	r0, [pc, #32]	; (800c578 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c558:	f7ff fd96 	bl	800c088 <USBD_GetString>
 800c55c:	e004      	b.n	800c568 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c55e:	683a      	ldr	r2, [r7, #0]
 800c560:	4904      	ldr	r1, [pc, #16]	; (800c574 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c562:	4805      	ldr	r0, [pc, #20]	; (800c578 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c564:	f7ff fd90 	bl	800c088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c568:	4b02      	ldr	r3, [pc, #8]	; (800c574 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3708      	adds	r7, #8
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	200018a4 	.word	0x200018a4
 800c578:	08010090 	.word	0x08010090

0800c57c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c582:	4b0f      	ldr	r3, [pc, #60]	; (800c5c0 <Get_SerialNum+0x44>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c588:	4b0e      	ldr	r3, [pc, #56]	; (800c5c4 <Get_SerialNum+0x48>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c58e:	4b0e      	ldr	r3, [pc, #56]	; (800c5c8 <Get_SerialNum+0x4c>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4413      	add	r3, r2
 800c59a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d009      	beq.n	800c5b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c5a2:	2208      	movs	r2, #8
 800c5a4:	4909      	ldr	r1, [pc, #36]	; (800c5cc <Get_SerialNum+0x50>)
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f000 f814 	bl	800c5d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c5ac:	2204      	movs	r2, #4
 800c5ae:	4908      	ldr	r1, [pc, #32]	; (800c5d0 <Get_SerialNum+0x54>)
 800c5b0:	68b8      	ldr	r0, [r7, #8]
 800c5b2:	f000 f80f 	bl	800c5d4 <IntToUnicode>
  }
}
 800c5b6:	bf00      	nop
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	1fff7a10 	.word	0x1fff7a10
 800c5c4:	1fff7a14 	.word	0x1fff7a14
 800c5c8:	1fff7a18 	.word	0x1fff7a18
 800c5cc:	200000f2 	.word	0x200000f2
 800c5d0:	20000102 	.word	0x20000102

0800c5d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	4613      	mov	r3, r2
 800c5e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	75fb      	strb	r3, [r7, #23]
 800c5ea:	e027      	b.n	800c63c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	0f1b      	lsrs	r3, r3, #28
 800c5f0:	2b09      	cmp	r3, #9
 800c5f2:	d80b      	bhi.n	800c60c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	0f1b      	lsrs	r3, r3, #28
 800c5f8:	b2da      	uxtb	r2, r3
 800c5fa:	7dfb      	ldrb	r3, [r7, #23]
 800c5fc:	005b      	lsls	r3, r3, #1
 800c5fe:	4619      	mov	r1, r3
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	440b      	add	r3, r1
 800c604:	3230      	adds	r2, #48	; 0x30
 800c606:	b2d2      	uxtb	r2, r2
 800c608:	701a      	strb	r2, [r3, #0]
 800c60a:	e00a      	b.n	800c622 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	0f1b      	lsrs	r3, r3, #28
 800c610:	b2da      	uxtb	r2, r3
 800c612:	7dfb      	ldrb	r3, [r7, #23]
 800c614:	005b      	lsls	r3, r3, #1
 800c616:	4619      	mov	r1, r3
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	440b      	add	r3, r1
 800c61c:	3237      	adds	r2, #55	; 0x37
 800c61e:	b2d2      	uxtb	r2, r2
 800c620:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	011b      	lsls	r3, r3, #4
 800c626:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c628:	7dfb      	ldrb	r3, [r7, #23]
 800c62a:	005b      	lsls	r3, r3, #1
 800c62c:	3301      	adds	r3, #1
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	4413      	add	r3, r2
 800c632:	2200      	movs	r2, #0
 800c634:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c636:	7dfb      	ldrb	r3, [r7, #23]
 800c638:	3301      	adds	r3, #1
 800c63a:	75fb      	strb	r3, [r7, #23]
 800c63c:	7dfa      	ldrb	r2, [r7, #23]
 800c63e:	79fb      	ldrb	r3, [r7, #7]
 800c640:	429a      	cmp	r2, r3
 800c642:	d3d3      	bcc.n	800c5ec <IntToUnicode+0x18>
  }
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop
 800c648:	371c      	adds	r7, #28
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
	...

0800c654 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b08a      	sub	sp, #40	; 0x28
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c65c:	f107 0314 	add.w	r3, r7, #20
 800c660:	2200      	movs	r2, #0
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	605a      	str	r2, [r3, #4]
 800c666:	609a      	str	r2, [r3, #8]
 800c668:	60da      	str	r2, [r3, #12]
 800c66a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c674:	d13a      	bne.n	800c6ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c676:	2300      	movs	r3, #0
 800c678:	613b      	str	r3, [r7, #16]
 800c67a:	4b1e      	ldr	r3, [pc, #120]	; (800c6f4 <HAL_PCD_MspInit+0xa0>)
 800c67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c67e:	4a1d      	ldr	r2, [pc, #116]	; (800c6f4 <HAL_PCD_MspInit+0xa0>)
 800c680:	f043 0301 	orr.w	r3, r3, #1
 800c684:	6313      	str	r3, [r2, #48]	; 0x30
 800c686:	4b1b      	ldr	r3, [pc, #108]	; (800c6f4 <HAL_PCD_MspInit+0xa0>)
 800c688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c68a:	f003 0301 	and.w	r3, r3, #1
 800c68e:	613b      	str	r3, [r7, #16]
 800c690:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c692:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c698:	2302      	movs	r3, #2
 800c69a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c69c:	2300      	movs	r3, #0
 800c69e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c6a4:	230a      	movs	r3, #10
 800c6a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6a8:	f107 0314 	add.w	r3, r7, #20
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	4812      	ldr	r0, [pc, #72]	; (800c6f8 <HAL_PCD_MspInit+0xa4>)
 800c6b0:	f7f6 ff32 	bl	8003518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c6b4:	4b0f      	ldr	r3, [pc, #60]	; (800c6f4 <HAL_PCD_MspInit+0xa0>)
 800c6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b8:	4a0e      	ldr	r2, [pc, #56]	; (800c6f4 <HAL_PCD_MspInit+0xa0>)
 800c6ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6be:	6353      	str	r3, [r2, #52]	; 0x34
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	60fb      	str	r3, [r7, #12]
 800c6c4:	4b0b      	ldr	r3, [pc, #44]	; (800c6f4 <HAL_PCD_MspInit+0xa0>)
 800c6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6c8:	4a0a      	ldr	r2, [pc, #40]	; (800c6f4 <HAL_PCD_MspInit+0xa0>)
 800c6ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c6ce:	6453      	str	r3, [r2, #68]	; 0x44
 800c6d0:	4b08      	ldr	r3, [pc, #32]	; (800c6f4 <HAL_PCD_MspInit+0xa0>)
 800c6d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6d8:	60fb      	str	r3, [r7, #12]
 800c6da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c6dc:	2200      	movs	r2, #0
 800c6de:	2100      	movs	r1, #0
 800c6e0:	2043      	movs	r0, #67	; 0x43
 800c6e2:	f7f6 fb36 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c6e6:	2043      	movs	r0, #67	; 0x43
 800c6e8:	f7f6 fb4f 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c6ec:	bf00      	nop
 800c6ee:	3728      	adds	r7, #40	; 0x28
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	40023800 	.word	0x40023800
 800c6f8:	40020000 	.word	0x40020000

0800c6fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c710:	4619      	mov	r1, r3
 800c712:	4610      	mov	r0, r2
 800c714:	f7fe fb59 	bl	800adca <USBD_LL_SetupStage>
}
 800c718:	bf00      	nop
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	460b      	mov	r3, r1
 800c72a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c732:	78fa      	ldrb	r2, [r7, #3]
 800c734:	6879      	ldr	r1, [r7, #4]
 800c736:	4613      	mov	r3, r2
 800c738:	00db      	lsls	r3, r3, #3
 800c73a:	4413      	add	r3, r2
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	440b      	add	r3, r1
 800c740:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	78fb      	ldrb	r3, [r7, #3]
 800c748:	4619      	mov	r1, r3
 800c74a:	f7fe fb93 	bl	800ae74 <USBD_LL_DataOutStage>
}
 800c74e:	bf00      	nop
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b082      	sub	sp, #8
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	460b      	mov	r3, r1
 800c760:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c768:	78fa      	ldrb	r2, [r7, #3]
 800c76a:	6879      	ldr	r1, [r7, #4]
 800c76c:	4613      	mov	r3, r2
 800c76e:	00db      	lsls	r3, r3, #3
 800c770:	4413      	add	r3, r2
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	440b      	add	r3, r1
 800c776:	334c      	adds	r3, #76	; 0x4c
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	78fb      	ldrb	r3, [r7, #3]
 800c77c:	4619      	mov	r1, r3
 800c77e:	f7fe fc2c 	bl	800afda <USBD_LL_DataInStage>
}
 800c782:	bf00      	nop
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b082      	sub	sp, #8
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c798:	4618      	mov	r0, r3
 800c79a:	f7fe fd60 	bl	800b25e <USBD_LL_SOF>
}
 800c79e:	bf00      	nop
 800c7a0:	3708      	adds	r7, #8
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b084      	sub	sp, #16
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	d001      	beq.n	800c7be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c7ba:	f7f5 fa19 	bl	8001bf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c7c4:	7bfa      	ldrb	r2, [r7, #15]
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f7fe fd0a 	bl	800b1e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7fe fcb2 	bl	800b13e <USBD_LL_Reset>
}
 800c7da:	bf00      	nop
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
	...

0800c7e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fe fd05 	bl	800b202 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	6812      	ldr	r2, [r2, #0]
 800c806:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c80a:	f043 0301 	orr.w	r3, r3, #1
 800c80e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6a1b      	ldr	r3, [r3, #32]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d005      	beq.n	800c824 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c818:	4b04      	ldr	r3, [pc, #16]	; (800c82c <HAL_PCD_SuspendCallback+0x48>)
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	4a03      	ldr	r2, [pc, #12]	; (800c82c <HAL_PCD_SuspendCallback+0x48>)
 800c81e:	f043 0306 	orr.w	r3, r3, #6
 800c822:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c824:	bf00      	nop
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	e000ed00 	.word	0xe000ed00

0800c830 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fe fcf5 	bl	800b22e <USBD_LL_Resume>
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	460b      	mov	r3, r1
 800c856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c85e:	78fa      	ldrb	r2, [r7, #3]
 800c860:	4611      	mov	r1, r2
 800c862:	4618      	mov	r0, r3
 800c864:	f7fe fd4d 	bl	800b302 <USBD_LL_IsoOUTIncomplete>
}
 800c868:	bf00      	nop
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	460b      	mov	r3, r1
 800c87a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c882:	78fa      	ldrb	r2, [r7, #3]
 800c884:	4611      	mov	r1, r2
 800c886:	4618      	mov	r0, r3
 800c888:	f7fe fd09 	bl	800b29e <USBD_LL_IsoINIncomplete>
}
 800c88c:	bf00      	nop
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fe fd5f 	bl	800b366 <USBD_LL_DevConnected>
}
 800c8a8:	bf00      	nop
 800c8aa:	3708      	adds	r7, #8
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fe fd5c 	bl	800b37c <USBD_LL_DevDisconnected>
}
 800c8c4:	bf00      	nop
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d13c      	bne.n	800c956 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c8dc:	4a20      	ldr	r2, [pc, #128]	; (800c960 <USBD_LL_Init+0x94>)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4a1e      	ldr	r2, [pc, #120]	; (800c960 <USBD_LL_Init+0x94>)
 800c8e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c8ec:	4b1c      	ldr	r3, [pc, #112]	; (800c960 <USBD_LL_Init+0x94>)
 800c8ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c8f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c8f4:	4b1a      	ldr	r3, [pc, #104]	; (800c960 <USBD_LL_Init+0x94>)
 800c8f6:	2204      	movs	r2, #4
 800c8f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c8fa:	4b19      	ldr	r3, [pc, #100]	; (800c960 <USBD_LL_Init+0x94>)
 800c8fc:	2202      	movs	r2, #2
 800c8fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c900:	4b17      	ldr	r3, [pc, #92]	; (800c960 <USBD_LL_Init+0x94>)
 800c902:	2200      	movs	r2, #0
 800c904:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c906:	4b16      	ldr	r3, [pc, #88]	; (800c960 <USBD_LL_Init+0x94>)
 800c908:	2202      	movs	r2, #2
 800c90a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c90c:	4b14      	ldr	r3, [pc, #80]	; (800c960 <USBD_LL_Init+0x94>)
 800c90e:	2200      	movs	r2, #0
 800c910:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c912:	4b13      	ldr	r3, [pc, #76]	; (800c960 <USBD_LL_Init+0x94>)
 800c914:	2200      	movs	r2, #0
 800c916:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c918:	4b11      	ldr	r3, [pc, #68]	; (800c960 <USBD_LL_Init+0x94>)
 800c91a:	2200      	movs	r2, #0
 800c91c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c91e:	4b10      	ldr	r3, [pc, #64]	; (800c960 <USBD_LL_Init+0x94>)
 800c920:	2200      	movs	r2, #0
 800c922:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c924:	4b0e      	ldr	r3, [pc, #56]	; (800c960 <USBD_LL_Init+0x94>)
 800c926:	2200      	movs	r2, #0
 800c928:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c92a:	480d      	ldr	r0, [pc, #52]	; (800c960 <USBD_LL_Init+0x94>)
 800c92c:	f7f9 fede 	bl	80066ec <HAL_PCD_Init>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c936:	f7f5 f95b 	bl	8001bf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c93a:	2180      	movs	r1, #128	; 0x80
 800c93c:	4808      	ldr	r0, [pc, #32]	; (800c960 <USBD_LL_Init+0x94>)
 800c93e:	f7fb f936 	bl	8007bae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c942:	2240      	movs	r2, #64	; 0x40
 800c944:	2100      	movs	r1, #0
 800c946:	4806      	ldr	r0, [pc, #24]	; (800c960 <USBD_LL_Init+0x94>)
 800c948:	f7fb f8ea 	bl	8007b20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c94c:	2280      	movs	r2, #128	; 0x80
 800c94e:	2101      	movs	r1, #1
 800c950:	4803      	ldr	r0, [pc, #12]	; (800c960 <USBD_LL_Init+0x94>)
 800c952:	f7fb f8e5 	bl	8007b20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	20001aa4 	.word	0x20001aa4

0800c964 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c96c:	2300      	movs	r3, #0
 800c96e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c970:	2300      	movs	r3, #0
 800c972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7f9 ffd3 	bl	8006926 <HAL_PCD_Start>
 800c980:	4603      	mov	r3, r0
 800c982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c984:	7bfb      	ldrb	r3, [r7, #15]
 800c986:	4618      	mov	r0, r3
 800c988:	f000 f942 	bl	800cc10 <USBD_Get_USB_Status>
 800c98c:	4603      	mov	r3, r0
 800c98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c990:	7bbb      	ldrb	r3, [r7, #14]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b084      	sub	sp, #16
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
 800c9a2:	4608      	mov	r0, r1
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	70fb      	strb	r3, [r7, #3]
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	70bb      	strb	r3, [r7, #2]
 800c9b0:	4613      	mov	r3, r2
 800c9b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c9c2:	78bb      	ldrb	r3, [r7, #2]
 800c9c4:	883a      	ldrh	r2, [r7, #0]
 800c9c6:	78f9      	ldrb	r1, [r7, #3]
 800c9c8:	f7fa fca4 	bl	8007314 <HAL_PCD_EP_Open>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 f91c 	bl	800cc10 <USBD_Get_USB_Status>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b084      	sub	sp, #16
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca00:	78fa      	ldrb	r2, [r7, #3]
 800ca02:	4611      	mov	r1, r2
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7fa fced 	bl	80073e4 <HAL_PCD_EP_Close>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f000 f8fd 	bl	800cc10 <USBD_Get_USB_Status>
 800ca16:	4603      	mov	r3, r0
 800ca18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca30:	2300      	movs	r3, #0
 800ca32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca34:	2300      	movs	r3, #0
 800ca36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca3e:	78fa      	ldrb	r2, [r7, #3]
 800ca40:	4611      	mov	r1, r2
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fa fdc5 	bl	80075d2 <HAL_PCD_EP_SetStall>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca4c:	7bfb      	ldrb	r3, [r7, #15]
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f000 f8de 	bl	800cc10 <USBD_Get_USB_Status>
 800ca54:	4603      	mov	r3, r0
 800ca56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b084      	sub	sp, #16
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca72:	2300      	movs	r3, #0
 800ca74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca7c:	78fa      	ldrb	r2, [r7, #3]
 800ca7e:	4611      	mov	r1, r2
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fa fe0a 	bl	800769a <HAL_PCD_EP_ClrStall>
 800ca86:	4603      	mov	r3, r0
 800ca88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f000 f8bf 	bl	800cc10 <USBD_Get_USB_Status>
 800ca92:	4603      	mov	r3, r0
 800ca94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b085      	sub	sp, #20
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	460b      	mov	r3, r1
 800caaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cab2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	da0b      	bge.n	800cad4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cabc:	78fb      	ldrb	r3, [r7, #3]
 800cabe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cac2:	68f9      	ldr	r1, [r7, #12]
 800cac4:	4613      	mov	r3, r2
 800cac6:	00db      	lsls	r3, r3, #3
 800cac8:	4413      	add	r3, r2
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	440b      	add	r3, r1
 800cace:	333e      	adds	r3, #62	; 0x3e
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	e00b      	b.n	800caec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cad4:	78fb      	ldrb	r3, [r7, #3]
 800cad6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cada:	68f9      	ldr	r1, [r7, #12]
 800cadc:	4613      	mov	r3, r2
 800cade:	00db      	lsls	r3, r3, #3
 800cae0:	4413      	add	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	440b      	add	r3, r1
 800cae6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800caea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800caec:	4618      	mov	r0, r3
 800caee:	3714      	adds	r7, #20
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	460b      	mov	r3, r1
 800cb02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb12:	78fa      	ldrb	r2, [r7, #3]
 800cb14:	4611      	mov	r1, r2
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fa fbd7 	bl	80072ca <HAL_PCD_SetAddress>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb20:	7bfb      	ldrb	r3, [r7, #15]
 800cb22:	4618      	mov	r0, r3
 800cb24:	f000 f874 	bl	800cc10 <USBD_Get_USB_Status>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b086      	sub	sp, #24
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	60f8      	str	r0, [r7, #12]
 800cb3e:	607a      	str	r2, [r7, #4]
 800cb40:	603b      	str	r3, [r7, #0]
 800cb42:	460b      	mov	r3, r1
 800cb44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cb54:	7af9      	ldrb	r1, [r7, #11]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	f7fa fcf0 	bl	800753e <HAL_PCD_EP_Transmit>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb62:	7dfb      	ldrb	r3, [r7, #23]
 800cb64:	4618      	mov	r0, r3
 800cb66:	f000 f853 	bl	800cc10 <USBD_Get_USB_Status>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3718      	adds	r7, #24
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b086      	sub	sp, #24
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	607a      	str	r2, [r7, #4]
 800cb82:	603b      	str	r3, [r7, #0]
 800cb84:	460b      	mov	r3, r1
 800cb86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cb96:	7af9      	ldrb	r1, [r7, #11]
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	f7fa fc6c 	bl	8007478 <HAL_PCD_EP_Receive>
 800cba0:	4603      	mov	r3, r0
 800cba2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f000 f832 	bl	800cc10 <USBD_Get_USB_Status>
 800cbac:	4603      	mov	r3, r0
 800cbae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cbb0:	7dbb      	ldrb	r3, [r7, #22]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3718      	adds	r7, #24
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b082      	sub	sp, #8
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbcc:	78fa      	ldrb	r2, [r7, #3]
 800cbce:	4611      	mov	r1, r2
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fa fc9c 	bl	800750e <HAL_PCD_EP_GetRxCount>
 800cbd6:	4603      	mov	r3, r0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cbe8:	4b03      	ldr	r3, [pc, #12]	; (800cbf8 <USBD_static_malloc+0x18>)
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	370c      	adds	r7, #12
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	20001fb0 	.word	0x20001fb0

0800cbfc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]

}
 800cc04:	bf00      	nop
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b085      	sub	sp, #20
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	4603      	mov	r3, r0
 800cc18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc1e:	79fb      	ldrb	r3, [r7, #7]
 800cc20:	2b03      	cmp	r3, #3
 800cc22:	d817      	bhi.n	800cc54 <USBD_Get_USB_Status+0x44>
 800cc24:	a201      	add	r2, pc, #4	; (adr r2, 800cc2c <USBD_Get_USB_Status+0x1c>)
 800cc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2a:	bf00      	nop
 800cc2c:	0800cc3d 	.word	0x0800cc3d
 800cc30:	0800cc43 	.word	0x0800cc43
 800cc34:	0800cc49 	.word	0x0800cc49
 800cc38:	0800cc4f 	.word	0x0800cc4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc40:	e00b      	b.n	800cc5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc42:	2303      	movs	r3, #3
 800cc44:	73fb      	strb	r3, [r7, #15]
    break;
 800cc46:	e008      	b.n	800cc5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc4c:	e005      	b.n	800cc5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc4e:	2303      	movs	r3, #3
 800cc50:	73fb      	strb	r3, [r7, #15]
    break;
 800cc52:	e002      	b.n	800cc5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cc54:	2303      	movs	r3, #3
 800cc56:	73fb      	strb	r3, [r7, #15]
    break;
 800cc58:	bf00      	nop
  }
  return usb_status;
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3714      	adds	r7, #20
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <__errno>:
 800cc68:	4b01      	ldr	r3, [pc, #4]	; (800cc70 <__errno+0x8>)
 800cc6a:	6818      	ldr	r0, [r3, #0]
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	2000010c 	.word	0x2000010c

0800cc74 <__libc_init_array>:
 800cc74:	b570      	push	{r4, r5, r6, lr}
 800cc76:	4d0d      	ldr	r5, [pc, #52]	; (800ccac <__libc_init_array+0x38>)
 800cc78:	4c0d      	ldr	r4, [pc, #52]	; (800ccb0 <__libc_init_array+0x3c>)
 800cc7a:	1b64      	subs	r4, r4, r5
 800cc7c:	10a4      	asrs	r4, r4, #2
 800cc7e:	2600      	movs	r6, #0
 800cc80:	42a6      	cmp	r6, r4
 800cc82:	d109      	bne.n	800cc98 <__libc_init_array+0x24>
 800cc84:	4d0b      	ldr	r5, [pc, #44]	; (800ccb4 <__libc_init_array+0x40>)
 800cc86:	4c0c      	ldr	r4, [pc, #48]	; (800ccb8 <__libc_init_array+0x44>)
 800cc88:	f003 f97c 	bl	800ff84 <_init>
 800cc8c:	1b64      	subs	r4, r4, r5
 800cc8e:	10a4      	asrs	r4, r4, #2
 800cc90:	2600      	movs	r6, #0
 800cc92:	42a6      	cmp	r6, r4
 800cc94:	d105      	bne.n	800cca2 <__libc_init_array+0x2e>
 800cc96:	bd70      	pop	{r4, r5, r6, pc}
 800cc98:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc9c:	4798      	blx	r3
 800cc9e:	3601      	adds	r6, #1
 800cca0:	e7ee      	b.n	800cc80 <__libc_init_array+0xc>
 800cca2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cca6:	4798      	blx	r3
 800cca8:	3601      	adds	r6, #1
 800ccaa:	e7f2      	b.n	800cc92 <__libc_init_array+0x1e>
 800ccac:	08010518 	.word	0x08010518
 800ccb0:	08010518 	.word	0x08010518
 800ccb4:	08010518 	.word	0x08010518
 800ccb8:	0801051c 	.word	0x0801051c

0800ccbc <memset>:
 800ccbc:	4402      	add	r2, r0
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d100      	bne.n	800ccc6 <memset+0xa>
 800ccc4:	4770      	bx	lr
 800ccc6:	f803 1b01 	strb.w	r1, [r3], #1
 800ccca:	e7f9      	b.n	800ccc0 <memset+0x4>

0800cccc <__cvt>:
 800cccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccd0:	ec55 4b10 	vmov	r4, r5, d0
 800ccd4:	2d00      	cmp	r5, #0
 800ccd6:	460e      	mov	r6, r1
 800ccd8:	4619      	mov	r1, r3
 800ccda:	462b      	mov	r3, r5
 800ccdc:	bfbb      	ittet	lt
 800ccde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cce2:	461d      	movlt	r5, r3
 800cce4:	2300      	movge	r3, #0
 800cce6:	232d      	movlt	r3, #45	; 0x2d
 800cce8:	700b      	strb	r3, [r1, #0]
 800ccea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ccf0:	4691      	mov	r9, r2
 800ccf2:	f023 0820 	bic.w	r8, r3, #32
 800ccf6:	bfbc      	itt	lt
 800ccf8:	4622      	movlt	r2, r4
 800ccfa:	4614      	movlt	r4, r2
 800ccfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd00:	d005      	beq.n	800cd0e <__cvt+0x42>
 800cd02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cd06:	d100      	bne.n	800cd0a <__cvt+0x3e>
 800cd08:	3601      	adds	r6, #1
 800cd0a:	2102      	movs	r1, #2
 800cd0c:	e000      	b.n	800cd10 <__cvt+0x44>
 800cd0e:	2103      	movs	r1, #3
 800cd10:	ab03      	add	r3, sp, #12
 800cd12:	9301      	str	r3, [sp, #4]
 800cd14:	ab02      	add	r3, sp, #8
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	ec45 4b10 	vmov	d0, r4, r5
 800cd1c:	4653      	mov	r3, sl
 800cd1e:	4632      	mov	r2, r6
 800cd20:	f000 fcea 	bl	800d6f8 <_dtoa_r>
 800cd24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cd28:	4607      	mov	r7, r0
 800cd2a:	d102      	bne.n	800cd32 <__cvt+0x66>
 800cd2c:	f019 0f01 	tst.w	r9, #1
 800cd30:	d022      	beq.n	800cd78 <__cvt+0xac>
 800cd32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd36:	eb07 0906 	add.w	r9, r7, r6
 800cd3a:	d110      	bne.n	800cd5e <__cvt+0x92>
 800cd3c:	783b      	ldrb	r3, [r7, #0]
 800cd3e:	2b30      	cmp	r3, #48	; 0x30
 800cd40:	d10a      	bne.n	800cd58 <__cvt+0x8c>
 800cd42:	2200      	movs	r2, #0
 800cd44:	2300      	movs	r3, #0
 800cd46:	4620      	mov	r0, r4
 800cd48:	4629      	mov	r1, r5
 800cd4a:	f7f3 fec5 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd4e:	b918      	cbnz	r0, 800cd58 <__cvt+0x8c>
 800cd50:	f1c6 0601 	rsb	r6, r6, #1
 800cd54:	f8ca 6000 	str.w	r6, [sl]
 800cd58:	f8da 3000 	ldr.w	r3, [sl]
 800cd5c:	4499      	add	r9, r3
 800cd5e:	2200      	movs	r2, #0
 800cd60:	2300      	movs	r3, #0
 800cd62:	4620      	mov	r0, r4
 800cd64:	4629      	mov	r1, r5
 800cd66:	f7f3 feb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd6a:	b108      	cbz	r0, 800cd70 <__cvt+0xa4>
 800cd6c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cd70:	2230      	movs	r2, #48	; 0x30
 800cd72:	9b03      	ldr	r3, [sp, #12]
 800cd74:	454b      	cmp	r3, r9
 800cd76:	d307      	bcc.n	800cd88 <__cvt+0xbc>
 800cd78:	9b03      	ldr	r3, [sp, #12]
 800cd7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd7c:	1bdb      	subs	r3, r3, r7
 800cd7e:	4638      	mov	r0, r7
 800cd80:	6013      	str	r3, [r2, #0]
 800cd82:	b004      	add	sp, #16
 800cd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd88:	1c59      	adds	r1, r3, #1
 800cd8a:	9103      	str	r1, [sp, #12]
 800cd8c:	701a      	strb	r2, [r3, #0]
 800cd8e:	e7f0      	b.n	800cd72 <__cvt+0xa6>

0800cd90 <__exponent>:
 800cd90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd92:	4603      	mov	r3, r0
 800cd94:	2900      	cmp	r1, #0
 800cd96:	bfb8      	it	lt
 800cd98:	4249      	neglt	r1, r1
 800cd9a:	f803 2b02 	strb.w	r2, [r3], #2
 800cd9e:	bfb4      	ite	lt
 800cda0:	222d      	movlt	r2, #45	; 0x2d
 800cda2:	222b      	movge	r2, #43	; 0x2b
 800cda4:	2909      	cmp	r1, #9
 800cda6:	7042      	strb	r2, [r0, #1]
 800cda8:	dd2a      	ble.n	800ce00 <__exponent+0x70>
 800cdaa:	f10d 0407 	add.w	r4, sp, #7
 800cdae:	46a4      	mov	ip, r4
 800cdb0:	270a      	movs	r7, #10
 800cdb2:	46a6      	mov	lr, r4
 800cdb4:	460a      	mov	r2, r1
 800cdb6:	fb91 f6f7 	sdiv	r6, r1, r7
 800cdba:	fb07 1516 	mls	r5, r7, r6, r1
 800cdbe:	3530      	adds	r5, #48	; 0x30
 800cdc0:	2a63      	cmp	r2, #99	; 0x63
 800cdc2:	f104 34ff 	add.w	r4, r4, #4294967295
 800cdc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cdca:	4631      	mov	r1, r6
 800cdcc:	dcf1      	bgt.n	800cdb2 <__exponent+0x22>
 800cdce:	3130      	adds	r1, #48	; 0x30
 800cdd0:	f1ae 0502 	sub.w	r5, lr, #2
 800cdd4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cdd8:	1c44      	adds	r4, r0, #1
 800cdda:	4629      	mov	r1, r5
 800cddc:	4561      	cmp	r1, ip
 800cdde:	d30a      	bcc.n	800cdf6 <__exponent+0x66>
 800cde0:	f10d 0209 	add.w	r2, sp, #9
 800cde4:	eba2 020e 	sub.w	r2, r2, lr
 800cde8:	4565      	cmp	r5, ip
 800cdea:	bf88      	it	hi
 800cdec:	2200      	movhi	r2, #0
 800cdee:	4413      	add	r3, r2
 800cdf0:	1a18      	subs	r0, r3, r0
 800cdf2:	b003      	add	sp, #12
 800cdf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdfa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cdfe:	e7ed      	b.n	800cddc <__exponent+0x4c>
 800ce00:	2330      	movs	r3, #48	; 0x30
 800ce02:	3130      	adds	r1, #48	; 0x30
 800ce04:	7083      	strb	r3, [r0, #2]
 800ce06:	70c1      	strb	r1, [r0, #3]
 800ce08:	1d03      	adds	r3, r0, #4
 800ce0a:	e7f1      	b.n	800cdf0 <__exponent+0x60>

0800ce0c <_printf_float>:
 800ce0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce10:	ed2d 8b02 	vpush	{d8}
 800ce14:	b08d      	sub	sp, #52	; 0x34
 800ce16:	460c      	mov	r4, r1
 800ce18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ce1c:	4616      	mov	r6, r2
 800ce1e:	461f      	mov	r7, r3
 800ce20:	4605      	mov	r5, r0
 800ce22:	f001 fa57 	bl	800e2d4 <_localeconv_r>
 800ce26:	f8d0 a000 	ldr.w	sl, [r0]
 800ce2a:	4650      	mov	r0, sl
 800ce2c:	f7f3 f9d8 	bl	80001e0 <strlen>
 800ce30:	2300      	movs	r3, #0
 800ce32:	930a      	str	r3, [sp, #40]	; 0x28
 800ce34:	6823      	ldr	r3, [r4, #0]
 800ce36:	9305      	str	r3, [sp, #20]
 800ce38:	f8d8 3000 	ldr.w	r3, [r8]
 800ce3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ce40:	3307      	adds	r3, #7
 800ce42:	f023 0307 	bic.w	r3, r3, #7
 800ce46:	f103 0208 	add.w	r2, r3, #8
 800ce4a:	f8c8 2000 	str.w	r2, [r8]
 800ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ce56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ce5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce5e:	9307      	str	r3, [sp, #28]
 800ce60:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce64:	ee08 0a10 	vmov	s16, r0
 800ce68:	4b9f      	ldr	r3, [pc, #636]	; (800d0e8 <_printf_float+0x2dc>)
 800ce6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce72:	f7f3 fe63 	bl	8000b3c <__aeabi_dcmpun>
 800ce76:	bb88      	cbnz	r0, 800cedc <_printf_float+0xd0>
 800ce78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce7c:	4b9a      	ldr	r3, [pc, #616]	; (800d0e8 <_printf_float+0x2dc>)
 800ce7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce82:	f7f3 fe3d 	bl	8000b00 <__aeabi_dcmple>
 800ce86:	bb48      	cbnz	r0, 800cedc <_printf_float+0xd0>
 800ce88:	2200      	movs	r2, #0
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	4640      	mov	r0, r8
 800ce8e:	4649      	mov	r1, r9
 800ce90:	f7f3 fe2c 	bl	8000aec <__aeabi_dcmplt>
 800ce94:	b110      	cbz	r0, 800ce9c <_printf_float+0x90>
 800ce96:	232d      	movs	r3, #45	; 0x2d
 800ce98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce9c:	4b93      	ldr	r3, [pc, #588]	; (800d0ec <_printf_float+0x2e0>)
 800ce9e:	4894      	ldr	r0, [pc, #592]	; (800d0f0 <_printf_float+0x2e4>)
 800cea0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cea4:	bf94      	ite	ls
 800cea6:	4698      	movls	r8, r3
 800cea8:	4680      	movhi	r8, r0
 800ceaa:	2303      	movs	r3, #3
 800ceac:	6123      	str	r3, [r4, #16]
 800ceae:	9b05      	ldr	r3, [sp, #20]
 800ceb0:	f023 0204 	bic.w	r2, r3, #4
 800ceb4:	6022      	str	r2, [r4, #0]
 800ceb6:	f04f 0900 	mov.w	r9, #0
 800ceba:	9700      	str	r7, [sp, #0]
 800cebc:	4633      	mov	r3, r6
 800cebe:	aa0b      	add	r2, sp, #44	; 0x2c
 800cec0:	4621      	mov	r1, r4
 800cec2:	4628      	mov	r0, r5
 800cec4:	f000 f9d8 	bl	800d278 <_printf_common>
 800cec8:	3001      	adds	r0, #1
 800ceca:	f040 8090 	bne.w	800cfee <_printf_float+0x1e2>
 800cece:	f04f 30ff 	mov.w	r0, #4294967295
 800ced2:	b00d      	add	sp, #52	; 0x34
 800ced4:	ecbd 8b02 	vpop	{d8}
 800ced8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cedc:	4642      	mov	r2, r8
 800cede:	464b      	mov	r3, r9
 800cee0:	4640      	mov	r0, r8
 800cee2:	4649      	mov	r1, r9
 800cee4:	f7f3 fe2a 	bl	8000b3c <__aeabi_dcmpun>
 800cee8:	b140      	cbz	r0, 800cefc <_printf_float+0xf0>
 800ceea:	464b      	mov	r3, r9
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	bfbc      	itt	lt
 800cef0:	232d      	movlt	r3, #45	; 0x2d
 800cef2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cef6:	487f      	ldr	r0, [pc, #508]	; (800d0f4 <_printf_float+0x2e8>)
 800cef8:	4b7f      	ldr	r3, [pc, #508]	; (800d0f8 <_printf_float+0x2ec>)
 800cefa:	e7d1      	b.n	800cea0 <_printf_float+0x94>
 800cefc:	6863      	ldr	r3, [r4, #4]
 800cefe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cf02:	9206      	str	r2, [sp, #24]
 800cf04:	1c5a      	adds	r2, r3, #1
 800cf06:	d13f      	bne.n	800cf88 <_printf_float+0x17c>
 800cf08:	2306      	movs	r3, #6
 800cf0a:	6063      	str	r3, [r4, #4]
 800cf0c:	9b05      	ldr	r3, [sp, #20]
 800cf0e:	6861      	ldr	r1, [r4, #4]
 800cf10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cf14:	2300      	movs	r3, #0
 800cf16:	9303      	str	r3, [sp, #12]
 800cf18:	ab0a      	add	r3, sp, #40	; 0x28
 800cf1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cf1e:	ab09      	add	r3, sp, #36	; 0x24
 800cf20:	ec49 8b10 	vmov	d0, r8, r9
 800cf24:	9300      	str	r3, [sp, #0]
 800cf26:	6022      	str	r2, [r4, #0]
 800cf28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	f7ff fecd 	bl	800cccc <__cvt>
 800cf32:	9b06      	ldr	r3, [sp, #24]
 800cf34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf36:	2b47      	cmp	r3, #71	; 0x47
 800cf38:	4680      	mov	r8, r0
 800cf3a:	d108      	bne.n	800cf4e <_printf_float+0x142>
 800cf3c:	1cc8      	adds	r0, r1, #3
 800cf3e:	db02      	blt.n	800cf46 <_printf_float+0x13a>
 800cf40:	6863      	ldr	r3, [r4, #4]
 800cf42:	4299      	cmp	r1, r3
 800cf44:	dd41      	ble.n	800cfca <_printf_float+0x1be>
 800cf46:	f1ab 0b02 	sub.w	fp, fp, #2
 800cf4a:	fa5f fb8b 	uxtb.w	fp, fp
 800cf4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cf52:	d820      	bhi.n	800cf96 <_printf_float+0x18a>
 800cf54:	3901      	subs	r1, #1
 800cf56:	465a      	mov	r2, fp
 800cf58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cf5c:	9109      	str	r1, [sp, #36]	; 0x24
 800cf5e:	f7ff ff17 	bl	800cd90 <__exponent>
 800cf62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf64:	1813      	adds	r3, r2, r0
 800cf66:	2a01      	cmp	r2, #1
 800cf68:	4681      	mov	r9, r0
 800cf6a:	6123      	str	r3, [r4, #16]
 800cf6c:	dc02      	bgt.n	800cf74 <_printf_float+0x168>
 800cf6e:	6822      	ldr	r2, [r4, #0]
 800cf70:	07d2      	lsls	r2, r2, #31
 800cf72:	d501      	bpl.n	800cf78 <_printf_float+0x16c>
 800cf74:	3301      	adds	r3, #1
 800cf76:	6123      	str	r3, [r4, #16]
 800cf78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d09c      	beq.n	800ceba <_printf_float+0xae>
 800cf80:	232d      	movs	r3, #45	; 0x2d
 800cf82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf86:	e798      	b.n	800ceba <_printf_float+0xae>
 800cf88:	9a06      	ldr	r2, [sp, #24]
 800cf8a:	2a47      	cmp	r2, #71	; 0x47
 800cf8c:	d1be      	bne.n	800cf0c <_printf_float+0x100>
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1bc      	bne.n	800cf0c <_printf_float+0x100>
 800cf92:	2301      	movs	r3, #1
 800cf94:	e7b9      	b.n	800cf0a <_printf_float+0xfe>
 800cf96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cf9a:	d118      	bne.n	800cfce <_printf_float+0x1c2>
 800cf9c:	2900      	cmp	r1, #0
 800cf9e:	6863      	ldr	r3, [r4, #4]
 800cfa0:	dd0b      	ble.n	800cfba <_printf_float+0x1ae>
 800cfa2:	6121      	str	r1, [r4, #16]
 800cfa4:	b913      	cbnz	r3, 800cfac <_printf_float+0x1a0>
 800cfa6:	6822      	ldr	r2, [r4, #0]
 800cfa8:	07d0      	lsls	r0, r2, #31
 800cfaa:	d502      	bpl.n	800cfb2 <_printf_float+0x1a6>
 800cfac:	3301      	adds	r3, #1
 800cfae:	440b      	add	r3, r1
 800cfb0:	6123      	str	r3, [r4, #16]
 800cfb2:	65a1      	str	r1, [r4, #88]	; 0x58
 800cfb4:	f04f 0900 	mov.w	r9, #0
 800cfb8:	e7de      	b.n	800cf78 <_printf_float+0x16c>
 800cfba:	b913      	cbnz	r3, 800cfc2 <_printf_float+0x1b6>
 800cfbc:	6822      	ldr	r2, [r4, #0]
 800cfbe:	07d2      	lsls	r2, r2, #31
 800cfc0:	d501      	bpl.n	800cfc6 <_printf_float+0x1ba>
 800cfc2:	3302      	adds	r3, #2
 800cfc4:	e7f4      	b.n	800cfb0 <_printf_float+0x1a4>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e7f2      	b.n	800cfb0 <_printf_float+0x1a4>
 800cfca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cfce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfd0:	4299      	cmp	r1, r3
 800cfd2:	db05      	blt.n	800cfe0 <_printf_float+0x1d4>
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	6121      	str	r1, [r4, #16]
 800cfd8:	07d8      	lsls	r0, r3, #31
 800cfda:	d5ea      	bpl.n	800cfb2 <_printf_float+0x1a6>
 800cfdc:	1c4b      	adds	r3, r1, #1
 800cfde:	e7e7      	b.n	800cfb0 <_printf_float+0x1a4>
 800cfe0:	2900      	cmp	r1, #0
 800cfe2:	bfd4      	ite	le
 800cfe4:	f1c1 0202 	rsble	r2, r1, #2
 800cfe8:	2201      	movgt	r2, #1
 800cfea:	4413      	add	r3, r2
 800cfec:	e7e0      	b.n	800cfb0 <_printf_float+0x1a4>
 800cfee:	6823      	ldr	r3, [r4, #0]
 800cff0:	055a      	lsls	r2, r3, #21
 800cff2:	d407      	bmi.n	800d004 <_printf_float+0x1f8>
 800cff4:	6923      	ldr	r3, [r4, #16]
 800cff6:	4642      	mov	r2, r8
 800cff8:	4631      	mov	r1, r6
 800cffa:	4628      	mov	r0, r5
 800cffc:	47b8      	blx	r7
 800cffe:	3001      	adds	r0, #1
 800d000:	d12c      	bne.n	800d05c <_printf_float+0x250>
 800d002:	e764      	b.n	800cece <_printf_float+0xc2>
 800d004:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d008:	f240 80e0 	bls.w	800d1cc <_printf_float+0x3c0>
 800d00c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d010:	2200      	movs	r2, #0
 800d012:	2300      	movs	r3, #0
 800d014:	f7f3 fd60 	bl	8000ad8 <__aeabi_dcmpeq>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d034      	beq.n	800d086 <_printf_float+0x27a>
 800d01c:	4a37      	ldr	r2, [pc, #220]	; (800d0fc <_printf_float+0x2f0>)
 800d01e:	2301      	movs	r3, #1
 800d020:	4631      	mov	r1, r6
 800d022:	4628      	mov	r0, r5
 800d024:	47b8      	blx	r7
 800d026:	3001      	adds	r0, #1
 800d028:	f43f af51 	beq.w	800cece <_printf_float+0xc2>
 800d02c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d030:	429a      	cmp	r2, r3
 800d032:	db02      	blt.n	800d03a <_printf_float+0x22e>
 800d034:	6823      	ldr	r3, [r4, #0]
 800d036:	07d8      	lsls	r0, r3, #31
 800d038:	d510      	bpl.n	800d05c <_printf_float+0x250>
 800d03a:	ee18 3a10 	vmov	r3, s16
 800d03e:	4652      	mov	r2, sl
 800d040:	4631      	mov	r1, r6
 800d042:	4628      	mov	r0, r5
 800d044:	47b8      	blx	r7
 800d046:	3001      	adds	r0, #1
 800d048:	f43f af41 	beq.w	800cece <_printf_float+0xc2>
 800d04c:	f04f 0800 	mov.w	r8, #0
 800d050:	f104 091a 	add.w	r9, r4, #26
 800d054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d056:	3b01      	subs	r3, #1
 800d058:	4543      	cmp	r3, r8
 800d05a:	dc09      	bgt.n	800d070 <_printf_float+0x264>
 800d05c:	6823      	ldr	r3, [r4, #0]
 800d05e:	079b      	lsls	r3, r3, #30
 800d060:	f100 8105 	bmi.w	800d26e <_printf_float+0x462>
 800d064:	68e0      	ldr	r0, [r4, #12]
 800d066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d068:	4298      	cmp	r0, r3
 800d06a:	bfb8      	it	lt
 800d06c:	4618      	movlt	r0, r3
 800d06e:	e730      	b.n	800ced2 <_printf_float+0xc6>
 800d070:	2301      	movs	r3, #1
 800d072:	464a      	mov	r2, r9
 800d074:	4631      	mov	r1, r6
 800d076:	4628      	mov	r0, r5
 800d078:	47b8      	blx	r7
 800d07a:	3001      	adds	r0, #1
 800d07c:	f43f af27 	beq.w	800cece <_printf_float+0xc2>
 800d080:	f108 0801 	add.w	r8, r8, #1
 800d084:	e7e6      	b.n	800d054 <_printf_float+0x248>
 800d086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d088:	2b00      	cmp	r3, #0
 800d08a:	dc39      	bgt.n	800d100 <_printf_float+0x2f4>
 800d08c:	4a1b      	ldr	r2, [pc, #108]	; (800d0fc <_printf_float+0x2f0>)
 800d08e:	2301      	movs	r3, #1
 800d090:	4631      	mov	r1, r6
 800d092:	4628      	mov	r0, r5
 800d094:	47b8      	blx	r7
 800d096:	3001      	adds	r0, #1
 800d098:	f43f af19 	beq.w	800cece <_printf_float+0xc2>
 800d09c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	d102      	bne.n	800d0aa <_printf_float+0x29e>
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	07d9      	lsls	r1, r3, #31
 800d0a8:	d5d8      	bpl.n	800d05c <_printf_float+0x250>
 800d0aa:	ee18 3a10 	vmov	r3, s16
 800d0ae:	4652      	mov	r2, sl
 800d0b0:	4631      	mov	r1, r6
 800d0b2:	4628      	mov	r0, r5
 800d0b4:	47b8      	blx	r7
 800d0b6:	3001      	adds	r0, #1
 800d0b8:	f43f af09 	beq.w	800cece <_printf_float+0xc2>
 800d0bc:	f04f 0900 	mov.w	r9, #0
 800d0c0:	f104 0a1a 	add.w	sl, r4, #26
 800d0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0c6:	425b      	negs	r3, r3
 800d0c8:	454b      	cmp	r3, r9
 800d0ca:	dc01      	bgt.n	800d0d0 <_printf_float+0x2c4>
 800d0cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ce:	e792      	b.n	800cff6 <_printf_float+0x1ea>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	4652      	mov	r2, sl
 800d0d4:	4631      	mov	r1, r6
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	47b8      	blx	r7
 800d0da:	3001      	adds	r0, #1
 800d0dc:	f43f aef7 	beq.w	800cece <_printf_float+0xc2>
 800d0e0:	f109 0901 	add.w	r9, r9, #1
 800d0e4:	e7ee      	b.n	800d0c4 <_printf_float+0x2b8>
 800d0e6:	bf00      	nop
 800d0e8:	7fefffff 	.word	0x7fefffff
 800d0ec:	080100c4 	.word	0x080100c4
 800d0f0:	080100c8 	.word	0x080100c8
 800d0f4:	080100d0 	.word	0x080100d0
 800d0f8:	080100cc 	.word	0x080100cc
 800d0fc:	080100d4 	.word	0x080100d4
 800d100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d102:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d104:	429a      	cmp	r2, r3
 800d106:	bfa8      	it	ge
 800d108:	461a      	movge	r2, r3
 800d10a:	2a00      	cmp	r2, #0
 800d10c:	4691      	mov	r9, r2
 800d10e:	dc37      	bgt.n	800d180 <_printf_float+0x374>
 800d110:	f04f 0b00 	mov.w	fp, #0
 800d114:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d118:	f104 021a 	add.w	r2, r4, #26
 800d11c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d11e:	9305      	str	r3, [sp, #20]
 800d120:	eba3 0309 	sub.w	r3, r3, r9
 800d124:	455b      	cmp	r3, fp
 800d126:	dc33      	bgt.n	800d190 <_printf_float+0x384>
 800d128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d12c:	429a      	cmp	r2, r3
 800d12e:	db3b      	blt.n	800d1a8 <_printf_float+0x39c>
 800d130:	6823      	ldr	r3, [r4, #0]
 800d132:	07da      	lsls	r2, r3, #31
 800d134:	d438      	bmi.n	800d1a8 <_printf_float+0x39c>
 800d136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d138:	9a05      	ldr	r2, [sp, #20]
 800d13a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d13c:	1a9a      	subs	r2, r3, r2
 800d13e:	eba3 0901 	sub.w	r9, r3, r1
 800d142:	4591      	cmp	r9, r2
 800d144:	bfa8      	it	ge
 800d146:	4691      	movge	r9, r2
 800d148:	f1b9 0f00 	cmp.w	r9, #0
 800d14c:	dc35      	bgt.n	800d1ba <_printf_float+0x3ae>
 800d14e:	f04f 0800 	mov.w	r8, #0
 800d152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d156:	f104 0a1a 	add.w	sl, r4, #26
 800d15a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d15e:	1a9b      	subs	r3, r3, r2
 800d160:	eba3 0309 	sub.w	r3, r3, r9
 800d164:	4543      	cmp	r3, r8
 800d166:	f77f af79 	ble.w	800d05c <_printf_float+0x250>
 800d16a:	2301      	movs	r3, #1
 800d16c:	4652      	mov	r2, sl
 800d16e:	4631      	mov	r1, r6
 800d170:	4628      	mov	r0, r5
 800d172:	47b8      	blx	r7
 800d174:	3001      	adds	r0, #1
 800d176:	f43f aeaa 	beq.w	800cece <_printf_float+0xc2>
 800d17a:	f108 0801 	add.w	r8, r8, #1
 800d17e:	e7ec      	b.n	800d15a <_printf_float+0x34e>
 800d180:	4613      	mov	r3, r2
 800d182:	4631      	mov	r1, r6
 800d184:	4642      	mov	r2, r8
 800d186:	4628      	mov	r0, r5
 800d188:	47b8      	blx	r7
 800d18a:	3001      	adds	r0, #1
 800d18c:	d1c0      	bne.n	800d110 <_printf_float+0x304>
 800d18e:	e69e      	b.n	800cece <_printf_float+0xc2>
 800d190:	2301      	movs	r3, #1
 800d192:	4631      	mov	r1, r6
 800d194:	4628      	mov	r0, r5
 800d196:	9205      	str	r2, [sp, #20]
 800d198:	47b8      	blx	r7
 800d19a:	3001      	adds	r0, #1
 800d19c:	f43f ae97 	beq.w	800cece <_printf_float+0xc2>
 800d1a0:	9a05      	ldr	r2, [sp, #20]
 800d1a2:	f10b 0b01 	add.w	fp, fp, #1
 800d1a6:	e7b9      	b.n	800d11c <_printf_float+0x310>
 800d1a8:	ee18 3a10 	vmov	r3, s16
 800d1ac:	4652      	mov	r2, sl
 800d1ae:	4631      	mov	r1, r6
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	47b8      	blx	r7
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	d1be      	bne.n	800d136 <_printf_float+0x32a>
 800d1b8:	e689      	b.n	800cece <_printf_float+0xc2>
 800d1ba:	9a05      	ldr	r2, [sp, #20]
 800d1bc:	464b      	mov	r3, r9
 800d1be:	4442      	add	r2, r8
 800d1c0:	4631      	mov	r1, r6
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	47b8      	blx	r7
 800d1c6:	3001      	adds	r0, #1
 800d1c8:	d1c1      	bne.n	800d14e <_printf_float+0x342>
 800d1ca:	e680      	b.n	800cece <_printf_float+0xc2>
 800d1cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1ce:	2a01      	cmp	r2, #1
 800d1d0:	dc01      	bgt.n	800d1d6 <_printf_float+0x3ca>
 800d1d2:	07db      	lsls	r3, r3, #31
 800d1d4:	d538      	bpl.n	800d248 <_printf_float+0x43c>
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	4642      	mov	r2, r8
 800d1da:	4631      	mov	r1, r6
 800d1dc:	4628      	mov	r0, r5
 800d1de:	47b8      	blx	r7
 800d1e0:	3001      	adds	r0, #1
 800d1e2:	f43f ae74 	beq.w	800cece <_printf_float+0xc2>
 800d1e6:	ee18 3a10 	vmov	r3, s16
 800d1ea:	4652      	mov	r2, sl
 800d1ec:	4631      	mov	r1, r6
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	47b8      	blx	r7
 800d1f2:	3001      	adds	r0, #1
 800d1f4:	f43f ae6b 	beq.w	800cece <_printf_float+0xc2>
 800d1f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	2300      	movs	r3, #0
 800d200:	f7f3 fc6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800d204:	b9d8      	cbnz	r0, 800d23e <_printf_float+0x432>
 800d206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d208:	f108 0201 	add.w	r2, r8, #1
 800d20c:	3b01      	subs	r3, #1
 800d20e:	4631      	mov	r1, r6
 800d210:	4628      	mov	r0, r5
 800d212:	47b8      	blx	r7
 800d214:	3001      	adds	r0, #1
 800d216:	d10e      	bne.n	800d236 <_printf_float+0x42a>
 800d218:	e659      	b.n	800cece <_printf_float+0xc2>
 800d21a:	2301      	movs	r3, #1
 800d21c:	4652      	mov	r2, sl
 800d21e:	4631      	mov	r1, r6
 800d220:	4628      	mov	r0, r5
 800d222:	47b8      	blx	r7
 800d224:	3001      	adds	r0, #1
 800d226:	f43f ae52 	beq.w	800cece <_printf_float+0xc2>
 800d22a:	f108 0801 	add.w	r8, r8, #1
 800d22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d230:	3b01      	subs	r3, #1
 800d232:	4543      	cmp	r3, r8
 800d234:	dcf1      	bgt.n	800d21a <_printf_float+0x40e>
 800d236:	464b      	mov	r3, r9
 800d238:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d23c:	e6dc      	b.n	800cff8 <_printf_float+0x1ec>
 800d23e:	f04f 0800 	mov.w	r8, #0
 800d242:	f104 0a1a 	add.w	sl, r4, #26
 800d246:	e7f2      	b.n	800d22e <_printf_float+0x422>
 800d248:	2301      	movs	r3, #1
 800d24a:	4642      	mov	r2, r8
 800d24c:	e7df      	b.n	800d20e <_printf_float+0x402>
 800d24e:	2301      	movs	r3, #1
 800d250:	464a      	mov	r2, r9
 800d252:	4631      	mov	r1, r6
 800d254:	4628      	mov	r0, r5
 800d256:	47b8      	blx	r7
 800d258:	3001      	adds	r0, #1
 800d25a:	f43f ae38 	beq.w	800cece <_printf_float+0xc2>
 800d25e:	f108 0801 	add.w	r8, r8, #1
 800d262:	68e3      	ldr	r3, [r4, #12]
 800d264:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d266:	1a5b      	subs	r3, r3, r1
 800d268:	4543      	cmp	r3, r8
 800d26a:	dcf0      	bgt.n	800d24e <_printf_float+0x442>
 800d26c:	e6fa      	b.n	800d064 <_printf_float+0x258>
 800d26e:	f04f 0800 	mov.w	r8, #0
 800d272:	f104 0919 	add.w	r9, r4, #25
 800d276:	e7f4      	b.n	800d262 <_printf_float+0x456>

0800d278 <_printf_common>:
 800d278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d27c:	4616      	mov	r6, r2
 800d27e:	4699      	mov	r9, r3
 800d280:	688a      	ldr	r2, [r1, #8]
 800d282:	690b      	ldr	r3, [r1, #16]
 800d284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d288:	4293      	cmp	r3, r2
 800d28a:	bfb8      	it	lt
 800d28c:	4613      	movlt	r3, r2
 800d28e:	6033      	str	r3, [r6, #0]
 800d290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d294:	4607      	mov	r7, r0
 800d296:	460c      	mov	r4, r1
 800d298:	b10a      	cbz	r2, 800d29e <_printf_common+0x26>
 800d29a:	3301      	adds	r3, #1
 800d29c:	6033      	str	r3, [r6, #0]
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	0699      	lsls	r1, r3, #26
 800d2a2:	bf42      	ittt	mi
 800d2a4:	6833      	ldrmi	r3, [r6, #0]
 800d2a6:	3302      	addmi	r3, #2
 800d2a8:	6033      	strmi	r3, [r6, #0]
 800d2aa:	6825      	ldr	r5, [r4, #0]
 800d2ac:	f015 0506 	ands.w	r5, r5, #6
 800d2b0:	d106      	bne.n	800d2c0 <_printf_common+0x48>
 800d2b2:	f104 0a19 	add.w	sl, r4, #25
 800d2b6:	68e3      	ldr	r3, [r4, #12]
 800d2b8:	6832      	ldr	r2, [r6, #0]
 800d2ba:	1a9b      	subs	r3, r3, r2
 800d2bc:	42ab      	cmp	r3, r5
 800d2be:	dc26      	bgt.n	800d30e <_printf_common+0x96>
 800d2c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2c4:	1e13      	subs	r3, r2, #0
 800d2c6:	6822      	ldr	r2, [r4, #0]
 800d2c8:	bf18      	it	ne
 800d2ca:	2301      	movne	r3, #1
 800d2cc:	0692      	lsls	r2, r2, #26
 800d2ce:	d42b      	bmi.n	800d328 <_printf_common+0xb0>
 800d2d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2d4:	4649      	mov	r1, r9
 800d2d6:	4638      	mov	r0, r7
 800d2d8:	47c0      	blx	r8
 800d2da:	3001      	adds	r0, #1
 800d2dc:	d01e      	beq.n	800d31c <_printf_common+0xa4>
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	68e5      	ldr	r5, [r4, #12]
 800d2e2:	6832      	ldr	r2, [r6, #0]
 800d2e4:	f003 0306 	and.w	r3, r3, #6
 800d2e8:	2b04      	cmp	r3, #4
 800d2ea:	bf08      	it	eq
 800d2ec:	1aad      	subeq	r5, r5, r2
 800d2ee:	68a3      	ldr	r3, [r4, #8]
 800d2f0:	6922      	ldr	r2, [r4, #16]
 800d2f2:	bf0c      	ite	eq
 800d2f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2f8:	2500      	movne	r5, #0
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	bfc4      	itt	gt
 800d2fe:	1a9b      	subgt	r3, r3, r2
 800d300:	18ed      	addgt	r5, r5, r3
 800d302:	2600      	movs	r6, #0
 800d304:	341a      	adds	r4, #26
 800d306:	42b5      	cmp	r5, r6
 800d308:	d11a      	bne.n	800d340 <_printf_common+0xc8>
 800d30a:	2000      	movs	r0, #0
 800d30c:	e008      	b.n	800d320 <_printf_common+0xa8>
 800d30e:	2301      	movs	r3, #1
 800d310:	4652      	mov	r2, sl
 800d312:	4649      	mov	r1, r9
 800d314:	4638      	mov	r0, r7
 800d316:	47c0      	blx	r8
 800d318:	3001      	adds	r0, #1
 800d31a:	d103      	bne.n	800d324 <_printf_common+0xac>
 800d31c:	f04f 30ff 	mov.w	r0, #4294967295
 800d320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d324:	3501      	adds	r5, #1
 800d326:	e7c6      	b.n	800d2b6 <_printf_common+0x3e>
 800d328:	18e1      	adds	r1, r4, r3
 800d32a:	1c5a      	adds	r2, r3, #1
 800d32c:	2030      	movs	r0, #48	; 0x30
 800d32e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d332:	4422      	add	r2, r4
 800d334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d33c:	3302      	adds	r3, #2
 800d33e:	e7c7      	b.n	800d2d0 <_printf_common+0x58>
 800d340:	2301      	movs	r3, #1
 800d342:	4622      	mov	r2, r4
 800d344:	4649      	mov	r1, r9
 800d346:	4638      	mov	r0, r7
 800d348:	47c0      	blx	r8
 800d34a:	3001      	adds	r0, #1
 800d34c:	d0e6      	beq.n	800d31c <_printf_common+0xa4>
 800d34e:	3601      	adds	r6, #1
 800d350:	e7d9      	b.n	800d306 <_printf_common+0x8e>
	...

0800d354 <_printf_i>:
 800d354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d358:	7e0f      	ldrb	r7, [r1, #24]
 800d35a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d35c:	2f78      	cmp	r7, #120	; 0x78
 800d35e:	4691      	mov	r9, r2
 800d360:	4680      	mov	r8, r0
 800d362:	460c      	mov	r4, r1
 800d364:	469a      	mov	sl, r3
 800d366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d36a:	d807      	bhi.n	800d37c <_printf_i+0x28>
 800d36c:	2f62      	cmp	r7, #98	; 0x62
 800d36e:	d80a      	bhi.n	800d386 <_printf_i+0x32>
 800d370:	2f00      	cmp	r7, #0
 800d372:	f000 80d8 	beq.w	800d526 <_printf_i+0x1d2>
 800d376:	2f58      	cmp	r7, #88	; 0x58
 800d378:	f000 80a3 	beq.w	800d4c2 <_printf_i+0x16e>
 800d37c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d384:	e03a      	b.n	800d3fc <_printf_i+0xa8>
 800d386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d38a:	2b15      	cmp	r3, #21
 800d38c:	d8f6      	bhi.n	800d37c <_printf_i+0x28>
 800d38e:	a101      	add	r1, pc, #4	; (adr r1, 800d394 <_printf_i+0x40>)
 800d390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d394:	0800d3ed 	.word	0x0800d3ed
 800d398:	0800d401 	.word	0x0800d401
 800d39c:	0800d37d 	.word	0x0800d37d
 800d3a0:	0800d37d 	.word	0x0800d37d
 800d3a4:	0800d37d 	.word	0x0800d37d
 800d3a8:	0800d37d 	.word	0x0800d37d
 800d3ac:	0800d401 	.word	0x0800d401
 800d3b0:	0800d37d 	.word	0x0800d37d
 800d3b4:	0800d37d 	.word	0x0800d37d
 800d3b8:	0800d37d 	.word	0x0800d37d
 800d3bc:	0800d37d 	.word	0x0800d37d
 800d3c0:	0800d50d 	.word	0x0800d50d
 800d3c4:	0800d431 	.word	0x0800d431
 800d3c8:	0800d4ef 	.word	0x0800d4ef
 800d3cc:	0800d37d 	.word	0x0800d37d
 800d3d0:	0800d37d 	.word	0x0800d37d
 800d3d4:	0800d52f 	.word	0x0800d52f
 800d3d8:	0800d37d 	.word	0x0800d37d
 800d3dc:	0800d431 	.word	0x0800d431
 800d3e0:	0800d37d 	.word	0x0800d37d
 800d3e4:	0800d37d 	.word	0x0800d37d
 800d3e8:	0800d4f7 	.word	0x0800d4f7
 800d3ec:	682b      	ldr	r3, [r5, #0]
 800d3ee:	1d1a      	adds	r2, r3, #4
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	602a      	str	r2, [r5, #0]
 800d3f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	e0a3      	b.n	800d548 <_printf_i+0x1f4>
 800d400:	6820      	ldr	r0, [r4, #0]
 800d402:	6829      	ldr	r1, [r5, #0]
 800d404:	0606      	lsls	r6, r0, #24
 800d406:	f101 0304 	add.w	r3, r1, #4
 800d40a:	d50a      	bpl.n	800d422 <_printf_i+0xce>
 800d40c:	680e      	ldr	r6, [r1, #0]
 800d40e:	602b      	str	r3, [r5, #0]
 800d410:	2e00      	cmp	r6, #0
 800d412:	da03      	bge.n	800d41c <_printf_i+0xc8>
 800d414:	232d      	movs	r3, #45	; 0x2d
 800d416:	4276      	negs	r6, r6
 800d418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d41c:	485e      	ldr	r0, [pc, #376]	; (800d598 <_printf_i+0x244>)
 800d41e:	230a      	movs	r3, #10
 800d420:	e019      	b.n	800d456 <_printf_i+0x102>
 800d422:	680e      	ldr	r6, [r1, #0]
 800d424:	602b      	str	r3, [r5, #0]
 800d426:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d42a:	bf18      	it	ne
 800d42c:	b236      	sxthne	r6, r6
 800d42e:	e7ef      	b.n	800d410 <_printf_i+0xbc>
 800d430:	682b      	ldr	r3, [r5, #0]
 800d432:	6820      	ldr	r0, [r4, #0]
 800d434:	1d19      	adds	r1, r3, #4
 800d436:	6029      	str	r1, [r5, #0]
 800d438:	0601      	lsls	r1, r0, #24
 800d43a:	d501      	bpl.n	800d440 <_printf_i+0xec>
 800d43c:	681e      	ldr	r6, [r3, #0]
 800d43e:	e002      	b.n	800d446 <_printf_i+0xf2>
 800d440:	0646      	lsls	r6, r0, #25
 800d442:	d5fb      	bpl.n	800d43c <_printf_i+0xe8>
 800d444:	881e      	ldrh	r6, [r3, #0]
 800d446:	4854      	ldr	r0, [pc, #336]	; (800d598 <_printf_i+0x244>)
 800d448:	2f6f      	cmp	r7, #111	; 0x6f
 800d44a:	bf0c      	ite	eq
 800d44c:	2308      	moveq	r3, #8
 800d44e:	230a      	movne	r3, #10
 800d450:	2100      	movs	r1, #0
 800d452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d456:	6865      	ldr	r5, [r4, #4]
 800d458:	60a5      	str	r5, [r4, #8]
 800d45a:	2d00      	cmp	r5, #0
 800d45c:	bfa2      	ittt	ge
 800d45e:	6821      	ldrge	r1, [r4, #0]
 800d460:	f021 0104 	bicge.w	r1, r1, #4
 800d464:	6021      	strge	r1, [r4, #0]
 800d466:	b90e      	cbnz	r6, 800d46c <_printf_i+0x118>
 800d468:	2d00      	cmp	r5, #0
 800d46a:	d04d      	beq.n	800d508 <_printf_i+0x1b4>
 800d46c:	4615      	mov	r5, r2
 800d46e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d472:	fb03 6711 	mls	r7, r3, r1, r6
 800d476:	5dc7      	ldrb	r7, [r0, r7]
 800d478:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d47c:	4637      	mov	r7, r6
 800d47e:	42bb      	cmp	r3, r7
 800d480:	460e      	mov	r6, r1
 800d482:	d9f4      	bls.n	800d46e <_printf_i+0x11a>
 800d484:	2b08      	cmp	r3, #8
 800d486:	d10b      	bne.n	800d4a0 <_printf_i+0x14c>
 800d488:	6823      	ldr	r3, [r4, #0]
 800d48a:	07de      	lsls	r6, r3, #31
 800d48c:	d508      	bpl.n	800d4a0 <_printf_i+0x14c>
 800d48e:	6923      	ldr	r3, [r4, #16]
 800d490:	6861      	ldr	r1, [r4, #4]
 800d492:	4299      	cmp	r1, r3
 800d494:	bfde      	ittt	le
 800d496:	2330      	movle	r3, #48	; 0x30
 800d498:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d49c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d4a0:	1b52      	subs	r2, r2, r5
 800d4a2:	6122      	str	r2, [r4, #16]
 800d4a4:	f8cd a000 	str.w	sl, [sp]
 800d4a8:	464b      	mov	r3, r9
 800d4aa:	aa03      	add	r2, sp, #12
 800d4ac:	4621      	mov	r1, r4
 800d4ae:	4640      	mov	r0, r8
 800d4b0:	f7ff fee2 	bl	800d278 <_printf_common>
 800d4b4:	3001      	adds	r0, #1
 800d4b6:	d14c      	bne.n	800d552 <_printf_i+0x1fe>
 800d4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4bc:	b004      	add	sp, #16
 800d4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4c2:	4835      	ldr	r0, [pc, #212]	; (800d598 <_printf_i+0x244>)
 800d4c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d4c8:	6829      	ldr	r1, [r5, #0]
 800d4ca:	6823      	ldr	r3, [r4, #0]
 800d4cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d4d0:	6029      	str	r1, [r5, #0]
 800d4d2:	061d      	lsls	r5, r3, #24
 800d4d4:	d514      	bpl.n	800d500 <_printf_i+0x1ac>
 800d4d6:	07df      	lsls	r7, r3, #31
 800d4d8:	bf44      	itt	mi
 800d4da:	f043 0320 	orrmi.w	r3, r3, #32
 800d4de:	6023      	strmi	r3, [r4, #0]
 800d4e0:	b91e      	cbnz	r6, 800d4ea <_printf_i+0x196>
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	f023 0320 	bic.w	r3, r3, #32
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	2310      	movs	r3, #16
 800d4ec:	e7b0      	b.n	800d450 <_printf_i+0xfc>
 800d4ee:	6823      	ldr	r3, [r4, #0]
 800d4f0:	f043 0320 	orr.w	r3, r3, #32
 800d4f4:	6023      	str	r3, [r4, #0]
 800d4f6:	2378      	movs	r3, #120	; 0x78
 800d4f8:	4828      	ldr	r0, [pc, #160]	; (800d59c <_printf_i+0x248>)
 800d4fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d4fe:	e7e3      	b.n	800d4c8 <_printf_i+0x174>
 800d500:	0659      	lsls	r1, r3, #25
 800d502:	bf48      	it	mi
 800d504:	b2b6      	uxthmi	r6, r6
 800d506:	e7e6      	b.n	800d4d6 <_printf_i+0x182>
 800d508:	4615      	mov	r5, r2
 800d50a:	e7bb      	b.n	800d484 <_printf_i+0x130>
 800d50c:	682b      	ldr	r3, [r5, #0]
 800d50e:	6826      	ldr	r6, [r4, #0]
 800d510:	6961      	ldr	r1, [r4, #20]
 800d512:	1d18      	adds	r0, r3, #4
 800d514:	6028      	str	r0, [r5, #0]
 800d516:	0635      	lsls	r5, r6, #24
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	d501      	bpl.n	800d520 <_printf_i+0x1cc>
 800d51c:	6019      	str	r1, [r3, #0]
 800d51e:	e002      	b.n	800d526 <_printf_i+0x1d2>
 800d520:	0670      	lsls	r0, r6, #25
 800d522:	d5fb      	bpl.n	800d51c <_printf_i+0x1c8>
 800d524:	8019      	strh	r1, [r3, #0]
 800d526:	2300      	movs	r3, #0
 800d528:	6123      	str	r3, [r4, #16]
 800d52a:	4615      	mov	r5, r2
 800d52c:	e7ba      	b.n	800d4a4 <_printf_i+0x150>
 800d52e:	682b      	ldr	r3, [r5, #0]
 800d530:	1d1a      	adds	r2, r3, #4
 800d532:	602a      	str	r2, [r5, #0]
 800d534:	681d      	ldr	r5, [r3, #0]
 800d536:	6862      	ldr	r2, [r4, #4]
 800d538:	2100      	movs	r1, #0
 800d53a:	4628      	mov	r0, r5
 800d53c:	f7f2 fe58 	bl	80001f0 <memchr>
 800d540:	b108      	cbz	r0, 800d546 <_printf_i+0x1f2>
 800d542:	1b40      	subs	r0, r0, r5
 800d544:	6060      	str	r0, [r4, #4]
 800d546:	6863      	ldr	r3, [r4, #4]
 800d548:	6123      	str	r3, [r4, #16]
 800d54a:	2300      	movs	r3, #0
 800d54c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d550:	e7a8      	b.n	800d4a4 <_printf_i+0x150>
 800d552:	6923      	ldr	r3, [r4, #16]
 800d554:	462a      	mov	r2, r5
 800d556:	4649      	mov	r1, r9
 800d558:	4640      	mov	r0, r8
 800d55a:	47d0      	blx	sl
 800d55c:	3001      	adds	r0, #1
 800d55e:	d0ab      	beq.n	800d4b8 <_printf_i+0x164>
 800d560:	6823      	ldr	r3, [r4, #0]
 800d562:	079b      	lsls	r3, r3, #30
 800d564:	d413      	bmi.n	800d58e <_printf_i+0x23a>
 800d566:	68e0      	ldr	r0, [r4, #12]
 800d568:	9b03      	ldr	r3, [sp, #12]
 800d56a:	4298      	cmp	r0, r3
 800d56c:	bfb8      	it	lt
 800d56e:	4618      	movlt	r0, r3
 800d570:	e7a4      	b.n	800d4bc <_printf_i+0x168>
 800d572:	2301      	movs	r3, #1
 800d574:	4632      	mov	r2, r6
 800d576:	4649      	mov	r1, r9
 800d578:	4640      	mov	r0, r8
 800d57a:	47d0      	blx	sl
 800d57c:	3001      	adds	r0, #1
 800d57e:	d09b      	beq.n	800d4b8 <_printf_i+0x164>
 800d580:	3501      	adds	r5, #1
 800d582:	68e3      	ldr	r3, [r4, #12]
 800d584:	9903      	ldr	r1, [sp, #12]
 800d586:	1a5b      	subs	r3, r3, r1
 800d588:	42ab      	cmp	r3, r5
 800d58a:	dcf2      	bgt.n	800d572 <_printf_i+0x21e>
 800d58c:	e7eb      	b.n	800d566 <_printf_i+0x212>
 800d58e:	2500      	movs	r5, #0
 800d590:	f104 0619 	add.w	r6, r4, #25
 800d594:	e7f5      	b.n	800d582 <_printf_i+0x22e>
 800d596:	bf00      	nop
 800d598:	080100d6 	.word	0x080100d6
 800d59c:	080100e7 	.word	0x080100e7

0800d5a0 <siprintf>:
 800d5a0:	b40e      	push	{r1, r2, r3}
 800d5a2:	b500      	push	{lr}
 800d5a4:	b09c      	sub	sp, #112	; 0x70
 800d5a6:	ab1d      	add	r3, sp, #116	; 0x74
 800d5a8:	9002      	str	r0, [sp, #8]
 800d5aa:	9006      	str	r0, [sp, #24]
 800d5ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5b0:	4809      	ldr	r0, [pc, #36]	; (800d5d8 <siprintf+0x38>)
 800d5b2:	9107      	str	r1, [sp, #28]
 800d5b4:	9104      	str	r1, [sp, #16]
 800d5b6:	4909      	ldr	r1, [pc, #36]	; (800d5dc <siprintf+0x3c>)
 800d5b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5bc:	9105      	str	r1, [sp, #20]
 800d5be:	6800      	ldr	r0, [r0, #0]
 800d5c0:	9301      	str	r3, [sp, #4]
 800d5c2:	a902      	add	r1, sp, #8
 800d5c4:	f001 fb76 	bl	800ecb4 <_svfiprintf_r>
 800d5c8:	9b02      	ldr	r3, [sp, #8]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	701a      	strb	r2, [r3, #0]
 800d5ce:	b01c      	add	sp, #112	; 0x70
 800d5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5d4:	b003      	add	sp, #12
 800d5d6:	4770      	bx	lr
 800d5d8:	2000010c 	.word	0x2000010c
 800d5dc:	ffff0208 	.word	0xffff0208

0800d5e0 <quorem>:
 800d5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e4:	6903      	ldr	r3, [r0, #16]
 800d5e6:	690c      	ldr	r4, [r1, #16]
 800d5e8:	42a3      	cmp	r3, r4
 800d5ea:	4607      	mov	r7, r0
 800d5ec:	f2c0 8081 	blt.w	800d6f2 <quorem+0x112>
 800d5f0:	3c01      	subs	r4, #1
 800d5f2:	f101 0814 	add.w	r8, r1, #20
 800d5f6:	f100 0514 	add.w	r5, r0, #20
 800d5fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5fe:	9301      	str	r3, [sp, #4]
 800d600:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d608:	3301      	adds	r3, #1
 800d60a:	429a      	cmp	r2, r3
 800d60c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d610:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d614:	fbb2 f6f3 	udiv	r6, r2, r3
 800d618:	d331      	bcc.n	800d67e <quorem+0x9e>
 800d61a:	f04f 0e00 	mov.w	lr, #0
 800d61e:	4640      	mov	r0, r8
 800d620:	46ac      	mov	ip, r5
 800d622:	46f2      	mov	sl, lr
 800d624:	f850 2b04 	ldr.w	r2, [r0], #4
 800d628:	b293      	uxth	r3, r2
 800d62a:	fb06 e303 	mla	r3, r6, r3, lr
 800d62e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d632:	b29b      	uxth	r3, r3
 800d634:	ebaa 0303 	sub.w	r3, sl, r3
 800d638:	f8dc a000 	ldr.w	sl, [ip]
 800d63c:	0c12      	lsrs	r2, r2, #16
 800d63e:	fa13 f38a 	uxtah	r3, r3, sl
 800d642:	fb06 e202 	mla	r2, r6, r2, lr
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	9b00      	ldr	r3, [sp, #0]
 800d64a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d64e:	b292      	uxth	r2, r2
 800d650:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d654:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d658:	f8bd 3000 	ldrh.w	r3, [sp]
 800d65c:	4581      	cmp	r9, r0
 800d65e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d662:	f84c 3b04 	str.w	r3, [ip], #4
 800d666:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d66a:	d2db      	bcs.n	800d624 <quorem+0x44>
 800d66c:	f855 300b 	ldr.w	r3, [r5, fp]
 800d670:	b92b      	cbnz	r3, 800d67e <quorem+0x9e>
 800d672:	9b01      	ldr	r3, [sp, #4]
 800d674:	3b04      	subs	r3, #4
 800d676:	429d      	cmp	r5, r3
 800d678:	461a      	mov	r2, r3
 800d67a:	d32e      	bcc.n	800d6da <quorem+0xfa>
 800d67c:	613c      	str	r4, [r7, #16]
 800d67e:	4638      	mov	r0, r7
 800d680:	f001 f8c4 	bl	800e80c <__mcmp>
 800d684:	2800      	cmp	r0, #0
 800d686:	db24      	blt.n	800d6d2 <quorem+0xf2>
 800d688:	3601      	adds	r6, #1
 800d68a:	4628      	mov	r0, r5
 800d68c:	f04f 0c00 	mov.w	ip, #0
 800d690:	f858 2b04 	ldr.w	r2, [r8], #4
 800d694:	f8d0 e000 	ldr.w	lr, [r0]
 800d698:	b293      	uxth	r3, r2
 800d69a:	ebac 0303 	sub.w	r3, ip, r3
 800d69e:	0c12      	lsrs	r2, r2, #16
 800d6a0:	fa13 f38e 	uxtah	r3, r3, lr
 800d6a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d6a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6b2:	45c1      	cmp	r9, r8
 800d6b4:	f840 3b04 	str.w	r3, [r0], #4
 800d6b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d6bc:	d2e8      	bcs.n	800d690 <quorem+0xb0>
 800d6be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6c6:	b922      	cbnz	r2, 800d6d2 <quorem+0xf2>
 800d6c8:	3b04      	subs	r3, #4
 800d6ca:	429d      	cmp	r5, r3
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	d30a      	bcc.n	800d6e6 <quorem+0x106>
 800d6d0:	613c      	str	r4, [r7, #16]
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	b003      	add	sp, #12
 800d6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6da:	6812      	ldr	r2, [r2, #0]
 800d6dc:	3b04      	subs	r3, #4
 800d6de:	2a00      	cmp	r2, #0
 800d6e0:	d1cc      	bne.n	800d67c <quorem+0x9c>
 800d6e2:	3c01      	subs	r4, #1
 800d6e4:	e7c7      	b.n	800d676 <quorem+0x96>
 800d6e6:	6812      	ldr	r2, [r2, #0]
 800d6e8:	3b04      	subs	r3, #4
 800d6ea:	2a00      	cmp	r2, #0
 800d6ec:	d1f0      	bne.n	800d6d0 <quorem+0xf0>
 800d6ee:	3c01      	subs	r4, #1
 800d6f0:	e7eb      	b.n	800d6ca <quorem+0xea>
 800d6f2:	2000      	movs	r0, #0
 800d6f4:	e7ee      	b.n	800d6d4 <quorem+0xf4>
	...

0800d6f8 <_dtoa_r>:
 800d6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6fc:	ed2d 8b04 	vpush	{d8-d9}
 800d700:	ec57 6b10 	vmov	r6, r7, d0
 800d704:	b093      	sub	sp, #76	; 0x4c
 800d706:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d708:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d70c:	9106      	str	r1, [sp, #24]
 800d70e:	ee10 aa10 	vmov	sl, s0
 800d712:	4604      	mov	r4, r0
 800d714:	9209      	str	r2, [sp, #36]	; 0x24
 800d716:	930c      	str	r3, [sp, #48]	; 0x30
 800d718:	46bb      	mov	fp, r7
 800d71a:	b975      	cbnz	r5, 800d73a <_dtoa_r+0x42>
 800d71c:	2010      	movs	r0, #16
 800d71e:	f000 fddd 	bl	800e2dc <malloc>
 800d722:	4602      	mov	r2, r0
 800d724:	6260      	str	r0, [r4, #36]	; 0x24
 800d726:	b920      	cbnz	r0, 800d732 <_dtoa_r+0x3a>
 800d728:	4ba7      	ldr	r3, [pc, #668]	; (800d9c8 <_dtoa_r+0x2d0>)
 800d72a:	21ea      	movs	r1, #234	; 0xea
 800d72c:	48a7      	ldr	r0, [pc, #668]	; (800d9cc <_dtoa_r+0x2d4>)
 800d72e:	f001 fbd1 	bl	800eed4 <__assert_func>
 800d732:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d736:	6005      	str	r5, [r0, #0]
 800d738:	60c5      	str	r5, [r0, #12]
 800d73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d73c:	6819      	ldr	r1, [r3, #0]
 800d73e:	b151      	cbz	r1, 800d756 <_dtoa_r+0x5e>
 800d740:	685a      	ldr	r2, [r3, #4]
 800d742:	604a      	str	r2, [r1, #4]
 800d744:	2301      	movs	r3, #1
 800d746:	4093      	lsls	r3, r2
 800d748:	608b      	str	r3, [r1, #8]
 800d74a:	4620      	mov	r0, r4
 800d74c:	f000 fe1c 	bl	800e388 <_Bfree>
 800d750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d752:	2200      	movs	r2, #0
 800d754:	601a      	str	r2, [r3, #0]
 800d756:	1e3b      	subs	r3, r7, #0
 800d758:	bfaa      	itet	ge
 800d75a:	2300      	movge	r3, #0
 800d75c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d760:	f8c8 3000 	strge.w	r3, [r8]
 800d764:	4b9a      	ldr	r3, [pc, #616]	; (800d9d0 <_dtoa_r+0x2d8>)
 800d766:	bfbc      	itt	lt
 800d768:	2201      	movlt	r2, #1
 800d76a:	f8c8 2000 	strlt.w	r2, [r8]
 800d76e:	ea33 030b 	bics.w	r3, r3, fp
 800d772:	d11b      	bne.n	800d7ac <_dtoa_r+0xb4>
 800d774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d776:	f242 730f 	movw	r3, #9999	; 0x270f
 800d77a:	6013      	str	r3, [r2, #0]
 800d77c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d780:	4333      	orrs	r3, r6
 800d782:	f000 8592 	beq.w	800e2aa <_dtoa_r+0xbb2>
 800d786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d788:	b963      	cbnz	r3, 800d7a4 <_dtoa_r+0xac>
 800d78a:	4b92      	ldr	r3, [pc, #584]	; (800d9d4 <_dtoa_r+0x2dc>)
 800d78c:	e022      	b.n	800d7d4 <_dtoa_r+0xdc>
 800d78e:	4b92      	ldr	r3, [pc, #584]	; (800d9d8 <_dtoa_r+0x2e0>)
 800d790:	9301      	str	r3, [sp, #4]
 800d792:	3308      	adds	r3, #8
 800d794:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d796:	6013      	str	r3, [r2, #0]
 800d798:	9801      	ldr	r0, [sp, #4]
 800d79a:	b013      	add	sp, #76	; 0x4c
 800d79c:	ecbd 8b04 	vpop	{d8-d9}
 800d7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a4:	4b8b      	ldr	r3, [pc, #556]	; (800d9d4 <_dtoa_r+0x2dc>)
 800d7a6:	9301      	str	r3, [sp, #4]
 800d7a8:	3303      	adds	r3, #3
 800d7aa:	e7f3      	b.n	800d794 <_dtoa_r+0x9c>
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	4650      	mov	r0, sl
 800d7b2:	4659      	mov	r1, fp
 800d7b4:	f7f3 f990 	bl	8000ad8 <__aeabi_dcmpeq>
 800d7b8:	ec4b ab19 	vmov	d9, sl, fp
 800d7bc:	4680      	mov	r8, r0
 800d7be:	b158      	cbz	r0, 800d7d8 <_dtoa_r+0xe0>
 800d7c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f000 856b 	beq.w	800e2a4 <_dtoa_r+0xbac>
 800d7ce:	4883      	ldr	r0, [pc, #524]	; (800d9dc <_dtoa_r+0x2e4>)
 800d7d0:	6018      	str	r0, [r3, #0]
 800d7d2:	1e43      	subs	r3, r0, #1
 800d7d4:	9301      	str	r3, [sp, #4]
 800d7d6:	e7df      	b.n	800d798 <_dtoa_r+0xa0>
 800d7d8:	ec4b ab10 	vmov	d0, sl, fp
 800d7dc:	aa10      	add	r2, sp, #64	; 0x40
 800d7de:	a911      	add	r1, sp, #68	; 0x44
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f001 f8b9 	bl	800e958 <__d2b>
 800d7e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d7ea:	ee08 0a10 	vmov	s16, r0
 800d7ee:	2d00      	cmp	r5, #0
 800d7f0:	f000 8084 	beq.w	800d8fc <_dtoa_r+0x204>
 800d7f4:	ee19 3a90 	vmov	r3, s19
 800d7f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d800:	4656      	mov	r6, sl
 800d802:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d80a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d80e:	4b74      	ldr	r3, [pc, #464]	; (800d9e0 <_dtoa_r+0x2e8>)
 800d810:	2200      	movs	r2, #0
 800d812:	4630      	mov	r0, r6
 800d814:	4639      	mov	r1, r7
 800d816:	f7f2 fd3f 	bl	8000298 <__aeabi_dsub>
 800d81a:	a365      	add	r3, pc, #404	; (adr r3, 800d9b0 <_dtoa_r+0x2b8>)
 800d81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d820:	f7f2 fef2 	bl	8000608 <__aeabi_dmul>
 800d824:	a364      	add	r3, pc, #400	; (adr r3, 800d9b8 <_dtoa_r+0x2c0>)
 800d826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82a:	f7f2 fd37 	bl	800029c <__adddf3>
 800d82e:	4606      	mov	r6, r0
 800d830:	4628      	mov	r0, r5
 800d832:	460f      	mov	r7, r1
 800d834:	f7f2 fe7e 	bl	8000534 <__aeabi_i2d>
 800d838:	a361      	add	r3, pc, #388	; (adr r3, 800d9c0 <_dtoa_r+0x2c8>)
 800d83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83e:	f7f2 fee3 	bl	8000608 <__aeabi_dmul>
 800d842:	4602      	mov	r2, r0
 800d844:	460b      	mov	r3, r1
 800d846:	4630      	mov	r0, r6
 800d848:	4639      	mov	r1, r7
 800d84a:	f7f2 fd27 	bl	800029c <__adddf3>
 800d84e:	4606      	mov	r6, r0
 800d850:	460f      	mov	r7, r1
 800d852:	f7f3 f989 	bl	8000b68 <__aeabi_d2iz>
 800d856:	2200      	movs	r2, #0
 800d858:	9000      	str	r0, [sp, #0]
 800d85a:	2300      	movs	r3, #0
 800d85c:	4630      	mov	r0, r6
 800d85e:	4639      	mov	r1, r7
 800d860:	f7f3 f944 	bl	8000aec <__aeabi_dcmplt>
 800d864:	b150      	cbz	r0, 800d87c <_dtoa_r+0x184>
 800d866:	9800      	ldr	r0, [sp, #0]
 800d868:	f7f2 fe64 	bl	8000534 <__aeabi_i2d>
 800d86c:	4632      	mov	r2, r6
 800d86e:	463b      	mov	r3, r7
 800d870:	f7f3 f932 	bl	8000ad8 <__aeabi_dcmpeq>
 800d874:	b910      	cbnz	r0, 800d87c <_dtoa_r+0x184>
 800d876:	9b00      	ldr	r3, [sp, #0]
 800d878:	3b01      	subs	r3, #1
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	9b00      	ldr	r3, [sp, #0]
 800d87e:	2b16      	cmp	r3, #22
 800d880:	d85a      	bhi.n	800d938 <_dtoa_r+0x240>
 800d882:	9a00      	ldr	r2, [sp, #0]
 800d884:	4b57      	ldr	r3, [pc, #348]	; (800d9e4 <_dtoa_r+0x2ec>)
 800d886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88e:	ec51 0b19 	vmov	r0, r1, d9
 800d892:	f7f3 f92b 	bl	8000aec <__aeabi_dcmplt>
 800d896:	2800      	cmp	r0, #0
 800d898:	d050      	beq.n	800d93c <_dtoa_r+0x244>
 800d89a:	9b00      	ldr	r3, [sp, #0]
 800d89c:	3b01      	subs	r3, #1
 800d89e:	9300      	str	r3, [sp, #0]
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8a6:	1b5d      	subs	r5, r3, r5
 800d8a8:	1e6b      	subs	r3, r5, #1
 800d8aa:	9305      	str	r3, [sp, #20]
 800d8ac:	bf45      	ittet	mi
 800d8ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800d8b2:	9304      	strmi	r3, [sp, #16]
 800d8b4:	2300      	movpl	r3, #0
 800d8b6:	2300      	movmi	r3, #0
 800d8b8:	bf4c      	ite	mi
 800d8ba:	9305      	strmi	r3, [sp, #20]
 800d8bc:	9304      	strpl	r3, [sp, #16]
 800d8be:	9b00      	ldr	r3, [sp, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	db3d      	blt.n	800d940 <_dtoa_r+0x248>
 800d8c4:	9b05      	ldr	r3, [sp, #20]
 800d8c6:	9a00      	ldr	r2, [sp, #0]
 800d8c8:	920a      	str	r2, [sp, #40]	; 0x28
 800d8ca:	4413      	add	r3, r2
 800d8cc:	9305      	str	r3, [sp, #20]
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	9307      	str	r3, [sp, #28]
 800d8d2:	9b06      	ldr	r3, [sp, #24]
 800d8d4:	2b09      	cmp	r3, #9
 800d8d6:	f200 8089 	bhi.w	800d9ec <_dtoa_r+0x2f4>
 800d8da:	2b05      	cmp	r3, #5
 800d8dc:	bfc4      	itt	gt
 800d8de:	3b04      	subgt	r3, #4
 800d8e0:	9306      	strgt	r3, [sp, #24]
 800d8e2:	9b06      	ldr	r3, [sp, #24]
 800d8e4:	f1a3 0302 	sub.w	r3, r3, #2
 800d8e8:	bfcc      	ite	gt
 800d8ea:	2500      	movgt	r5, #0
 800d8ec:	2501      	movle	r5, #1
 800d8ee:	2b03      	cmp	r3, #3
 800d8f0:	f200 8087 	bhi.w	800da02 <_dtoa_r+0x30a>
 800d8f4:	e8df f003 	tbb	[pc, r3]
 800d8f8:	59383a2d 	.word	0x59383a2d
 800d8fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d900:	441d      	add	r5, r3
 800d902:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d906:	2b20      	cmp	r3, #32
 800d908:	bfc1      	itttt	gt
 800d90a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d90e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d912:	fa0b f303 	lslgt.w	r3, fp, r3
 800d916:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d91a:	bfda      	itte	le
 800d91c:	f1c3 0320 	rsble	r3, r3, #32
 800d920:	fa06 f003 	lslle.w	r0, r6, r3
 800d924:	4318      	orrgt	r0, r3
 800d926:	f7f2 fdf5 	bl	8000514 <__aeabi_ui2d>
 800d92a:	2301      	movs	r3, #1
 800d92c:	4606      	mov	r6, r0
 800d92e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d932:	3d01      	subs	r5, #1
 800d934:	930e      	str	r3, [sp, #56]	; 0x38
 800d936:	e76a      	b.n	800d80e <_dtoa_r+0x116>
 800d938:	2301      	movs	r3, #1
 800d93a:	e7b2      	b.n	800d8a2 <_dtoa_r+0x1aa>
 800d93c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d93e:	e7b1      	b.n	800d8a4 <_dtoa_r+0x1ac>
 800d940:	9b04      	ldr	r3, [sp, #16]
 800d942:	9a00      	ldr	r2, [sp, #0]
 800d944:	1a9b      	subs	r3, r3, r2
 800d946:	9304      	str	r3, [sp, #16]
 800d948:	4253      	negs	r3, r2
 800d94a:	9307      	str	r3, [sp, #28]
 800d94c:	2300      	movs	r3, #0
 800d94e:	930a      	str	r3, [sp, #40]	; 0x28
 800d950:	e7bf      	b.n	800d8d2 <_dtoa_r+0x1da>
 800d952:	2300      	movs	r3, #0
 800d954:	9308      	str	r3, [sp, #32]
 800d956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d958:	2b00      	cmp	r3, #0
 800d95a:	dc55      	bgt.n	800da08 <_dtoa_r+0x310>
 800d95c:	2301      	movs	r3, #1
 800d95e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d962:	461a      	mov	r2, r3
 800d964:	9209      	str	r2, [sp, #36]	; 0x24
 800d966:	e00c      	b.n	800d982 <_dtoa_r+0x28a>
 800d968:	2301      	movs	r3, #1
 800d96a:	e7f3      	b.n	800d954 <_dtoa_r+0x25c>
 800d96c:	2300      	movs	r3, #0
 800d96e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d970:	9308      	str	r3, [sp, #32]
 800d972:	9b00      	ldr	r3, [sp, #0]
 800d974:	4413      	add	r3, r2
 800d976:	9302      	str	r3, [sp, #8]
 800d978:	3301      	adds	r3, #1
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	9303      	str	r3, [sp, #12]
 800d97e:	bfb8      	it	lt
 800d980:	2301      	movlt	r3, #1
 800d982:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d984:	2200      	movs	r2, #0
 800d986:	6042      	str	r2, [r0, #4]
 800d988:	2204      	movs	r2, #4
 800d98a:	f102 0614 	add.w	r6, r2, #20
 800d98e:	429e      	cmp	r6, r3
 800d990:	6841      	ldr	r1, [r0, #4]
 800d992:	d93d      	bls.n	800da10 <_dtoa_r+0x318>
 800d994:	4620      	mov	r0, r4
 800d996:	f000 fcb7 	bl	800e308 <_Balloc>
 800d99a:	9001      	str	r0, [sp, #4]
 800d99c:	2800      	cmp	r0, #0
 800d99e:	d13b      	bne.n	800da18 <_dtoa_r+0x320>
 800d9a0:	4b11      	ldr	r3, [pc, #68]	; (800d9e8 <_dtoa_r+0x2f0>)
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d9a8:	e6c0      	b.n	800d72c <_dtoa_r+0x34>
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	e7df      	b.n	800d96e <_dtoa_r+0x276>
 800d9ae:	bf00      	nop
 800d9b0:	636f4361 	.word	0x636f4361
 800d9b4:	3fd287a7 	.word	0x3fd287a7
 800d9b8:	8b60c8b3 	.word	0x8b60c8b3
 800d9bc:	3fc68a28 	.word	0x3fc68a28
 800d9c0:	509f79fb 	.word	0x509f79fb
 800d9c4:	3fd34413 	.word	0x3fd34413
 800d9c8:	08010105 	.word	0x08010105
 800d9cc:	0801011c 	.word	0x0801011c
 800d9d0:	7ff00000 	.word	0x7ff00000
 800d9d4:	08010101 	.word	0x08010101
 800d9d8:	080100f8 	.word	0x080100f8
 800d9dc:	080100d5 	.word	0x080100d5
 800d9e0:	3ff80000 	.word	0x3ff80000
 800d9e4:	08010210 	.word	0x08010210
 800d9e8:	08010177 	.word	0x08010177
 800d9ec:	2501      	movs	r5, #1
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	9306      	str	r3, [sp, #24]
 800d9f2:	9508      	str	r5, [sp, #32]
 800d9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	2312      	movs	r3, #18
 800da00:	e7b0      	b.n	800d964 <_dtoa_r+0x26c>
 800da02:	2301      	movs	r3, #1
 800da04:	9308      	str	r3, [sp, #32]
 800da06:	e7f5      	b.n	800d9f4 <_dtoa_r+0x2fc>
 800da08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da0e:	e7b8      	b.n	800d982 <_dtoa_r+0x28a>
 800da10:	3101      	adds	r1, #1
 800da12:	6041      	str	r1, [r0, #4]
 800da14:	0052      	lsls	r2, r2, #1
 800da16:	e7b8      	b.n	800d98a <_dtoa_r+0x292>
 800da18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da1a:	9a01      	ldr	r2, [sp, #4]
 800da1c:	601a      	str	r2, [r3, #0]
 800da1e:	9b03      	ldr	r3, [sp, #12]
 800da20:	2b0e      	cmp	r3, #14
 800da22:	f200 809d 	bhi.w	800db60 <_dtoa_r+0x468>
 800da26:	2d00      	cmp	r5, #0
 800da28:	f000 809a 	beq.w	800db60 <_dtoa_r+0x468>
 800da2c:	9b00      	ldr	r3, [sp, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	dd32      	ble.n	800da98 <_dtoa_r+0x3a0>
 800da32:	4ab7      	ldr	r2, [pc, #732]	; (800dd10 <_dtoa_r+0x618>)
 800da34:	f003 030f 	and.w	r3, r3, #15
 800da38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da40:	9b00      	ldr	r3, [sp, #0]
 800da42:	05d8      	lsls	r0, r3, #23
 800da44:	ea4f 1723 	mov.w	r7, r3, asr #4
 800da48:	d516      	bpl.n	800da78 <_dtoa_r+0x380>
 800da4a:	4bb2      	ldr	r3, [pc, #712]	; (800dd14 <_dtoa_r+0x61c>)
 800da4c:	ec51 0b19 	vmov	r0, r1, d9
 800da50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da54:	f7f2 ff02 	bl	800085c <__aeabi_ddiv>
 800da58:	f007 070f 	and.w	r7, r7, #15
 800da5c:	4682      	mov	sl, r0
 800da5e:	468b      	mov	fp, r1
 800da60:	2503      	movs	r5, #3
 800da62:	4eac      	ldr	r6, [pc, #688]	; (800dd14 <_dtoa_r+0x61c>)
 800da64:	b957      	cbnz	r7, 800da7c <_dtoa_r+0x384>
 800da66:	4642      	mov	r2, r8
 800da68:	464b      	mov	r3, r9
 800da6a:	4650      	mov	r0, sl
 800da6c:	4659      	mov	r1, fp
 800da6e:	f7f2 fef5 	bl	800085c <__aeabi_ddiv>
 800da72:	4682      	mov	sl, r0
 800da74:	468b      	mov	fp, r1
 800da76:	e028      	b.n	800daca <_dtoa_r+0x3d2>
 800da78:	2502      	movs	r5, #2
 800da7a:	e7f2      	b.n	800da62 <_dtoa_r+0x36a>
 800da7c:	07f9      	lsls	r1, r7, #31
 800da7e:	d508      	bpl.n	800da92 <_dtoa_r+0x39a>
 800da80:	4640      	mov	r0, r8
 800da82:	4649      	mov	r1, r9
 800da84:	e9d6 2300 	ldrd	r2, r3, [r6]
 800da88:	f7f2 fdbe 	bl	8000608 <__aeabi_dmul>
 800da8c:	3501      	adds	r5, #1
 800da8e:	4680      	mov	r8, r0
 800da90:	4689      	mov	r9, r1
 800da92:	107f      	asrs	r7, r7, #1
 800da94:	3608      	adds	r6, #8
 800da96:	e7e5      	b.n	800da64 <_dtoa_r+0x36c>
 800da98:	f000 809b 	beq.w	800dbd2 <_dtoa_r+0x4da>
 800da9c:	9b00      	ldr	r3, [sp, #0]
 800da9e:	4f9d      	ldr	r7, [pc, #628]	; (800dd14 <_dtoa_r+0x61c>)
 800daa0:	425e      	negs	r6, r3
 800daa2:	4b9b      	ldr	r3, [pc, #620]	; (800dd10 <_dtoa_r+0x618>)
 800daa4:	f006 020f 	and.w	r2, r6, #15
 800daa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800daac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab0:	ec51 0b19 	vmov	r0, r1, d9
 800dab4:	f7f2 fda8 	bl	8000608 <__aeabi_dmul>
 800dab8:	1136      	asrs	r6, r6, #4
 800daba:	4682      	mov	sl, r0
 800dabc:	468b      	mov	fp, r1
 800dabe:	2300      	movs	r3, #0
 800dac0:	2502      	movs	r5, #2
 800dac2:	2e00      	cmp	r6, #0
 800dac4:	d17a      	bne.n	800dbbc <_dtoa_r+0x4c4>
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1d3      	bne.n	800da72 <_dtoa_r+0x37a>
 800daca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f000 8082 	beq.w	800dbd6 <_dtoa_r+0x4de>
 800dad2:	4b91      	ldr	r3, [pc, #580]	; (800dd18 <_dtoa_r+0x620>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	4650      	mov	r0, sl
 800dad8:	4659      	mov	r1, fp
 800dada:	f7f3 f807 	bl	8000aec <__aeabi_dcmplt>
 800dade:	2800      	cmp	r0, #0
 800dae0:	d079      	beq.n	800dbd6 <_dtoa_r+0x4de>
 800dae2:	9b03      	ldr	r3, [sp, #12]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d076      	beq.n	800dbd6 <_dtoa_r+0x4de>
 800dae8:	9b02      	ldr	r3, [sp, #8]
 800daea:	2b00      	cmp	r3, #0
 800daec:	dd36      	ble.n	800db5c <_dtoa_r+0x464>
 800daee:	9b00      	ldr	r3, [sp, #0]
 800daf0:	4650      	mov	r0, sl
 800daf2:	4659      	mov	r1, fp
 800daf4:	1e5f      	subs	r7, r3, #1
 800daf6:	2200      	movs	r2, #0
 800daf8:	4b88      	ldr	r3, [pc, #544]	; (800dd1c <_dtoa_r+0x624>)
 800dafa:	f7f2 fd85 	bl	8000608 <__aeabi_dmul>
 800dafe:	9e02      	ldr	r6, [sp, #8]
 800db00:	4682      	mov	sl, r0
 800db02:	468b      	mov	fp, r1
 800db04:	3501      	adds	r5, #1
 800db06:	4628      	mov	r0, r5
 800db08:	f7f2 fd14 	bl	8000534 <__aeabi_i2d>
 800db0c:	4652      	mov	r2, sl
 800db0e:	465b      	mov	r3, fp
 800db10:	f7f2 fd7a 	bl	8000608 <__aeabi_dmul>
 800db14:	4b82      	ldr	r3, [pc, #520]	; (800dd20 <_dtoa_r+0x628>)
 800db16:	2200      	movs	r2, #0
 800db18:	f7f2 fbc0 	bl	800029c <__adddf3>
 800db1c:	46d0      	mov	r8, sl
 800db1e:	46d9      	mov	r9, fp
 800db20:	4682      	mov	sl, r0
 800db22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800db26:	2e00      	cmp	r6, #0
 800db28:	d158      	bne.n	800dbdc <_dtoa_r+0x4e4>
 800db2a:	4b7e      	ldr	r3, [pc, #504]	; (800dd24 <_dtoa_r+0x62c>)
 800db2c:	2200      	movs	r2, #0
 800db2e:	4640      	mov	r0, r8
 800db30:	4649      	mov	r1, r9
 800db32:	f7f2 fbb1 	bl	8000298 <__aeabi_dsub>
 800db36:	4652      	mov	r2, sl
 800db38:	465b      	mov	r3, fp
 800db3a:	4680      	mov	r8, r0
 800db3c:	4689      	mov	r9, r1
 800db3e:	f7f2 fff3 	bl	8000b28 <__aeabi_dcmpgt>
 800db42:	2800      	cmp	r0, #0
 800db44:	f040 8295 	bne.w	800e072 <_dtoa_r+0x97a>
 800db48:	4652      	mov	r2, sl
 800db4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800db4e:	4640      	mov	r0, r8
 800db50:	4649      	mov	r1, r9
 800db52:	f7f2 ffcb 	bl	8000aec <__aeabi_dcmplt>
 800db56:	2800      	cmp	r0, #0
 800db58:	f040 8289 	bne.w	800e06e <_dtoa_r+0x976>
 800db5c:	ec5b ab19 	vmov	sl, fp, d9
 800db60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db62:	2b00      	cmp	r3, #0
 800db64:	f2c0 8148 	blt.w	800ddf8 <_dtoa_r+0x700>
 800db68:	9a00      	ldr	r2, [sp, #0]
 800db6a:	2a0e      	cmp	r2, #14
 800db6c:	f300 8144 	bgt.w	800ddf8 <_dtoa_r+0x700>
 800db70:	4b67      	ldr	r3, [pc, #412]	; (800dd10 <_dtoa_r+0x618>)
 800db72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db76:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f280 80d5 	bge.w	800dd2c <_dtoa_r+0x634>
 800db82:	9b03      	ldr	r3, [sp, #12]
 800db84:	2b00      	cmp	r3, #0
 800db86:	f300 80d1 	bgt.w	800dd2c <_dtoa_r+0x634>
 800db8a:	f040 826f 	bne.w	800e06c <_dtoa_r+0x974>
 800db8e:	4b65      	ldr	r3, [pc, #404]	; (800dd24 <_dtoa_r+0x62c>)
 800db90:	2200      	movs	r2, #0
 800db92:	4640      	mov	r0, r8
 800db94:	4649      	mov	r1, r9
 800db96:	f7f2 fd37 	bl	8000608 <__aeabi_dmul>
 800db9a:	4652      	mov	r2, sl
 800db9c:	465b      	mov	r3, fp
 800db9e:	f7f2 ffb9 	bl	8000b14 <__aeabi_dcmpge>
 800dba2:	9e03      	ldr	r6, [sp, #12]
 800dba4:	4637      	mov	r7, r6
 800dba6:	2800      	cmp	r0, #0
 800dba8:	f040 8245 	bne.w	800e036 <_dtoa_r+0x93e>
 800dbac:	9d01      	ldr	r5, [sp, #4]
 800dbae:	2331      	movs	r3, #49	; 0x31
 800dbb0:	f805 3b01 	strb.w	r3, [r5], #1
 800dbb4:	9b00      	ldr	r3, [sp, #0]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	9300      	str	r3, [sp, #0]
 800dbba:	e240      	b.n	800e03e <_dtoa_r+0x946>
 800dbbc:	07f2      	lsls	r2, r6, #31
 800dbbe:	d505      	bpl.n	800dbcc <_dtoa_r+0x4d4>
 800dbc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbc4:	f7f2 fd20 	bl	8000608 <__aeabi_dmul>
 800dbc8:	3501      	adds	r5, #1
 800dbca:	2301      	movs	r3, #1
 800dbcc:	1076      	asrs	r6, r6, #1
 800dbce:	3708      	adds	r7, #8
 800dbd0:	e777      	b.n	800dac2 <_dtoa_r+0x3ca>
 800dbd2:	2502      	movs	r5, #2
 800dbd4:	e779      	b.n	800daca <_dtoa_r+0x3d2>
 800dbd6:	9f00      	ldr	r7, [sp, #0]
 800dbd8:	9e03      	ldr	r6, [sp, #12]
 800dbda:	e794      	b.n	800db06 <_dtoa_r+0x40e>
 800dbdc:	9901      	ldr	r1, [sp, #4]
 800dbde:	4b4c      	ldr	r3, [pc, #304]	; (800dd10 <_dtoa_r+0x618>)
 800dbe0:	4431      	add	r1, r6
 800dbe2:	910d      	str	r1, [sp, #52]	; 0x34
 800dbe4:	9908      	ldr	r1, [sp, #32]
 800dbe6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dbea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dbee:	2900      	cmp	r1, #0
 800dbf0:	d043      	beq.n	800dc7a <_dtoa_r+0x582>
 800dbf2:	494d      	ldr	r1, [pc, #308]	; (800dd28 <_dtoa_r+0x630>)
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	f7f2 fe31 	bl	800085c <__aeabi_ddiv>
 800dbfa:	4652      	mov	r2, sl
 800dbfc:	465b      	mov	r3, fp
 800dbfe:	f7f2 fb4b 	bl	8000298 <__aeabi_dsub>
 800dc02:	9d01      	ldr	r5, [sp, #4]
 800dc04:	4682      	mov	sl, r0
 800dc06:	468b      	mov	fp, r1
 800dc08:	4649      	mov	r1, r9
 800dc0a:	4640      	mov	r0, r8
 800dc0c:	f7f2 ffac 	bl	8000b68 <__aeabi_d2iz>
 800dc10:	4606      	mov	r6, r0
 800dc12:	f7f2 fc8f 	bl	8000534 <__aeabi_i2d>
 800dc16:	4602      	mov	r2, r0
 800dc18:	460b      	mov	r3, r1
 800dc1a:	4640      	mov	r0, r8
 800dc1c:	4649      	mov	r1, r9
 800dc1e:	f7f2 fb3b 	bl	8000298 <__aeabi_dsub>
 800dc22:	3630      	adds	r6, #48	; 0x30
 800dc24:	f805 6b01 	strb.w	r6, [r5], #1
 800dc28:	4652      	mov	r2, sl
 800dc2a:	465b      	mov	r3, fp
 800dc2c:	4680      	mov	r8, r0
 800dc2e:	4689      	mov	r9, r1
 800dc30:	f7f2 ff5c 	bl	8000aec <__aeabi_dcmplt>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	d163      	bne.n	800dd00 <_dtoa_r+0x608>
 800dc38:	4642      	mov	r2, r8
 800dc3a:	464b      	mov	r3, r9
 800dc3c:	4936      	ldr	r1, [pc, #216]	; (800dd18 <_dtoa_r+0x620>)
 800dc3e:	2000      	movs	r0, #0
 800dc40:	f7f2 fb2a 	bl	8000298 <__aeabi_dsub>
 800dc44:	4652      	mov	r2, sl
 800dc46:	465b      	mov	r3, fp
 800dc48:	f7f2 ff50 	bl	8000aec <__aeabi_dcmplt>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	f040 80b5 	bne.w	800ddbc <_dtoa_r+0x6c4>
 800dc52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc54:	429d      	cmp	r5, r3
 800dc56:	d081      	beq.n	800db5c <_dtoa_r+0x464>
 800dc58:	4b30      	ldr	r3, [pc, #192]	; (800dd1c <_dtoa_r+0x624>)
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	4650      	mov	r0, sl
 800dc5e:	4659      	mov	r1, fp
 800dc60:	f7f2 fcd2 	bl	8000608 <__aeabi_dmul>
 800dc64:	4b2d      	ldr	r3, [pc, #180]	; (800dd1c <_dtoa_r+0x624>)
 800dc66:	4682      	mov	sl, r0
 800dc68:	468b      	mov	fp, r1
 800dc6a:	4640      	mov	r0, r8
 800dc6c:	4649      	mov	r1, r9
 800dc6e:	2200      	movs	r2, #0
 800dc70:	f7f2 fcca 	bl	8000608 <__aeabi_dmul>
 800dc74:	4680      	mov	r8, r0
 800dc76:	4689      	mov	r9, r1
 800dc78:	e7c6      	b.n	800dc08 <_dtoa_r+0x510>
 800dc7a:	4650      	mov	r0, sl
 800dc7c:	4659      	mov	r1, fp
 800dc7e:	f7f2 fcc3 	bl	8000608 <__aeabi_dmul>
 800dc82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc84:	9d01      	ldr	r5, [sp, #4]
 800dc86:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc88:	4682      	mov	sl, r0
 800dc8a:	468b      	mov	fp, r1
 800dc8c:	4649      	mov	r1, r9
 800dc8e:	4640      	mov	r0, r8
 800dc90:	f7f2 ff6a 	bl	8000b68 <__aeabi_d2iz>
 800dc94:	4606      	mov	r6, r0
 800dc96:	f7f2 fc4d 	bl	8000534 <__aeabi_i2d>
 800dc9a:	3630      	adds	r6, #48	; 0x30
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	460b      	mov	r3, r1
 800dca0:	4640      	mov	r0, r8
 800dca2:	4649      	mov	r1, r9
 800dca4:	f7f2 faf8 	bl	8000298 <__aeabi_dsub>
 800dca8:	f805 6b01 	strb.w	r6, [r5], #1
 800dcac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcae:	429d      	cmp	r5, r3
 800dcb0:	4680      	mov	r8, r0
 800dcb2:	4689      	mov	r9, r1
 800dcb4:	f04f 0200 	mov.w	r2, #0
 800dcb8:	d124      	bne.n	800dd04 <_dtoa_r+0x60c>
 800dcba:	4b1b      	ldr	r3, [pc, #108]	; (800dd28 <_dtoa_r+0x630>)
 800dcbc:	4650      	mov	r0, sl
 800dcbe:	4659      	mov	r1, fp
 800dcc0:	f7f2 faec 	bl	800029c <__adddf3>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	4640      	mov	r0, r8
 800dcca:	4649      	mov	r1, r9
 800dccc:	f7f2 ff2c 	bl	8000b28 <__aeabi_dcmpgt>
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	d173      	bne.n	800ddbc <_dtoa_r+0x6c4>
 800dcd4:	4652      	mov	r2, sl
 800dcd6:	465b      	mov	r3, fp
 800dcd8:	4913      	ldr	r1, [pc, #76]	; (800dd28 <_dtoa_r+0x630>)
 800dcda:	2000      	movs	r0, #0
 800dcdc:	f7f2 fadc 	bl	8000298 <__aeabi_dsub>
 800dce0:	4602      	mov	r2, r0
 800dce2:	460b      	mov	r3, r1
 800dce4:	4640      	mov	r0, r8
 800dce6:	4649      	mov	r1, r9
 800dce8:	f7f2 ff00 	bl	8000aec <__aeabi_dcmplt>
 800dcec:	2800      	cmp	r0, #0
 800dcee:	f43f af35 	beq.w	800db5c <_dtoa_r+0x464>
 800dcf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dcf4:	1e6b      	subs	r3, r5, #1
 800dcf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dcfc:	2b30      	cmp	r3, #48	; 0x30
 800dcfe:	d0f8      	beq.n	800dcf2 <_dtoa_r+0x5fa>
 800dd00:	9700      	str	r7, [sp, #0]
 800dd02:	e049      	b.n	800dd98 <_dtoa_r+0x6a0>
 800dd04:	4b05      	ldr	r3, [pc, #20]	; (800dd1c <_dtoa_r+0x624>)
 800dd06:	f7f2 fc7f 	bl	8000608 <__aeabi_dmul>
 800dd0a:	4680      	mov	r8, r0
 800dd0c:	4689      	mov	r9, r1
 800dd0e:	e7bd      	b.n	800dc8c <_dtoa_r+0x594>
 800dd10:	08010210 	.word	0x08010210
 800dd14:	080101e8 	.word	0x080101e8
 800dd18:	3ff00000 	.word	0x3ff00000
 800dd1c:	40240000 	.word	0x40240000
 800dd20:	401c0000 	.word	0x401c0000
 800dd24:	40140000 	.word	0x40140000
 800dd28:	3fe00000 	.word	0x3fe00000
 800dd2c:	9d01      	ldr	r5, [sp, #4]
 800dd2e:	4656      	mov	r6, sl
 800dd30:	465f      	mov	r7, fp
 800dd32:	4642      	mov	r2, r8
 800dd34:	464b      	mov	r3, r9
 800dd36:	4630      	mov	r0, r6
 800dd38:	4639      	mov	r1, r7
 800dd3a:	f7f2 fd8f 	bl	800085c <__aeabi_ddiv>
 800dd3e:	f7f2 ff13 	bl	8000b68 <__aeabi_d2iz>
 800dd42:	4682      	mov	sl, r0
 800dd44:	f7f2 fbf6 	bl	8000534 <__aeabi_i2d>
 800dd48:	4642      	mov	r2, r8
 800dd4a:	464b      	mov	r3, r9
 800dd4c:	f7f2 fc5c 	bl	8000608 <__aeabi_dmul>
 800dd50:	4602      	mov	r2, r0
 800dd52:	460b      	mov	r3, r1
 800dd54:	4630      	mov	r0, r6
 800dd56:	4639      	mov	r1, r7
 800dd58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dd5c:	f7f2 fa9c 	bl	8000298 <__aeabi_dsub>
 800dd60:	f805 6b01 	strb.w	r6, [r5], #1
 800dd64:	9e01      	ldr	r6, [sp, #4]
 800dd66:	9f03      	ldr	r7, [sp, #12]
 800dd68:	1bae      	subs	r6, r5, r6
 800dd6a:	42b7      	cmp	r7, r6
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	460b      	mov	r3, r1
 800dd70:	d135      	bne.n	800ddde <_dtoa_r+0x6e6>
 800dd72:	f7f2 fa93 	bl	800029c <__adddf3>
 800dd76:	4642      	mov	r2, r8
 800dd78:	464b      	mov	r3, r9
 800dd7a:	4606      	mov	r6, r0
 800dd7c:	460f      	mov	r7, r1
 800dd7e:	f7f2 fed3 	bl	8000b28 <__aeabi_dcmpgt>
 800dd82:	b9d0      	cbnz	r0, 800ddba <_dtoa_r+0x6c2>
 800dd84:	4642      	mov	r2, r8
 800dd86:	464b      	mov	r3, r9
 800dd88:	4630      	mov	r0, r6
 800dd8a:	4639      	mov	r1, r7
 800dd8c:	f7f2 fea4 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd90:	b110      	cbz	r0, 800dd98 <_dtoa_r+0x6a0>
 800dd92:	f01a 0f01 	tst.w	sl, #1
 800dd96:	d110      	bne.n	800ddba <_dtoa_r+0x6c2>
 800dd98:	4620      	mov	r0, r4
 800dd9a:	ee18 1a10 	vmov	r1, s16
 800dd9e:	f000 faf3 	bl	800e388 <_Bfree>
 800dda2:	2300      	movs	r3, #0
 800dda4:	9800      	ldr	r0, [sp, #0]
 800dda6:	702b      	strb	r3, [r5, #0]
 800dda8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddaa:	3001      	adds	r0, #1
 800ddac:	6018      	str	r0, [r3, #0]
 800ddae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	f43f acf1 	beq.w	800d798 <_dtoa_r+0xa0>
 800ddb6:	601d      	str	r5, [r3, #0]
 800ddb8:	e4ee      	b.n	800d798 <_dtoa_r+0xa0>
 800ddba:	9f00      	ldr	r7, [sp, #0]
 800ddbc:	462b      	mov	r3, r5
 800ddbe:	461d      	mov	r5, r3
 800ddc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddc4:	2a39      	cmp	r2, #57	; 0x39
 800ddc6:	d106      	bne.n	800ddd6 <_dtoa_r+0x6de>
 800ddc8:	9a01      	ldr	r2, [sp, #4]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d1f7      	bne.n	800ddbe <_dtoa_r+0x6c6>
 800ddce:	9901      	ldr	r1, [sp, #4]
 800ddd0:	2230      	movs	r2, #48	; 0x30
 800ddd2:	3701      	adds	r7, #1
 800ddd4:	700a      	strb	r2, [r1, #0]
 800ddd6:	781a      	ldrb	r2, [r3, #0]
 800ddd8:	3201      	adds	r2, #1
 800ddda:	701a      	strb	r2, [r3, #0]
 800dddc:	e790      	b.n	800dd00 <_dtoa_r+0x608>
 800ddde:	4ba6      	ldr	r3, [pc, #664]	; (800e078 <_dtoa_r+0x980>)
 800dde0:	2200      	movs	r2, #0
 800dde2:	f7f2 fc11 	bl	8000608 <__aeabi_dmul>
 800dde6:	2200      	movs	r2, #0
 800dde8:	2300      	movs	r3, #0
 800ddea:	4606      	mov	r6, r0
 800ddec:	460f      	mov	r7, r1
 800ddee:	f7f2 fe73 	bl	8000ad8 <__aeabi_dcmpeq>
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d09d      	beq.n	800dd32 <_dtoa_r+0x63a>
 800ddf6:	e7cf      	b.n	800dd98 <_dtoa_r+0x6a0>
 800ddf8:	9a08      	ldr	r2, [sp, #32]
 800ddfa:	2a00      	cmp	r2, #0
 800ddfc:	f000 80d7 	beq.w	800dfae <_dtoa_r+0x8b6>
 800de00:	9a06      	ldr	r2, [sp, #24]
 800de02:	2a01      	cmp	r2, #1
 800de04:	f300 80ba 	bgt.w	800df7c <_dtoa_r+0x884>
 800de08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de0a:	2a00      	cmp	r2, #0
 800de0c:	f000 80b2 	beq.w	800df74 <_dtoa_r+0x87c>
 800de10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de14:	9e07      	ldr	r6, [sp, #28]
 800de16:	9d04      	ldr	r5, [sp, #16]
 800de18:	9a04      	ldr	r2, [sp, #16]
 800de1a:	441a      	add	r2, r3
 800de1c:	9204      	str	r2, [sp, #16]
 800de1e:	9a05      	ldr	r2, [sp, #20]
 800de20:	2101      	movs	r1, #1
 800de22:	441a      	add	r2, r3
 800de24:	4620      	mov	r0, r4
 800de26:	9205      	str	r2, [sp, #20]
 800de28:	f000 fb66 	bl	800e4f8 <__i2b>
 800de2c:	4607      	mov	r7, r0
 800de2e:	2d00      	cmp	r5, #0
 800de30:	dd0c      	ble.n	800de4c <_dtoa_r+0x754>
 800de32:	9b05      	ldr	r3, [sp, #20]
 800de34:	2b00      	cmp	r3, #0
 800de36:	dd09      	ble.n	800de4c <_dtoa_r+0x754>
 800de38:	42ab      	cmp	r3, r5
 800de3a:	9a04      	ldr	r2, [sp, #16]
 800de3c:	bfa8      	it	ge
 800de3e:	462b      	movge	r3, r5
 800de40:	1ad2      	subs	r2, r2, r3
 800de42:	9204      	str	r2, [sp, #16]
 800de44:	9a05      	ldr	r2, [sp, #20]
 800de46:	1aed      	subs	r5, r5, r3
 800de48:	1ad3      	subs	r3, r2, r3
 800de4a:	9305      	str	r3, [sp, #20]
 800de4c:	9b07      	ldr	r3, [sp, #28]
 800de4e:	b31b      	cbz	r3, 800de98 <_dtoa_r+0x7a0>
 800de50:	9b08      	ldr	r3, [sp, #32]
 800de52:	2b00      	cmp	r3, #0
 800de54:	f000 80af 	beq.w	800dfb6 <_dtoa_r+0x8be>
 800de58:	2e00      	cmp	r6, #0
 800de5a:	dd13      	ble.n	800de84 <_dtoa_r+0x78c>
 800de5c:	4639      	mov	r1, r7
 800de5e:	4632      	mov	r2, r6
 800de60:	4620      	mov	r0, r4
 800de62:	f000 fc09 	bl	800e678 <__pow5mult>
 800de66:	ee18 2a10 	vmov	r2, s16
 800de6a:	4601      	mov	r1, r0
 800de6c:	4607      	mov	r7, r0
 800de6e:	4620      	mov	r0, r4
 800de70:	f000 fb58 	bl	800e524 <__multiply>
 800de74:	ee18 1a10 	vmov	r1, s16
 800de78:	4680      	mov	r8, r0
 800de7a:	4620      	mov	r0, r4
 800de7c:	f000 fa84 	bl	800e388 <_Bfree>
 800de80:	ee08 8a10 	vmov	s16, r8
 800de84:	9b07      	ldr	r3, [sp, #28]
 800de86:	1b9a      	subs	r2, r3, r6
 800de88:	d006      	beq.n	800de98 <_dtoa_r+0x7a0>
 800de8a:	ee18 1a10 	vmov	r1, s16
 800de8e:	4620      	mov	r0, r4
 800de90:	f000 fbf2 	bl	800e678 <__pow5mult>
 800de94:	ee08 0a10 	vmov	s16, r0
 800de98:	2101      	movs	r1, #1
 800de9a:	4620      	mov	r0, r4
 800de9c:	f000 fb2c 	bl	800e4f8 <__i2b>
 800dea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	4606      	mov	r6, r0
 800dea6:	f340 8088 	ble.w	800dfba <_dtoa_r+0x8c2>
 800deaa:	461a      	mov	r2, r3
 800deac:	4601      	mov	r1, r0
 800deae:	4620      	mov	r0, r4
 800deb0:	f000 fbe2 	bl	800e678 <__pow5mult>
 800deb4:	9b06      	ldr	r3, [sp, #24]
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	4606      	mov	r6, r0
 800deba:	f340 8081 	ble.w	800dfc0 <_dtoa_r+0x8c8>
 800debe:	f04f 0800 	mov.w	r8, #0
 800dec2:	6933      	ldr	r3, [r6, #16]
 800dec4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dec8:	6918      	ldr	r0, [r3, #16]
 800deca:	f000 fac5 	bl	800e458 <__hi0bits>
 800dece:	f1c0 0020 	rsb	r0, r0, #32
 800ded2:	9b05      	ldr	r3, [sp, #20]
 800ded4:	4418      	add	r0, r3
 800ded6:	f010 001f 	ands.w	r0, r0, #31
 800deda:	f000 8092 	beq.w	800e002 <_dtoa_r+0x90a>
 800dede:	f1c0 0320 	rsb	r3, r0, #32
 800dee2:	2b04      	cmp	r3, #4
 800dee4:	f340 808a 	ble.w	800dffc <_dtoa_r+0x904>
 800dee8:	f1c0 001c 	rsb	r0, r0, #28
 800deec:	9b04      	ldr	r3, [sp, #16]
 800deee:	4403      	add	r3, r0
 800def0:	9304      	str	r3, [sp, #16]
 800def2:	9b05      	ldr	r3, [sp, #20]
 800def4:	4403      	add	r3, r0
 800def6:	4405      	add	r5, r0
 800def8:	9305      	str	r3, [sp, #20]
 800defa:	9b04      	ldr	r3, [sp, #16]
 800defc:	2b00      	cmp	r3, #0
 800defe:	dd07      	ble.n	800df10 <_dtoa_r+0x818>
 800df00:	ee18 1a10 	vmov	r1, s16
 800df04:	461a      	mov	r2, r3
 800df06:	4620      	mov	r0, r4
 800df08:	f000 fc10 	bl	800e72c <__lshift>
 800df0c:	ee08 0a10 	vmov	s16, r0
 800df10:	9b05      	ldr	r3, [sp, #20]
 800df12:	2b00      	cmp	r3, #0
 800df14:	dd05      	ble.n	800df22 <_dtoa_r+0x82a>
 800df16:	4631      	mov	r1, r6
 800df18:	461a      	mov	r2, r3
 800df1a:	4620      	mov	r0, r4
 800df1c:	f000 fc06 	bl	800e72c <__lshift>
 800df20:	4606      	mov	r6, r0
 800df22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df24:	2b00      	cmp	r3, #0
 800df26:	d06e      	beq.n	800e006 <_dtoa_r+0x90e>
 800df28:	ee18 0a10 	vmov	r0, s16
 800df2c:	4631      	mov	r1, r6
 800df2e:	f000 fc6d 	bl	800e80c <__mcmp>
 800df32:	2800      	cmp	r0, #0
 800df34:	da67      	bge.n	800e006 <_dtoa_r+0x90e>
 800df36:	9b00      	ldr	r3, [sp, #0]
 800df38:	3b01      	subs	r3, #1
 800df3a:	ee18 1a10 	vmov	r1, s16
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	220a      	movs	r2, #10
 800df42:	2300      	movs	r3, #0
 800df44:	4620      	mov	r0, r4
 800df46:	f000 fa41 	bl	800e3cc <__multadd>
 800df4a:	9b08      	ldr	r3, [sp, #32]
 800df4c:	ee08 0a10 	vmov	s16, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	f000 81b1 	beq.w	800e2b8 <_dtoa_r+0xbc0>
 800df56:	2300      	movs	r3, #0
 800df58:	4639      	mov	r1, r7
 800df5a:	220a      	movs	r2, #10
 800df5c:	4620      	mov	r0, r4
 800df5e:	f000 fa35 	bl	800e3cc <__multadd>
 800df62:	9b02      	ldr	r3, [sp, #8]
 800df64:	2b00      	cmp	r3, #0
 800df66:	4607      	mov	r7, r0
 800df68:	f300 808e 	bgt.w	800e088 <_dtoa_r+0x990>
 800df6c:	9b06      	ldr	r3, [sp, #24]
 800df6e:	2b02      	cmp	r3, #2
 800df70:	dc51      	bgt.n	800e016 <_dtoa_r+0x91e>
 800df72:	e089      	b.n	800e088 <_dtoa_r+0x990>
 800df74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800df7a:	e74b      	b.n	800de14 <_dtoa_r+0x71c>
 800df7c:	9b03      	ldr	r3, [sp, #12]
 800df7e:	1e5e      	subs	r6, r3, #1
 800df80:	9b07      	ldr	r3, [sp, #28]
 800df82:	42b3      	cmp	r3, r6
 800df84:	bfbf      	itttt	lt
 800df86:	9b07      	ldrlt	r3, [sp, #28]
 800df88:	9607      	strlt	r6, [sp, #28]
 800df8a:	1af2      	sublt	r2, r6, r3
 800df8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800df8e:	bfb6      	itet	lt
 800df90:	189b      	addlt	r3, r3, r2
 800df92:	1b9e      	subge	r6, r3, r6
 800df94:	930a      	strlt	r3, [sp, #40]	; 0x28
 800df96:	9b03      	ldr	r3, [sp, #12]
 800df98:	bfb8      	it	lt
 800df9a:	2600      	movlt	r6, #0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	bfb7      	itett	lt
 800dfa0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dfa4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dfa8:	1a9d      	sublt	r5, r3, r2
 800dfaa:	2300      	movlt	r3, #0
 800dfac:	e734      	b.n	800de18 <_dtoa_r+0x720>
 800dfae:	9e07      	ldr	r6, [sp, #28]
 800dfb0:	9d04      	ldr	r5, [sp, #16]
 800dfb2:	9f08      	ldr	r7, [sp, #32]
 800dfb4:	e73b      	b.n	800de2e <_dtoa_r+0x736>
 800dfb6:	9a07      	ldr	r2, [sp, #28]
 800dfb8:	e767      	b.n	800de8a <_dtoa_r+0x792>
 800dfba:	9b06      	ldr	r3, [sp, #24]
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	dc18      	bgt.n	800dff2 <_dtoa_r+0x8fa>
 800dfc0:	f1ba 0f00 	cmp.w	sl, #0
 800dfc4:	d115      	bne.n	800dff2 <_dtoa_r+0x8fa>
 800dfc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfca:	b993      	cbnz	r3, 800dff2 <_dtoa_r+0x8fa>
 800dfcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dfd0:	0d1b      	lsrs	r3, r3, #20
 800dfd2:	051b      	lsls	r3, r3, #20
 800dfd4:	b183      	cbz	r3, 800dff8 <_dtoa_r+0x900>
 800dfd6:	9b04      	ldr	r3, [sp, #16]
 800dfd8:	3301      	adds	r3, #1
 800dfda:	9304      	str	r3, [sp, #16]
 800dfdc:	9b05      	ldr	r3, [sp, #20]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	9305      	str	r3, [sp, #20]
 800dfe2:	f04f 0801 	mov.w	r8, #1
 800dfe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	f47f af6a 	bne.w	800dec2 <_dtoa_r+0x7ca>
 800dfee:	2001      	movs	r0, #1
 800dff0:	e76f      	b.n	800ded2 <_dtoa_r+0x7da>
 800dff2:	f04f 0800 	mov.w	r8, #0
 800dff6:	e7f6      	b.n	800dfe6 <_dtoa_r+0x8ee>
 800dff8:	4698      	mov	r8, r3
 800dffa:	e7f4      	b.n	800dfe6 <_dtoa_r+0x8ee>
 800dffc:	f43f af7d 	beq.w	800defa <_dtoa_r+0x802>
 800e000:	4618      	mov	r0, r3
 800e002:	301c      	adds	r0, #28
 800e004:	e772      	b.n	800deec <_dtoa_r+0x7f4>
 800e006:	9b03      	ldr	r3, [sp, #12]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	dc37      	bgt.n	800e07c <_dtoa_r+0x984>
 800e00c:	9b06      	ldr	r3, [sp, #24]
 800e00e:	2b02      	cmp	r3, #2
 800e010:	dd34      	ble.n	800e07c <_dtoa_r+0x984>
 800e012:	9b03      	ldr	r3, [sp, #12]
 800e014:	9302      	str	r3, [sp, #8]
 800e016:	9b02      	ldr	r3, [sp, #8]
 800e018:	b96b      	cbnz	r3, 800e036 <_dtoa_r+0x93e>
 800e01a:	4631      	mov	r1, r6
 800e01c:	2205      	movs	r2, #5
 800e01e:	4620      	mov	r0, r4
 800e020:	f000 f9d4 	bl	800e3cc <__multadd>
 800e024:	4601      	mov	r1, r0
 800e026:	4606      	mov	r6, r0
 800e028:	ee18 0a10 	vmov	r0, s16
 800e02c:	f000 fbee 	bl	800e80c <__mcmp>
 800e030:	2800      	cmp	r0, #0
 800e032:	f73f adbb 	bgt.w	800dbac <_dtoa_r+0x4b4>
 800e036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e038:	9d01      	ldr	r5, [sp, #4]
 800e03a:	43db      	mvns	r3, r3
 800e03c:	9300      	str	r3, [sp, #0]
 800e03e:	f04f 0800 	mov.w	r8, #0
 800e042:	4631      	mov	r1, r6
 800e044:	4620      	mov	r0, r4
 800e046:	f000 f99f 	bl	800e388 <_Bfree>
 800e04a:	2f00      	cmp	r7, #0
 800e04c:	f43f aea4 	beq.w	800dd98 <_dtoa_r+0x6a0>
 800e050:	f1b8 0f00 	cmp.w	r8, #0
 800e054:	d005      	beq.n	800e062 <_dtoa_r+0x96a>
 800e056:	45b8      	cmp	r8, r7
 800e058:	d003      	beq.n	800e062 <_dtoa_r+0x96a>
 800e05a:	4641      	mov	r1, r8
 800e05c:	4620      	mov	r0, r4
 800e05e:	f000 f993 	bl	800e388 <_Bfree>
 800e062:	4639      	mov	r1, r7
 800e064:	4620      	mov	r0, r4
 800e066:	f000 f98f 	bl	800e388 <_Bfree>
 800e06a:	e695      	b.n	800dd98 <_dtoa_r+0x6a0>
 800e06c:	2600      	movs	r6, #0
 800e06e:	4637      	mov	r7, r6
 800e070:	e7e1      	b.n	800e036 <_dtoa_r+0x93e>
 800e072:	9700      	str	r7, [sp, #0]
 800e074:	4637      	mov	r7, r6
 800e076:	e599      	b.n	800dbac <_dtoa_r+0x4b4>
 800e078:	40240000 	.word	0x40240000
 800e07c:	9b08      	ldr	r3, [sp, #32]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	f000 80ca 	beq.w	800e218 <_dtoa_r+0xb20>
 800e084:	9b03      	ldr	r3, [sp, #12]
 800e086:	9302      	str	r3, [sp, #8]
 800e088:	2d00      	cmp	r5, #0
 800e08a:	dd05      	ble.n	800e098 <_dtoa_r+0x9a0>
 800e08c:	4639      	mov	r1, r7
 800e08e:	462a      	mov	r2, r5
 800e090:	4620      	mov	r0, r4
 800e092:	f000 fb4b 	bl	800e72c <__lshift>
 800e096:	4607      	mov	r7, r0
 800e098:	f1b8 0f00 	cmp.w	r8, #0
 800e09c:	d05b      	beq.n	800e156 <_dtoa_r+0xa5e>
 800e09e:	6879      	ldr	r1, [r7, #4]
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f000 f931 	bl	800e308 <_Balloc>
 800e0a6:	4605      	mov	r5, r0
 800e0a8:	b928      	cbnz	r0, 800e0b6 <_dtoa_r+0x9be>
 800e0aa:	4b87      	ldr	r3, [pc, #540]	; (800e2c8 <_dtoa_r+0xbd0>)
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e0b2:	f7ff bb3b 	b.w	800d72c <_dtoa_r+0x34>
 800e0b6:	693a      	ldr	r2, [r7, #16]
 800e0b8:	3202      	adds	r2, #2
 800e0ba:	0092      	lsls	r2, r2, #2
 800e0bc:	f107 010c 	add.w	r1, r7, #12
 800e0c0:	300c      	adds	r0, #12
 800e0c2:	f000 f913 	bl	800e2ec <memcpy>
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	4629      	mov	r1, r5
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f000 fb2e 	bl	800e72c <__lshift>
 800e0d0:	9b01      	ldr	r3, [sp, #4]
 800e0d2:	f103 0901 	add.w	r9, r3, #1
 800e0d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e0da:	4413      	add	r3, r2
 800e0dc:	9305      	str	r3, [sp, #20]
 800e0de:	f00a 0301 	and.w	r3, sl, #1
 800e0e2:	46b8      	mov	r8, r7
 800e0e4:	9304      	str	r3, [sp, #16]
 800e0e6:	4607      	mov	r7, r0
 800e0e8:	4631      	mov	r1, r6
 800e0ea:	ee18 0a10 	vmov	r0, s16
 800e0ee:	f7ff fa77 	bl	800d5e0 <quorem>
 800e0f2:	4641      	mov	r1, r8
 800e0f4:	9002      	str	r0, [sp, #8]
 800e0f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e0fa:	ee18 0a10 	vmov	r0, s16
 800e0fe:	f000 fb85 	bl	800e80c <__mcmp>
 800e102:	463a      	mov	r2, r7
 800e104:	9003      	str	r0, [sp, #12]
 800e106:	4631      	mov	r1, r6
 800e108:	4620      	mov	r0, r4
 800e10a:	f000 fb9b 	bl	800e844 <__mdiff>
 800e10e:	68c2      	ldr	r2, [r0, #12]
 800e110:	f109 3bff 	add.w	fp, r9, #4294967295
 800e114:	4605      	mov	r5, r0
 800e116:	bb02      	cbnz	r2, 800e15a <_dtoa_r+0xa62>
 800e118:	4601      	mov	r1, r0
 800e11a:	ee18 0a10 	vmov	r0, s16
 800e11e:	f000 fb75 	bl	800e80c <__mcmp>
 800e122:	4602      	mov	r2, r0
 800e124:	4629      	mov	r1, r5
 800e126:	4620      	mov	r0, r4
 800e128:	9207      	str	r2, [sp, #28]
 800e12a:	f000 f92d 	bl	800e388 <_Bfree>
 800e12e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e132:	ea43 0102 	orr.w	r1, r3, r2
 800e136:	9b04      	ldr	r3, [sp, #16]
 800e138:	430b      	orrs	r3, r1
 800e13a:	464d      	mov	r5, r9
 800e13c:	d10f      	bne.n	800e15e <_dtoa_r+0xa66>
 800e13e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e142:	d02a      	beq.n	800e19a <_dtoa_r+0xaa2>
 800e144:	9b03      	ldr	r3, [sp, #12]
 800e146:	2b00      	cmp	r3, #0
 800e148:	dd02      	ble.n	800e150 <_dtoa_r+0xa58>
 800e14a:	9b02      	ldr	r3, [sp, #8]
 800e14c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e150:	f88b a000 	strb.w	sl, [fp]
 800e154:	e775      	b.n	800e042 <_dtoa_r+0x94a>
 800e156:	4638      	mov	r0, r7
 800e158:	e7ba      	b.n	800e0d0 <_dtoa_r+0x9d8>
 800e15a:	2201      	movs	r2, #1
 800e15c:	e7e2      	b.n	800e124 <_dtoa_r+0xa2c>
 800e15e:	9b03      	ldr	r3, [sp, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	db04      	blt.n	800e16e <_dtoa_r+0xa76>
 800e164:	9906      	ldr	r1, [sp, #24]
 800e166:	430b      	orrs	r3, r1
 800e168:	9904      	ldr	r1, [sp, #16]
 800e16a:	430b      	orrs	r3, r1
 800e16c:	d122      	bne.n	800e1b4 <_dtoa_r+0xabc>
 800e16e:	2a00      	cmp	r2, #0
 800e170:	ddee      	ble.n	800e150 <_dtoa_r+0xa58>
 800e172:	ee18 1a10 	vmov	r1, s16
 800e176:	2201      	movs	r2, #1
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 fad7 	bl	800e72c <__lshift>
 800e17e:	4631      	mov	r1, r6
 800e180:	ee08 0a10 	vmov	s16, r0
 800e184:	f000 fb42 	bl	800e80c <__mcmp>
 800e188:	2800      	cmp	r0, #0
 800e18a:	dc03      	bgt.n	800e194 <_dtoa_r+0xa9c>
 800e18c:	d1e0      	bne.n	800e150 <_dtoa_r+0xa58>
 800e18e:	f01a 0f01 	tst.w	sl, #1
 800e192:	d0dd      	beq.n	800e150 <_dtoa_r+0xa58>
 800e194:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e198:	d1d7      	bne.n	800e14a <_dtoa_r+0xa52>
 800e19a:	2339      	movs	r3, #57	; 0x39
 800e19c:	f88b 3000 	strb.w	r3, [fp]
 800e1a0:	462b      	mov	r3, r5
 800e1a2:	461d      	mov	r5, r3
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e1aa:	2a39      	cmp	r2, #57	; 0x39
 800e1ac:	d071      	beq.n	800e292 <_dtoa_r+0xb9a>
 800e1ae:	3201      	adds	r2, #1
 800e1b0:	701a      	strb	r2, [r3, #0]
 800e1b2:	e746      	b.n	800e042 <_dtoa_r+0x94a>
 800e1b4:	2a00      	cmp	r2, #0
 800e1b6:	dd07      	ble.n	800e1c8 <_dtoa_r+0xad0>
 800e1b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1bc:	d0ed      	beq.n	800e19a <_dtoa_r+0xaa2>
 800e1be:	f10a 0301 	add.w	r3, sl, #1
 800e1c2:	f88b 3000 	strb.w	r3, [fp]
 800e1c6:	e73c      	b.n	800e042 <_dtoa_r+0x94a>
 800e1c8:	9b05      	ldr	r3, [sp, #20]
 800e1ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e1ce:	4599      	cmp	r9, r3
 800e1d0:	d047      	beq.n	800e262 <_dtoa_r+0xb6a>
 800e1d2:	ee18 1a10 	vmov	r1, s16
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	220a      	movs	r2, #10
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f000 f8f6 	bl	800e3cc <__multadd>
 800e1e0:	45b8      	cmp	r8, r7
 800e1e2:	ee08 0a10 	vmov	s16, r0
 800e1e6:	f04f 0300 	mov.w	r3, #0
 800e1ea:	f04f 020a 	mov.w	r2, #10
 800e1ee:	4641      	mov	r1, r8
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	d106      	bne.n	800e202 <_dtoa_r+0xb0a>
 800e1f4:	f000 f8ea 	bl	800e3cc <__multadd>
 800e1f8:	4680      	mov	r8, r0
 800e1fa:	4607      	mov	r7, r0
 800e1fc:	f109 0901 	add.w	r9, r9, #1
 800e200:	e772      	b.n	800e0e8 <_dtoa_r+0x9f0>
 800e202:	f000 f8e3 	bl	800e3cc <__multadd>
 800e206:	4639      	mov	r1, r7
 800e208:	4680      	mov	r8, r0
 800e20a:	2300      	movs	r3, #0
 800e20c:	220a      	movs	r2, #10
 800e20e:	4620      	mov	r0, r4
 800e210:	f000 f8dc 	bl	800e3cc <__multadd>
 800e214:	4607      	mov	r7, r0
 800e216:	e7f1      	b.n	800e1fc <_dtoa_r+0xb04>
 800e218:	9b03      	ldr	r3, [sp, #12]
 800e21a:	9302      	str	r3, [sp, #8]
 800e21c:	9d01      	ldr	r5, [sp, #4]
 800e21e:	ee18 0a10 	vmov	r0, s16
 800e222:	4631      	mov	r1, r6
 800e224:	f7ff f9dc 	bl	800d5e0 <quorem>
 800e228:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e22c:	9b01      	ldr	r3, [sp, #4]
 800e22e:	f805 ab01 	strb.w	sl, [r5], #1
 800e232:	1aea      	subs	r2, r5, r3
 800e234:	9b02      	ldr	r3, [sp, #8]
 800e236:	4293      	cmp	r3, r2
 800e238:	dd09      	ble.n	800e24e <_dtoa_r+0xb56>
 800e23a:	ee18 1a10 	vmov	r1, s16
 800e23e:	2300      	movs	r3, #0
 800e240:	220a      	movs	r2, #10
 800e242:	4620      	mov	r0, r4
 800e244:	f000 f8c2 	bl	800e3cc <__multadd>
 800e248:	ee08 0a10 	vmov	s16, r0
 800e24c:	e7e7      	b.n	800e21e <_dtoa_r+0xb26>
 800e24e:	9b02      	ldr	r3, [sp, #8]
 800e250:	2b00      	cmp	r3, #0
 800e252:	bfc8      	it	gt
 800e254:	461d      	movgt	r5, r3
 800e256:	9b01      	ldr	r3, [sp, #4]
 800e258:	bfd8      	it	le
 800e25a:	2501      	movle	r5, #1
 800e25c:	441d      	add	r5, r3
 800e25e:	f04f 0800 	mov.w	r8, #0
 800e262:	ee18 1a10 	vmov	r1, s16
 800e266:	2201      	movs	r2, #1
 800e268:	4620      	mov	r0, r4
 800e26a:	f000 fa5f 	bl	800e72c <__lshift>
 800e26e:	4631      	mov	r1, r6
 800e270:	ee08 0a10 	vmov	s16, r0
 800e274:	f000 faca 	bl	800e80c <__mcmp>
 800e278:	2800      	cmp	r0, #0
 800e27a:	dc91      	bgt.n	800e1a0 <_dtoa_r+0xaa8>
 800e27c:	d102      	bne.n	800e284 <_dtoa_r+0xb8c>
 800e27e:	f01a 0f01 	tst.w	sl, #1
 800e282:	d18d      	bne.n	800e1a0 <_dtoa_r+0xaa8>
 800e284:	462b      	mov	r3, r5
 800e286:	461d      	mov	r5, r3
 800e288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e28c:	2a30      	cmp	r2, #48	; 0x30
 800e28e:	d0fa      	beq.n	800e286 <_dtoa_r+0xb8e>
 800e290:	e6d7      	b.n	800e042 <_dtoa_r+0x94a>
 800e292:	9a01      	ldr	r2, [sp, #4]
 800e294:	429a      	cmp	r2, r3
 800e296:	d184      	bne.n	800e1a2 <_dtoa_r+0xaaa>
 800e298:	9b00      	ldr	r3, [sp, #0]
 800e29a:	3301      	adds	r3, #1
 800e29c:	9300      	str	r3, [sp, #0]
 800e29e:	2331      	movs	r3, #49	; 0x31
 800e2a0:	7013      	strb	r3, [r2, #0]
 800e2a2:	e6ce      	b.n	800e042 <_dtoa_r+0x94a>
 800e2a4:	4b09      	ldr	r3, [pc, #36]	; (800e2cc <_dtoa_r+0xbd4>)
 800e2a6:	f7ff ba95 	b.w	800d7d4 <_dtoa_r+0xdc>
 800e2aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f47f aa6e 	bne.w	800d78e <_dtoa_r+0x96>
 800e2b2:	4b07      	ldr	r3, [pc, #28]	; (800e2d0 <_dtoa_r+0xbd8>)
 800e2b4:	f7ff ba8e 	b.w	800d7d4 <_dtoa_r+0xdc>
 800e2b8:	9b02      	ldr	r3, [sp, #8]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	dcae      	bgt.n	800e21c <_dtoa_r+0xb24>
 800e2be:	9b06      	ldr	r3, [sp, #24]
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	f73f aea8 	bgt.w	800e016 <_dtoa_r+0x91e>
 800e2c6:	e7a9      	b.n	800e21c <_dtoa_r+0xb24>
 800e2c8:	08010177 	.word	0x08010177
 800e2cc:	080100d4 	.word	0x080100d4
 800e2d0:	080100f8 	.word	0x080100f8

0800e2d4 <_localeconv_r>:
 800e2d4:	4800      	ldr	r0, [pc, #0]	; (800e2d8 <_localeconv_r+0x4>)
 800e2d6:	4770      	bx	lr
 800e2d8:	20000260 	.word	0x20000260

0800e2dc <malloc>:
 800e2dc:	4b02      	ldr	r3, [pc, #8]	; (800e2e8 <malloc+0xc>)
 800e2de:	4601      	mov	r1, r0
 800e2e0:	6818      	ldr	r0, [r3, #0]
 800e2e2:	f000 bc17 	b.w	800eb14 <_malloc_r>
 800e2e6:	bf00      	nop
 800e2e8:	2000010c 	.word	0x2000010c

0800e2ec <memcpy>:
 800e2ec:	440a      	add	r2, r1
 800e2ee:	4291      	cmp	r1, r2
 800e2f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2f4:	d100      	bne.n	800e2f8 <memcpy+0xc>
 800e2f6:	4770      	bx	lr
 800e2f8:	b510      	push	{r4, lr}
 800e2fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e302:	4291      	cmp	r1, r2
 800e304:	d1f9      	bne.n	800e2fa <memcpy+0xe>
 800e306:	bd10      	pop	{r4, pc}

0800e308 <_Balloc>:
 800e308:	b570      	push	{r4, r5, r6, lr}
 800e30a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e30c:	4604      	mov	r4, r0
 800e30e:	460d      	mov	r5, r1
 800e310:	b976      	cbnz	r6, 800e330 <_Balloc+0x28>
 800e312:	2010      	movs	r0, #16
 800e314:	f7ff ffe2 	bl	800e2dc <malloc>
 800e318:	4602      	mov	r2, r0
 800e31a:	6260      	str	r0, [r4, #36]	; 0x24
 800e31c:	b920      	cbnz	r0, 800e328 <_Balloc+0x20>
 800e31e:	4b18      	ldr	r3, [pc, #96]	; (800e380 <_Balloc+0x78>)
 800e320:	4818      	ldr	r0, [pc, #96]	; (800e384 <_Balloc+0x7c>)
 800e322:	2166      	movs	r1, #102	; 0x66
 800e324:	f000 fdd6 	bl	800eed4 <__assert_func>
 800e328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e32c:	6006      	str	r6, [r0, #0]
 800e32e:	60c6      	str	r6, [r0, #12]
 800e330:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e332:	68f3      	ldr	r3, [r6, #12]
 800e334:	b183      	cbz	r3, 800e358 <_Balloc+0x50>
 800e336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e33e:	b9b8      	cbnz	r0, 800e370 <_Balloc+0x68>
 800e340:	2101      	movs	r1, #1
 800e342:	fa01 f605 	lsl.w	r6, r1, r5
 800e346:	1d72      	adds	r2, r6, #5
 800e348:	0092      	lsls	r2, r2, #2
 800e34a:	4620      	mov	r0, r4
 800e34c:	f000 fb60 	bl	800ea10 <_calloc_r>
 800e350:	b160      	cbz	r0, 800e36c <_Balloc+0x64>
 800e352:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e356:	e00e      	b.n	800e376 <_Balloc+0x6e>
 800e358:	2221      	movs	r2, #33	; 0x21
 800e35a:	2104      	movs	r1, #4
 800e35c:	4620      	mov	r0, r4
 800e35e:	f000 fb57 	bl	800ea10 <_calloc_r>
 800e362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e364:	60f0      	str	r0, [r6, #12]
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d1e4      	bne.n	800e336 <_Balloc+0x2e>
 800e36c:	2000      	movs	r0, #0
 800e36e:	bd70      	pop	{r4, r5, r6, pc}
 800e370:	6802      	ldr	r2, [r0, #0]
 800e372:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e376:	2300      	movs	r3, #0
 800e378:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e37c:	e7f7      	b.n	800e36e <_Balloc+0x66>
 800e37e:	bf00      	nop
 800e380:	08010105 	.word	0x08010105
 800e384:	08010188 	.word	0x08010188

0800e388 <_Bfree>:
 800e388:	b570      	push	{r4, r5, r6, lr}
 800e38a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e38c:	4605      	mov	r5, r0
 800e38e:	460c      	mov	r4, r1
 800e390:	b976      	cbnz	r6, 800e3b0 <_Bfree+0x28>
 800e392:	2010      	movs	r0, #16
 800e394:	f7ff ffa2 	bl	800e2dc <malloc>
 800e398:	4602      	mov	r2, r0
 800e39a:	6268      	str	r0, [r5, #36]	; 0x24
 800e39c:	b920      	cbnz	r0, 800e3a8 <_Bfree+0x20>
 800e39e:	4b09      	ldr	r3, [pc, #36]	; (800e3c4 <_Bfree+0x3c>)
 800e3a0:	4809      	ldr	r0, [pc, #36]	; (800e3c8 <_Bfree+0x40>)
 800e3a2:	218a      	movs	r1, #138	; 0x8a
 800e3a4:	f000 fd96 	bl	800eed4 <__assert_func>
 800e3a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3ac:	6006      	str	r6, [r0, #0]
 800e3ae:	60c6      	str	r6, [r0, #12]
 800e3b0:	b13c      	cbz	r4, 800e3c2 <_Bfree+0x3a>
 800e3b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e3b4:	6862      	ldr	r2, [r4, #4]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3bc:	6021      	str	r1, [r4, #0]
 800e3be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e3c2:	bd70      	pop	{r4, r5, r6, pc}
 800e3c4:	08010105 	.word	0x08010105
 800e3c8:	08010188 	.word	0x08010188

0800e3cc <__multadd>:
 800e3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d0:	690d      	ldr	r5, [r1, #16]
 800e3d2:	4607      	mov	r7, r0
 800e3d4:	460c      	mov	r4, r1
 800e3d6:	461e      	mov	r6, r3
 800e3d8:	f101 0c14 	add.w	ip, r1, #20
 800e3dc:	2000      	movs	r0, #0
 800e3de:	f8dc 3000 	ldr.w	r3, [ip]
 800e3e2:	b299      	uxth	r1, r3
 800e3e4:	fb02 6101 	mla	r1, r2, r1, r6
 800e3e8:	0c1e      	lsrs	r6, r3, #16
 800e3ea:	0c0b      	lsrs	r3, r1, #16
 800e3ec:	fb02 3306 	mla	r3, r2, r6, r3
 800e3f0:	b289      	uxth	r1, r1
 800e3f2:	3001      	adds	r0, #1
 800e3f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e3f8:	4285      	cmp	r5, r0
 800e3fa:	f84c 1b04 	str.w	r1, [ip], #4
 800e3fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e402:	dcec      	bgt.n	800e3de <__multadd+0x12>
 800e404:	b30e      	cbz	r6, 800e44a <__multadd+0x7e>
 800e406:	68a3      	ldr	r3, [r4, #8]
 800e408:	42ab      	cmp	r3, r5
 800e40a:	dc19      	bgt.n	800e440 <__multadd+0x74>
 800e40c:	6861      	ldr	r1, [r4, #4]
 800e40e:	4638      	mov	r0, r7
 800e410:	3101      	adds	r1, #1
 800e412:	f7ff ff79 	bl	800e308 <_Balloc>
 800e416:	4680      	mov	r8, r0
 800e418:	b928      	cbnz	r0, 800e426 <__multadd+0x5a>
 800e41a:	4602      	mov	r2, r0
 800e41c:	4b0c      	ldr	r3, [pc, #48]	; (800e450 <__multadd+0x84>)
 800e41e:	480d      	ldr	r0, [pc, #52]	; (800e454 <__multadd+0x88>)
 800e420:	21b5      	movs	r1, #181	; 0xb5
 800e422:	f000 fd57 	bl	800eed4 <__assert_func>
 800e426:	6922      	ldr	r2, [r4, #16]
 800e428:	3202      	adds	r2, #2
 800e42a:	f104 010c 	add.w	r1, r4, #12
 800e42e:	0092      	lsls	r2, r2, #2
 800e430:	300c      	adds	r0, #12
 800e432:	f7ff ff5b 	bl	800e2ec <memcpy>
 800e436:	4621      	mov	r1, r4
 800e438:	4638      	mov	r0, r7
 800e43a:	f7ff ffa5 	bl	800e388 <_Bfree>
 800e43e:	4644      	mov	r4, r8
 800e440:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e444:	3501      	adds	r5, #1
 800e446:	615e      	str	r6, [r3, #20]
 800e448:	6125      	str	r5, [r4, #16]
 800e44a:	4620      	mov	r0, r4
 800e44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e450:	08010177 	.word	0x08010177
 800e454:	08010188 	.word	0x08010188

0800e458 <__hi0bits>:
 800e458:	0c03      	lsrs	r3, r0, #16
 800e45a:	041b      	lsls	r3, r3, #16
 800e45c:	b9d3      	cbnz	r3, 800e494 <__hi0bits+0x3c>
 800e45e:	0400      	lsls	r0, r0, #16
 800e460:	2310      	movs	r3, #16
 800e462:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e466:	bf04      	itt	eq
 800e468:	0200      	lsleq	r0, r0, #8
 800e46a:	3308      	addeq	r3, #8
 800e46c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e470:	bf04      	itt	eq
 800e472:	0100      	lsleq	r0, r0, #4
 800e474:	3304      	addeq	r3, #4
 800e476:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e47a:	bf04      	itt	eq
 800e47c:	0080      	lsleq	r0, r0, #2
 800e47e:	3302      	addeq	r3, #2
 800e480:	2800      	cmp	r0, #0
 800e482:	db05      	blt.n	800e490 <__hi0bits+0x38>
 800e484:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e488:	f103 0301 	add.w	r3, r3, #1
 800e48c:	bf08      	it	eq
 800e48e:	2320      	moveq	r3, #32
 800e490:	4618      	mov	r0, r3
 800e492:	4770      	bx	lr
 800e494:	2300      	movs	r3, #0
 800e496:	e7e4      	b.n	800e462 <__hi0bits+0xa>

0800e498 <__lo0bits>:
 800e498:	6803      	ldr	r3, [r0, #0]
 800e49a:	f013 0207 	ands.w	r2, r3, #7
 800e49e:	4601      	mov	r1, r0
 800e4a0:	d00b      	beq.n	800e4ba <__lo0bits+0x22>
 800e4a2:	07da      	lsls	r2, r3, #31
 800e4a4:	d423      	bmi.n	800e4ee <__lo0bits+0x56>
 800e4a6:	0798      	lsls	r0, r3, #30
 800e4a8:	bf49      	itett	mi
 800e4aa:	085b      	lsrmi	r3, r3, #1
 800e4ac:	089b      	lsrpl	r3, r3, #2
 800e4ae:	2001      	movmi	r0, #1
 800e4b0:	600b      	strmi	r3, [r1, #0]
 800e4b2:	bf5c      	itt	pl
 800e4b4:	600b      	strpl	r3, [r1, #0]
 800e4b6:	2002      	movpl	r0, #2
 800e4b8:	4770      	bx	lr
 800e4ba:	b298      	uxth	r0, r3
 800e4bc:	b9a8      	cbnz	r0, 800e4ea <__lo0bits+0x52>
 800e4be:	0c1b      	lsrs	r3, r3, #16
 800e4c0:	2010      	movs	r0, #16
 800e4c2:	b2da      	uxtb	r2, r3
 800e4c4:	b90a      	cbnz	r2, 800e4ca <__lo0bits+0x32>
 800e4c6:	3008      	adds	r0, #8
 800e4c8:	0a1b      	lsrs	r3, r3, #8
 800e4ca:	071a      	lsls	r2, r3, #28
 800e4cc:	bf04      	itt	eq
 800e4ce:	091b      	lsreq	r3, r3, #4
 800e4d0:	3004      	addeq	r0, #4
 800e4d2:	079a      	lsls	r2, r3, #30
 800e4d4:	bf04      	itt	eq
 800e4d6:	089b      	lsreq	r3, r3, #2
 800e4d8:	3002      	addeq	r0, #2
 800e4da:	07da      	lsls	r2, r3, #31
 800e4dc:	d403      	bmi.n	800e4e6 <__lo0bits+0x4e>
 800e4de:	085b      	lsrs	r3, r3, #1
 800e4e0:	f100 0001 	add.w	r0, r0, #1
 800e4e4:	d005      	beq.n	800e4f2 <__lo0bits+0x5a>
 800e4e6:	600b      	str	r3, [r1, #0]
 800e4e8:	4770      	bx	lr
 800e4ea:	4610      	mov	r0, r2
 800e4ec:	e7e9      	b.n	800e4c2 <__lo0bits+0x2a>
 800e4ee:	2000      	movs	r0, #0
 800e4f0:	4770      	bx	lr
 800e4f2:	2020      	movs	r0, #32
 800e4f4:	4770      	bx	lr
	...

0800e4f8 <__i2b>:
 800e4f8:	b510      	push	{r4, lr}
 800e4fa:	460c      	mov	r4, r1
 800e4fc:	2101      	movs	r1, #1
 800e4fe:	f7ff ff03 	bl	800e308 <_Balloc>
 800e502:	4602      	mov	r2, r0
 800e504:	b928      	cbnz	r0, 800e512 <__i2b+0x1a>
 800e506:	4b05      	ldr	r3, [pc, #20]	; (800e51c <__i2b+0x24>)
 800e508:	4805      	ldr	r0, [pc, #20]	; (800e520 <__i2b+0x28>)
 800e50a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e50e:	f000 fce1 	bl	800eed4 <__assert_func>
 800e512:	2301      	movs	r3, #1
 800e514:	6144      	str	r4, [r0, #20]
 800e516:	6103      	str	r3, [r0, #16]
 800e518:	bd10      	pop	{r4, pc}
 800e51a:	bf00      	nop
 800e51c:	08010177 	.word	0x08010177
 800e520:	08010188 	.word	0x08010188

0800e524 <__multiply>:
 800e524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e528:	4691      	mov	r9, r2
 800e52a:	690a      	ldr	r2, [r1, #16]
 800e52c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e530:	429a      	cmp	r2, r3
 800e532:	bfb8      	it	lt
 800e534:	460b      	movlt	r3, r1
 800e536:	460c      	mov	r4, r1
 800e538:	bfbc      	itt	lt
 800e53a:	464c      	movlt	r4, r9
 800e53c:	4699      	movlt	r9, r3
 800e53e:	6927      	ldr	r7, [r4, #16]
 800e540:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e544:	68a3      	ldr	r3, [r4, #8]
 800e546:	6861      	ldr	r1, [r4, #4]
 800e548:	eb07 060a 	add.w	r6, r7, sl
 800e54c:	42b3      	cmp	r3, r6
 800e54e:	b085      	sub	sp, #20
 800e550:	bfb8      	it	lt
 800e552:	3101      	addlt	r1, #1
 800e554:	f7ff fed8 	bl	800e308 <_Balloc>
 800e558:	b930      	cbnz	r0, 800e568 <__multiply+0x44>
 800e55a:	4602      	mov	r2, r0
 800e55c:	4b44      	ldr	r3, [pc, #272]	; (800e670 <__multiply+0x14c>)
 800e55e:	4845      	ldr	r0, [pc, #276]	; (800e674 <__multiply+0x150>)
 800e560:	f240 115d 	movw	r1, #349	; 0x15d
 800e564:	f000 fcb6 	bl	800eed4 <__assert_func>
 800e568:	f100 0514 	add.w	r5, r0, #20
 800e56c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e570:	462b      	mov	r3, r5
 800e572:	2200      	movs	r2, #0
 800e574:	4543      	cmp	r3, r8
 800e576:	d321      	bcc.n	800e5bc <__multiply+0x98>
 800e578:	f104 0314 	add.w	r3, r4, #20
 800e57c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e580:	f109 0314 	add.w	r3, r9, #20
 800e584:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e588:	9202      	str	r2, [sp, #8]
 800e58a:	1b3a      	subs	r2, r7, r4
 800e58c:	3a15      	subs	r2, #21
 800e58e:	f022 0203 	bic.w	r2, r2, #3
 800e592:	3204      	adds	r2, #4
 800e594:	f104 0115 	add.w	r1, r4, #21
 800e598:	428f      	cmp	r7, r1
 800e59a:	bf38      	it	cc
 800e59c:	2204      	movcc	r2, #4
 800e59e:	9201      	str	r2, [sp, #4]
 800e5a0:	9a02      	ldr	r2, [sp, #8]
 800e5a2:	9303      	str	r3, [sp, #12]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d80c      	bhi.n	800e5c2 <__multiply+0x9e>
 800e5a8:	2e00      	cmp	r6, #0
 800e5aa:	dd03      	ble.n	800e5b4 <__multiply+0x90>
 800e5ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d05a      	beq.n	800e66a <__multiply+0x146>
 800e5b4:	6106      	str	r6, [r0, #16]
 800e5b6:	b005      	add	sp, #20
 800e5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5bc:	f843 2b04 	str.w	r2, [r3], #4
 800e5c0:	e7d8      	b.n	800e574 <__multiply+0x50>
 800e5c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e5c6:	f1ba 0f00 	cmp.w	sl, #0
 800e5ca:	d024      	beq.n	800e616 <__multiply+0xf2>
 800e5cc:	f104 0e14 	add.w	lr, r4, #20
 800e5d0:	46a9      	mov	r9, r5
 800e5d2:	f04f 0c00 	mov.w	ip, #0
 800e5d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e5da:	f8d9 1000 	ldr.w	r1, [r9]
 800e5de:	fa1f fb82 	uxth.w	fp, r2
 800e5e2:	b289      	uxth	r1, r1
 800e5e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e5e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e5ec:	f8d9 2000 	ldr.w	r2, [r9]
 800e5f0:	4461      	add	r1, ip
 800e5f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e5f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e5fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e5fe:	b289      	uxth	r1, r1
 800e600:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e604:	4577      	cmp	r7, lr
 800e606:	f849 1b04 	str.w	r1, [r9], #4
 800e60a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e60e:	d8e2      	bhi.n	800e5d6 <__multiply+0xb2>
 800e610:	9a01      	ldr	r2, [sp, #4]
 800e612:	f845 c002 	str.w	ip, [r5, r2]
 800e616:	9a03      	ldr	r2, [sp, #12]
 800e618:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e61c:	3304      	adds	r3, #4
 800e61e:	f1b9 0f00 	cmp.w	r9, #0
 800e622:	d020      	beq.n	800e666 <__multiply+0x142>
 800e624:	6829      	ldr	r1, [r5, #0]
 800e626:	f104 0c14 	add.w	ip, r4, #20
 800e62a:	46ae      	mov	lr, r5
 800e62c:	f04f 0a00 	mov.w	sl, #0
 800e630:	f8bc b000 	ldrh.w	fp, [ip]
 800e634:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e638:	fb09 220b 	mla	r2, r9, fp, r2
 800e63c:	4492      	add	sl, r2
 800e63e:	b289      	uxth	r1, r1
 800e640:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e644:	f84e 1b04 	str.w	r1, [lr], #4
 800e648:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e64c:	f8be 1000 	ldrh.w	r1, [lr]
 800e650:	0c12      	lsrs	r2, r2, #16
 800e652:	fb09 1102 	mla	r1, r9, r2, r1
 800e656:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e65a:	4567      	cmp	r7, ip
 800e65c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e660:	d8e6      	bhi.n	800e630 <__multiply+0x10c>
 800e662:	9a01      	ldr	r2, [sp, #4]
 800e664:	50a9      	str	r1, [r5, r2]
 800e666:	3504      	adds	r5, #4
 800e668:	e79a      	b.n	800e5a0 <__multiply+0x7c>
 800e66a:	3e01      	subs	r6, #1
 800e66c:	e79c      	b.n	800e5a8 <__multiply+0x84>
 800e66e:	bf00      	nop
 800e670:	08010177 	.word	0x08010177
 800e674:	08010188 	.word	0x08010188

0800e678 <__pow5mult>:
 800e678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e67c:	4615      	mov	r5, r2
 800e67e:	f012 0203 	ands.w	r2, r2, #3
 800e682:	4606      	mov	r6, r0
 800e684:	460f      	mov	r7, r1
 800e686:	d007      	beq.n	800e698 <__pow5mult+0x20>
 800e688:	4c25      	ldr	r4, [pc, #148]	; (800e720 <__pow5mult+0xa8>)
 800e68a:	3a01      	subs	r2, #1
 800e68c:	2300      	movs	r3, #0
 800e68e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e692:	f7ff fe9b 	bl	800e3cc <__multadd>
 800e696:	4607      	mov	r7, r0
 800e698:	10ad      	asrs	r5, r5, #2
 800e69a:	d03d      	beq.n	800e718 <__pow5mult+0xa0>
 800e69c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e69e:	b97c      	cbnz	r4, 800e6c0 <__pow5mult+0x48>
 800e6a0:	2010      	movs	r0, #16
 800e6a2:	f7ff fe1b 	bl	800e2dc <malloc>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	6270      	str	r0, [r6, #36]	; 0x24
 800e6aa:	b928      	cbnz	r0, 800e6b8 <__pow5mult+0x40>
 800e6ac:	4b1d      	ldr	r3, [pc, #116]	; (800e724 <__pow5mult+0xac>)
 800e6ae:	481e      	ldr	r0, [pc, #120]	; (800e728 <__pow5mult+0xb0>)
 800e6b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e6b4:	f000 fc0e 	bl	800eed4 <__assert_func>
 800e6b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6bc:	6004      	str	r4, [r0, #0]
 800e6be:	60c4      	str	r4, [r0, #12]
 800e6c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e6c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6c8:	b94c      	cbnz	r4, 800e6de <__pow5mult+0x66>
 800e6ca:	f240 2171 	movw	r1, #625	; 0x271
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	f7ff ff12 	bl	800e4f8 <__i2b>
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6da:	4604      	mov	r4, r0
 800e6dc:	6003      	str	r3, [r0, #0]
 800e6de:	f04f 0900 	mov.w	r9, #0
 800e6e2:	07eb      	lsls	r3, r5, #31
 800e6e4:	d50a      	bpl.n	800e6fc <__pow5mult+0x84>
 800e6e6:	4639      	mov	r1, r7
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	4630      	mov	r0, r6
 800e6ec:	f7ff ff1a 	bl	800e524 <__multiply>
 800e6f0:	4639      	mov	r1, r7
 800e6f2:	4680      	mov	r8, r0
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	f7ff fe47 	bl	800e388 <_Bfree>
 800e6fa:	4647      	mov	r7, r8
 800e6fc:	106d      	asrs	r5, r5, #1
 800e6fe:	d00b      	beq.n	800e718 <__pow5mult+0xa0>
 800e700:	6820      	ldr	r0, [r4, #0]
 800e702:	b938      	cbnz	r0, 800e714 <__pow5mult+0x9c>
 800e704:	4622      	mov	r2, r4
 800e706:	4621      	mov	r1, r4
 800e708:	4630      	mov	r0, r6
 800e70a:	f7ff ff0b 	bl	800e524 <__multiply>
 800e70e:	6020      	str	r0, [r4, #0]
 800e710:	f8c0 9000 	str.w	r9, [r0]
 800e714:	4604      	mov	r4, r0
 800e716:	e7e4      	b.n	800e6e2 <__pow5mult+0x6a>
 800e718:	4638      	mov	r0, r7
 800e71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e71e:	bf00      	nop
 800e720:	080102d8 	.word	0x080102d8
 800e724:	08010105 	.word	0x08010105
 800e728:	08010188 	.word	0x08010188

0800e72c <__lshift>:
 800e72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e730:	460c      	mov	r4, r1
 800e732:	6849      	ldr	r1, [r1, #4]
 800e734:	6923      	ldr	r3, [r4, #16]
 800e736:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e73a:	68a3      	ldr	r3, [r4, #8]
 800e73c:	4607      	mov	r7, r0
 800e73e:	4691      	mov	r9, r2
 800e740:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e744:	f108 0601 	add.w	r6, r8, #1
 800e748:	42b3      	cmp	r3, r6
 800e74a:	db0b      	blt.n	800e764 <__lshift+0x38>
 800e74c:	4638      	mov	r0, r7
 800e74e:	f7ff fddb 	bl	800e308 <_Balloc>
 800e752:	4605      	mov	r5, r0
 800e754:	b948      	cbnz	r0, 800e76a <__lshift+0x3e>
 800e756:	4602      	mov	r2, r0
 800e758:	4b2a      	ldr	r3, [pc, #168]	; (800e804 <__lshift+0xd8>)
 800e75a:	482b      	ldr	r0, [pc, #172]	; (800e808 <__lshift+0xdc>)
 800e75c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e760:	f000 fbb8 	bl	800eed4 <__assert_func>
 800e764:	3101      	adds	r1, #1
 800e766:	005b      	lsls	r3, r3, #1
 800e768:	e7ee      	b.n	800e748 <__lshift+0x1c>
 800e76a:	2300      	movs	r3, #0
 800e76c:	f100 0114 	add.w	r1, r0, #20
 800e770:	f100 0210 	add.w	r2, r0, #16
 800e774:	4618      	mov	r0, r3
 800e776:	4553      	cmp	r3, sl
 800e778:	db37      	blt.n	800e7ea <__lshift+0xbe>
 800e77a:	6920      	ldr	r0, [r4, #16]
 800e77c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e780:	f104 0314 	add.w	r3, r4, #20
 800e784:	f019 091f 	ands.w	r9, r9, #31
 800e788:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e78c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e790:	d02f      	beq.n	800e7f2 <__lshift+0xc6>
 800e792:	f1c9 0e20 	rsb	lr, r9, #32
 800e796:	468a      	mov	sl, r1
 800e798:	f04f 0c00 	mov.w	ip, #0
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	fa02 f209 	lsl.w	r2, r2, r9
 800e7a2:	ea42 020c 	orr.w	r2, r2, ip
 800e7a6:	f84a 2b04 	str.w	r2, [sl], #4
 800e7aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ae:	4298      	cmp	r0, r3
 800e7b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e7b4:	d8f2      	bhi.n	800e79c <__lshift+0x70>
 800e7b6:	1b03      	subs	r3, r0, r4
 800e7b8:	3b15      	subs	r3, #21
 800e7ba:	f023 0303 	bic.w	r3, r3, #3
 800e7be:	3304      	adds	r3, #4
 800e7c0:	f104 0215 	add.w	r2, r4, #21
 800e7c4:	4290      	cmp	r0, r2
 800e7c6:	bf38      	it	cc
 800e7c8:	2304      	movcc	r3, #4
 800e7ca:	f841 c003 	str.w	ip, [r1, r3]
 800e7ce:	f1bc 0f00 	cmp.w	ip, #0
 800e7d2:	d001      	beq.n	800e7d8 <__lshift+0xac>
 800e7d4:	f108 0602 	add.w	r6, r8, #2
 800e7d8:	3e01      	subs	r6, #1
 800e7da:	4638      	mov	r0, r7
 800e7dc:	612e      	str	r6, [r5, #16]
 800e7de:	4621      	mov	r1, r4
 800e7e0:	f7ff fdd2 	bl	800e388 <_Bfree>
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	e7c1      	b.n	800e776 <__lshift+0x4a>
 800e7f2:	3904      	subs	r1, #4
 800e7f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7fc:	4298      	cmp	r0, r3
 800e7fe:	d8f9      	bhi.n	800e7f4 <__lshift+0xc8>
 800e800:	e7ea      	b.n	800e7d8 <__lshift+0xac>
 800e802:	bf00      	nop
 800e804:	08010177 	.word	0x08010177
 800e808:	08010188 	.word	0x08010188

0800e80c <__mcmp>:
 800e80c:	b530      	push	{r4, r5, lr}
 800e80e:	6902      	ldr	r2, [r0, #16]
 800e810:	690c      	ldr	r4, [r1, #16]
 800e812:	1b12      	subs	r2, r2, r4
 800e814:	d10e      	bne.n	800e834 <__mcmp+0x28>
 800e816:	f100 0314 	add.w	r3, r0, #20
 800e81a:	3114      	adds	r1, #20
 800e81c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e820:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e824:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e828:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e82c:	42a5      	cmp	r5, r4
 800e82e:	d003      	beq.n	800e838 <__mcmp+0x2c>
 800e830:	d305      	bcc.n	800e83e <__mcmp+0x32>
 800e832:	2201      	movs	r2, #1
 800e834:	4610      	mov	r0, r2
 800e836:	bd30      	pop	{r4, r5, pc}
 800e838:	4283      	cmp	r3, r0
 800e83a:	d3f3      	bcc.n	800e824 <__mcmp+0x18>
 800e83c:	e7fa      	b.n	800e834 <__mcmp+0x28>
 800e83e:	f04f 32ff 	mov.w	r2, #4294967295
 800e842:	e7f7      	b.n	800e834 <__mcmp+0x28>

0800e844 <__mdiff>:
 800e844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e848:	460c      	mov	r4, r1
 800e84a:	4606      	mov	r6, r0
 800e84c:	4611      	mov	r1, r2
 800e84e:	4620      	mov	r0, r4
 800e850:	4690      	mov	r8, r2
 800e852:	f7ff ffdb 	bl	800e80c <__mcmp>
 800e856:	1e05      	subs	r5, r0, #0
 800e858:	d110      	bne.n	800e87c <__mdiff+0x38>
 800e85a:	4629      	mov	r1, r5
 800e85c:	4630      	mov	r0, r6
 800e85e:	f7ff fd53 	bl	800e308 <_Balloc>
 800e862:	b930      	cbnz	r0, 800e872 <__mdiff+0x2e>
 800e864:	4b3a      	ldr	r3, [pc, #232]	; (800e950 <__mdiff+0x10c>)
 800e866:	4602      	mov	r2, r0
 800e868:	f240 2132 	movw	r1, #562	; 0x232
 800e86c:	4839      	ldr	r0, [pc, #228]	; (800e954 <__mdiff+0x110>)
 800e86e:	f000 fb31 	bl	800eed4 <__assert_func>
 800e872:	2301      	movs	r3, #1
 800e874:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e87c:	bfa4      	itt	ge
 800e87e:	4643      	movge	r3, r8
 800e880:	46a0      	movge	r8, r4
 800e882:	4630      	mov	r0, r6
 800e884:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e888:	bfa6      	itte	ge
 800e88a:	461c      	movge	r4, r3
 800e88c:	2500      	movge	r5, #0
 800e88e:	2501      	movlt	r5, #1
 800e890:	f7ff fd3a 	bl	800e308 <_Balloc>
 800e894:	b920      	cbnz	r0, 800e8a0 <__mdiff+0x5c>
 800e896:	4b2e      	ldr	r3, [pc, #184]	; (800e950 <__mdiff+0x10c>)
 800e898:	4602      	mov	r2, r0
 800e89a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e89e:	e7e5      	b.n	800e86c <__mdiff+0x28>
 800e8a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e8a4:	6926      	ldr	r6, [r4, #16]
 800e8a6:	60c5      	str	r5, [r0, #12]
 800e8a8:	f104 0914 	add.w	r9, r4, #20
 800e8ac:	f108 0514 	add.w	r5, r8, #20
 800e8b0:	f100 0e14 	add.w	lr, r0, #20
 800e8b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e8b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e8bc:	f108 0210 	add.w	r2, r8, #16
 800e8c0:	46f2      	mov	sl, lr
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e8c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e8cc:	fa1f f883 	uxth.w	r8, r3
 800e8d0:	fa11 f18b 	uxtah	r1, r1, fp
 800e8d4:	0c1b      	lsrs	r3, r3, #16
 800e8d6:	eba1 0808 	sub.w	r8, r1, r8
 800e8da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e8de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e8e2:	fa1f f888 	uxth.w	r8, r8
 800e8e6:	1419      	asrs	r1, r3, #16
 800e8e8:	454e      	cmp	r6, r9
 800e8ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e8ee:	f84a 3b04 	str.w	r3, [sl], #4
 800e8f2:	d8e7      	bhi.n	800e8c4 <__mdiff+0x80>
 800e8f4:	1b33      	subs	r3, r6, r4
 800e8f6:	3b15      	subs	r3, #21
 800e8f8:	f023 0303 	bic.w	r3, r3, #3
 800e8fc:	3304      	adds	r3, #4
 800e8fe:	3415      	adds	r4, #21
 800e900:	42a6      	cmp	r6, r4
 800e902:	bf38      	it	cc
 800e904:	2304      	movcc	r3, #4
 800e906:	441d      	add	r5, r3
 800e908:	4473      	add	r3, lr
 800e90a:	469e      	mov	lr, r3
 800e90c:	462e      	mov	r6, r5
 800e90e:	4566      	cmp	r6, ip
 800e910:	d30e      	bcc.n	800e930 <__mdiff+0xec>
 800e912:	f10c 0203 	add.w	r2, ip, #3
 800e916:	1b52      	subs	r2, r2, r5
 800e918:	f022 0203 	bic.w	r2, r2, #3
 800e91c:	3d03      	subs	r5, #3
 800e91e:	45ac      	cmp	ip, r5
 800e920:	bf38      	it	cc
 800e922:	2200      	movcc	r2, #0
 800e924:	441a      	add	r2, r3
 800e926:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e92a:	b17b      	cbz	r3, 800e94c <__mdiff+0x108>
 800e92c:	6107      	str	r7, [r0, #16]
 800e92e:	e7a3      	b.n	800e878 <__mdiff+0x34>
 800e930:	f856 8b04 	ldr.w	r8, [r6], #4
 800e934:	fa11 f288 	uxtah	r2, r1, r8
 800e938:	1414      	asrs	r4, r2, #16
 800e93a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e93e:	b292      	uxth	r2, r2
 800e940:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e944:	f84e 2b04 	str.w	r2, [lr], #4
 800e948:	1421      	asrs	r1, r4, #16
 800e94a:	e7e0      	b.n	800e90e <__mdiff+0xca>
 800e94c:	3f01      	subs	r7, #1
 800e94e:	e7ea      	b.n	800e926 <__mdiff+0xe2>
 800e950:	08010177 	.word	0x08010177
 800e954:	08010188 	.word	0x08010188

0800e958 <__d2b>:
 800e958:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e95c:	4689      	mov	r9, r1
 800e95e:	2101      	movs	r1, #1
 800e960:	ec57 6b10 	vmov	r6, r7, d0
 800e964:	4690      	mov	r8, r2
 800e966:	f7ff fccf 	bl	800e308 <_Balloc>
 800e96a:	4604      	mov	r4, r0
 800e96c:	b930      	cbnz	r0, 800e97c <__d2b+0x24>
 800e96e:	4602      	mov	r2, r0
 800e970:	4b25      	ldr	r3, [pc, #148]	; (800ea08 <__d2b+0xb0>)
 800e972:	4826      	ldr	r0, [pc, #152]	; (800ea0c <__d2b+0xb4>)
 800e974:	f240 310a 	movw	r1, #778	; 0x30a
 800e978:	f000 faac 	bl	800eed4 <__assert_func>
 800e97c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e980:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e984:	bb35      	cbnz	r5, 800e9d4 <__d2b+0x7c>
 800e986:	2e00      	cmp	r6, #0
 800e988:	9301      	str	r3, [sp, #4]
 800e98a:	d028      	beq.n	800e9de <__d2b+0x86>
 800e98c:	4668      	mov	r0, sp
 800e98e:	9600      	str	r6, [sp, #0]
 800e990:	f7ff fd82 	bl	800e498 <__lo0bits>
 800e994:	9900      	ldr	r1, [sp, #0]
 800e996:	b300      	cbz	r0, 800e9da <__d2b+0x82>
 800e998:	9a01      	ldr	r2, [sp, #4]
 800e99a:	f1c0 0320 	rsb	r3, r0, #32
 800e99e:	fa02 f303 	lsl.w	r3, r2, r3
 800e9a2:	430b      	orrs	r3, r1
 800e9a4:	40c2      	lsrs	r2, r0
 800e9a6:	6163      	str	r3, [r4, #20]
 800e9a8:	9201      	str	r2, [sp, #4]
 800e9aa:	9b01      	ldr	r3, [sp, #4]
 800e9ac:	61a3      	str	r3, [r4, #24]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	bf14      	ite	ne
 800e9b2:	2202      	movne	r2, #2
 800e9b4:	2201      	moveq	r2, #1
 800e9b6:	6122      	str	r2, [r4, #16]
 800e9b8:	b1d5      	cbz	r5, 800e9f0 <__d2b+0x98>
 800e9ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e9be:	4405      	add	r5, r0
 800e9c0:	f8c9 5000 	str.w	r5, [r9]
 800e9c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e9c8:	f8c8 0000 	str.w	r0, [r8]
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	b003      	add	sp, #12
 800e9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e9d8:	e7d5      	b.n	800e986 <__d2b+0x2e>
 800e9da:	6161      	str	r1, [r4, #20]
 800e9dc:	e7e5      	b.n	800e9aa <__d2b+0x52>
 800e9de:	a801      	add	r0, sp, #4
 800e9e0:	f7ff fd5a 	bl	800e498 <__lo0bits>
 800e9e4:	9b01      	ldr	r3, [sp, #4]
 800e9e6:	6163      	str	r3, [r4, #20]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	6122      	str	r2, [r4, #16]
 800e9ec:	3020      	adds	r0, #32
 800e9ee:	e7e3      	b.n	800e9b8 <__d2b+0x60>
 800e9f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e9f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e9f8:	f8c9 0000 	str.w	r0, [r9]
 800e9fc:	6918      	ldr	r0, [r3, #16]
 800e9fe:	f7ff fd2b 	bl	800e458 <__hi0bits>
 800ea02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea06:	e7df      	b.n	800e9c8 <__d2b+0x70>
 800ea08:	08010177 	.word	0x08010177
 800ea0c:	08010188 	.word	0x08010188

0800ea10 <_calloc_r>:
 800ea10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea12:	fba1 2402 	umull	r2, r4, r1, r2
 800ea16:	b94c      	cbnz	r4, 800ea2c <_calloc_r+0x1c>
 800ea18:	4611      	mov	r1, r2
 800ea1a:	9201      	str	r2, [sp, #4]
 800ea1c:	f000 f87a 	bl	800eb14 <_malloc_r>
 800ea20:	9a01      	ldr	r2, [sp, #4]
 800ea22:	4605      	mov	r5, r0
 800ea24:	b930      	cbnz	r0, 800ea34 <_calloc_r+0x24>
 800ea26:	4628      	mov	r0, r5
 800ea28:	b003      	add	sp, #12
 800ea2a:	bd30      	pop	{r4, r5, pc}
 800ea2c:	220c      	movs	r2, #12
 800ea2e:	6002      	str	r2, [r0, #0]
 800ea30:	2500      	movs	r5, #0
 800ea32:	e7f8      	b.n	800ea26 <_calloc_r+0x16>
 800ea34:	4621      	mov	r1, r4
 800ea36:	f7fe f941 	bl	800ccbc <memset>
 800ea3a:	e7f4      	b.n	800ea26 <_calloc_r+0x16>

0800ea3c <_free_r>:
 800ea3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea3e:	2900      	cmp	r1, #0
 800ea40:	d044      	beq.n	800eacc <_free_r+0x90>
 800ea42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea46:	9001      	str	r0, [sp, #4]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ea4e:	bfb8      	it	lt
 800ea50:	18e4      	addlt	r4, r4, r3
 800ea52:	f000 fa9b 	bl	800ef8c <__malloc_lock>
 800ea56:	4a1e      	ldr	r2, [pc, #120]	; (800ead0 <_free_r+0x94>)
 800ea58:	9801      	ldr	r0, [sp, #4]
 800ea5a:	6813      	ldr	r3, [r2, #0]
 800ea5c:	b933      	cbnz	r3, 800ea6c <_free_r+0x30>
 800ea5e:	6063      	str	r3, [r4, #4]
 800ea60:	6014      	str	r4, [r2, #0]
 800ea62:	b003      	add	sp, #12
 800ea64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea68:	f000 ba96 	b.w	800ef98 <__malloc_unlock>
 800ea6c:	42a3      	cmp	r3, r4
 800ea6e:	d908      	bls.n	800ea82 <_free_r+0x46>
 800ea70:	6825      	ldr	r5, [r4, #0]
 800ea72:	1961      	adds	r1, r4, r5
 800ea74:	428b      	cmp	r3, r1
 800ea76:	bf01      	itttt	eq
 800ea78:	6819      	ldreq	r1, [r3, #0]
 800ea7a:	685b      	ldreq	r3, [r3, #4]
 800ea7c:	1949      	addeq	r1, r1, r5
 800ea7e:	6021      	streq	r1, [r4, #0]
 800ea80:	e7ed      	b.n	800ea5e <_free_r+0x22>
 800ea82:	461a      	mov	r2, r3
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	b10b      	cbz	r3, 800ea8c <_free_r+0x50>
 800ea88:	42a3      	cmp	r3, r4
 800ea8a:	d9fa      	bls.n	800ea82 <_free_r+0x46>
 800ea8c:	6811      	ldr	r1, [r2, #0]
 800ea8e:	1855      	adds	r5, r2, r1
 800ea90:	42a5      	cmp	r5, r4
 800ea92:	d10b      	bne.n	800eaac <_free_r+0x70>
 800ea94:	6824      	ldr	r4, [r4, #0]
 800ea96:	4421      	add	r1, r4
 800ea98:	1854      	adds	r4, r2, r1
 800ea9a:	42a3      	cmp	r3, r4
 800ea9c:	6011      	str	r1, [r2, #0]
 800ea9e:	d1e0      	bne.n	800ea62 <_free_r+0x26>
 800eaa0:	681c      	ldr	r4, [r3, #0]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	6053      	str	r3, [r2, #4]
 800eaa6:	4421      	add	r1, r4
 800eaa8:	6011      	str	r1, [r2, #0]
 800eaaa:	e7da      	b.n	800ea62 <_free_r+0x26>
 800eaac:	d902      	bls.n	800eab4 <_free_r+0x78>
 800eaae:	230c      	movs	r3, #12
 800eab0:	6003      	str	r3, [r0, #0]
 800eab2:	e7d6      	b.n	800ea62 <_free_r+0x26>
 800eab4:	6825      	ldr	r5, [r4, #0]
 800eab6:	1961      	adds	r1, r4, r5
 800eab8:	428b      	cmp	r3, r1
 800eaba:	bf04      	itt	eq
 800eabc:	6819      	ldreq	r1, [r3, #0]
 800eabe:	685b      	ldreq	r3, [r3, #4]
 800eac0:	6063      	str	r3, [r4, #4]
 800eac2:	bf04      	itt	eq
 800eac4:	1949      	addeq	r1, r1, r5
 800eac6:	6021      	streq	r1, [r4, #0]
 800eac8:	6054      	str	r4, [r2, #4]
 800eaca:	e7ca      	b.n	800ea62 <_free_r+0x26>
 800eacc:	b003      	add	sp, #12
 800eace:	bd30      	pop	{r4, r5, pc}
 800ead0:	200021d0 	.word	0x200021d0

0800ead4 <sbrk_aligned>:
 800ead4:	b570      	push	{r4, r5, r6, lr}
 800ead6:	4e0e      	ldr	r6, [pc, #56]	; (800eb10 <sbrk_aligned+0x3c>)
 800ead8:	460c      	mov	r4, r1
 800eada:	6831      	ldr	r1, [r6, #0]
 800eadc:	4605      	mov	r5, r0
 800eade:	b911      	cbnz	r1, 800eae6 <sbrk_aligned+0x12>
 800eae0:	f000 f9e8 	bl	800eeb4 <_sbrk_r>
 800eae4:	6030      	str	r0, [r6, #0]
 800eae6:	4621      	mov	r1, r4
 800eae8:	4628      	mov	r0, r5
 800eaea:	f000 f9e3 	bl	800eeb4 <_sbrk_r>
 800eaee:	1c43      	adds	r3, r0, #1
 800eaf0:	d00a      	beq.n	800eb08 <sbrk_aligned+0x34>
 800eaf2:	1cc4      	adds	r4, r0, #3
 800eaf4:	f024 0403 	bic.w	r4, r4, #3
 800eaf8:	42a0      	cmp	r0, r4
 800eafa:	d007      	beq.n	800eb0c <sbrk_aligned+0x38>
 800eafc:	1a21      	subs	r1, r4, r0
 800eafe:	4628      	mov	r0, r5
 800eb00:	f000 f9d8 	bl	800eeb4 <_sbrk_r>
 800eb04:	3001      	adds	r0, #1
 800eb06:	d101      	bne.n	800eb0c <sbrk_aligned+0x38>
 800eb08:	f04f 34ff 	mov.w	r4, #4294967295
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	bd70      	pop	{r4, r5, r6, pc}
 800eb10:	200021d4 	.word	0x200021d4

0800eb14 <_malloc_r>:
 800eb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb18:	1ccd      	adds	r5, r1, #3
 800eb1a:	f025 0503 	bic.w	r5, r5, #3
 800eb1e:	3508      	adds	r5, #8
 800eb20:	2d0c      	cmp	r5, #12
 800eb22:	bf38      	it	cc
 800eb24:	250c      	movcc	r5, #12
 800eb26:	2d00      	cmp	r5, #0
 800eb28:	4607      	mov	r7, r0
 800eb2a:	db01      	blt.n	800eb30 <_malloc_r+0x1c>
 800eb2c:	42a9      	cmp	r1, r5
 800eb2e:	d905      	bls.n	800eb3c <_malloc_r+0x28>
 800eb30:	230c      	movs	r3, #12
 800eb32:	603b      	str	r3, [r7, #0]
 800eb34:	2600      	movs	r6, #0
 800eb36:	4630      	mov	r0, r6
 800eb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb3c:	4e2e      	ldr	r6, [pc, #184]	; (800ebf8 <_malloc_r+0xe4>)
 800eb3e:	f000 fa25 	bl	800ef8c <__malloc_lock>
 800eb42:	6833      	ldr	r3, [r6, #0]
 800eb44:	461c      	mov	r4, r3
 800eb46:	bb34      	cbnz	r4, 800eb96 <_malloc_r+0x82>
 800eb48:	4629      	mov	r1, r5
 800eb4a:	4638      	mov	r0, r7
 800eb4c:	f7ff ffc2 	bl	800ead4 <sbrk_aligned>
 800eb50:	1c43      	adds	r3, r0, #1
 800eb52:	4604      	mov	r4, r0
 800eb54:	d14d      	bne.n	800ebf2 <_malloc_r+0xde>
 800eb56:	6834      	ldr	r4, [r6, #0]
 800eb58:	4626      	mov	r6, r4
 800eb5a:	2e00      	cmp	r6, #0
 800eb5c:	d140      	bne.n	800ebe0 <_malloc_r+0xcc>
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	4631      	mov	r1, r6
 800eb62:	4638      	mov	r0, r7
 800eb64:	eb04 0803 	add.w	r8, r4, r3
 800eb68:	f000 f9a4 	bl	800eeb4 <_sbrk_r>
 800eb6c:	4580      	cmp	r8, r0
 800eb6e:	d13a      	bne.n	800ebe6 <_malloc_r+0xd2>
 800eb70:	6821      	ldr	r1, [r4, #0]
 800eb72:	3503      	adds	r5, #3
 800eb74:	1a6d      	subs	r5, r5, r1
 800eb76:	f025 0503 	bic.w	r5, r5, #3
 800eb7a:	3508      	adds	r5, #8
 800eb7c:	2d0c      	cmp	r5, #12
 800eb7e:	bf38      	it	cc
 800eb80:	250c      	movcc	r5, #12
 800eb82:	4629      	mov	r1, r5
 800eb84:	4638      	mov	r0, r7
 800eb86:	f7ff ffa5 	bl	800ead4 <sbrk_aligned>
 800eb8a:	3001      	adds	r0, #1
 800eb8c:	d02b      	beq.n	800ebe6 <_malloc_r+0xd2>
 800eb8e:	6823      	ldr	r3, [r4, #0]
 800eb90:	442b      	add	r3, r5
 800eb92:	6023      	str	r3, [r4, #0]
 800eb94:	e00e      	b.n	800ebb4 <_malloc_r+0xa0>
 800eb96:	6822      	ldr	r2, [r4, #0]
 800eb98:	1b52      	subs	r2, r2, r5
 800eb9a:	d41e      	bmi.n	800ebda <_malloc_r+0xc6>
 800eb9c:	2a0b      	cmp	r2, #11
 800eb9e:	d916      	bls.n	800ebce <_malloc_r+0xba>
 800eba0:	1961      	adds	r1, r4, r5
 800eba2:	42a3      	cmp	r3, r4
 800eba4:	6025      	str	r5, [r4, #0]
 800eba6:	bf18      	it	ne
 800eba8:	6059      	strne	r1, [r3, #4]
 800ebaa:	6863      	ldr	r3, [r4, #4]
 800ebac:	bf08      	it	eq
 800ebae:	6031      	streq	r1, [r6, #0]
 800ebb0:	5162      	str	r2, [r4, r5]
 800ebb2:	604b      	str	r3, [r1, #4]
 800ebb4:	4638      	mov	r0, r7
 800ebb6:	f104 060b 	add.w	r6, r4, #11
 800ebba:	f000 f9ed 	bl	800ef98 <__malloc_unlock>
 800ebbe:	f026 0607 	bic.w	r6, r6, #7
 800ebc2:	1d23      	adds	r3, r4, #4
 800ebc4:	1af2      	subs	r2, r6, r3
 800ebc6:	d0b6      	beq.n	800eb36 <_malloc_r+0x22>
 800ebc8:	1b9b      	subs	r3, r3, r6
 800ebca:	50a3      	str	r3, [r4, r2]
 800ebcc:	e7b3      	b.n	800eb36 <_malloc_r+0x22>
 800ebce:	6862      	ldr	r2, [r4, #4]
 800ebd0:	42a3      	cmp	r3, r4
 800ebd2:	bf0c      	ite	eq
 800ebd4:	6032      	streq	r2, [r6, #0]
 800ebd6:	605a      	strne	r2, [r3, #4]
 800ebd8:	e7ec      	b.n	800ebb4 <_malloc_r+0xa0>
 800ebda:	4623      	mov	r3, r4
 800ebdc:	6864      	ldr	r4, [r4, #4]
 800ebde:	e7b2      	b.n	800eb46 <_malloc_r+0x32>
 800ebe0:	4634      	mov	r4, r6
 800ebe2:	6876      	ldr	r6, [r6, #4]
 800ebe4:	e7b9      	b.n	800eb5a <_malloc_r+0x46>
 800ebe6:	230c      	movs	r3, #12
 800ebe8:	603b      	str	r3, [r7, #0]
 800ebea:	4638      	mov	r0, r7
 800ebec:	f000 f9d4 	bl	800ef98 <__malloc_unlock>
 800ebf0:	e7a1      	b.n	800eb36 <_malloc_r+0x22>
 800ebf2:	6025      	str	r5, [r4, #0]
 800ebf4:	e7de      	b.n	800ebb4 <_malloc_r+0xa0>
 800ebf6:	bf00      	nop
 800ebf8:	200021d0 	.word	0x200021d0

0800ebfc <__ssputs_r>:
 800ebfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec00:	688e      	ldr	r6, [r1, #8]
 800ec02:	429e      	cmp	r6, r3
 800ec04:	4682      	mov	sl, r0
 800ec06:	460c      	mov	r4, r1
 800ec08:	4690      	mov	r8, r2
 800ec0a:	461f      	mov	r7, r3
 800ec0c:	d838      	bhi.n	800ec80 <__ssputs_r+0x84>
 800ec0e:	898a      	ldrh	r2, [r1, #12]
 800ec10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec14:	d032      	beq.n	800ec7c <__ssputs_r+0x80>
 800ec16:	6825      	ldr	r5, [r4, #0]
 800ec18:	6909      	ldr	r1, [r1, #16]
 800ec1a:	eba5 0901 	sub.w	r9, r5, r1
 800ec1e:	6965      	ldr	r5, [r4, #20]
 800ec20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec28:	3301      	adds	r3, #1
 800ec2a:	444b      	add	r3, r9
 800ec2c:	106d      	asrs	r5, r5, #1
 800ec2e:	429d      	cmp	r5, r3
 800ec30:	bf38      	it	cc
 800ec32:	461d      	movcc	r5, r3
 800ec34:	0553      	lsls	r3, r2, #21
 800ec36:	d531      	bpl.n	800ec9c <__ssputs_r+0xa0>
 800ec38:	4629      	mov	r1, r5
 800ec3a:	f7ff ff6b 	bl	800eb14 <_malloc_r>
 800ec3e:	4606      	mov	r6, r0
 800ec40:	b950      	cbnz	r0, 800ec58 <__ssputs_r+0x5c>
 800ec42:	230c      	movs	r3, #12
 800ec44:	f8ca 3000 	str.w	r3, [sl]
 800ec48:	89a3      	ldrh	r3, [r4, #12]
 800ec4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec4e:	81a3      	strh	r3, [r4, #12]
 800ec50:	f04f 30ff 	mov.w	r0, #4294967295
 800ec54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec58:	6921      	ldr	r1, [r4, #16]
 800ec5a:	464a      	mov	r2, r9
 800ec5c:	f7ff fb46 	bl	800e2ec <memcpy>
 800ec60:	89a3      	ldrh	r3, [r4, #12]
 800ec62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec6a:	81a3      	strh	r3, [r4, #12]
 800ec6c:	6126      	str	r6, [r4, #16]
 800ec6e:	6165      	str	r5, [r4, #20]
 800ec70:	444e      	add	r6, r9
 800ec72:	eba5 0509 	sub.w	r5, r5, r9
 800ec76:	6026      	str	r6, [r4, #0]
 800ec78:	60a5      	str	r5, [r4, #8]
 800ec7a:	463e      	mov	r6, r7
 800ec7c:	42be      	cmp	r6, r7
 800ec7e:	d900      	bls.n	800ec82 <__ssputs_r+0x86>
 800ec80:	463e      	mov	r6, r7
 800ec82:	6820      	ldr	r0, [r4, #0]
 800ec84:	4632      	mov	r2, r6
 800ec86:	4641      	mov	r1, r8
 800ec88:	f000 f966 	bl	800ef58 <memmove>
 800ec8c:	68a3      	ldr	r3, [r4, #8]
 800ec8e:	1b9b      	subs	r3, r3, r6
 800ec90:	60a3      	str	r3, [r4, #8]
 800ec92:	6823      	ldr	r3, [r4, #0]
 800ec94:	4433      	add	r3, r6
 800ec96:	6023      	str	r3, [r4, #0]
 800ec98:	2000      	movs	r0, #0
 800ec9a:	e7db      	b.n	800ec54 <__ssputs_r+0x58>
 800ec9c:	462a      	mov	r2, r5
 800ec9e:	f000 f981 	bl	800efa4 <_realloc_r>
 800eca2:	4606      	mov	r6, r0
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d1e1      	bne.n	800ec6c <__ssputs_r+0x70>
 800eca8:	6921      	ldr	r1, [r4, #16]
 800ecaa:	4650      	mov	r0, sl
 800ecac:	f7ff fec6 	bl	800ea3c <_free_r>
 800ecb0:	e7c7      	b.n	800ec42 <__ssputs_r+0x46>
	...

0800ecb4 <_svfiprintf_r>:
 800ecb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb8:	4698      	mov	r8, r3
 800ecba:	898b      	ldrh	r3, [r1, #12]
 800ecbc:	061b      	lsls	r3, r3, #24
 800ecbe:	b09d      	sub	sp, #116	; 0x74
 800ecc0:	4607      	mov	r7, r0
 800ecc2:	460d      	mov	r5, r1
 800ecc4:	4614      	mov	r4, r2
 800ecc6:	d50e      	bpl.n	800ece6 <_svfiprintf_r+0x32>
 800ecc8:	690b      	ldr	r3, [r1, #16]
 800ecca:	b963      	cbnz	r3, 800ece6 <_svfiprintf_r+0x32>
 800eccc:	2140      	movs	r1, #64	; 0x40
 800ecce:	f7ff ff21 	bl	800eb14 <_malloc_r>
 800ecd2:	6028      	str	r0, [r5, #0]
 800ecd4:	6128      	str	r0, [r5, #16]
 800ecd6:	b920      	cbnz	r0, 800ece2 <_svfiprintf_r+0x2e>
 800ecd8:	230c      	movs	r3, #12
 800ecda:	603b      	str	r3, [r7, #0]
 800ecdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ece0:	e0d1      	b.n	800ee86 <_svfiprintf_r+0x1d2>
 800ece2:	2340      	movs	r3, #64	; 0x40
 800ece4:	616b      	str	r3, [r5, #20]
 800ece6:	2300      	movs	r3, #0
 800ece8:	9309      	str	r3, [sp, #36]	; 0x24
 800ecea:	2320      	movs	r3, #32
 800ecec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ecf0:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecf4:	2330      	movs	r3, #48	; 0x30
 800ecf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eea0 <_svfiprintf_r+0x1ec>
 800ecfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ecfe:	f04f 0901 	mov.w	r9, #1
 800ed02:	4623      	mov	r3, r4
 800ed04:	469a      	mov	sl, r3
 800ed06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed0a:	b10a      	cbz	r2, 800ed10 <_svfiprintf_r+0x5c>
 800ed0c:	2a25      	cmp	r2, #37	; 0x25
 800ed0e:	d1f9      	bne.n	800ed04 <_svfiprintf_r+0x50>
 800ed10:	ebba 0b04 	subs.w	fp, sl, r4
 800ed14:	d00b      	beq.n	800ed2e <_svfiprintf_r+0x7a>
 800ed16:	465b      	mov	r3, fp
 800ed18:	4622      	mov	r2, r4
 800ed1a:	4629      	mov	r1, r5
 800ed1c:	4638      	mov	r0, r7
 800ed1e:	f7ff ff6d 	bl	800ebfc <__ssputs_r>
 800ed22:	3001      	adds	r0, #1
 800ed24:	f000 80aa 	beq.w	800ee7c <_svfiprintf_r+0x1c8>
 800ed28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed2a:	445a      	add	r2, fp
 800ed2c:	9209      	str	r2, [sp, #36]	; 0x24
 800ed2e:	f89a 3000 	ldrb.w	r3, [sl]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	f000 80a2 	beq.w	800ee7c <_svfiprintf_r+0x1c8>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed42:	f10a 0a01 	add.w	sl, sl, #1
 800ed46:	9304      	str	r3, [sp, #16]
 800ed48:	9307      	str	r3, [sp, #28]
 800ed4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed4e:	931a      	str	r3, [sp, #104]	; 0x68
 800ed50:	4654      	mov	r4, sl
 800ed52:	2205      	movs	r2, #5
 800ed54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed58:	4851      	ldr	r0, [pc, #324]	; (800eea0 <_svfiprintf_r+0x1ec>)
 800ed5a:	f7f1 fa49 	bl	80001f0 <memchr>
 800ed5e:	9a04      	ldr	r2, [sp, #16]
 800ed60:	b9d8      	cbnz	r0, 800ed9a <_svfiprintf_r+0xe6>
 800ed62:	06d0      	lsls	r0, r2, #27
 800ed64:	bf44      	itt	mi
 800ed66:	2320      	movmi	r3, #32
 800ed68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed6c:	0711      	lsls	r1, r2, #28
 800ed6e:	bf44      	itt	mi
 800ed70:	232b      	movmi	r3, #43	; 0x2b
 800ed72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed76:	f89a 3000 	ldrb.w	r3, [sl]
 800ed7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ed7c:	d015      	beq.n	800edaa <_svfiprintf_r+0xf6>
 800ed7e:	9a07      	ldr	r2, [sp, #28]
 800ed80:	4654      	mov	r4, sl
 800ed82:	2000      	movs	r0, #0
 800ed84:	f04f 0c0a 	mov.w	ip, #10
 800ed88:	4621      	mov	r1, r4
 800ed8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed8e:	3b30      	subs	r3, #48	; 0x30
 800ed90:	2b09      	cmp	r3, #9
 800ed92:	d94e      	bls.n	800ee32 <_svfiprintf_r+0x17e>
 800ed94:	b1b0      	cbz	r0, 800edc4 <_svfiprintf_r+0x110>
 800ed96:	9207      	str	r2, [sp, #28]
 800ed98:	e014      	b.n	800edc4 <_svfiprintf_r+0x110>
 800ed9a:	eba0 0308 	sub.w	r3, r0, r8
 800ed9e:	fa09 f303 	lsl.w	r3, r9, r3
 800eda2:	4313      	orrs	r3, r2
 800eda4:	9304      	str	r3, [sp, #16]
 800eda6:	46a2      	mov	sl, r4
 800eda8:	e7d2      	b.n	800ed50 <_svfiprintf_r+0x9c>
 800edaa:	9b03      	ldr	r3, [sp, #12]
 800edac:	1d19      	adds	r1, r3, #4
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	9103      	str	r1, [sp, #12]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	bfbb      	ittet	lt
 800edb6:	425b      	neglt	r3, r3
 800edb8:	f042 0202 	orrlt.w	r2, r2, #2
 800edbc:	9307      	strge	r3, [sp, #28]
 800edbe:	9307      	strlt	r3, [sp, #28]
 800edc0:	bfb8      	it	lt
 800edc2:	9204      	strlt	r2, [sp, #16]
 800edc4:	7823      	ldrb	r3, [r4, #0]
 800edc6:	2b2e      	cmp	r3, #46	; 0x2e
 800edc8:	d10c      	bne.n	800ede4 <_svfiprintf_r+0x130>
 800edca:	7863      	ldrb	r3, [r4, #1]
 800edcc:	2b2a      	cmp	r3, #42	; 0x2a
 800edce:	d135      	bne.n	800ee3c <_svfiprintf_r+0x188>
 800edd0:	9b03      	ldr	r3, [sp, #12]
 800edd2:	1d1a      	adds	r2, r3, #4
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	9203      	str	r2, [sp, #12]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	bfb8      	it	lt
 800eddc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ede0:	3402      	adds	r4, #2
 800ede2:	9305      	str	r3, [sp, #20]
 800ede4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eeb0 <_svfiprintf_r+0x1fc>
 800ede8:	7821      	ldrb	r1, [r4, #0]
 800edea:	2203      	movs	r2, #3
 800edec:	4650      	mov	r0, sl
 800edee:	f7f1 f9ff 	bl	80001f0 <memchr>
 800edf2:	b140      	cbz	r0, 800ee06 <_svfiprintf_r+0x152>
 800edf4:	2340      	movs	r3, #64	; 0x40
 800edf6:	eba0 000a 	sub.w	r0, r0, sl
 800edfa:	fa03 f000 	lsl.w	r0, r3, r0
 800edfe:	9b04      	ldr	r3, [sp, #16]
 800ee00:	4303      	orrs	r3, r0
 800ee02:	3401      	adds	r4, #1
 800ee04:	9304      	str	r3, [sp, #16]
 800ee06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee0a:	4826      	ldr	r0, [pc, #152]	; (800eea4 <_svfiprintf_r+0x1f0>)
 800ee0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee10:	2206      	movs	r2, #6
 800ee12:	f7f1 f9ed 	bl	80001f0 <memchr>
 800ee16:	2800      	cmp	r0, #0
 800ee18:	d038      	beq.n	800ee8c <_svfiprintf_r+0x1d8>
 800ee1a:	4b23      	ldr	r3, [pc, #140]	; (800eea8 <_svfiprintf_r+0x1f4>)
 800ee1c:	bb1b      	cbnz	r3, 800ee66 <_svfiprintf_r+0x1b2>
 800ee1e:	9b03      	ldr	r3, [sp, #12]
 800ee20:	3307      	adds	r3, #7
 800ee22:	f023 0307 	bic.w	r3, r3, #7
 800ee26:	3308      	adds	r3, #8
 800ee28:	9303      	str	r3, [sp, #12]
 800ee2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee2c:	4433      	add	r3, r6
 800ee2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee30:	e767      	b.n	800ed02 <_svfiprintf_r+0x4e>
 800ee32:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee36:	460c      	mov	r4, r1
 800ee38:	2001      	movs	r0, #1
 800ee3a:	e7a5      	b.n	800ed88 <_svfiprintf_r+0xd4>
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	3401      	adds	r4, #1
 800ee40:	9305      	str	r3, [sp, #20]
 800ee42:	4619      	mov	r1, r3
 800ee44:	f04f 0c0a 	mov.w	ip, #10
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee4e:	3a30      	subs	r2, #48	; 0x30
 800ee50:	2a09      	cmp	r2, #9
 800ee52:	d903      	bls.n	800ee5c <_svfiprintf_r+0x1a8>
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d0c5      	beq.n	800ede4 <_svfiprintf_r+0x130>
 800ee58:	9105      	str	r1, [sp, #20]
 800ee5a:	e7c3      	b.n	800ede4 <_svfiprintf_r+0x130>
 800ee5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee60:	4604      	mov	r4, r0
 800ee62:	2301      	movs	r3, #1
 800ee64:	e7f0      	b.n	800ee48 <_svfiprintf_r+0x194>
 800ee66:	ab03      	add	r3, sp, #12
 800ee68:	9300      	str	r3, [sp, #0]
 800ee6a:	462a      	mov	r2, r5
 800ee6c:	4b0f      	ldr	r3, [pc, #60]	; (800eeac <_svfiprintf_r+0x1f8>)
 800ee6e:	a904      	add	r1, sp, #16
 800ee70:	4638      	mov	r0, r7
 800ee72:	f7fd ffcb 	bl	800ce0c <_printf_float>
 800ee76:	1c42      	adds	r2, r0, #1
 800ee78:	4606      	mov	r6, r0
 800ee7a:	d1d6      	bne.n	800ee2a <_svfiprintf_r+0x176>
 800ee7c:	89ab      	ldrh	r3, [r5, #12]
 800ee7e:	065b      	lsls	r3, r3, #25
 800ee80:	f53f af2c 	bmi.w	800ecdc <_svfiprintf_r+0x28>
 800ee84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee86:	b01d      	add	sp, #116	; 0x74
 800ee88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee8c:	ab03      	add	r3, sp, #12
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	462a      	mov	r2, r5
 800ee92:	4b06      	ldr	r3, [pc, #24]	; (800eeac <_svfiprintf_r+0x1f8>)
 800ee94:	a904      	add	r1, sp, #16
 800ee96:	4638      	mov	r0, r7
 800ee98:	f7fe fa5c 	bl	800d354 <_printf_i>
 800ee9c:	e7eb      	b.n	800ee76 <_svfiprintf_r+0x1c2>
 800ee9e:	bf00      	nop
 800eea0:	080102e4 	.word	0x080102e4
 800eea4:	080102ee 	.word	0x080102ee
 800eea8:	0800ce0d 	.word	0x0800ce0d
 800eeac:	0800ebfd 	.word	0x0800ebfd
 800eeb0:	080102ea 	.word	0x080102ea

0800eeb4 <_sbrk_r>:
 800eeb4:	b538      	push	{r3, r4, r5, lr}
 800eeb6:	4d06      	ldr	r5, [pc, #24]	; (800eed0 <_sbrk_r+0x1c>)
 800eeb8:	2300      	movs	r3, #0
 800eeba:	4604      	mov	r4, r0
 800eebc:	4608      	mov	r0, r1
 800eebe:	602b      	str	r3, [r5, #0]
 800eec0:	f7f2 ffcc 	bl	8001e5c <_sbrk>
 800eec4:	1c43      	adds	r3, r0, #1
 800eec6:	d102      	bne.n	800eece <_sbrk_r+0x1a>
 800eec8:	682b      	ldr	r3, [r5, #0]
 800eeca:	b103      	cbz	r3, 800eece <_sbrk_r+0x1a>
 800eecc:	6023      	str	r3, [r4, #0]
 800eece:	bd38      	pop	{r3, r4, r5, pc}
 800eed0:	200021d8 	.word	0x200021d8

0800eed4 <__assert_func>:
 800eed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eed6:	4614      	mov	r4, r2
 800eed8:	461a      	mov	r2, r3
 800eeda:	4b09      	ldr	r3, [pc, #36]	; (800ef00 <__assert_func+0x2c>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	4605      	mov	r5, r0
 800eee0:	68d8      	ldr	r0, [r3, #12]
 800eee2:	b14c      	cbz	r4, 800eef8 <__assert_func+0x24>
 800eee4:	4b07      	ldr	r3, [pc, #28]	; (800ef04 <__assert_func+0x30>)
 800eee6:	9100      	str	r1, [sp, #0]
 800eee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eeec:	4906      	ldr	r1, [pc, #24]	; (800ef08 <__assert_func+0x34>)
 800eeee:	462b      	mov	r3, r5
 800eef0:	f000 f80e 	bl	800ef10 <fiprintf>
 800eef4:	f000 faac 	bl	800f450 <abort>
 800eef8:	4b04      	ldr	r3, [pc, #16]	; (800ef0c <__assert_func+0x38>)
 800eefa:	461c      	mov	r4, r3
 800eefc:	e7f3      	b.n	800eee6 <__assert_func+0x12>
 800eefe:	bf00      	nop
 800ef00:	2000010c 	.word	0x2000010c
 800ef04:	080102f5 	.word	0x080102f5
 800ef08:	08010302 	.word	0x08010302
 800ef0c:	08010330 	.word	0x08010330

0800ef10 <fiprintf>:
 800ef10:	b40e      	push	{r1, r2, r3}
 800ef12:	b503      	push	{r0, r1, lr}
 800ef14:	4601      	mov	r1, r0
 800ef16:	ab03      	add	r3, sp, #12
 800ef18:	4805      	ldr	r0, [pc, #20]	; (800ef30 <fiprintf+0x20>)
 800ef1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef1e:	6800      	ldr	r0, [r0, #0]
 800ef20:	9301      	str	r3, [sp, #4]
 800ef22:	f000 f897 	bl	800f054 <_vfiprintf_r>
 800ef26:	b002      	add	sp, #8
 800ef28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef2c:	b003      	add	sp, #12
 800ef2e:	4770      	bx	lr
 800ef30:	2000010c 	.word	0x2000010c

0800ef34 <__ascii_mbtowc>:
 800ef34:	b082      	sub	sp, #8
 800ef36:	b901      	cbnz	r1, 800ef3a <__ascii_mbtowc+0x6>
 800ef38:	a901      	add	r1, sp, #4
 800ef3a:	b142      	cbz	r2, 800ef4e <__ascii_mbtowc+0x1a>
 800ef3c:	b14b      	cbz	r3, 800ef52 <__ascii_mbtowc+0x1e>
 800ef3e:	7813      	ldrb	r3, [r2, #0]
 800ef40:	600b      	str	r3, [r1, #0]
 800ef42:	7812      	ldrb	r2, [r2, #0]
 800ef44:	1e10      	subs	r0, r2, #0
 800ef46:	bf18      	it	ne
 800ef48:	2001      	movne	r0, #1
 800ef4a:	b002      	add	sp, #8
 800ef4c:	4770      	bx	lr
 800ef4e:	4610      	mov	r0, r2
 800ef50:	e7fb      	b.n	800ef4a <__ascii_mbtowc+0x16>
 800ef52:	f06f 0001 	mvn.w	r0, #1
 800ef56:	e7f8      	b.n	800ef4a <__ascii_mbtowc+0x16>

0800ef58 <memmove>:
 800ef58:	4288      	cmp	r0, r1
 800ef5a:	b510      	push	{r4, lr}
 800ef5c:	eb01 0402 	add.w	r4, r1, r2
 800ef60:	d902      	bls.n	800ef68 <memmove+0x10>
 800ef62:	4284      	cmp	r4, r0
 800ef64:	4623      	mov	r3, r4
 800ef66:	d807      	bhi.n	800ef78 <memmove+0x20>
 800ef68:	1e43      	subs	r3, r0, #1
 800ef6a:	42a1      	cmp	r1, r4
 800ef6c:	d008      	beq.n	800ef80 <memmove+0x28>
 800ef6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef76:	e7f8      	b.n	800ef6a <memmove+0x12>
 800ef78:	4402      	add	r2, r0
 800ef7a:	4601      	mov	r1, r0
 800ef7c:	428a      	cmp	r2, r1
 800ef7e:	d100      	bne.n	800ef82 <memmove+0x2a>
 800ef80:	bd10      	pop	{r4, pc}
 800ef82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef8a:	e7f7      	b.n	800ef7c <memmove+0x24>

0800ef8c <__malloc_lock>:
 800ef8c:	4801      	ldr	r0, [pc, #4]	; (800ef94 <__malloc_lock+0x8>)
 800ef8e:	f000 bc1f 	b.w	800f7d0 <__retarget_lock_acquire_recursive>
 800ef92:	bf00      	nop
 800ef94:	200021dc 	.word	0x200021dc

0800ef98 <__malloc_unlock>:
 800ef98:	4801      	ldr	r0, [pc, #4]	; (800efa0 <__malloc_unlock+0x8>)
 800ef9a:	f000 bc1a 	b.w	800f7d2 <__retarget_lock_release_recursive>
 800ef9e:	bf00      	nop
 800efa0:	200021dc 	.word	0x200021dc

0800efa4 <_realloc_r>:
 800efa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa8:	4680      	mov	r8, r0
 800efaa:	4614      	mov	r4, r2
 800efac:	460e      	mov	r6, r1
 800efae:	b921      	cbnz	r1, 800efba <_realloc_r+0x16>
 800efb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efb4:	4611      	mov	r1, r2
 800efb6:	f7ff bdad 	b.w	800eb14 <_malloc_r>
 800efba:	b92a      	cbnz	r2, 800efc8 <_realloc_r+0x24>
 800efbc:	f7ff fd3e 	bl	800ea3c <_free_r>
 800efc0:	4625      	mov	r5, r4
 800efc2:	4628      	mov	r0, r5
 800efc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc8:	f000 fc6a 	bl	800f8a0 <_malloc_usable_size_r>
 800efcc:	4284      	cmp	r4, r0
 800efce:	4607      	mov	r7, r0
 800efd0:	d802      	bhi.n	800efd8 <_realloc_r+0x34>
 800efd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800efd6:	d812      	bhi.n	800effe <_realloc_r+0x5a>
 800efd8:	4621      	mov	r1, r4
 800efda:	4640      	mov	r0, r8
 800efdc:	f7ff fd9a 	bl	800eb14 <_malloc_r>
 800efe0:	4605      	mov	r5, r0
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d0ed      	beq.n	800efc2 <_realloc_r+0x1e>
 800efe6:	42bc      	cmp	r4, r7
 800efe8:	4622      	mov	r2, r4
 800efea:	4631      	mov	r1, r6
 800efec:	bf28      	it	cs
 800efee:	463a      	movcs	r2, r7
 800eff0:	f7ff f97c 	bl	800e2ec <memcpy>
 800eff4:	4631      	mov	r1, r6
 800eff6:	4640      	mov	r0, r8
 800eff8:	f7ff fd20 	bl	800ea3c <_free_r>
 800effc:	e7e1      	b.n	800efc2 <_realloc_r+0x1e>
 800effe:	4635      	mov	r5, r6
 800f000:	e7df      	b.n	800efc2 <_realloc_r+0x1e>

0800f002 <__sfputc_r>:
 800f002:	6893      	ldr	r3, [r2, #8]
 800f004:	3b01      	subs	r3, #1
 800f006:	2b00      	cmp	r3, #0
 800f008:	b410      	push	{r4}
 800f00a:	6093      	str	r3, [r2, #8]
 800f00c:	da08      	bge.n	800f020 <__sfputc_r+0x1e>
 800f00e:	6994      	ldr	r4, [r2, #24]
 800f010:	42a3      	cmp	r3, r4
 800f012:	db01      	blt.n	800f018 <__sfputc_r+0x16>
 800f014:	290a      	cmp	r1, #10
 800f016:	d103      	bne.n	800f020 <__sfputc_r+0x1e>
 800f018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f01c:	f000 b94a 	b.w	800f2b4 <__swbuf_r>
 800f020:	6813      	ldr	r3, [r2, #0]
 800f022:	1c58      	adds	r0, r3, #1
 800f024:	6010      	str	r0, [r2, #0]
 800f026:	7019      	strb	r1, [r3, #0]
 800f028:	4608      	mov	r0, r1
 800f02a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f02e:	4770      	bx	lr

0800f030 <__sfputs_r>:
 800f030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f032:	4606      	mov	r6, r0
 800f034:	460f      	mov	r7, r1
 800f036:	4614      	mov	r4, r2
 800f038:	18d5      	adds	r5, r2, r3
 800f03a:	42ac      	cmp	r4, r5
 800f03c:	d101      	bne.n	800f042 <__sfputs_r+0x12>
 800f03e:	2000      	movs	r0, #0
 800f040:	e007      	b.n	800f052 <__sfputs_r+0x22>
 800f042:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f046:	463a      	mov	r2, r7
 800f048:	4630      	mov	r0, r6
 800f04a:	f7ff ffda 	bl	800f002 <__sfputc_r>
 800f04e:	1c43      	adds	r3, r0, #1
 800f050:	d1f3      	bne.n	800f03a <__sfputs_r+0xa>
 800f052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f054 <_vfiprintf_r>:
 800f054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f058:	460d      	mov	r5, r1
 800f05a:	b09d      	sub	sp, #116	; 0x74
 800f05c:	4614      	mov	r4, r2
 800f05e:	4698      	mov	r8, r3
 800f060:	4606      	mov	r6, r0
 800f062:	b118      	cbz	r0, 800f06c <_vfiprintf_r+0x18>
 800f064:	6983      	ldr	r3, [r0, #24]
 800f066:	b90b      	cbnz	r3, 800f06c <_vfiprintf_r+0x18>
 800f068:	f000 fb14 	bl	800f694 <__sinit>
 800f06c:	4b89      	ldr	r3, [pc, #548]	; (800f294 <_vfiprintf_r+0x240>)
 800f06e:	429d      	cmp	r5, r3
 800f070:	d11b      	bne.n	800f0aa <_vfiprintf_r+0x56>
 800f072:	6875      	ldr	r5, [r6, #4]
 800f074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f076:	07d9      	lsls	r1, r3, #31
 800f078:	d405      	bmi.n	800f086 <_vfiprintf_r+0x32>
 800f07a:	89ab      	ldrh	r3, [r5, #12]
 800f07c:	059a      	lsls	r2, r3, #22
 800f07e:	d402      	bmi.n	800f086 <_vfiprintf_r+0x32>
 800f080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f082:	f000 fba5 	bl	800f7d0 <__retarget_lock_acquire_recursive>
 800f086:	89ab      	ldrh	r3, [r5, #12]
 800f088:	071b      	lsls	r3, r3, #28
 800f08a:	d501      	bpl.n	800f090 <_vfiprintf_r+0x3c>
 800f08c:	692b      	ldr	r3, [r5, #16]
 800f08e:	b9eb      	cbnz	r3, 800f0cc <_vfiprintf_r+0x78>
 800f090:	4629      	mov	r1, r5
 800f092:	4630      	mov	r0, r6
 800f094:	f000 f96e 	bl	800f374 <__swsetup_r>
 800f098:	b1c0      	cbz	r0, 800f0cc <_vfiprintf_r+0x78>
 800f09a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f09c:	07dc      	lsls	r4, r3, #31
 800f09e:	d50e      	bpl.n	800f0be <_vfiprintf_r+0x6a>
 800f0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a4:	b01d      	add	sp, #116	; 0x74
 800f0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0aa:	4b7b      	ldr	r3, [pc, #492]	; (800f298 <_vfiprintf_r+0x244>)
 800f0ac:	429d      	cmp	r5, r3
 800f0ae:	d101      	bne.n	800f0b4 <_vfiprintf_r+0x60>
 800f0b0:	68b5      	ldr	r5, [r6, #8]
 800f0b2:	e7df      	b.n	800f074 <_vfiprintf_r+0x20>
 800f0b4:	4b79      	ldr	r3, [pc, #484]	; (800f29c <_vfiprintf_r+0x248>)
 800f0b6:	429d      	cmp	r5, r3
 800f0b8:	bf08      	it	eq
 800f0ba:	68f5      	ldreq	r5, [r6, #12]
 800f0bc:	e7da      	b.n	800f074 <_vfiprintf_r+0x20>
 800f0be:	89ab      	ldrh	r3, [r5, #12]
 800f0c0:	0598      	lsls	r0, r3, #22
 800f0c2:	d4ed      	bmi.n	800f0a0 <_vfiprintf_r+0x4c>
 800f0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0c6:	f000 fb84 	bl	800f7d2 <__retarget_lock_release_recursive>
 800f0ca:	e7e9      	b.n	800f0a0 <_vfiprintf_r+0x4c>
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f0d0:	2320      	movs	r3, #32
 800f0d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0da:	2330      	movs	r3, #48	; 0x30
 800f0dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f2a0 <_vfiprintf_r+0x24c>
 800f0e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0e4:	f04f 0901 	mov.w	r9, #1
 800f0e8:	4623      	mov	r3, r4
 800f0ea:	469a      	mov	sl, r3
 800f0ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0f0:	b10a      	cbz	r2, 800f0f6 <_vfiprintf_r+0xa2>
 800f0f2:	2a25      	cmp	r2, #37	; 0x25
 800f0f4:	d1f9      	bne.n	800f0ea <_vfiprintf_r+0x96>
 800f0f6:	ebba 0b04 	subs.w	fp, sl, r4
 800f0fa:	d00b      	beq.n	800f114 <_vfiprintf_r+0xc0>
 800f0fc:	465b      	mov	r3, fp
 800f0fe:	4622      	mov	r2, r4
 800f100:	4629      	mov	r1, r5
 800f102:	4630      	mov	r0, r6
 800f104:	f7ff ff94 	bl	800f030 <__sfputs_r>
 800f108:	3001      	adds	r0, #1
 800f10a:	f000 80aa 	beq.w	800f262 <_vfiprintf_r+0x20e>
 800f10e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f110:	445a      	add	r2, fp
 800f112:	9209      	str	r2, [sp, #36]	; 0x24
 800f114:	f89a 3000 	ldrb.w	r3, [sl]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f000 80a2 	beq.w	800f262 <_vfiprintf_r+0x20e>
 800f11e:	2300      	movs	r3, #0
 800f120:	f04f 32ff 	mov.w	r2, #4294967295
 800f124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f128:	f10a 0a01 	add.w	sl, sl, #1
 800f12c:	9304      	str	r3, [sp, #16]
 800f12e:	9307      	str	r3, [sp, #28]
 800f130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f134:	931a      	str	r3, [sp, #104]	; 0x68
 800f136:	4654      	mov	r4, sl
 800f138:	2205      	movs	r2, #5
 800f13a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f13e:	4858      	ldr	r0, [pc, #352]	; (800f2a0 <_vfiprintf_r+0x24c>)
 800f140:	f7f1 f856 	bl	80001f0 <memchr>
 800f144:	9a04      	ldr	r2, [sp, #16]
 800f146:	b9d8      	cbnz	r0, 800f180 <_vfiprintf_r+0x12c>
 800f148:	06d1      	lsls	r1, r2, #27
 800f14a:	bf44      	itt	mi
 800f14c:	2320      	movmi	r3, #32
 800f14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f152:	0713      	lsls	r3, r2, #28
 800f154:	bf44      	itt	mi
 800f156:	232b      	movmi	r3, #43	; 0x2b
 800f158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f15c:	f89a 3000 	ldrb.w	r3, [sl]
 800f160:	2b2a      	cmp	r3, #42	; 0x2a
 800f162:	d015      	beq.n	800f190 <_vfiprintf_r+0x13c>
 800f164:	9a07      	ldr	r2, [sp, #28]
 800f166:	4654      	mov	r4, sl
 800f168:	2000      	movs	r0, #0
 800f16a:	f04f 0c0a 	mov.w	ip, #10
 800f16e:	4621      	mov	r1, r4
 800f170:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f174:	3b30      	subs	r3, #48	; 0x30
 800f176:	2b09      	cmp	r3, #9
 800f178:	d94e      	bls.n	800f218 <_vfiprintf_r+0x1c4>
 800f17a:	b1b0      	cbz	r0, 800f1aa <_vfiprintf_r+0x156>
 800f17c:	9207      	str	r2, [sp, #28]
 800f17e:	e014      	b.n	800f1aa <_vfiprintf_r+0x156>
 800f180:	eba0 0308 	sub.w	r3, r0, r8
 800f184:	fa09 f303 	lsl.w	r3, r9, r3
 800f188:	4313      	orrs	r3, r2
 800f18a:	9304      	str	r3, [sp, #16]
 800f18c:	46a2      	mov	sl, r4
 800f18e:	e7d2      	b.n	800f136 <_vfiprintf_r+0xe2>
 800f190:	9b03      	ldr	r3, [sp, #12]
 800f192:	1d19      	adds	r1, r3, #4
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	9103      	str	r1, [sp, #12]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	bfbb      	ittet	lt
 800f19c:	425b      	neglt	r3, r3
 800f19e:	f042 0202 	orrlt.w	r2, r2, #2
 800f1a2:	9307      	strge	r3, [sp, #28]
 800f1a4:	9307      	strlt	r3, [sp, #28]
 800f1a6:	bfb8      	it	lt
 800f1a8:	9204      	strlt	r2, [sp, #16]
 800f1aa:	7823      	ldrb	r3, [r4, #0]
 800f1ac:	2b2e      	cmp	r3, #46	; 0x2e
 800f1ae:	d10c      	bne.n	800f1ca <_vfiprintf_r+0x176>
 800f1b0:	7863      	ldrb	r3, [r4, #1]
 800f1b2:	2b2a      	cmp	r3, #42	; 0x2a
 800f1b4:	d135      	bne.n	800f222 <_vfiprintf_r+0x1ce>
 800f1b6:	9b03      	ldr	r3, [sp, #12]
 800f1b8:	1d1a      	adds	r2, r3, #4
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	9203      	str	r2, [sp, #12]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	bfb8      	it	lt
 800f1c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1c6:	3402      	adds	r4, #2
 800f1c8:	9305      	str	r3, [sp, #20]
 800f1ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f2b0 <_vfiprintf_r+0x25c>
 800f1ce:	7821      	ldrb	r1, [r4, #0]
 800f1d0:	2203      	movs	r2, #3
 800f1d2:	4650      	mov	r0, sl
 800f1d4:	f7f1 f80c 	bl	80001f0 <memchr>
 800f1d8:	b140      	cbz	r0, 800f1ec <_vfiprintf_r+0x198>
 800f1da:	2340      	movs	r3, #64	; 0x40
 800f1dc:	eba0 000a 	sub.w	r0, r0, sl
 800f1e0:	fa03 f000 	lsl.w	r0, r3, r0
 800f1e4:	9b04      	ldr	r3, [sp, #16]
 800f1e6:	4303      	orrs	r3, r0
 800f1e8:	3401      	adds	r4, #1
 800f1ea:	9304      	str	r3, [sp, #16]
 800f1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1f0:	482c      	ldr	r0, [pc, #176]	; (800f2a4 <_vfiprintf_r+0x250>)
 800f1f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1f6:	2206      	movs	r2, #6
 800f1f8:	f7f0 fffa 	bl	80001f0 <memchr>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d03f      	beq.n	800f280 <_vfiprintf_r+0x22c>
 800f200:	4b29      	ldr	r3, [pc, #164]	; (800f2a8 <_vfiprintf_r+0x254>)
 800f202:	bb1b      	cbnz	r3, 800f24c <_vfiprintf_r+0x1f8>
 800f204:	9b03      	ldr	r3, [sp, #12]
 800f206:	3307      	adds	r3, #7
 800f208:	f023 0307 	bic.w	r3, r3, #7
 800f20c:	3308      	adds	r3, #8
 800f20e:	9303      	str	r3, [sp, #12]
 800f210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f212:	443b      	add	r3, r7
 800f214:	9309      	str	r3, [sp, #36]	; 0x24
 800f216:	e767      	b.n	800f0e8 <_vfiprintf_r+0x94>
 800f218:	fb0c 3202 	mla	r2, ip, r2, r3
 800f21c:	460c      	mov	r4, r1
 800f21e:	2001      	movs	r0, #1
 800f220:	e7a5      	b.n	800f16e <_vfiprintf_r+0x11a>
 800f222:	2300      	movs	r3, #0
 800f224:	3401      	adds	r4, #1
 800f226:	9305      	str	r3, [sp, #20]
 800f228:	4619      	mov	r1, r3
 800f22a:	f04f 0c0a 	mov.w	ip, #10
 800f22e:	4620      	mov	r0, r4
 800f230:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f234:	3a30      	subs	r2, #48	; 0x30
 800f236:	2a09      	cmp	r2, #9
 800f238:	d903      	bls.n	800f242 <_vfiprintf_r+0x1ee>
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d0c5      	beq.n	800f1ca <_vfiprintf_r+0x176>
 800f23e:	9105      	str	r1, [sp, #20]
 800f240:	e7c3      	b.n	800f1ca <_vfiprintf_r+0x176>
 800f242:	fb0c 2101 	mla	r1, ip, r1, r2
 800f246:	4604      	mov	r4, r0
 800f248:	2301      	movs	r3, #1
 800f24a:	e7f0      	b.n	800f22e <_vfiprintf_r+0x1da>
 800f24c:	ab03      	add	r3, sp, #12
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	462a      	mov	r2, r5
 800f252:	4b16      	ldr	r3, [pc, #88]	; (800f2ac <_vfiprintf_r+0x258>)
 800f254:	a904      	add	r1, sp, #16
 800f256:	4630      	mov	r0, r6
 800f258:	f7fd fdd8 	bl	800ce0c <_printf_float>
 800f25c:	4607      	mov	r7, r0
 800f25e:	1c78      	adds	r0, r7, #1
 800f260:	d1d6      	bne.n	800f210 <_vfiprintf_r+0x1bc>
 800f262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f264:	07d9      	lsls	r1, r3, #31
 800f266:	d405      	bmi.n	800f274 <_vfiprintf_r+0x220>
 800f268:	89ab      	ldrh	r3, [r5, #12]
 800f26a:	059a      	lsls	r2, r3, #22
 800f26c:	d402      	bmi.n	800f274 <_vfiprintf_r+0x220>
 800f26e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f270:	f000 faaf 	bl	800f7d2 <__retarget_lock_release_recursive>
 800f274:	89ab      	ldrh	r3, [r5, #12]
 800f276:	065b      	lsls	r3, r3, #25
 800f278:	f53f af12 	bmi.w	800f0a0 <_vfiprintf_r+0x4c>
 800f27c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f27e:	e711      	b.n	800f0a4 <_vfiprintf_r+0x50>
 800f280:	ab03      	add	r3, sp, #12
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	462a      	mov	r2, r5
 800f286:	4b09      	ldr	r3, [pc, #36]	; (800f2ac <_vfiprintf_r+0x258>)
 800f288:	a904      	add	r1, sp, #16
 800f28a:	4630      	mov	r0, r6
 800f28c:	f7fe f862 	bl	800d354 <_printf_i>
 800f290:	e7e4      	b.n	800f25c <_vfiprintf_r+0x208>
 800f292:	bf00      	nop
 800f294:	0801045c 	.word	0x0801045c
 800f298:	0801047c 	.word	0x0801047c
 800f29c:	0801043c 	.word	0x0801043c
 800f2a0:	080102e4 	.word	0x080102e4
 800f2a4:	080102ee 	.word	0x080102ee
 800f2a8:	0800ce0d 	.word	0x0800ce0d
 800f2ac:	0800f031 	.word	0x0800f031
 800f2b0:	080102ea 	.word	0x080102ea

0800f2b4 <__swbuf_r>:
 800f2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b6:	460e      	mov	r6, r1
 800f2b8:	4614      	mov	r4, r2
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	b118      	cbz	r0, 800f2c6 <__swbuf_r+0x12>
 800f2be:	6983      	ldr	r3, [r0, #24]
 800f2c0:	b90b      	cbnz	r3, 800f2c6 <__swbuf_r+0x12>
 800f2c2:	f000 f9e7 	bl	800f694 <__sinit>
 800f2c6:	4b21      	ldr	r3, [pc, #132]	; (800f34c <__swbuf_r+0x98>)
 800f2c8:	429c      	cmp	r4, r3
 800f2ca:	d12b      	bne.n	800f324 <__swbuf_r+0x70>
 800f2cc:	686c      	ldr	r4, [r5, #4]
 800f2ce:	69a3      	ldr	r3, [r4, #24]
 800f2d0:	60a3      	str	r3, [r4, #8]
 800f2d2:	89a3      	ldrh	r3, [r4, #12]
 800f2d4:	071a      	lsls	r2, r3, #28
 800f2d6:	d52f      	bpl.n	800f338 <__swbuf_r+0x84>
 800f2d8:	6923      	ldr	r3, [r4, #16]
 800f2da:	b36b      	cbz	r3, 800f338 <__swbuf_r+0x84>
 800f2dc:	6923      	ldr	r3, [r4, #16]
 800f2de:	6820      	ldr	r0, [r4, #0]
 800f2e0:	1ac0      	subs	r0, r0, r3
 800f2e2:	6963      	ldr	r3, [r4, #20]
 800f2e4:	b2f6      	uxtb	r6, r6
 800f2e6:	4283      	cmp	r3, r0
 800f2e8:	4637      	mov	r7, r6
 800f2ea:	dc04      	bgt.n	800f2f6 <__swbuf_r+0x42>
 800f2ec:	4621      	mov	r1, r4
 800f2ee:	4628      	mov	r0, r5
 800f2f0:	f000 f93c 	bl	800f56c <_fflush_r>
 800f2f4:	bb30      	cbnz	r0, 800f344 <__swbuf_r+0x90>
 800f2f6:	68a3      	ldr	r3, [r4, #8]
 800f2f8:	3b01      	subs	r3, #1
 800f2fa:	60a3      	str	r3, [r4, #8]
 800f2fc:	6823      	ldr	r3, [r4, #0]
 800f2fe:	1c5a      	adds	r2, r3, #1
 800f300:	6022      	str	r2, [r4, #0]
 800f302:	701e      	strb	r6, [r3, #0]
 800f304:	6963      	ldr	r3, [r4, #20]
 800f306:	3001      	adds	r0, #1
 800f308:	4283      	cmp	r3, r0
 800f30a:	d004      	beq.n	800f316 <__swbuf_r+0x62>
 800f30c:	89a3      	ldrh	r3, [r4, #12]
 800f30e:	07db      	lsls	r3, r3, #31
 800f310:	d506      	bpl.n	800f320 <__swbuf_r+0x6c>
 800f312:	2e0a      	cmp	r6, #10
 800f314:	d104      	bne.n	800f320 <__swbuf_r+0x6c>
 800f316:	4621      	mov	r1, r4
 800f318:	4628      	mov	r0, r5
 800f31a:	f000 f927 	bl	800f56c <_fflush_r>
 800f31e:	b988      	cbnz	r0, 800f344 <__swbuf_r+0x90>
 800f320:	4638      	mov	r0, r7
 800f322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f324:	4b0a      	ldr	r3, [pc, #40]	; (800f350 <__swbuf_r+0x9c>)
 800f326:	429c      	cmp	r4, r3
 800f328:	d101      	bne.n	800f32e <__swbuf_r+0x7a>
 800f32a:	68ac      	ldr	r4, [r5, #8]
 800f32c:	e7cf      	b.n	800f2ce <__swbuf_r+0x1a>
 800f32e:	4b09      	ldr	r3, [pc, #36]	; (800f354 <__swbuf_r+0xa0>)
 800f330:	429c      	cmp	r4, r3
 800f332:	bf08      	it	eq
 800f334:	68ec      	ldreq	r4, [r5, #12]
 800f336:	e7ca      	b.n	800f2ce <__swbuf_r+0x1a>
 800f338:	4621      	mov	r1, r4
 800f33a:	4628      	mov	r0, r5
 800f33c:	f000 f81a 	bl	800f374 <__swsetup_r>
 800f340:	2800      	cmp	r0, #0
 800f342:	d0cb      	beq.n	800f2dc <__swbuf_r+0x28>
 800f344:	f04f 37ff 	mov.w	r7, #4294967295
 800f348:	e7ea      	b.n	800f320 <__swbuf_r+0x6c>
 800f34a:	bf00      	nop
 800f34c:	0801045c 	.word	0x0801045c
 800f350:	0801047c 	.word	0x0801047c
 800f354:	0801043c 	.word	0x0801043c

0800f358 <__ascii_wctomb>:
 800f358:	b149      	cbz	r1, 800f36e <__ascii_wctomb+0x16>
 800f35a:	2aff      	cmp	r2, #255	; 0xff
 800f35c:	bf85      	ittet	hi
 800f35e:	238a      	movhi	r3, #138	; 0x8a
 800f360:	6003      	strhi	r3, [r0, #0]
 800f362:	700a      	strbls	r2, [r1, #0]
 800f364:	f04f 30ff 	movhi.w	r0, #4294967295
 800f368:	bf98      	it	ls
 800f36a:	2001      	movls	r0, #1
 800f36c:	4770      	bx	lr
 800f36e:	4608      	mov	r0, r1
 800f370:	4770      	bx	lr
	...

0800f374 <__swsetup_r>:
 800f374:	4b32      	ldr	r3, [pc, #200]	; (800f440 <__swsetup_r+0xcc>)
 800f376:	b570      	push	{r4, r5, r6, lr}
 800f378:	681d      	ldr	r5, [r3, #0]
 800f37a:	4606      	mov	r6, r0
 800f37c:	460c      	mov	r4, r1
 800f37e:	b125      	cbz	r5, 800f38a <__swsetup_r+0x16>
 800f380:	69ab      	ldr	r3, [r5, #24]
 800f382:	b913      	cbnz	r3, 800f38a <__swsetup_r+0x16>
 800f384:	4628      	mov	r0, r5
 800f386:	f000 f985 	bl	800f694 <__sinit>
 800f38a:	4b2e      	ldr	r3, [pc, #184]	; (800f444 <__swsetup_r+0xd0>)
 800f38c:	429c      	cmp	r4, r3
 800f38e:	d10f      	bne.n	800f3b0 <__swsetup_r+0x3c>
 800f390:	686c      	ldr	r4, [r5, #4]
 800f392:	89a3      	ldrh	r3, [r4, #12]
 800f394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f398:	0719      	lsls	r1, r3, #28
 800f39a:	d42c      	bmi.n	800f3f6 <__swsetup_r+0x82>
 800f39c:	06dd      	lsls	r5, r3, #27
 800f39e:	d411      	bmi.n	800f3c4 <__swsetup_r+0x50>
 800f3a0:	2309      	movs	r3, #9
 800f3a2:	6033      	str	r3, [r6, #0]
 800f3a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f3a8:	81a3      	strh	r3, [r4, #12]
 800f3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ae:	e03e      	b.n	800f42e <__swsetup_r+0xba>
 800f3b0:	4b25      	ldr	r3, [pc, #148]	; (800f448 <__swsetup_r+0xd4>)
 800f3b2:	429c      	cmp	r4, r3
 800f3b4:	d101      	bne.n	800f3ba <__swsetup_r+0x46>
 800f3b6:	68ac      	ldr	r4, [r5, #8]
 800f3b8:	e7eb      	b.n	800f392 <__swsetup_r+0x1e>
 800f3ba:	4b24      	ldr	r3, [pc, #144]	; (800f44c <__swsetup_r+0xd8>)
 800f3bc:	429c      	cmp	r4, r3
 800f3be:	bf08      	it	eq
 800f3c0:	68ec      	ldreq	r4, [r5, #12]
 800f3c2:	e7e6      	b.n	800f392 <__swsetup_r+0x1e>
 800f3c4:	0758      	lsls	r0, r3, #29
 800f3c6:	d512      	bpl.n	800f3ee <__swsetup_r+0x7a>
 800f3c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3ca:	b141      	cbz	r1, 800f3de <__swsetup_r+0x6a>
 800f3cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3d0:	4299      	cmp	r1, r3
 800f3d2:	d002      	beq.n	800f3da <__swsetup_r+0x66>
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	f7ff fb31 	bl	800ea3c <_free_r>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	6363      	str	r3, [r4, #52]	; 0x34
 800f3de:	89a3      	ldrh	r3, [r4, #12]
 800f3e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f3e4:	81a3      	strh	r3, [r4, #12]
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	6063      	str	r3, [r4, #4]
 800f3ea:	6923      	ldr	r3, [r4, #16]
 800f3ec:	6023      	str	r3, [r4, #0]
 800f3ee:	89a3      	ldrh	r3, [r4, #12]
 800f3f0:	f043 0308 	orr.w	r3, r3, #8
 800f3f4:	81a3      	strh	r3, [r4, #12]
 800f3f6:	6923      	ldr	r3, [r4, #16]
 800f3f8:	b94b      	cbnz	r3, 800f40e <__swsetup_r+0x9a>
 800f3fa:	89a3      	ldrh	r3, [r4, #12]
 800f3fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f404:	d003      	beq.n	800f40e <__swsetup_r+0x9a>
 800f406:	4621      	mov	r1, r4
 800f408:	4630      	mov	r0, r6
 800f40a:	f000 fa09 	bl	800f820 <__smakebuf_r>
 800f40e:	89a0      	ldrh	r0, [r4, #12]
 800f410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f414:	f010 0301 	ands.w	r3, r0, #1
 800f418:	d00a      	beq.n	800f430 <__swsetup_r+0xbc>
 800f41a:	2300      	movs	r3, #0
 800f41c:	60a3      	str	r3, [r4, #8]
 800f41e:	6963      	ldr	r3, [r4, #20]
 800f420:	425b      	negs	r3, r3
 800f422:	61a3      	str	r3, [r4, #24]
 800f424:	6923      	ldr	r3, [r4, #16]
 800f426:	b943      	cbnz	r3, 800f43a <__swsetup_r+0xc6>
 800f428:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f42c:	d1ba      	bne.n	800f3a4 <__swsetup_r+0x30>
 800f42e:	bd70      	pop	{r4, r5, r6, pc}
 800f430:	0781      	lsls	r1, r0, #30
 800f432:	bf58      	it	pl
 800f434:	6963      	ldrpl	r3, [r4, #20]
 800f436:	60a3      	str	r3, [r4, #8]
 800f438:	e7f4      	b.n	800f424 <__swsetup_r+0xb0>
 800f43a:	2000      	movs	r0, #0
 800f43c:	e7f7      	b.n	800f42e <__swsetup_r+0xba>
 800f43e:	bf00      	nop
 800f440:	2000010c 	.word	0x2000010c
 800f444:	0801045c 	.word	0x0801045c
 800f448:	0801047c 	.word	0x0801047c
 800f44c:	0801043c 	.word	0x0801043c

0800f450 <abort>:
 800f450:	b508      	push	{r3, lr}
 800f452:	2006      	movs	r0, #6
 800f454:	f000 fa54 	bl	800f900 <raise>
 800f458:	2001      	movs	r0, #1
 800f45a:	f7f2 fc87 	bl	8001d6c <_exit>
	...

0800f460 <__sflush_r>:
 800f460:	898a      	ldrh	r2, [r1, #12]
 800f462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f466:	4605      	mov	r5, r0
 800f468:	0710      	lsls	r0, r2, #28
 800f46a:	460c      	mov	r4, r1
 800f46c:	d458      	bmi.n	800f520 <__sflush_r+0xc0>
 800f46e:	684b      	ldr	r3, [r1, #4]
 800f470:	2b00      	cmp	r3, #0
 800f472:	dc05      	bgt.n	800f480 <__sflush_r+0x20>
 800f474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f476:	2b00      	cmp	r3, #0
 800f478:	dc02      	bgt.n	800f480 <__sflush_r+0x20>
 800f47a:	2000      	movs	r0, #0
 800f47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f482:	2e00      	cmp	r6, #0
 800f484:	d0f9      	beq.n	800f47a <__sflush_r+0x1a>
 800f486:	2300      	movs	r3, #0
 800f488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f48c:	682f      	ldr	r7, [r5, #0]
 800f48e:	602b      	str	r3, [r5, #0]
 800f490:	d032      	beq.n	800f4f8 <__sflush_r+0x98>
 800f492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f494:	89a3      	ldrh	r3, [r4, #12]
 800f496:	075a      	lsls	r2, r3, #29
 800f498:	d505      	bpl.n	800f4a6 <__sflush_r+0x46>
 800f49a:	6863      	ldr	r3, [r4, #4]
 800f49c:	1ac0      	subs	r0, r0, r3
 800f49e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4a0:	b10b      	cbz	r3, 800f4a6 <__sflush_r+0x46>
 800f4a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f4a4:	1ac0      	subs	r0, r0, r3
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4ac:	6a21      	ldr	r1, [r4, #32]
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	47b0      	blx	r6
 800f4b2:	1c43      	adds	r3, r0, #1
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	d106      	bne.n	800f4c6 <__sflush_r+0x66>
 800f4b8:	6829      	ldr	r1, [r5, #0]
 800f4ba:	291d      	cmp	r1, #29
 800f4bc:	d82c      	bhi.n	800f518 <__sflush_r+0xb8>
 800f4be:	4a2a      	ldr	r2, [pc, #168]	; (800f568 <__sflush_r+0x108>)
 800f4c0:	40ca      	lsrs	r2, r1
 800f4c2:	07d6      	lsls	r6, r2, #31
 800f4c4:	d528      	bpl.n	800f518 <__sflush_r+0xb8>
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	6062      	str	r2, [r4, #4]
 800f4ca:	04d9      	lsls	r1, r3, #19
 800f4cc:	6922      	ldr	r2, [r4, #16]
 800f4ce:	6022      	str	r2, [r4, #0]
 800f4d0:	d504      	bpl.n	800f4dc <__sflush_r+0x7c>
 800f4d2:	1c42      	adds	r2, r0, #1
 800f4d4:	d101      	bne.n	800f4da <__sflush_r+0x7a>
 800f4d6:	682b      	ldr	r3, [r5, #0]
 800f4d8:	b903      	cbnz	r3, 800f4dc <__sflush_r+0x7c>
 800f4da:	6560      	str	r0, [r4, #84]	; 0x54
 800f4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4de:	602f      	str	r7, [r5, #0]
 800f4e0:	2900      	cmp	r1, #0
 800f4e2:	d0ca      	beq.n	800f47a <__sflush_r+0x1a>
 800f4e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4e8:	4299      	cmp	r1, r3
 800f4ea:	d002      	beq.n	800f4f2 <__sflush_r+0x92>
 800f4ec:	4628      	mov	r0, r5
 800f4ee:	f7ff faa5 	bl	800ea3c <_free_r>
 800f4f2:	2000      	movs	r0, #0
 800f4f4:	6360      	str	r0, [r4, #52]	; 0x34
 800f4f6:	e7c1      	b.n	800f47c <__sflush_r+0x1c>
 800f4f8:	6a21      	ldr	r1, [r4, #32]
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	47b0      	blx	r6
 800f500:	1c41      	adds	r1, r0, #1
 800f502:	d1c7      	bne.n	800f494 <__sflush_r+0x34>
 800f504:	682b      	ldr	r3, [r5, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d0c4      	beq.n	800f494 <__sflush_r+0x34>
 800f50a:	2b1d      	cmp	r3, #29
 800f50c:	d001      	beq.n	800f512 <__sflush_r+0xb2>
 800f50e:	2b16      	cmp	r3, #22
 800f510:	d101      	bne.n	800f516 <__sflush_r+0xb6>
 800f512:	602f      	str	r7, [r5, #0]
 800f514:	e7b1      	b.n	800f47a <__sflush_r+0x1a>
 800f516:	89a3      	ldrh	r3, [r4, #12]
 800f518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f51c:	81a3      	strh	r3, [r4, #12]
 800f51e:	e7ad      	b.n	800f47c <__sflush_r+0x1c>
 800f520:	690f      	ldr	r7, [r1, #16]
 800f522:	2f00      	cmp	r7, #0
 800f524:	d0a9      	beq.n	800f47a <__sflush_r+0x1a>
 800f526:	0793      	lsls	r3, r2, #30
 800f528:	680e      	ldr	r6, [r1, #0]
 800f52a:	bf08      	it	eq
 800f52c:	694b      	ldreq	r3, [r1, #20]
 800f52e:	600f      	str	r7, [r1, #0]
 800f530:	bf18      	it	ne
 800f532:	2300      	movne	r3, #0
 800f534:	eba6 0807 	sub.w	r8, r6, r7
 800f538:	608b      	str	r3, [r1, #8]
 800f53a:	f1b8 0f00 	cmp.w	r8, #0
 800f53e:	dd9c      	ble.n	800f47a <__sflush_r+0x1a>
 800f540:	6a21      	ldr	r1, [r4, #32]
 800f542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f544:	4643      	mov	r3, r8
 800f546:	463a      	mov	r2, r7
 800f548:	4628      	mov	r0, r5
 800f54a:	47b0      	blx	r6
 800f54c:	2800      	cmp	r0, #0
 800f54e:	dc06      	bgt.n	800f55e <__sflush_r+0xfe>
 800f550:	89a3      	ldrh	r3, [r4, #12]
 800f552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f556:	81a3      	strh	r3, [r4, #12]
 800f558:	f04f 30ff 	mov.w	r0, #4294967295
 800f55c:	e78e      	b.n	800f47c <__sflush_r+0x1c>
 800f55e:	4407      	add	r7, r0
 800f560:	eba8 0800 	sub.w	r8, r8, r0
 800f564:	e7e9      	b.n	800f53a <__sflush_r+0xda>
 800f566:	bf00      	nop
 800f568:	20400001 	.word	0x20400001

0800f56c <_fflush_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	690b      	ldr	r3, [r1, #16]
 800f570:	4605      	mov	r5, r0
 800f572:	460c      	mov	r4, r1
 800f574:	b913      	cbnz	r3, 800f57c <_fflush_r+0x10>
 800f576:	2500      	movs	r5, #0
 800f578:	4628      	mov	r0, r5
 800f57a:	bd38      	pop	{r3, r4, r5, pc}
 800f57c:	b118      	cbz	r0, 800f586 <_fflush_r+0x1a>
 800f57e:	6983      	ldr	r3, [r0, #24]
 800f580:	b90b      	cbnz	r3, 800f586 <_fflush_r+0x1a>
 800f582:	f000 f887 	bl	800f694 <__sinit>
 800f586:	4b14      	ldr	r3, [pc, #80]	; (800f5d8 <_fflush_r+0x6c>)
 800f588:	429c      	cmp	r4, r3
 800f58a:	d11b      	bne.n	800f5c4 <_fflush_r+0x58>
 800f58c:	686c      	ldr	r4, [r5, #4]
 800f58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d0ef      	beq.n	800f576 <_fflush_r+0xa>
 800f596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f598:	07d0      	lsls	r0, r2, #31
 800f59a:	d404      	bmi.n	800f5a6 <_fflush_r+0x3a>
 800f59c:	0599      	lsls	r1, r3, #22
 800f59e:	d402      	bmi.n	800f5a6 <_fflush_r+0x3a>
 800f5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5a2:	f000 f915 	bl	800f7d0 <__retarget_lock_acquire_recursive>
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	4621      	mov	r1, r4
 800f5aa:	f7ff ff59 	bl	800f460 <__sflush_r>
 800f5ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5b0:	07da      	lsls	r2, r3, #31
 800f5b2:	4605      	mov	r5, r0
 800f5b4:	d4e0      	bmi.n	800f578 <_fflush_r+0xc>
 800f5b6:	89a3      	ldrh	r3, [r4, #12]
 800f5b8:	059b      	lsls	r3, r3, #22
 800f5ba:	d4dd      	bmi.n	800f578 <_fflush_r+0xc>
 800f5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5be:	f000 f908 	bl	800f7d2 <__retarget_lock_release_recursive>
 800f5c2:	e7d9      	b.n	800f578 <_fflush_r+0xc>
 800f5c4:	4b05      	ldr	r3, [pc, #20]	; (800f5dc <_fflush_r+0x70>)
 800f5c6:	429c      	cmp	r4, r3
 800f5c8:	d101      	bne.n	800f5ce <_fflush_r+0x62>
 800f5ca:	68ac      	ldr	r4, [r5, #8]
 800f5cc:	e7df      	b.n	800f58e <_fflush_r+0x22>
 800f5ce:	4b04      	ldr	r3, [pc, #16]	; (800f5e0 <_fflush_r+0x74>)
 800f5d0:	429c      	cmp	r4, r3
 800f5d2:	bf08      	it	eq
 800f5d4:	68ec      	ldreq	r4, [r5, #12]
 800f5d6:	e7da      	b.n	800f58e <_fflush_r+0x22>
 800f5d8:	0801045c 	.word	0x0801045c
 800f5dc:	0801047c 	.word	0x0801047c
 800f5e0:	0801043c 	.word	0x0801043c

0800f5e4 <std>:
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	b510      	push	{r4, lr}
 800f5e8:	4604      	mov	r4, r0
 800f5ea:	e9c0 3300 	strd	r3, r3, [r0]
 800f5ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5f2:	6083      	str	r3, [r0, #8]
 800f5f4:	8181      	strh	r1, [r0, #12]
 800f5f6:	6643      	str	r3, [r0, #100]	; 0x64
 800f5f8:	81c2      	strh	r2, [r0, #14]
 800f5fa:	6183      	str	r3, [r0, #24]
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	2208      	movs	r2, #8
 800f600:	305c      	adds	r0, #92	; 0x5c
 800f602:	f7fd fb5b 	bl	800ccbc <memset>
 800f606:	4b05      	ldr	r3, [pc, #20]	; (800f61c <std+0x38>)
 800f608:	6263      	str	r3, [r4, #36]	; 0x24
 800f60a:	4b05      	ldr	r3, [pc, #20]	; (800f620 <std+0x3c>)
 800f60c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f60e:	4b05      	ldr	r3, [pc, #20]	; (800f624 <std+0x40>)
 800f610:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f612:	4b05      	ldr	r3, [pc, #20]	; (800f628 <std+0x44>)
 800f614:	6224      	str	r4, [r4, #32]
 800f616:	6323      	str	r3, [r4, #48]	; 0x30
 800f618:	bd10      	pop	{r4, pc}
 800f61a:	bf00      	nop
 800f61c:	0800f939 	.word	0x0800f939
 800f620:	0800f95b 	.word	0x0800f95b
 800f624:	0800f993 	.word	0x0800f993
 800f628:	0800f9b7 	.word	0x0800f9b7

0800f62c <_cleanup_r>:
 800f62c:	4901      	ldr	r1, [pc, #4]	; (800f634 <_cleanup_r+0x8>)
 800f62e:	f000 b8af 	b.w	800f790 <_fwalk_reent>
 800f632:	bf00      	nop
 800f634:	0800f56d 	.word	0x0800f56d

0800f638 <__sfmoreglue>:
 800f638:	b570      	push	{r4, r5, r6, lr}
 800f63a:	2268      	movs	r2, #104	; 0x68
 800f63c:	1e4d      	subs	r5, r1, #1
 800f63e:	4355      	muls	r5, r2
 800f640:	460e      	mov	r6, r1
 800f642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f646:	f7ff fa65 	bl	800eb14 <_malloc_r>
 800f64a:	4604      	mov	r4, r0
 800f64c:	b140      	cbz	r0, 800f660 <__sfmoreglue+0x28>
 800f64e:	2100      	movs	r1, #0
 800f650:	e9c0 1600 	strd	r1, r6, [r0]
 800f654:	300c      	adds	r0, #12
 800f656:	60a0      	str	r0, [r4, #8]
 800f658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f65c:	f7fd fb2e 	bl	800ccbc <memset>
 800f660:	4620      	mov	r0, r4
 800f662:	bd70      	pop	{r4, r5, r6, pc}

0800f664 <__sfp_lock_acquire>:
 800f664:	4801      	ldr	r0, [pc, #4]	; (800f66c <__sfp_lock_acquire+0x8>)
 800f666:	f000 b8b3 	b.w	800f7d0 <__retarget_lock_acquire_recursive>
 800f66a:	bf00      	nop
 800f66c:	200021dd 	.word	0x200021dd

0800f670 <__sfp_lock_release>:
 800f670:	4801      	ldr	r0, [pc, #4]	; (800f678 <__sfp_lock_release+0x8>)
 800f672:	f000 b8ae 	b.w	800f7d2 <__retarget_lock_release_recursive>
 800f676:	bf00      	nop
 800f678:	200021dd 	.word	0x200021dd

0800f67c <__sinit_lock_acquire>:
 800f67c:	4801      	ldr	r0, [pc, #4]	; (800f684 <__sinit_lock_acquire+0x8>)
 800f67e:	f000 b8a7 	b.w	800f7d0 <__retarget_lock_acquire_recursive>
 800f682:	bf00      	nop
 800f684:	200021de 	.word	0x200021de

0800f688 <__sinit_lock_release>:
 800f688:	4801      	ldr	r0, [pc, #4]	; (800f690 <__sinit_lock_release+0x8>)
 800f68a:	f000 b8a2 	b.w	800f7d2 <__retarget_lock_release_recursive>
 800f68e:	bf00      	nop
 800f690:	200021de 	.word	0x200021de

0800f694 <__sinit>:
 800f694:	b510      	push	{r4, lr}
 800f696:	4604      	mov	r4, r0
 800f698:	f7ff fff0 	bl	800f67c <__sinit_lock_acquire>
 800f69c:	69a3      	ldr	r3, [r4, #24]
 800f69e:	b11b      	cbz	r3, 800f6a8 <__sinit+0x14>
 800f6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6a4:	f7ff bff0 	b.w	800f688 <__sinit_lock_release>
 800f6a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f6ac:	6523      	str	r3, [r4, #80]	; 0x50
 800f6ae:	4b13      	ldr	r3, [pc, #76]	; (800f6fc <__sinit+0x68>)
 800f6b0:	4a13      	ldr	r2, [pc, #76]	; (800f700 <__sinit+0x6c>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f6b6:	42a3      	cmp	r3, r4
 800f6b8:	bf04      	itt	eq
 800f6ba:	2301      	moveq	r3, #1
 800f6bc:	61a3      	streq	r3, [r4, #24]
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f000 f820 	bl	800f704 <__sfp>
 800f6c4:	6060      	str	r0, [r4, #4]
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f000 f81c 	bl	800f704 <__sfp>
 800f6cc:	60a0      	str	r0, [r4, #8]
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f000 f818 	bl	800f704 <__sfp>
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	60e0      	str	r0, [r4, #12]
 800f6d8:	2104      	movs	r1, #4
 800f6da:	6860      	ldr	r0, [r4, #4]
 800f6dc:	f7ff ff82 	bl	800f5e4 <std>
 800f6e0:	68a0      	ldr	r0, [r4, #8]
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	2109      	movs	r1, #9
 800f6e6:	f7ff ff7d 	bl	800f5e4 <std>
 800f6ea:	68e0      	ldr	r0, [r4, #12]
 800f6ec:	2202      	movs	r2, #2
 800f6ee:	2112      	movs	r1, #18
 800f6f0:	f7ff ff78 	bl	800f5e4 <std>
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	61a3      	str	r3, [r4, #24]
 800f6f8:	e7d2      	b.n	800f6a0 <__sinit+0xc>
 800f6fa:	bf00      	nop
 800f6fc:	080100c0 	.word	0x080100c0
 800f700:	0800f62d 	.word	0x0800f62d

0800f704 <__sfp>:
 800f704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f706:	4607      	mov	r7, r0
 800f708:	f7ff ffac 	bl	800f664 <__sfp_lock_acquire>
 800f70c:	4b1e      	ldr	r3, [pc, #120]	; (800f788 <__sfp+0x84>)
 800f70e:	681e      	ldr	r6, [r3, #0]
 800f710:	69b3      	ldr	r3, [r6, #24]
 800f712:	b913      	cbnz	r3, 800f71a <__sfp+0x16>
 800f714:	4630      	mov	r0, r6
 800f716:	f7ff ffbd 	bl	800f694 <__sinit>
 800f71a:	3648      	adds	r6, #72	; 0x48
 800f71c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f720:	3b01      	subs	r3, #1
 800f722:	d503      	bpl.n	800f72c <__sfp+0x28>
 800f724:	6833      	ldr	r3, [r6, #0]
 800f726:	b30b      	cbz	r3, 800f76c <__sfp+0x68>
 800f728:	6836      	ldr	r6, [r6, #0]
 800f72a:	e7f7      	b.n	800f71c <__sfp+0x18>
 800f72c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f730:	b9d5      	cbnz	r5, 800f768 <__sfp+0x64>
 800f732:	4b16      	ldr	r3, [pc, #88]	; (800f78c <__sfp+0x88>)
 800f734:	60e3      	str	r3, [r4, #12]
 800f736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f73a:	6665      	str	r5, [r4, #100]	; 0x64
 800f73c:	f000 f847 	bl	800f7ce <__retarget_lock_init_recursive>
 800f740:	f7ff ff96 	bl	800f670 <__sfp_lock_release>
 800f744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f74c:	6025      	str	r5, [r4, #0]
 800f74e:	61a5      	str	r5, [r4, #24]
 800f750:	2208      	movs	r2, #8
 800f752:	4629      	mov	r1, r5
 800f754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f758:	f7fd fab0 	bl	800ccbc <memset>
 800f75c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f764:	4620      	mov	r0, r4
 800f766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f768:	3468      	adds	r4, #104	; 0x68
 800f76a:	e7d9      	b.n	800f720 <__sfp+0x1c>
 800f76c:	2104      	movs	r1, #4
 800f76e:	4638      	mov	r0, r7
 800f770:	f7ff ff62 	bl	800f638 <__sfmoreglue>
 800f774:	4604      	mov	r4, r0
 800f776:	6030      	str	r0, [r6, #0]
 800f778:	2800      	cmp	r0, #0
 800f77a:	d1d5      	bne.n	800f728 <__sfp+0x24>
 800f77c:	f7ff ff78 	bl	800f670 <__sfp_lock_release>
 800f780:	230c      	movs	r3, #12
 800f782:	603b      	str	r3, [r7, #0]
 800f784:	e7ee      	b.n	800f764 <__sfp+0x60>
 800f786:	bf00      	nop
 800f788:	080100c0 	.word	0x080100c0
 800f78c:	ffff0001 	.word	0xffff0001

0800f790 <_fwalk_reent>:
 800f790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f794:	4606      	mov	r6, r0
 800f796:	4688      	mov	r8, r1
 800f798:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f79c:	2700      	movs	r7, #0
 800f79e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f7a2:	f1b9 0901 	subs.w	r9, r9, #1
 800f7a6:	d505      	bpl.n	800f7b4 <_fwalk_reent+0x24>
 800f7a8:	6824      	ldr	r4, [r4, #0]
 800f7aa:	2c00      	cmp	r4, #0
 800f7ac:	d1f7      	bne.n	800f79e <_fwalk_reent+0xe>
 800f7ae:	4638      	mov	r0, r7
 800f7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7b4:	89ab      	ldrh	r3, [r5, #12]
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d907      	bls.n	800f7ca <_fwalk_reent+0x3a>
 800f7ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	d003      	beq.n	800f7ca <_fwalk_reent+0x3a>
 800f7c2:	4629      	mov	r1, r5
 800f7c4:	4630      	mov	r0, r6
 800f7c6:	47c0      	blx	r8
 800f7c8:	4307      	orrs	r7, r0
 800f7ca:	3568      	adds	r5, #104	; 0x68
 800f7cc:	e7e9      	b.n	800f7a2 <_fwalk_reent+0x12>

0800f7ce <__retarget_lock_init_recursive>:
 800f7ce:	4770      	bx	lr

0800f7d0 <__retarget_lock_acquire_recursive>:
 800f7d0:	4770      	bx	lr

0800f7d2 <__retarget_lock_release_recursive>:
 800f7d2:	4770      	bx	lr

0800f7d4 <__swhatbuf_r>:
 800f7d4:	b570      	push	{r4, r5, r6, lr}
 800f7d6:	460e      	mov	r6, r1
 800f7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7dc:	2900      	cmp	r1, #0
 800f7de:	b096      	sub	sp, #88	; 0x58
 800f7e0:	4614      	mov	r4, r2
 800f7e2:	461d      	mov	r5, r3
 800f7e4:	da08      	bge.n	800f7f8 <__swhatbuf_r+0x24>
 800f7e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	602a      	str	r2, [r5, #0]
 800f7ee:	061a      	lsls	r2, r3, #24
 800f7f0:	d410      	bmi.n	800f814 <__swhatbuf_r+0x40>
 800f7f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7f6:	e00e      	b.n	800f816 <__swhatbuf_r+0x42>
 800f7f8:	466a      	mov	r2, sp
 800f7fa:	f000 f903 	bl	800fa04 <_fstat_r>
 800f7fe:	2800      	cmp	r0, #0
 800f800:	dbf1      	blt.n	800f7e6 <__swhatbuf_r+0x12>
 800f802:	9a01      	ldr	r2, [sp, #4]
 800f804:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f808:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f80c:	425a      	negs	r2, r3
 800f80e:	415a      	adcs	r2, r3
 800f810:	602a      	str	r2, [r5, #0]
 800f812:	e7ee      	b.n	800f7f2 <__swhatbuf_r+0x1e>
 800f814:	2340      	movs	r3, #64	; 0x40
 800f816:	2000      	movs	r0, #0
 800f818:	6023      	str	r3, [r4, #0]
 800f81a:	b016      	add	sp, #88	; 0x58
 800f81c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f820 <__smakebuf_r>:
 800f820:	898b      	ldrh	r3, [r1, #12]
 800f822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f824:	079d      	lsls	r5, r3, #30
 800f826:	4606      	mov	r6, r0
 800f828:	460c      	mov	r4, r1
 800f82a:	d507      	bpl.n	800f83c <__smakebuf_r+0x1c>
 800f82c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f830:	6023      	str	r3, [r4, #0]
 800f832:	6123      	str	r3, [r4, #16]
 800f834:	2301      	movs	r3, #1
 800f836:	6163      	str	r3, [r4, #20]
 800f838:	b002      	add	sp, #8
 800f83a:	bd70      	pop	{r4, r5, r6, pc}
 800f83c:	ab01      	add	r3, sp, #4
 800f83e:	466a      	mov	r2, sp
 800f840:	f7ff ffc8 	bl	800f7d4 <__swhatbuf_r>
 800f844:	9900      	ldr	r1, [sp, #0]
 800f846:	4605      	mov	r5, r0
 800f848:	4630      	mov	r0, r6
 800f84a:	f7ff f963 	bl	800eb14 <_malloc_r>
 800f84e:	b948      	cbnz	r0, 800f864 <__smakebuf_r+0x44>
 800f850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f854:	059a      	lsls	r2, r3, #22
 800f856:	d4ef      	bmi.n	800f838 <__smakebuf_r+0x18>
 800f858:	f023 0303 	bic.w	r3, r3, #3
 800f85c:	f043 0302 	orr.w	r3, r3, #2
 800f860:	81a3      	strh	r3, [r4, #12]
 800f862:	e7e3      	b.n	800f82c <__smakebuf_r+0xc>
 800f864:	4b0d      	ldr	r3, [pc, #52]	; (800f89c <__smakebuf_r+0x7c>)
 800f866:	62b3      	str	r3, [r6, #40]	; 0x28
 800f868:	89a3      	ldrh	r3, [r4, #12]
 800f86a:	6020      	str	r0, [r4, #0]
 800f86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f870:	81a3      	strh	r3, [r4, #12]
 800f872:	9b00      	ldr	r3, [sp, #0]
 800f874:	6163      	str	r3, [r4, #20]
 800f876:	9b01      	ldr	r3, [sp, #4]
 800f878:	6120      	str	r0, [r4, #16]
 800f87a:	b15b      	cbz	r3, 800f894 <__smakebuf_r+0x74>
 800f87c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f880:	4630      	mov	r0, r6
 800f882:	f000 f8d1 	bl	800fa28 <_isatty_r>
 800f886:	b128      	cbz	r0, 800f894 <__smakebuf_r+0x74>
 800f888:	89a3      	ldrh	r3, [r4, #12]
 800f88a:	f023 0303 	bic.w	r3, r3, #3
 800f88e:	f043 0301 	orr.w	r3, r3, #1
 800f892:	81a3      	strh	r3, [r4, #12]
 800f894:	89a0      	ldrh	r0, [r4, #12]
 800f896:	4305      	orrs	r5, r0
 800f898:	81a5      	strh	r5, [r4, #12]
 800f89a:	e7cd      	b.n	800f838 <__smakebuf_r+0x18>
 800f89c:	0800f62d 	.word	0x0800f62d

0800f8a0 <_malloc_usable_size_r>:
 800f8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8a4:	1f18      	subs	r0, r3, #4
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	bfbc      	itt	lt
 800f8aa:	580b      	ldrlt	r3, [r1, r0]
 800f8ac:	18c0      	addlt	r0, r0, r3
 800f8ae:	4770      	bx	lr

0800f8b0 <_raise_r>:
 800f8b0:	291f      	cmp	r1, #31
 800f8b2:	b538      	push	{r3, r4, r5, lr}
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	460d      	mov	r5, r1
 800f8b8:	d904      	bls.n	800f8c4 <_raise_r+0x14>
 800f8ba:	2316      	movs	r3, #22
 800f8bc:	6003      	str	r3, [r0, #0]
 800f8be:	f04f 30ff 	mov.w	r0, #4294967295
 800f8c2:	bd38      	pop	{r3, r4, r5, pc}
 800f8c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f8c6:	b112      	cbz	r2, 800f8ce <_raise_r+0x1e>
 800f8c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8cc:	b94b      	cbnz	r3, 800f8e2 <_raise_r+0x32>
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f000 f830 	bl	800f934 <_getpid_r>
 800f8d4:	462a      	mov	r2, r5
 800f8d6:	4601      	mov	r1, r0
 800f8d8:	4620      	mov	r0, r4
 800f8da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8de:	f000 b817 	b.w	800f910 <_kill_r>
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	d00a      	beq.n	800f8fc <_raise_r+0x4c>
 800f8e6:	1c59      	adds	r1, r3, #1
 800f8e8:	d103      	bne.n	800f8f2 <_raise_r+0x42>
 800f8ea:	2316      	movs	r3, #22
 800f8ec:	6003      	str	r3, [r0, #0]
 800f8ee:	2001      	movs	r0, #1
 800f8f0:	e7e7      	b.n	800f8c2 <_raise_r+0x12>
 800f8f2:	2400      	movs	r4, #0
 800f8f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	4798      	blx	r3
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	e7e0      	b.n	800f8c2 <_raise_r+0x12>

0800f900 <raise>:
 800f900:	4b02      	ldr	r3, [pc, #8]	; (800f90c <raise+0xc>)
 800f902:	4601      	mov	r1, r0
 800f904:	6818      	ldr	r0, [r3, #0]
 800f906:	f7ff bfd3 	b.w	800f8b0 <_raise_r>
 800f90a:	bf00      	nop
 800f90c:	2000010c 	.word	0x2000010c

0800f910 <_kill_r>:
 800f910:	b538      	push	{r3, r4, r5, lr}
 800f912:	4d07      	ldr	r5, [pc, #28]	; (800f930 <_kill_r+0x20>)
 800f914:	2300      	movs	r3, #0
 800f916:	4604      	mov	r4, r0
 800f918:	4608      	mov	r0, r1
 800f91a:	4611      	mov	r1, r2
 800f91c:	602b      	str	r3, [r5, #0]
 800f91e:	f7f2 fa15 	bl	8001d4c <_kill>
 800f922:	1c43      	adds	r3, r0, #1
 800f924:	d102      	bne.n	800f92c <_kill_r+0x1c>
 800f926:	682b      	ldr	r3, [r5, #0]
 800f928:	b103      	cbz	r3, 800f92c <_kill_r+0x1c>
 800f92a:	6023      	str	r3, [r4, #0]
 800f92c:	bd38      	pop	{r3, r4, r5, pc}
 800f92e:	bf00      	nop
 800f930:	200021d8 	.word	0x200021d8

0800f934 <_getpid_r>:
 800f934:	f7f2 ba02 	b.w	8001d3c <_getpid>

0800f938 <__sread>:
 800f938:	b510      	push	{r4, lr}
 800f93a:	460c      	mov	r4, r1
 800f93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f940:	f000 f894 	bl	800fa6c <_read_r>
 800f944:	2800      	cmp	r0, #0
 800f946:	bfab      	itete	ge
 800f948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f94a:	89a3      	ldrhlt	r3, [r4, #12]
 800f94c:	181b      	addge	r3, r3, r0
 800f94e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f952:	bfac      	ite	ge
 800f954:	6563      	strge	r3, [r4, #84]	; 0x54
 800f956:	81a3      	strhlt	r3, [r4, #12]
 800f958:	bd10      	pop	{r4, pc}

0800f95a <__swrite>:
 800f95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f95e:	461f      	mov	r7, r3
 800f960:	898b      	ldrh	r3, [r1, #12]
 800f962:	05db      	lsls	r3, r3, #23
 800f964:	4605      	mov	r5, r0
 800f966:	460c      	mov	r4, r1
 800f968:	4616      	mov	r6, r2
 800f96a:	d505      	bpl.n	800f978 <__swrite+0x1e>
 800f96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f970:	2302      	movs	r3, #2
 800f972:	2200      	movs	r2, #0
 800f974:	f000 f868 	bl	800fa48 <_lseek_r>
 800f978:	89a3      	ldrh	r3, [r4, #12]
 800f97a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f97e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f982:	81a3      	strh	r3, [r4, #12]
 800f984:	4632      	mov	r2, r6
 800f986:	463b      	mov	r3, r7
 800f988:	4628      	mov	r0, r5
 800f98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f98e:	f000 b817 	b.w	800f9c0 <_write_r>

0800f992 <__sseek>:
 800f992:	b510      	push	{r4, lr}
 800f994:	460c      	mov	r4, r1
 800f996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f99a:	f000 f855 	bl	800fa48 <_lseek_r>
 800f99e:	1c43      	adds	r3, r0, #1
 800f9a0:	89a3      	ldrh	r3, [r4, #12]
 800f9a2:	bf15      	itete	ne
 800f9a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9ae:	81a3      	strheq	r3, [r4, #12]
 800f9b0:	bf18      	it	ne
 800f9b2:	81a3      	strhne	r3, [r4, #12]
 800f9b4:	bd10      	pop	{r4, pc}

0800f9b6 <__sclose>:
 800f9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ba:	f000 b813 	b.w	800f9e4 <_close_r>
	...

0800f9c0 <_write_r>:
 800f9c0:	b538      	push	{r3, r4, r5, lr}
 800f9c2:	4d07      	ldr	r5, [pc, #28]	; (800f9e0 <_write_r+0x20>)
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	4608      	mov	r0, r1
 800f9c8:	4611      	mov	r1, r2
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	602a      	str	r2, [r5, #0]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	f7f2 f9f3 	bl	8001dba <_write>
 800f9d4:	1c43      	adds	r3, r0, #1
 800f9d6:	d102      	bne.n	800f9de <_write_r+0x1e>
 800f9d8:	682b      	ldr	r3, [r5, #0]
 800f9da:	b103      	cbz	r3, 800f9de <_write_r+0x1e>
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	bd38      	pop	{r3, r4, r5, pc}
 800f9e0:	200021d8 	.word	0x200021d8

0800f9e4 <_close_r>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	4d06      	ldr	r5, [pc, #24]	; (800fa00 <_close_r+0x1c>)
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	4608      	mov	r0, r1
 800f9ee:	602b      	str	r3, [r5, #0]
 800f9f0:	f7f2 f9ff 	bl	8001df2 <_close>
 800f9f4:	1c43      	adds	r3, r0, #1
 800f9f6:	d102      	bne.n	800f9fe <_close_r+0x1a>
 800f9f8:	682b      	ldr	r3, [r5, #0]
 800f9fa:	b103      	cbz	r3, 800f9fe <_close_r+0x1a>
 800f9fc:	6023      	str	r3, [r4, #0]
 800f9fe:	bd38      	pop	{r3, r4, r5, pc}
 800fa00:	200021d8 	.word	0x200021d8

0800fa04 <_fstat_r>:
 800fa04:	b538      	push	{r3, r4, r5, lr}
 800fa06:	4d07      	ldr	r5, [pc, #28]	; (800fa24 <_fstat_r+0x20>)
 800fa08:	2300      	movs	r3, #0
 800fa0a:	4604      	mov	r4, r0
 800fa0c:	4608      	mov	r0, r1
 800fa0e:	4611      	mov	r1, r2
 800fa10:	602b      	str	r3, [r5, #0]
 800fa12:	f7f2 f9fa 	bl	8001e0a <_fstat>
 800fa16:	1c43      	adds	r3, r0, #1
 800fa18:	d102      	bne.n	800fa20 <_fstat_r+0x1c>
 800fa1a:	682b      	ldr	r3, [r5, #0]
 800fa1c:	b103      	cbz	r3, 800fa20 <_fstat_r+0x1c>
 800fa1e:	6023      	str	r3, [r4, #0]
 800fa20:	bd38      	pop	{r3, r4, r5, pc}
 800fa22:	bf00      	nop
 800fa24:	200021d8 	.word	0x200021d8

0800fa28 <_isatty_r>:
 800fa28:	b538      	push	{r3, r4, r5, lr}
 800fa2a:	4d06      	ldr	r5, [pc, #24]	; (800fa44 <_isatty_r+0x1c>)
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	4604      	mov	r4, r0
 800fa30:	4608      	mov	r0, r1
 800fa32:	602b      	str	r3, [r5, #0]
 800fa34:	f7f2 f9f9 	bl	8001e2a <_isatty>
 800fa38:	1c43      	adds	r3, r0, #1
 800fa3a:	d102      	bne.n	800fa42 <_isatty_r+0x1a>
 800fa3c:	682b      	ldr	r3, [r5, #0]
 800fa3e:	b103      	cbz	r3, 800fa42 <_isatty_r+0x1a>
 800fa40:	6023      	str	r3, [r4, #0]
 800fa42:	bd38      	pop	{r3, r4, r5, pc}
 800fa44:	200021d8 	.word	0x200021d8

0800fa48 <_lseek_r>:
 800fa48:	b538      	push	{r3, r4, r5, lr}
 800fa4a:	4d07      	ldr	r5, [pc, #28]	; (800fa68 <_lseek_r+0x20>)
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	4608      	mov	r0, r1
 800fa50:	4611      	mov	r1, r2
 800fa52:	2200      	movs	r2, #0
 800fa54:	602a      	str	r2, [r5, #0]
 800fa56:	461a      	mov	r2, r3
 800fa58:	f7f2 f9f2 	bl	8001e40 <_lseek>
 800fa5c:	1c43      	adds	r3, r0, #1
 800fa5e:	d102      	bne.n	800fa66 <_lseek_r+0x1e>
 800fa60:	682b      	ldr	r3, [r5, #0]
 800fa62:	b103      	cbz	r3, 800fa66 <_lseek_r+0x1e>
 800fa64:	6023      	str	r3, [r4, #0]
 800fa66:	bd38      	pop	{r3, r4, r5, pc}
 800fa68:	200021d8 	.word	0x200021d8

0800fa6c <_read_r>:
 800fa6c:	b538      	push	{r3, r4, r5, lr}
 800fa6e:	4d07      	ldr	r5, [pc, #28]	; (800fa8c <_read_r+0x20>)
 800fa70:	4604      	mov	r4, r0
 800fa72:	4608      	mov	r0, r1
 800fa74:	4611      	mov	r1, r2
 800fa76:	2200      	movs	r2, #0
 800fa78:	602a      	str	r2, [r5, #0]
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	f7f2 f980 	bl	8001d80 <_read>
 800fa80:	1c43      	adds	r3, r0, #1
 800fa82:	d102      	bne.n	800fa8a <_read_r+0x1e>
 800fa84:	682b      	ldr	r3, [r5, #0]
 800fa86:	b103      	cbz	r3, 800fa8a <_read_r+0x1e>
 800fa88:	6023      	str	r3, [r4, #0]
 800fa8a:	bd38      	pop	{r3, r4, r5, pc}
 800fa8c:	200021d8 	.word	0x200021d8

0800fa90 <atan2>:
 800fa90:	f000 b802 	b.w	800fa98 <__ieee754_atan2>
 800fa94:	0000      	movs	r0, r0
	...

0800fa98 <__ieee754_atan2>:
 800fa98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa9c:	ec57 6b11 	vmov	r6, r7, d1
 800faa0:	4273      	negs	r3, r6
 800faa2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800fc28 <__ieee754_atan2+0x190>
 800faa6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800faaa:	4333      	orrs	r3, r6
 800faac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fab0:	4573      	cmp	r3, lr
 800fab2:	ec51 0b10 	vmov	r0, r1, d0
 800fab6:	ee11 8a10 	vmov	r8, s2
 800faba:	d80a      	bhi.n	800fad2 <__ieee754_atan2+0x3a>
 800fabc:	4244      	negs	r4, r0
 800fabe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fac2:	4304      	orrs	r4, r0
 800fac4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fac8:	4574      	cmp	r4, lr
 800faca:	ee10 9a10 	vmov	r9, s0
 800face:	468c      	mov	ip, r1
 800fad0:	d907      	bls.n	800fae2 <__ieee754_atan2+0x4a>
 800fad2:	4632      	mov	r2, r6
 800fad4:	463b      	mov	r3, r7
 800fad6:	f7f0 fbe1 	bl	800029c <__adddf3>
 800fada:	ec41 0b10 	vmov	d0, r0, r1
 800fade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fae2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800fae6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800faea:	4334      	orrs	r4, r6
 800faec:	d103      	bne.n	800faf6 <__ieee754_atan2+0x5e>
 800faee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faf2:	f000 b89d 	b.w	800fc30 <atan>
 800faf6:	17bc      	asrs	r4, r7, #30
 800faf8:	f004 0402 	and.w	r4, r4, #2
 800fafc:	ea53 0909 	orrs.w	r9, r3, r9
 800fb00:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fb04:	d107      	bne.n	800fb16 <__ieee754_atan2+0x7e>
 800fb06:	2c02      	cmp	r4, #2
 800fb08:	d060      	beq.n	800fbcc <__ieee754_atan2+0x134>
 800fb0a:	2c03      	cmp	r4, #3
 800fb0c:	d1e5      	bne.n	800fada <__ieee754_atan2+0x42>
 800fb0e:	a142      	add	r1, pc, #264	; (adr r1, 800fc18 <__ieee754_atan2+0x180>)
 800fb10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb14:	e7e1      	b.n	800fada <__ieee754_atan2+0x42>
 800fb16:	ea52 0808 	orrs.w	r8, r2, r8
 800fb1a:	d106      	bne.n	800fb2a <__ieee754_atan2+0x92>
 800fb1c:	f1bc 0f00 	cmp.w	ip, #0
 800fb20:	da5f      	bge.n	800fbe2 <__ieee754_atan2+0x14a>
 800fb22:	a13f      	add	r1, pc, #252	; (adr r1, 800fc20 <__ieee754_atan2+0x188>)
 800fb24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb28:	e7d7      	b.n	800fada <__ieee754_atan2+0x42>
 800fb2a:	4572      	cmp	r2, lr
 800fb2c:	d10f      	bne.n	800fb4e <__ieee754_atan2+0xb6>
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	f104 34ff 	add.w	r4, r4, #4294967295
 800fb34:	d107      	bne.n	800fb46 <__ieee754_atan2+0xae>
 800fb36:	2c02      	cmp	r4, #2
 800fb38:	d84c      	bhi.n	800fbd4 <__ieee754_atan2+0x13c>
 800fb3a:	4b35      	ldr	r3, [pc, #212]	; (800fc10 <__ieee754_atan2+0x178>)
 800fb3c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800fb40:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fb44:	e7c9      	b.n	800fada <__ieee754_atan2+0x42>
 800fb46:	2c02      	cmp	r4, #2
 800fb48:	d848      	bhi.n	800fbdc <__ieee754_atan2+0x144>
 800fb4a:	4b32      	ldr	r3, [pc, #200]	; (800fc14 <__ieee754_atan2+0x17c>)
 800fb4c:	e7f6      	b.n	800fb3c <__ieee754_atan2+0xa4>
 800fb4e:	4573      	cmp	r3, lr
 800fb50:	d0e4      	beq.n	800fb1c <__ieee754_atan2+0x84>
 800fb52:	1a9b      	subs	r3, r3, r2
 800fb54:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800fb58:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fb5c:	da1e      	bge.n	800fb9c <__ieee754_atan2+0x104>
 800fb5e:	2f00      	cmp	r7, #0
 800fb60:	da01      	bge.n	800fb66 <__ieee754_atan2+0xce>
 800fb62:	323c      	adds	r2, #60	; 0x3c
 800fb64:	db1e      	blt.n	800fba4 <__ieee754_atan2+0x10c>
 800fb66:	4632      	mov	r2, r6
 800fb68:	463b      	mov	r3, r7
 800fb6a:	f7f0 fe77 	bl	800085c <__aeabi_ddiv>
 800fb6e:	ec41 0b10 	vmov	d0, r0, r1
 800fb72:	f000 f9fd 	bl	800ff70 <fabs>
 800fb76:	f000 f85b 	bl	800fc30 <atan>
 800fb7a:	ec51 0b10 	vmov	r0, r1, d0
 800fb7e:	2c01      	cmp	r4, #1
 800fb80:	d013      	beq.n	800fbaa <__ieee754_atan2+0x112>
 800fb82:	2c02      	cmp	r4, #2
 800fb84:	d015      	beq.n	800fbb2 <__ieee754_atan2+0x11a>
 800fb86:	2c00      	cmp	r4, #0
 800fb88:	d0a7      	beq.n	800fada <__ieee754_atan2+0x42>
 800fb8a:	a319      	add	r3, pc, #100	; (adr r3, 800fbf0 <__ieee754_atan2+0x158>)
 800fb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb90:	f7f0 fb82 	bl	8000298 <__aeabi_dsub>
 800fb94:	a318      	add	r3, pc, #96	; (adr r3, 800fbf8 <__ieee754_atan2+0x160>)
 800fb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9a:	e014      	b.n	800fbc6 <__ieee754_atan2+0x12e>
 800fb9c:	a118      	add	r1, pc, #96	; (adr r1, 800fc00 <__ieee754_atan2+0x168>)
 800fb9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fba2:	e7ec      	b.n	800fb7e <__ieee754_atan2+0xe6>
 800fba4:	2000      	movs	r0, #0
 800fba6:	2100      	movs	r1, #0
 800fba8:	e7e9      	b.n	800fb7e <__ieee754_atan2+0xe6>
 800fbaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbae:	4619      	mov	r1, r3
 800fbb0:	e793      	b.n	800fada <__ieee754_atan2+0x42>
 800fbb2:	a30f      	add	r3, pc, #60	; (adr r3, 800fbf0 <__ieee754_atan2+0x158>)
 800fbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb8:	f7f0 fb6e 	bl	8000298 <__aeabi_dsub>
 800fbbc:	4602      	mov	r2, r0
 800fbbe:	460b      	mov	r3, r1
 800fbc0:	a10d      	add	r1, pc, #52	; (adr r1, 800fbf8 <__ieee754_atan2+0x160>)
 800fbc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbc6:	f7f0 fb67 	bl	8000298 <__aeabi_dsub>
 800fbca:	e786      	b.n	800fada <__ieee754_atan2+0x42>
 800fbcc:	a10a      	add	r1, pc, #40	; (adr r1, 800fbf8 <__ieee754_atan2+0x160>)
 800fbce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbd2:	e782      	b.n	800fada <__ieee754_atan2+0x42>
 800fbd4:	a10c      	add	r1, pc, #48	; (adr r1, 800fc08 <__ieee754_atan2+0x170>)
 800fbd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbda:	e77e      	b.n	800fada <__ieee754_atan2+0x42>
 800fbdc:	2000      	movs	r0, #0
 800fbde:	2100      	movs	r1, #0
 800fbe0:	e77b      	b.n	800fada <__ieee754_atan2+0x42>
 800fbe2:	a107      	add	r1, pc, #28	; (adr r1, 800fc00 <__ieee754_atan2+0x168>)
 800fbe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbe8:	e777      	b.n	800fada <__ieee754_atan2+0x42>
 800fbea:	bf00      	nop
 800fbec:	f3af 8000 	nop.w
 800fbf0:	33145c07 	.word	0x33145c07
 800fbf4:	3ca1a626 	.word	0x3ca1a626
 800fbf8:	54442d18 	.word	0x54442d18
 800fbfc:	400921fb 	.word	0x400921fb
 800fc00:	54442d18 	.word	0x54442d18
 800fc04:	3ff921fb 	.word	0x3ff921fb
 800fc08:	54442d18 	.word	0x54442d18
 800fc0c:	3fe921fb 	.word	0x3fe921fb
 800fc10:	080104a0 	.word	0x080104a0
 800fc14:	080104b8 	.word	0x080104b8
 800fc18:	54442d18 	.word	0x54442d18
 800fc1c:	c00921fb 	.word	0xc00921fb
 800fc20:	54442d18 	.word	0x54442d18
 800fc24:	bff921fb 	.word	0xbff921fb
 800fc28:	7ff00000 	.word	0x7ff00000
 800fc2c:	00000000 	.word	0x00000000

0800fc30 <atan>:
 800fc30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc34:	ec55 4b10 	vmov	r4, r5, d0
 800fc38:	4bc3      	ldr	r3, [pc, #780]	; (800ff48 <atan+0x318>)
 800fc3a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fc3e:	429e      	cmp	r6, r3
 800fc40:	46ab      	mov	fp, r5
 800fc42:	dd18      	ble.n	800fc76 <atan+0x46>
 800fc44:	4bc1      	ldr	r3, [pc, #772]	; (800ff4c <atan+0x31c>)
 800fc46:	429e      	cmp	r6, r3
 800fc48:	dc01      	bgt.n	800fc4e <atan+0x1e>
 800fc4a:	d109      	bne.n	800fc60 <atan+0x30>
 800fc4c:	b144      	cbz	r4, 800fc60 <atan+0x30>
 800fc4e:	4622      	mov	r2, r4
 800fc50:	462b      	mov	r3, r5
 800fc52:	4620      	mov	r0, r4
 800fc54:	4629      	mov	r1, r5
 800fc56:	f7f0 fb21 	bl	800029c <__adddf3>
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	460d      	mov	r5, r1
 800fc5e:	e006      	b.n	800fc6e <atan+0x3e>
 800fc60:	f1bb 0f00 	cmp.w	fp, #0
 800fc64:	f300 8131 	bgt.w	800feca <atan+0x29a>
 800fc68:	a59b      	add	r5, pc, #620	; (adr r5, 800fed8 <atan+0x2a8>)
 800fc6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fc6e:	ec45 4b10 	vmov	d0, r4, r5
 800fc72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc76:	4bb6      	ldr	r3, [pc, #728]	; (800ff50 <atan+0x320>)
 800fc78:	429e      	cmp	r6, r3
 800fc7a:	dc14      	bgt.n	800fca6 <atan+0x76>
 800fc7c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fc80:	429e      	cmp	r6, r3
 800fc82:	dc0d      	bgt.n	800fca0 <atan+0x70>
 800fc84:	a396      	add	r3, pc, #600	; (adr r3, 800fee0 <atan+0x2b0>)
 800fc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8a:	ee10 0a10 	vmov	r0, s0
 800fc8e:	4629      	mov	r1, r5
 800fc90:	f7f0 fb04 	bl	800029c <__adddf3>
 800fc94:	4baf      	ldr	r3, [pc, #700]	; (800ff54 <atan+0x324>)
 800fc96:	2200      	movs	r2, #0
 800fc98:	f7f0 ff46 	bl	8000b28 <__aeabi_dcmpgt>
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	d1e6      	bne.n	800fc6e <atan+0x3e>
 800fca0:	f04f 3aff 	mov.w	sl, #4294967295
 800fca4:	e02b      	b.n	800fcfe <atan+0xce>
 800fca6:	f000 f963 	bl	800ff70 <fabs>
 800fcaa:	4bab      	ldr	r3, [pc, #684]	; (800ff58 <atan+0x328>)
 800fcac:	429e      	cmp	r6, r3
 800fcae:	ec55 4b10 	vmov	r4, r5, d0
 800fcb2:	f300 80bf 	bgt.w	800fe34 <atan+0x204>
 800fcb6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fcba:	429e      	cmp	r6, r3
 800fcbc:	f300 80a0 	bgt.w	800fe00 <atan+0x1d0>
 800fcc0:	ee10 2a10 	vmov	r2, s0
 800fcc4:	ee10 0a10 	vmov	r0, s0
 800fcc8:	462b      	mov	r3, r5
 800fcca:	4629      	mov	r1, r5
 800fccc:	f7f0 fae6 	bl	800029c <__adddf3>
 800fcd0:	4ba0      	ldr	r3, [pc, #640]	; (800ff54 <atan+0x324>)
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f7f0 fae0 	bl	8000298 <__aeabi_dsub>
 800fcd8:	2200      	movs	r2, #0
 800fcda:	4606      	mov	r6, r0
 800fcdc:	460f      	mov	r7, r1
 800fcde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fce2:	4620      	mov	r0, r4
 800fce4:	4629      	mov	r1, r5
 800fce6:	f7f0 fad9 	bl	800029c <__adddf3>
 800fcea:	4602      	mov	r2, r0
 800fcec:	460b      	mov	r3, r1
 800fcee:	4630      	mov	r0, r6
 800fcf0:	4639      	mov	r1, r7
 800fcf2:	f7f0 fdb3 	bl	800085c <__aeabi_ddiv>
 800fcf6:	f04f 0a00 	mov.w	sl, #0
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	460d      	mov	r5, r1
 800fcfe:	4622      	mov	r2, r4
 800fd00:	462b      	mov	r3, r5
 800fd02:	4620      	mov	r0, r4
 800fd04:	4629      	mov	r1, r5
 800fd06:	f7f0 fc7f 	bl	8000608 <__aeabi_dmul>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	4680      	mov	r8, r0
 800fd10:	4689      	mov	r9, r1
 800fd12:	f7f0 fc79 	bl	8000608 <__aeabi_dmul>
 800fd16:	a374      	add	r3, pc, #464	; (adr r3, 800fee8 <atan+0x2b8>)
 800fd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1c:	4606      	mov	r6, r0
 800fd1e:	460f      	mov	r7, r1
 800fd20:	f7f0 fc72 	bl	8000608 <__aeabi_dmul>
 800fd24:	a372      	add	r3, pc, #456	; (adr r3, 800fef0 <atan+0x2c0>)
 800fd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2a:	f7f0 fab7 	bl	800029c <__adddf3>
 800fd2e:	4632      	mov	r2, r6
 800fd30:	463b      	mov	r3, r7
 800fd32:	f7f0 fc69 	bl	8000608 <__aeabi_dmul>
 800fd36:	a370      	add	r3, pc, #448	; (adr r3, 800fef8 <atan+0x2c8>)
 800fd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3c:	f7f0 faae 	bl	800029c <__adddf3>
 800fd40:	4632      	mov	r2, r6
 800fd42:	463b      	mov	r3, r7
 800fd44:	f7f0 fc60 	bl	8000608 <__aeabi_dmul>
 800fd48:	a36d      	add	r3, pc, #436	; (adr r3, 800ff00 <atan+0x2d0>)
 800fd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd4e:	f7f0 faa5 	bl	800029c <__adddf3>
 800fd52:	4632      	mov	r2, r6
 800fd54:	463b      	mov	r3, r7
 800fd56:	f7f0 fc57 	bl	8000608 <__aeabi_dmul>
 800fd5a:	a36b      	add	r3, pc, #428	; (adr r3, 800ff08 <atan+0x2d8>)
 800fd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd60:	f7f0 fa9c 	bl	800029c <__adddf3>
 800fd64:	4632      	mov	r2, r6
 800fd66:	463b      	mov	r3, r7
 800fd68:	f7f0 fc4e 	bl	8000608 <__aeabi_dmul>
 800fd6c:	a368      	add	r3, pc, #416	; (adr r3, 800ff10 <atan+0x2e0>)
 800fd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd72:	f7f0 fa93 	bl	800029c <__adddf3>
 800fd76:	4642      	mov	r2, r8
 800fd78:	464b      	mov	r3, r9
 800fd7a:	f7f0 fc45 	bl	8000608 <__aeabi_dmul>
 800fd7e:	a366      	add	r3, pc, #408	; (adr r3, 800ff18 <atan+0x2e8>)
 800fd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd84:	4680      	mov	r8, r0
 800fd86:	4689      	mov	r9, r1
 800fd88:	4630      	mov	r0, r6
 800fd8a:	4639      	mov	r1, r7
 800fd8c:	f7f0 fc3c 	bl	8000608 <__aeabi_dmul>
 800fd90:	a363      	add	r3, pc, #396	; (adr r3, 800ff20 <atan+0x2f0>)
 800fd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd96:	f7f0 fa7f 	bl	8000298 <__aeabi_dsub>
 800fd9a:	4632      	mov	r2, r6
 800fd9c:	463b      	mov	r3, r7
 800fd9e:	f7f0 fc33 	bl	8000608 <__aeabi_dmul>
 800fda2:	a361      	add	r3, pc, #388	; (adr r3, 800ff28 <atan+0x2f8>)
 800fda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda8:	f7f0 fa76 	bl	8000298 <__aeabi_dsub>
 800fdac:	4632      	mov	r2, r6
 800fdae:	463b      	mov	r3, r7
 800fdb0:	f7f0 fc2a 	bl	8000608 <__aeabi_dmul>
 800fdb4:	a35e      	add	r3, pc, #376	; (adr r3, 800ff30 <atan+0x300>)
 800fdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdba:	f7f0 fa6d 	bl	8000298 <__aeabi_dsub>
 800fdbe:	4632      	mov	r2, r6
 800fdc0:	463b      	mov	r3, r7
 800fdc2:	f7f0 fc21 	bl	8000608 <__aeabi_dmul>
 800fdc6:	a35c      	add	r3, pc, #368	; (adr r3, 800ff38 <atan+0x308>)
 800fdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdcc:	f7f0 fa64 	bl	8000298 <__aeabi_dsub>
 800fdd0:	4632      	mov	r2, r6
 800fdd2:	463b      	mov	r3, r7
 800fdd4:	f7f0 fc18 	bl	8000608 <__aeabi_dmul>
 800fdd8:	4602      	mov	r2, r0
 800fdda:	460b      	mov	r3, r1
 800fddc:	4640      	mov	r0, r8
 800fdde:	4649      	mov	r1, r9
 800fde0:	f7f0 fa5c 	bl	800029c <__adddf3>
 800fde4:	4622      	mov	r2, r4
 800fde6:	462b      	mov	r3, r5
 800fde8:	f7f0 fc0e 	bl	8000608 <__aeabi_dmul>
 800fdec:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	d14b      	bne.n	800fe8e <atan+0x25e>
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	4629      	mov	r1, r5
 800fdfa:	f7f0 fa4d 	bl	8000298 <__aeabi_dsub>
 800fdfe:	e72c      	b.n	800fc5a <atan+0x2a>
 800fe00:	ee10 0a10 	vmov	r0, s0
 800fe04:	4b53      	ldr	r3, [pc, #332]	; (800ff54 <atan+0x324>)
 800fe06:	2200      	movs	r2, #0
 800fe08:	4629      	mov	r1, r5
 800fe0a:	f7f0 fa45 	bl	8000298 <__aeabi_dsub>
 800fe0e:	4b51      	ldr	r3, [pc, #324]	; (800ff54 <atan+0x324>)
 800fe10:	4606      	mov	r6, r0
 800fe12:	460f      	mov	r7, r1
 800fe14:	2200      	movs	r2, #0
 800fe16:	4620      	mov	r0, r4
 800fe18:	4629      	mov	r1, r5
 800fe1a:	f7f0 fa3f 	bl	800029c <__adddf3>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	460b      	mov	r3, r1
 800fe22:	4630      	mov	r0, r6
 800fe24:	4639      	mov	r1, r7
 800fe26:	f7f0 fd19 	bl	800085c <__aeabi_ddiv>
 800fe2a:	f04f 0a01 	mov.w	sl, #1
 800fe2e:	4604      	mov	r4, r0
 800fe30:	460d      	mov	r5, r1
 800fe32:	e764      	b.n	800fcfe <atan+0xce>
 800fe34:	4b49      	ldr	r3, [pc, #292]	; (800ff5c <atan+0x32c>)
 800fe36:	429e      	cmp	r6, r3
 800fe38:	da1d      	bge.n	800fe76 <atan+0x246>
 800fe3a:	ee10 0a10 	vmov	r0, s0
 800fe3e:	4b48      	ldr	r3, [pc, #288]	; (800ff60 <atan+0x330>)
 800fe40:	2200      	movs	r2, #0
 800fe42:	4629      	mov	r1, r5
 800fe44:	f7f0 fa28 	bl	8000298 <__aeabi_dsub>
 800fe48:	4b45      	ldr	r3, [pc, #276]	; (800ff60 <atan+0x330>)
 800fe4a:	4606      	mov	r6, r0
 800fe4c:	460f      	mov	r7, r1
 800fe4e:	2200      	movs	r2, #0
 800fe50:	4620      	mov	r0, r4
 800fe52:	4629      	mov	r1, r5
 800fe54:	f7f0 fbd8 	bl	8000608 <__aeabi_dmul>
 800fe58:	4b3e      	ldr	r3, [pc, #248]	; (800ff54 <atan+0x324>)
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	f7f0 fa1e 	bl	800029c <__adddf3>
 800fe60:	4602      	mov	r2, r0
 800fe62:	460b      	mov	r3, r1
 800fe64:	4630      	mov	r0, r6
 800fe66:	4639      	mov	r1, r7
 800fe68:	f7f0 fcf8 	bl	800085c <__aeabi_ddiv>
 800fe6c:	f04f 0a02 	mov.w	sl, #2
 800fe70:	4604      	mov	r4, r0
 800fe72:	460d      	mov	r5, r1
 800fe74:	e743      	b.n	800fcfe <atan+0xce>
 800fe76:	462b      	mov	r3, r5
 800fe78:	ee10 2a10 	vmov	r2, s0
 800fe7c:	4939      	ldr	r1, [pc, #228]	; (800ff64 <atan+0x334>)
 800fe7e:	2000      	movs	r0, #0
 800fe80:	f7f0 fcec 	bl	800085c <__aeabi_ddiv>
 800fe84:	f04f 0a03 	mov.w	sl, #3
 800fe88:	4604      	mov	r4, r0
 800fe8a:	460d      	mov	r5, r1
 800fe8c:	e737      	b.n	800fcfe <atan+0xce>
 800fe8e:	4b36      	ldr	r3, [pc, #216]	; (800ff68 <atan+0x338>)
 800fe90:	4e36      	ldr	r6, [pc, #216]	; (800ff6c <atan+0x33c>)
 800fe92:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fe96:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800fe9a:	e9da 2300 	ldrd	r2, r3, [sl]
 800fe9e:	f7f0 f9fb 	bl	8000298 <__aeabi_dsub>
 800fea2:	4622      	mov	r2, r4
 800fea4:	462b      	mov	r3, r5
 800fea6:	f7f0 f9f7 	bl	8000298 <__aeabi_dsub>
 800feaa:	4602      	mov	r2, r0
 800feac:	460b      	mov	r3, r1
 800feae:	e9d6 0100 	ldrd	r0, r1, [r6]
 800feb2:	f7f0 f9f1 	bl	8000298 <__aeabi_dsub>
 800feb6:	f1bb 0f00 	cmp.w	fp, #0
 800feba:	4604      	mov	r4, r0
 800febc:	460d      	mov	r5, r1
 800febe:	f6bf aed6 	bge.w	800fc6e <atan+0x3e>
 800fec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fec6:	461d      	mov	r5, r3
 800fec8:	e6d1      	b.n	800fc6e <atan+0x3e>
 800feca:	a51d      	add	r5, pc, #116	; (adr r5, 800ff40 <atan+0x310>)
 800fecc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fed0:	e6cd      	b.n	800fc6e <atan+0x3e>
 800fed2:	bf00      	nop
 800fed4:	f3af 8000 	nop.w
 800fed8:	54442d18 	.word	0x54442d18
 800fedc:	bff921fb 	.word	0xbff921fb
 800fee0:	8800759c 	.word	0x8800759c
 800fee4:	7e37e43c 	.word	0x7e37e43c
 800fee8:	e322da11 	.word	0xe322da11
 800feec:	3f90ad3a 	.word	0x3f90ad3a
 800fef0:	24760deb 	.word	0x24760deb
 800fef4:	3fa97b4b 	.word	0x3fa97b4b
 800fef8:	a0d03d51 	.word	0xa0d03d51
 800fefc:	3fb10d66 	.word	0x3fb10d66
 800ff00:	c54c206e 	.word	0xc54c206e
 800ff04:	3fb745cd 	.word	0x3fb745cd
 800ff08:	920083ff 	.word	0x920083ff
 800ff0c:	3fc24924 	.word	0x3fc24924
 800ff10:	5555550d 	.word	0x5555550d
 800ff14:	3fd55555 	.word	0x3fd55555
 800ff18:	2c6a6c2f 	.word	0x2c6a6c2f
 800ff1c:	bfa2b444 	.word	0xbfa2b444
 800ff20:	52defd9a 	.word	0x52defd9a
 800ff24:	3fadde2d 	.word	0x3fadde2d
 800ff28:	af749a6d 	.word	0xaf749a6d
 800ff2c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ff30:	fe231671 	.word	0xfe231671
 800ff34:	3fbc71c6 	.word	0x3fbc71c6
 800ff38:	9998ebc4 	.word	0x9998ebc4
 800ff3c:	3fc99999 	.word	0x3fc99999
 800ff40:	54442d18 	.word	0x54442d18
 800ff44:	3ff921fb 	.word	0x3ff921fb
 800ff48:	440fffff 	.word	0x440fffff
 800ff4c:	7ff00000 	.word	0x7ff00000
 800ff50:	3fdbffff 	.word	0x3fdbffff
 800ff54:	3ff00000 	.word	0x3ff00000
 800ff58:	3ff2ffff 	.word	0x3ff2ffff
 800ff5c:	40038000 	.word	0x40038000
 800ff60:	3ff80000 	.word	0x3ff80000
 800ff64:	bff00000 	.word	0xbff00000
 800ff68:	080104f0 	.word	0x080104f0
 800ff6c:	080104d0 	.word	0x080104d0

0800ff70 <fabs>:
 800ff70:	ec51 0b10 	vmov	r0, r1, d0
 800ff74:	ee10 2a10 	vmov	r2, s0
 800ff78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff7c:	ec43 2b10 	vmov	d0, r2, r3
 800ff80:	4770      	bx	lr
	...

0800ff84 <_init>:
 800ff84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff86:	bf00      	nop
 800ff88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff8a:	bc08      	pop	{r3}
 800ff8c:	469e      	mov	lr, r3
 800ff8e:	4770      	bx	lr

0800ff90 <_fini>:
 800ff90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff92:	bf00      	nop
 800ff94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff96:	bc08      	pop	{r3}
 800ff98:	469e      	mov	lr, r3
 800ff9a:	4770      	bx	lr
