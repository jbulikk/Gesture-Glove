
Glove Black Pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  080100f0  080100f0  000200f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010680  08010680  000302fc  2**0
                  CONTENTS
  4 .ARM          00000008  08010680  08010680  00020680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010688  08010688  000302fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010688  08010688  00020688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801068c  0801068c  0002068c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  08010690  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f78  200002fc  0801098c  000302fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002274  0801098c  00032274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4c0  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004564  00000000  00000000  0004b7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  0004fd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  000511d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d181  00000000  00000000  00052498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e27e  00000000  00000000  0006f619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c6da  00000000  00000000  0008d897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129f71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a4  00000000  00000000  00129fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002fc 	.word	0x200002fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080100d4 	.word	0x080100d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000300 	.word	0x20000300
 80001dc:	080100d4 	.word	0x080100d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f6e:	4b4a      	ldr	r3, [pc, #296]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f70:	4a4a      	ldr	r2, [pc, #296]	; (800109c <MX_ADC1_Init+0x140>)
 8000f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f74:	4b48      	ldr	r3, [pc, #288]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7a:	4b47      	ldr	r3, [pc, #284]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f80:	4b45      	ldr	r3, [pc, #276]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f86:	4b44      	ldr	r3, [pc, #272]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8c:	4b42      	ldr	r3, [pc, #264]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f94:	4b40      	ldr	r3, [pc, #256]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f9c:	4a40      	ldr	r2, [pc, #256]	; (80010a0 <MX_ADC1_Init+0x144>)
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa0:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fac:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb4:	4b38      	ldr	r3, [pc, #224]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fba:	4837      	ldr	r0, [pc, #220]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fbc:	f001 f986 	bl	80022cc <HAL_ADC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fc6:	f000 fed1 	bl	8001d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fca:	2309      	movs	r3, #9
 8000fcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482f      	ldr	r0, [pc, #188]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fdc:	f001 fbe2 	bl	80027a4 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fe6:	f000 fec1 	bl	8001d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fea:	2308      	movs	r3, #8
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4828      	ldr	r0, [pc, #160]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000ff8:	f001 fbd4 	bl	80027a4 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001002:	f000 feb3 	bl	8001d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001006:	2307      	movs	r3, #7
 8001008:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800100a:	2303      	movs	r3, #3
 800100c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	4619      	mov	r1, r3
 8001012:	4821      	ldr	r0, [pc, #132]	; (8001098 <MX_ADC1_Init+0x13c>)
 8001014:	f001 fbc6 	bl	80027a4 <HAL_ADC_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800101e:	f000 fea5 	bl	8001d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001022:	2306      	movs	r3, #6
 8001024:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001026:	2304      	movs	r3, #4
 8001028:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	481a      	ldr	r0, [pc, #104]	; (8001098 <MX_ADC1_Init+0x13c>)
 8001030:	f001 fbb8 	bl	80027a4 <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800103a:	f000 fe97 	bl	8001d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800103e:	2305      	movs	r3, #5
 8001040:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001042:	2305      	movs	r3, #5
 8001044:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	4619      	mov	r1, r3
 800104a:	4813      	ldr	r0, [pc, #76]	; (8001098 <MX_ADC1_Init+0x13c>)
 800104c:	f001 fbaa 	bl	80027a4 <HAL_ADC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001056:	f000 fe89 	bl	8001d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 800105a:	2306      	movs	r3, #6
 800105c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <MX_ADC1_Init+0x13c>)
 8001064:	f001 fb9e 	bl	80027a4 <HAL_ADC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800106e:	f000 fe7d 	bl	8001d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8001072:	2307      	movs	r3, #7
 8001074:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <MX_ADC1_Init+0x13c>)
 8001080:	f001 fb90 	bl	80027a4 <HAL_ADC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800108a:	f000 fe6f 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000318 	.word	0x20000318
 800109c:	40012000 	.word	0x40012000
 80010a0:	0f000001 	.word	0x0f000001

080010a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a40      	ldr	r2, [pc, #256]	; (80011c4 <HAL_ADC_MspInit+0x120>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d179      	bne.n	80011ba <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a3e      	ldr	r2, [pc, #248]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a37      	ldr	r2, [pc, #220]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a30      	ldr	r2, [pc, #192]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800111a:	23e0      	movs	r3, #224	; 0xe0
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4827      	ldr	r0, [pc, #156]	; (80011cc <HAL_ADC_MspInit+0x128>)
 800112e:	f002 fab1 	bl	8003694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001132:	2303      	movs	r3, #3
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001136:	2303      	movs	r3, #3
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4822      	ldr	r0, [pc, #136]	; (80011d0 <HAL_ADC_MspInit+0x12c>)
 8001146:	f002 faa5 	bl	8003694 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800114c:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <HAL_ADC_MspInit+0x134>)
 800114e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001168:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800116c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001170:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001174:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001178:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800117c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001180:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800118e:	4811      	ldr	r0, [pc, #68]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001190:	f001 fed4 	bl	8002f3c <HAL_DMA_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800119a:	f000 fde7 	bl	8001d6c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 80011a2:	639a      	str	r2, [r3, #56]	; 0x38
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2012      	movs	r0, #18
 80011b0:	f001 fe8d 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011b4:	2012      	movs	r0, #18
 80011b6:	f001 fea6 	bl	8002f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40012000 	.word	0x40012000
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400
 80011d4:	20000360 	.word	0x20000360
 80011d8:	40026410 	.word	0x40026410

080011dc <check_threshold_float>:
    // {{,}, {,}, {,}, {,}, {,}, {,},/*{,}, {,}, {,}, */ ""},
    // {{,}, {,}, {,}, {,}, {,}, {,},/*{,}, {,}, {,}, */ ""},
};

bool check_threshold_float(float value, ThresholdAngle threshold)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80011e6:	eeb0 7a60 	vmov.f32	s14, s1
 80011ea:	eef0 7a41 	vmov.f32	s15, s2
 80011ee:	ed87 7a01 	vstr	s14, [r7, #4]
 80011f2:	edc7 7a02 	vstr	s15, [r7, #8]
    return value >= threshold.min_value && value <= threshold.max_value;
 80011f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80011fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001206:	db0a      	blt.n	800121e <check_threshold_float+0x42>
 8001208:	edd7 7a02 	vldr	s15, [r7, #8]
 800120c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001218:	d801      	bhi.n	800121e <check_threshold_float+0x42>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <check_threshold_float+0x44>
 800121e:	2300      	movs	r3, #0
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	b2db      	uxtb	r3, r3
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <check_threshold_uint16>:

bool check_threshold_uint16(uint16_t value, ThresholdFinger threshold)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	6039      	str	r1, [r7, #0]
 800123c:	80fb      	strh	r3, [r7, #6]
    return value >= threshold.min_value && value <= threshold.max_value;
 800123e:	883b      	ldrh	r3, [r7, #0]
 8001240:	88fa      	ldrh	r2, [r7, #6]
 8001242:	429a      	cmp	r2, r3
 8001244:	d305      	bcc.n	8001252 <check_threshold_uint16+0x20>
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	88fa      	ldrh	r2, [r7, #6]
 800124a:	429a      	cmp	r2, r3
 800124c:	d801      	bhi.n	8001252 <check_threshold_uint16+0x20>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <check_threshold_uint16+0x22>
 8001252:	2300      	movs	r3, #0
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <is_gesture_recognized>:

bool is_gesture_recognized(const GestureConfig *gesture, const ImuData *imu, const FlexHandRaw *hand)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
    return check_threshold_uint16(hand->thumb, gesture->thumb) &&
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	b29a      	uxth	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6819      	ldr	r1, [r3, #0]
 800127c:	4610      	mov	r0, r2
 800127e:	f7ff ffd8 	bl	8001232 <check_threshold_uint16>
 8001282:	4603      	mov	r3, r0
           check_threshold_uint16(hand->index, gesture->index) &&
           check_threshold_uint16(hand->middle, gesture->middle) &&
           check_threshold_uint16(hand->ring, gesture->ring) &&
           check_threshold_uint16(hand->pinky, gesture->pinky) &&
 8001284:	2b00      	cmp	r3, #0
 8001286:	d040      	beq.n	800130a <is_gesture_recognized+0xa4>
           check_threshold_uint16(hand->index, gesture->index) &&
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	885b      	ldrh	r3, [r3, #2]
 800128c:	b29a      	uxth	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6859      	ldr	r1, [r3, #4]
 8001292:	4610      	mov	r0, r2
 8001294:	f7ff ffcd 	bl	8001232 <check_threshold_uint16>
 8001298:	4603      	mov	r3, r0
    return check_threshold_uint16(hand->thumb, gesture->thumb) &&
 800129a:	2b00      	cmp	r3, #0
 800129c:	d035      	beq.n	800130a <is_gesture_recognized+0xa4>
           check_threshold_uint16(hand->middle, gesture->middle) &&
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	889b      	ldrh	r3, [r3, #4]
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6899      	ldr	r1, [r3, #8]
 80012a8:	4610      	mov	r0, r2
 80012aa:	f7ff ffc2 	bl	8001232 <check_threshold_uint16>
 80012ae:	4603      	mov	r3, r0
           check_threshold_uint16(hand->index, gesture->index) &&
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d02a      	beq.n	800130a <is_gesture_recognized+0xa4>
           check_threshold_uint16(hand->ring, gesture->ring) &&
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	88db      	ldrh	r3, [r3, #6]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	68d9      	ldr	r1, [r3, #12]
 80012be:	4610      	mov	r0, r2
 80012c0:	f7ff ffb7 	bl	8001232 <check_threshold_uint16>
 80012c4:	4603      	mov	r3, r0
           check_threshold_uint16(hand->middle, gesture->middle) &&
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d01f      	beq.n	800130a <is_gesture_recognized+0xa4>
           check_threshold_uint16(hand->pinky, gesture->pinky) &&
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	891b      	ldrh	r3, [r3, #8]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6919      	ldr	r1, [r3, #16]
 80012d4:	4610      	mov	r0, r2
 80012d6:	f7ff ffac 	bl	8001232 <check_threshold_uint16>
 80012da:	4603      	mov	r3, r0
           check_threshold_uint16(hand->ring, gesture->ring) &&
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d014      	beq.n	800130a <is_gesture_recognized+0xa4>
           /*check_threshold_float(imu->pitch_complementary, gesture->pitch) &&*/ 
           check_threshold_float(imu->roll_complementary, gesture->roll);
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	edd3 6a05 	vldr	s13, [r3, #20]
 80012ec:	ed93 7a06 	vldr	s14, [r3, #24]
 80012f0:	eef0 0a66 	vmov.f32	s1, s13
 80012f4:	eeb0 1a47 	vmov.f32	s2, s14
 80012f8:	eeb0 0a67 	vmov.f32	s0, s15
 80012fc:	f7ff ff6e 	bl	80011dc <check_threshold_float>
 8001300:	4603      	mov	r3, r0
           check_threshold_uint16(hand->pinky, gesture->pinky) &&
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <is_gesture_recognized+0xa4>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <is_gesture_recognized+0xa6>
 800130a:	2300      	movs	r3, #0
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <recognise_gesture_and_send_by_CDC>:

void recognise_gesture_and_send_by_CDC(const ImuData *imu, const FlexHandRaw *hand) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < sizeof(gestures) / sizeof(gestures[0]); i++) {
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	e022      	b.n	8001372 <recognise_gesture_and_send_by_CDC+0x56>
        if (is_gesture_recognized(&gestures[i], imu, hand)) {
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	015b      	lsls	r3, r3, #5
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <recognise_gesture_and_send_by_CDC+0x68>)
 8001332:	4413      	add	r3, r2
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff94 	bl	8001266 <is_gesture_recognized>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <recognise_gesture_and_send_by_CDC+0x50>
            sprintf(msg3, "%s\n\r", gestures[i].message);
 8001344:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <recognise_gesture_and_send_by_CDC+0x68>)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	015b      	lsls	r3, r3, #5
 800134a:	4413      	add	r3, r2
 800134c:	331c      	adds	r3, #28
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	490d      	ldr	r1, [pc, #52]	; (8001388 <recognise_gesture_and_send_by_CDC+0x6c>)
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <recognise_gesture_and_send_by_CDC+0x70>)
 8001356:	f00c f9c9 	bl	800d6ec <siprintf>
            CDC_Transmit_FS((uint8_t *)msg3, strlen(msg3));
 800135a:	480c      	ldr	r0, [pc, #48]	; (800138c <recognise_gesture_and_send_by_CDC+0x70>)
 800135c:	f7fe ff40 	bl	80001e0 <strlen>
 8001360:	4603      	mov	r3, r0
 8001362:	4619      	mov	r1, r3
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <recognise_gesture_and_send_by_CDC+0x70>)
 8001366:	f00b f8d3 	bl	800c510 <CDC_Transmit_FS>
            break;
 800136a:	e006      	b.n	800137a <recognise_gesture_and_send_by_CDC+0x5e>
    for (size_t i = 0; i < sizeof(gestures) / sizeof(gestures[0]); i++) {
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3301      	adds	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0d9      	beq.n	800132c <recognise_gesture_and_send_by_CDC+0x10>
        }
    }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000
 8001388:	080100f4 	.word	0x080100f4
 800138c:	200003c0 	.word	0x200003c0

08001390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_DMA_Init+0x68>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <MX_DMA_Init+0x68>)
 80013a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_DMA_Init+0x68>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <MX_DMA_Init+0x68>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <MX_DMA_Init+0x68>)
 80013bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <MX_DMA_Init+0x68>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	200b      	movs	r0, #11
 80013d4:	f001 fd7b 	bl	8002ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013d8:	200b      	movs	r0, #11
 80013da:	f001 fd94 	bl	8002f06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2038      	movs	r0, #56	; 0x38
 80013e4:	f001 fd73 	bl	8002ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013e8:	2038      	movs	r0, #56	; 0x38
 80013ea:	f001 fd8c 	bl	8002f06 <HAL_NVIC_EnableIRQ>

}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <flex_assign_raw_values_to_fingers>:
#include "flex.h"

void flex_assign_raw_values_to_fingers(uint16_t *data_buffer, FlexHandRaw *handStructure)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
    handStructure->thumb = data_buffer[ORDER_THUMB];
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	881a      	ldrh	r2, [r3, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	801a      	strh	r2, [r3, #0]
    handStructure->index = data_buffer[ORDER_INDEX];
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	885a      	ldrh	r2, [r3, #2]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	805a      	strh	r2, [r3, #2]
    handStructure->middle = data_buffer[ORDER_MIDDLE];
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	889a      	ldrh	r2, [r3, #4]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	809a      	strh	r2, [r3, #4]
    handStructure->ring = data_buffer[ORDER_RING];
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	88da      	ldrh	r2, [r3, #6]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	80da      	strh	r2, [r3, #6]
    handStructure->pinky = data_buffer[ORDER_PINKY];
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	891a      	ldrh	r2, [r3, #8]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	811a      	strh	r2, [r3, #8]
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b25      	ldr	r3, [pc, #148]	; (80014ec <MX_GPIO_Init+0xb0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a24      	ldr	r2, [pc, #144]	; (80014ec <MX_GPIO_Init+0xb0>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <MX_GPIO_Init+0xb0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <MX_GPIO_Init+0xb0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <MX_GPIO_Init+0xb0>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_GPIO_Init+0xb0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_GPIO_Init+0xb0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <MX_GPIO_Init+0xb0>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_GPIO_Init+0xb0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB12 PB13 PB14 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5;
 80014a6:	f247 0320 	movw	r3, #28704	; 0x7020
 80014aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	4619      	mov	r1, r3
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <MX_GPIO_Init+0xb4>)
 80014be:	f002 f8e9 	bl	8003694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2017      	movs	r0, #23
 80014c8:	f001 fd01 	bl	8002ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014cc:	2017      	movs	r0, #23
 80014ce:	f001 fd1a 	bl	8002f06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	2028      	movs	r0, #40	; 0x28
 80014d8:	f001 fcf9 	bl	8002ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014dc:	2028      	movs	r0, #40	; 0x28
 80014de:	f001 fd12 	bl	8002f06 <HAL_NVIC_EnableIRQ>

}
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020400 	.word	0x40020400

080014f4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_I2C1_Init+0x50>)
 80014fa:	4a13      	ldr	r2, [pc, #76]	; (8001548 <MX_I2C1_Init+0x54>)
 80014fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_I2C1_Init+0x50>)
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <MX_I2C1_Init+0x58>)
 8001502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_I2C1_Init+0x50>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_I2C1_Init+0x50>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_I2C1_Init+0x50>)
 8001512:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001516:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <MX_I2C1_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_I2C1_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <MX_I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_I2C1_Init+0x50>)
 8001532:	f002 fa4b 	bl	80039cc <HAL_I2C_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800153c:	f000 fc16 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000440 	.word	0x20000440
 8001548:	40005400 	.word	0x40005400
 800154c:	00061a80 	.word	0x00061a80

08001550 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a38      	ldr	r2, [pc, #224]	; (8001650 <HAL_I2C_MspInit+0x100>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d169      	bne.n	8001646 <HAL_I2C_MspInit+0xf6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b37      	ldr	r3, [pc, #220]	; (8001654 <HAL_I2C_MspInit+0x104>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a36      	ldr	r2, [pc, #216]	; (8001654 <HAL_I2C_MspInit+0x104>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b34      	ldr	r3, [pc, #208]	; (8001654 <HAL_I2C_MspInit+0x104>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800158e:	23c0      	movs	r3, #192	; 0xc0
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001592:	2312      	movs	r3, #18
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800159e:	2304      	movs	r3, #4
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	482b      	ldr	r0, [pc, #172]	; (8001658 <HAL_I2C_MspInit+0x108>)
 80015aa:	f002 f873 	bl	8003694 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <HAL_I2C_MspInit+0x104>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a27      	ldr	r2, [pc, #156]	; (8001654 <HAL_I2C_MspInit+0x104>)
 80015b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_I2C_MspInit+0x104>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <HAL_I2C_MspInit+0x10c>)
 80015cc:	4a24      	ldr	r2, [pc, #144]	; (8001660 <HAL_I2C_MspInit+0x110>)
 80015ce:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <HAL_I2C_MspInit+0x10c>)
 80015d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_I2C_MspInit+0x10c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_I2C_MspInit+0x10c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_I2C_MspInit+0x10c>)
 80015e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_I2C_MspInit+0x10c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_I2C_MspInit+0x10c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_I2C_MspInit+0x10c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_I2C_MspInit+0x10c>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_I2C_MspInit+0x10c>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800160a:	4814      	ldr	r0, [pc, #80]	; (800165c <HAL_I2C_MspInit+0x10c>)
 800160c:	f001 fc96 	bl	8002f3c <HAL_DMA_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001616:	f000 fba9 	bl	8001d6c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a0f      	ldr	r2, [pc, #60]	; (800165c <HAL_I2C_MspInit+0x10c>)
 800161e:	639a      	str	r2, [r3, #56]	; 0x38
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_I2C_MspInit+0x10c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	201f      	movs	r0, #31
 800162c:	f001 fc4f 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001630:	201f      	movs	r0, #31
 8001632:	f001 fc68 	bl	8002f06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2020      	movs	r0, #32
 800163c:	f001 fc47 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001640:	2020      	movs	r0, #32
 8001642:	f001 fc60 	bl	8002f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40005400 	.word	0x40005400
 8001654:	40023800 	.word	0x40023800
 8001658:	40020400 	.word	0x40020400
 800165c:	20000494 	.word	0x20000494
 8001660:	40026010 	.word	0x40026010

08001664 <MPU6050_DMA_mode_init>:
uint8_t acc_sens = 16384.0;
float current_angle = 0.0;
char msg2[128];

uint8_t MPU6050_DMA_mode_init(I2C_HandleTypeDef *I2Cx)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af04      	add	r7, sp, #16
 800166a:	6078      	str	r0, [r7, #4]
    I2C_HandleTypeDef *i2c = I2Cx;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	60fb      	str	r3, [r7, #12]
    uint8_t counter = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	75fb      	strb	r3, [r7, #23]
    uint8_t check;
    uint8_t Data;
    
    for(int i = 0; i < 5; i++){
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	e02e      	b.n	80016d8 <MPU6050_DMA_mode_init+0x74>
        HAL_Delay(1000);
 800167a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800167e:	f000 fe01 	bl	8002284 <HAL_Delay>
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &check, 1, 10);
 8001682:	230a      	movs	r3, #10
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	2301      	movs	r3, #1
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	f107 030b 	add.w	r3, r7, #11
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	2275      	movs	r2, #117	; 0x75
 8001694:	21d0      	movs	r1, #208	; 0xd0
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f002 fbd6 	bl	8003e48 <HAL_I2C_Mem_Read>

        if(check == 104)
 800169c:	7afb      	ldrb	r3, [r7, #11]
 800169e:	2b68      	cmp	r3, #104	; 0x68
 80016a0:	d105      	bne.n	80016ae <MPU6050_DMA_mode_init+0x4a>
        {
            counter++;
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	3301      	adds	r3, #1
 80016a6:	75fb      	strb	r3, [r7, #23]
            if(counter >= 2)
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d818      	bhi.n	80016e0 <MPU6050_DMA_mode_init+0x7c>
            {
                break;
            }
        }
        sprintf(msg2, "WHO_AM_I check: %d \n\r", check);
 80016ae:	7afb      	ldrb	r3, [r7, #11]
 80016b0:	461a      	mov	r2, r3
 80016b2:	494a      	ldr	r1, [pc, #296]	; (80017dc <MPU6050_DMA_mode_init+0x178>)
 80016b4:	484a      	ldr	r0, [pc, #296]	; (80017e0 <MPU6050_DMA_mode_init+0x17c>)
 80016b6:	f00c f819 	bl	800d6ec <siprintf>
        CDC_Transmit_FS((uint8_t *)msg2, strlen(msg2));
 80016ba:	4849      	ldr	r0, [pc, #292]	; (80017e0 <MPU6050_DMA_mode_init+0x17c>)
 80016bc:	f7fe fd90 	bl	80001e0 <strlen>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4619      	mov	r1, r3
 80016c4:	4846      	ldr	r0, [pc, #280]	; (80017e0 <MPU6050_DMA_mode_init+0x17c>)
 80016c6:	f00a ff23 	bl	800c510 <CDC_Transmit_FS>
        HAL_Delay(1000);
 80016ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ce:	f000 fdd9 	bl	8002284 <HAL_Delay>
    for(int i = 0; i < 5; i++){
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	3301      	adds	r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2b04      	cmp	r3, #4
 80016dc:	ddcd      	ble.n	800167a <MPU6050_DMA_mode_init+0x16>
 80016de:	e000      	b.n	80016e2 <MPU6050_DMA_mode_init+0x7e>
                break;
 80016e0:	bf00      	nop
    }

    Data = MPU6050_CLOCK_PLL_ZGYRO;
 80016e2:	2303      	movs	r3, #3
 80016e4:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &Data, 1, i2c_timeout);//PLL with Z axis gyroscope reference
 80016e6:	2364      	movs	r3, #100	; 0x64
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	2301      	movs	r3, #1
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	f107 030a 	add.w	r3, r7, #10
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	226b      	movs	r2, #107	; 0x6b
 80016f8:	21d0      	movs	r1, #208	; 0xd0
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f002 faaa 	bl	8003c54 <HAL_I2C_Mem_Write>

    Data = 0x05;
 8001700:	2305      	movs	r3, #5
 8001702:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &Data, 1, i2c_timeout);        //DLPF_CFG = 1: Fs=1khz; bandwidth=42hz 
 8001704:	2364      	movs	r3, #100	; 0x64
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	2301      	movs	r3, #1
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	f107 030a 	add.w	r3, r7, #10
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	221a      	movs	r2, #26
 8001716:	21d0      	movs	r1, #208	; 0xd0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f002 fa9b 	bl	8003c54 <HAL_I2C_Mem_Write>

    Data = 0x13;
 800171e:	2313      	movs	r3, #19
 8001720:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &Data, 1, i2c_timeout);    //50Hz sample rate
 8001722:	2364      	movs	r3, #100	; 0x64
 8001724:	9302      	str	r3, [sp, #8]
 8001726:	2301      	movs	r3, #1
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	f107 030a 	add.w	r3, r7, #10
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2301      	movs	r3, #1
 8001732:	2219      	movs	r2, #25
 8001734:	21d0      	movs	r1, #208	; 0xd0
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f002 fa8c 	bl	8003c54 <HAL_I2C_Mem_Write>

    Data = MPU6050_GYRO_FS_250;
 800173c:	2300      	movs	r3, #0
 800173e:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &Data, 1, i2c_timeout);    //Gyro full scale setting
 8001740:	2364      	movs	r3, #100	; 0x64
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	2301      	movs	r3, #1
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	f107 030a 	add.w	r3, r7, #10
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	221b      	movs	r2, #27
 8001752:	21d0      	movs	r1, #208	; 0xd0
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f002 fa7d 	bl	8003c54 <HAL_I2C_Mem_Write>

    Data = MPU6050_ACCEL_FS_2;
 800175a:	2300      	movs	r3, #0
 800175c:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);    //Accel full scale setting
 800175e:	2364      	movs	r3, #100	; 0x64
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f107 030a 	add.w	r3, r7, #10
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	221c      	movs	r2, #28
 8001770:	21d0      	movs	r1, #208	; 0xd0
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f002 fa6e 	bl	8003c54 <HAL_I2C_Mem_Write>

    // Data = 1<<4;
    Data = 0x30;
 8001778:	2330      	movs	r3, #48	; 0x30
 800177a:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &Data , 1, i2c_timeout);        //interrupt status bits are cleared on any read operation
 800177c:	2364      	movs	r3, #100	; 0x64
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2301      	movs	r3, #1
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	f107 030a 	add.w	r3, r7, #10
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	2237      	movs	r2, #55	; 0x37
 800178e:	21d0      	movs	r1, #208	; 0xd0
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f002 fa5f 	bl	8003c54 <HAL_I2C_Mem_Write>

    Data = 1<<0;
 8001796:	2301      	movs	r3, #1
 8001798:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &Data, 1, i2c_timeout);        //interupt occurs when data is ready. The interupt routine is in the receiver.c file.   
 800179a:	2364      	movs	r3, #100	; 0x64
 800179c:	9302      	str	r3, [sp, #8]
 800179e:	2301      	movs	r3, #1
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	f107 030a 	add.w	r3, r7, #10
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2301      	movs	r3, #1
 80017aa:	2238      	movs	r2, #56	; 0x38
 80017ac:	21d0      	movs	r1, #208	; 0xd0
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f002 fa50 	bl	8003c54 <HAL_I2C_Mem_Write>

    Data = 0x07;
 80017b4:	2307      	movs	r3, #7
 80017b6:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_SIGNAL_PATH_RESET, 1, &Data, 1, i2c_timeout);//reset gyro and accel sensor  
 80017b8:	2364      	movs	r3, #100	; 0x64
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	2301      	movs	r3, #1
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	f107 030a 	add.w	r3, r7, #10
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2301      	movs	r3, #1
 80017c8:	2268      	movs	r2, #104	; 0x68
 80017ca:	21d0      	movs	r1, #208	; 0xd0
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f002 fa41 	bl	8003c54 <HAL_I2C_Mem_Write>
}
 80017d2:	bf00      	nop
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	080100fc 	.word	0x080100fc
 80017e0:	200004f4 	.word	0x200004f4

080017e4 <MPU6050_DMA_read_all_data>:
{
    HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data_buffer, 6);
}

void MPU6050_DMA_read_all_data(I2C_HandleTypeDef *I2Cx, uint8_t *data_buffer)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data_buffer, 14);
 80017ee:	230e      	movs	r3, #14
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2301      	movs	r3, #1
 80017f8:	223b      	movs	r2, #59	; 0x3b
 80017fa:	21d0      	movs	r1, #208	; 0xd0
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f002 fd49 	bl	8004294 <HAL_I2C_Mem_Read_DMA>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	0000      	movs	r0, r0
 800180c:	0000      	movs	r0, r0
	...

08001810 <MPU6050_process_6_axis_data_and_calculate_angles>:
    // imuStruct->accel_angle = -atan2(imuStruct->accelerometer.z, -imuStruct->accelerometer.x) * (180/M_PI);
    // imuStruct->gyro_angle = imuStruct->gyroscope.y / 131.0;  
}

void MPU6050_process_6_axis_data_and_calculate_angles(uint8_t *data_buffer, ImuData *imuStruct)
{
 8001810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af04      	add	r7, sp, #16
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]

    imuStruct->accelerometer_raw.x = (int16_t)(data_buffer[0] << 8 | data_buffer[1]);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	b21a      	sxth	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3301      	adds	r3, #1
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b21b      	sxth	r3, r3
 800182c:	4313      	orrs	r3, r2
 800182e:	b21a      	sxth	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	801a      	strh	r2, [r3, #0]
    imuStruct->accelerometer_raw.y= (int16_t)(data_buffer[2] << 8 | data_buffer[3]);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3302      	adds	r3, #2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	b21a      	sxth	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3303      	adds	r3, #3
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b21b      	sxth	r3, r3
 8001846:	4313      	orrs	r3, r2
 8001848:	b21a      	sxth	r2, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	805a      	strh	r2, [r3, #2]
    imuStruct->accelerometer_raw.z= (int16_t)(data_buffer[4] << 8 | data_buffer[5]);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3304      	adds	r3, #4
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3305      	adds	r3, #5
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b21b      	sxth	r3, r3
 8001860:	4313      	orrs	r3, r2
 8001862:	b21a      	sxth	r2, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	809a      	strh	r2, [r3, #4]

    imuStruct->gyroscope_raw.x = (int16_t)(data_buffer[8] << 8 | data_buffer[9]);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3308      	adds	r3, #8
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21a      	sxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3309      	adds	r3, #9
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b21b      	sxth	r3, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	b21a      	sxth	r2, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	80da      	strh	r2, [r3, #6]
    imuStruct->gyroscope_raw.y = (int16_t)(data_buffer[10] << 8 | data_buffer[11]);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	330a      	adds	r3, #10
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	b21a      	sxth	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	330b      	adds	r3, #11
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b21b      	sxth	r3, r3
 8001894:	4313      	orrs	r3, r2
 8001896:	b21a      	sxth	r2, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	811a      	strh	r2, [r3, #8]
    imuStruct->gyroscope_raw.z = (int16_t)(data_buffer[12] << 8 | data_buffer[13]);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	330c      	adds	r3, #12
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	330d      	adds	r3, #13
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	815a      	strh	r2, [r3, #10]

    imuStruct->accelerometer_scaled.x = (float)imuStruct->accelerometer_raw.x / acc_sens;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018c4:	4b96      	ldr	r3, [pc, #600]	; (8001b20 <MPU6050_process_6_axis_data_and_calculate_angles+0x310>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d8:	ee17 3a90 	vmov	r3, s15
 80018dc:	b21a      	sxth	r2, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	819a      	strh	r2, [r3, #12]
	imuStruct->accelerometer_scaled.y = (float)imuStruct->accelerometer_raw.y / acc_sens;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	885b      	ldrh	r3, [r3, #2]
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018f0:	4b8b      	ldr	r3, [pc, #556]	; (8001b20 <MPU6050_process_6_axis_data_and_calculate_angles+0x310>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	ee07 3a90 	vmov	s15, r3
 80018f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001904:	ee17 3a90 	vmov	r3, s15
 8001908:	b21a      	sxth	r2, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	81da      	strh	r2, [r3, #14]
	imuStruct->accelerometer_scaled.z = (float)imuStruct->accelerometer_raw.z / acc_sens;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	889b      	ldrh	r3, [r3, #4]
 8001912:	b21b      	sxth	r3, r3
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800191c:	4b80      	ldr	r3, [pc, #512]	; (8001b20 <MPU6050_process_6_axis_data_and_calculate_angles+0x310>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	ee07 3a90 	vmov	s15, r3
 8001924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800192c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001930:	ee17 3a90 	vmov	r3, s15
 8001934:	b21a      	sxth	r2, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	821a      	strh	r2, [r3, #16]

    imuStruct->gyroscope_scaled.x = (float)imuStruct->gyroscope_raw.x / gyro_sens;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	88db      	ldrh	r3, [r3, #6]
 800193e:	b21b      	sxth	r3, r3
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001948:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <MPU6050_process_6_axis_data_and_calculate_angles+0x314>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800195c:	ee17 3a90 	vmov	r3, s15
 8001960:	b21a      	sxth	r2, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	825a      	strh	r2, [r3, #18]
    imuStruct->gyroscope_scaled.y = (float)imuStruct->gyroscope_raw.y / gyro_sens;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	891b      	ldrh	r3, [r3, #8]
 800196a:	b21b      	sxth	r3, r3
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001974:	4b6b      	ldr	r3, [pc, #428]	; (8001b24 <MPU6050_process_6_axis_data_and_calculate_angles+0x314>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001988:	ee17 3a90 	vmov	r3, s15
 800198c:	b21a      	sxth	r2, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	829a      	strh	r2, [r3, #20]
    imuStruct->gyroscope_scaled.z = (float)imuStruct->gyroscope_raw.z / gyro_sens;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	895b      	ldrh	r3, [r3, #10]
 8001996:	b21b      	sxth	r3, r3
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019a0:	4b60      	ldr	r3, [pc, #384]	; (8001b24 <MPU6050_process_6_axis_data_and_calculate_angles+0x314>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b4:	ee17 3a90 	vmov	r3, s15
 80019b8:	b21a      	sxth	r2, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	82da      	strh	r2, [r3, #22]

    imuStruct->roll_acc = atan2(imuStruct->accelerometer_scaled.x, imuStruct->accelerometer_scaled.z) * 180.0/M_PI;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	899b      	ldrh	r3, [r3, #12]
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fdb5 	bl	8000534 <__aeabi_i2d>
 80019ca:	4604      	mov	r4, r0
 80019cc:	460d      	mov	r5, r1
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	8a1b      	ldrh	r3, [r3, #16]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fdad 	bl	8000534 <__aeabi_i2d>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	ec43 2b11 	vmov	d1, r2, r3
 80019e2:	ec45 4b10 	vmov	d0, r4, r5
 80019e6:	f00e f8fb 	bl	800fbe0 <atan2>
 80019ea:	ec51 0b10 	vmov	r0, r1, d0
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <MPU6050_process_6_axis_data_and_calculate_angles+0x318>)
 80019f4:	f7fe fe08 	bl	8000608 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	a345      	add	r3, pc, #276	; (adr r3, 8001b18 <MPU6050_process_6_axis_data_and_calculate_angles+0x308>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe ff29 	bl	800085c <__aeabi_ddiv>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f8d1 	bl	8000bb8 <__aeabi_d2f>
 8001a16:	4602      	mov	r2, r0
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	61da      	str	r2, [r3, #28]
    imuStruct->roll_gyro = imuStruct->gyroscope_scaled.y;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	8a9b      	ldrh	r3, [r3, #20]
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    imuStruct->roll_complementary = alpha * (imuStruct->roll_complementary + imuStruct->roll_gyro * sampling_time_sec) + (1.0 - alpha) * imuStruct->roll_acc;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001a3c:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <MPU6050_process_6_axis_data_and_calculate_angles+0x31c>)
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a4a:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <MPU6050_process_6_axis_data_and_calculate_angles+0x320>)
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a54:	ee17 0a90 	vmov	r0, s15
 8001a58:	f7fe fd7e 	bl	8000558 <__aeabi_f2d>
 8001a5c:	4604      	mov	r4, r0
 8001a5e:	460d      	mov	r5, r1
 8001a60:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <MPU6050_process_6_axis_data_and_calculate_angles+0x320>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd77 	bl	8000558 <__aeabi_f2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	f04f 0000 	mov.w	r0, #0
 8001a72:	4930      	ldr	r1, [pc, #192]	; (8001b34 <MPU6050_process_6_axis_data_and_calculate_angles+0x324>)
 8001a74:	f7fe fc10 	bl	8000298 <__aeabi_dsub>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4690      	mov	r8, r2
 8001a7e:	4699      	mov	r9, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd67 	bl	8000558 <__aeabi_f2d>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4640      	mov	r0, r8
 8001a90:	4649      	mov	r1, r9
 8001a92:	f7fe fdb9 	bl	8000608 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	f7fe fbfd 	bl	800029c <__adddf3>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f885 	bl	8000bb8 <__aeabi_d2f>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34
    
    
    if(debug == 2)
 8001ab4:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <MPU6050_process_6_axis_data_and_calculate_angles+0x328>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d127      	bne.n	8001b0c <MPU6050_process_6_axis_data_and_calculate_angles+0x2fc>
    {
        sprintf(msg2, "0:=%d, 1:=%d 2:=%d, 3:=%d, 4:=%d 5:=%d\n\r", data_buffer[0], data_buffer[1],data_buffer[2],data_buffer[3],data_buffer[4],data_buffer[5]);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461c      	mov	r4, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461d      	mov	r5, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3302      	adds	r3, #2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3303      	adds	r3, #3
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3304      	adds	r3, #4
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3305      	adds	r3, #5
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	9303      	str	r3, [sp, #12]
 8001aea:	9002      	str	r0, [sp, #8]
 8001aec:	9101      	str	r1, [sp, #4]
 8001aee:	9200      	str	r2, [sp, #0]
 8001af0:	462b      	mov	r3, r5
 8001af2:	4622      	mov	r2, r4
 8001af4:	4911      	ldr	r1, [pc, #68]	; (8001b3c <MPU6050_process_6_axis_data_and_calculate_angles+0x32c>)
 8001af6:	4812      	ldr	r0, [pc, #72]	; (8001b40 <MPU6050_process_6_axis_data_and_calculate_angles+0x330>)
 8001af8:	f00b fdf8 	bl	800d6ec <siprintf>
        CDC_Transmit_FS((uint8_t *)msg2, strlen(msg2));
 8001afc:	4810      	ldr	r0, [pc, #64]	; (8001b40 <MPU6050_process_6_axis_data_and_calculate_angles+0x330>)
 8001afe:	f7fe fb6f 	bl	80001e0 <strlen>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4619      	mov	r1, r3
 8001b06:	480e      	ldr	r0, [pc, #56]	; (8001b40 <MPU6050_process_6_axis_data_and_calculate_angles+0x330>)
 8001b08:	f00a fd02 	bl	800c510 <CDC_Transmit_FS>
    }

 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b16:	bf00      	nop
 8001b18:	54442d18 	.word	0x54442d18
 8001b1c:	400921fb 	.word	0x400921fb
 8001b20:	2000002d 	.word	0x2000002d
 8001b24:	2000002c 	.word	0x2000002c
 8001b28:	40668000 	.word	0x40668000
 8001b2c:	20000020 	.word	0x20000020
 8001b30:	20000028 	.word	0x20000028
 8001b34:	3ff00000 	.word	0x3ff00000
 8001b38:	20000024 	.word	0x20000024
 8001b3c:	08010170 	.word	0x08010170
 8001b40:	200004f4 	.word	0x200004f4

08001b44 <main>:
void SystemClock_Config(void);
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);

int main(void)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af04      	add	r7, sp, #16
  HAL_Init();
 8001b4a:	f000 fb29 	bl	80021a0 <HAL_Init>
  SystemClock_Config();
 8001b4e:	f000 f8a5 	bl	8001c9c <SystemClock_Config>
  MX_GPIO_Init();
 8001b52:	f7ff fc73 	bl	800143c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b56:	f7ff fc1b 	bl	8001390 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b5a:	f7ff f9ff 	bl	8000f5c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001b5e:	f7ff fcc9 	bl	80014f4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001b62:	f00a fc17 	bl	800c394 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8001b66:	f000 fa7f 	bl	8002068 <MX_USART1_UART_Init>
  MPU6050_DMA_mode_init(&hi2c1);
 8001b6a:	4824      	ldr	r0, [pc, #144]	; (8001bfc <main+0xb8>)
 8001b6c:	f7ff fd7a 	bl	8001664 <MPU6050_DMA_mode_init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 7);
 8001b70:	2207      	movs	r2, #7
 8001b72:	4923      	ldr	r1, [pc, #140]	; (8001c00 <main+0xbc>)
 8001b74:	4823      	ldr	r0, [pc, #140]	; (8001c04 <main+0xc0>)
 8001b76:	f000 fcfd 	bl	8002574 <HAL_ADC_Start_DMA>
    //   CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
    //   wait = 0;

    // }
    // flex_assign_raw_values_to_fingers(&adc_value, &hand);
    sprintf(msg, "1:=%f\n\r", imu_sensor_data.roll_complementary);
 8001b7a:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <main+0xc4>)
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fcea 	bl	8000558 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4920      	ldr	r1, [pc, #128]	; (8001c0c <main+0xc8>)
 8001b8a:	4821      	ldr	r0, [pc, #132]	; (8001c10 <main+0xcc>)
 8001b8c:	f00b fdae 	bl	800d6ec <siprintf>
    CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 8001b90:	481f      	ldr	r0, [pc, #124]	; (8001c10 <main+0xcc>)
 8001b92:	f7fe fb25 	bl	80001e0 <strlen>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4619      	mov	r1, r3
 8001b9a:	481d      	ldr	r0, [pc, #116]	; (8001c10 <main+0xcc>)
 8001b9c:	f00a fcb8 	bl	800c510 <CDC_Transmit_FS>

    sprintf(msg, "1:=%u, 2:=%u, 3:=%u, 4:=%u, 5:=%u\n\r", adc_value[0], adc_value[1], adc_value[2], adc_value[3], adc_value[4]);
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <main+0xbc>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <main+0xbc>)
 8001baa:	885b      	ldrh	r3, [r3, #2]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	461c      	mov	r4, r3
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <main+0xbc>)
 8001bb2:	889b      	ldrh	r3, [r3, #4]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <main+0xbc>)
 8001bba:	88db      	ldrh	r3, [r3, #6]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <main+0xbc>)
 8001bc2:	891b      	ldrh	r3, [r3, #8]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	9101      	str	r1, [sp, #4]
 8001bca:	9200      	str	r2, [sp, #0]
 8001bcc:	4623      	mov	r3, r4
 8001bce:	4602      	mov	r2, r0
 8001bd0:	4910      	ldr	r1, [pc, #64]	; (8001c14 <main+0xd0>)
 8001bd2:	480f      	ldr	r0, [pc, #60]	; (8001c10 <main+0xcc>)
 8001bd4:	f00b fd8a 	bl	800d6ec <siprintf>
    CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 8001bd8:	480d      	ldr	r0, [pc, #52]	; (8001c10 <main+0xcc>)
 8001bda:	f7fe fb01 	bl	80001e0 <strlen>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4619      	mov	r1, r3
 8001be2:	480b      	ldr	r0, [pc, #44]	; (8001c10 <main+0xcc>)
 8001be4:	f00a fc94 	bl	800c510 <CDC_Transmit_FS>

    HAL_Delay(500);
 8001be8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bec:	f000 fb4a 	bl	8002284 <HAL_Delay>

    recognise_gesture_and_send_by_CDC(&imu_sensor_data, &hand);
 8001bf0:	4909      	ldr	r1, [pc, #36]	; (8001c18 <main+0xd4>)
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <main+0xc4>)
 8001bf4:	f7ff fb92 	bl	800131c <recognise_gesture_and_send_by_CDC>
  {
 8001bf8:	e7bf      	b.n	8001b7a <main+0x36>
 8001bfa:	bf00      	nop
 8001bfc:	20000440 	.word	0x20000440
 8001c00:	200005b8 	.word	0x200005b8
 8001c04:	20000318 	.word	0x20000318
 8001c08:	200005c4 	.word	0x200005c4
 8001c0c:	0801019c 	.word	0x0801019c
 8001c10:	20000574 	.word	0x20000574
 8001c14:	080101a4 	.word	0x080101a4
 8001c18:	200005fc 	.word	0x200005fc

08001c1c <SysTick_Handler>:
    // recognise_gesture(&imu_sensor_data, &hand);
  }
}

void SysTick_Handler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001c20:	f000 fb10 	bl	8002244 <HAL_IncTick>
  tick++;
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <SysTick_Handler+0x2c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <SysTick_Handler+0x2c>)
 8001c2c:	6013      	str	r3, [r2, #0]

  // sprintf(msg, "1:=%u, 2:%u\n\r", hand.pinky, hand.index);
  // CDC_Transmit_FS((uint8_t *)msg, strlen(msg));

  if(tick >= 20)
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <SysTick_Handler+0x2c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b13      	cmp	r3, #19
 8001c34:	d906      	bls.n	8001c44 <SysTick_Handler+0x28>
  {
    flex_assign_raw_values_to_fingers(&adc_value, &hand);
 8001c36:	4905      	ldr	r1, [pc, #20]	; (8001c4c <SysTick_Handler+0x30>)
 8001c38:	4805      	ldr	r0, [pc, #20]	; (8001c50 <SysTick_Handler+0x34>)
 8001c3a:	f7ff fbdf 	bl	80013fc <flex_assign_raw_values_to_fingers>

    tick = 0;
 8001c3e:	4b02      	ldr	r3, [pc, #8]	; (8001c48 <SysTick_Handler+0x2c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
  }
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000608 	.word	0x20000608
 8001c4c:	200005fc 	.word	0x200005fc
 8001c50:	200005b8 	.word	0x200005b8

08001c54 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  MPU6050_process_6_axis_data_and_calculate_angles(&MPU6050_buff, &imu_sensor_data);
 8001c5c:	4903      	ldr	r1, [pc, #12]	; (8001c6c <HAL_I2C_MemRxCpltCallback+0x18>)
 8001c5e:	4804      	ldr	r0, [pc, #16]	; (8001c70 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8001c60:	f7ff fdd6 	bl	8001810 <MPU6050_process_6_axis_data_and_calculate_angles>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200005c4 	.word	0x200005c4
 8001c70:	200005a8 	.word	0x200005a8

08001c74 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_5)
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d103      	bne.n	8001c8c <HAL_GPIO_EXTI_Callback+0x18>
  {
    MPU6050_DMA_read_all_data(&hi2c1, &MPU6050_buff);
 8001c84:	4903      	ldr	r1, [pc, #12]	; (8001c94 <HAL_GPIO_EXTI_Callback+0x20>)
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x24>)
 8001c88:	f7ff fdac 	bl	80017e4 <MPU6050_DMA_read_all_data>
  }  
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200005a8 	.word	0x200005a8
 8001c98:	20000440 	.word	0x20000440

08001c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b094      	sub	sp, #80	; 0x50
 8001ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca2:	f107 0320 	add.w	r3, r7, #32
 8001ca6:	2230      	movs	r2, #48	; 0x30
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f00b f8ac 	bl	800ce08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <SystemClock_Config+0xc8>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <SystemClock_Config+0xc8>)
 8001cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cce:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd0:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <SystemClock_Config+0xc8>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <SystemClock_Config+0xcc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a20      	ldr	r2, [pc, #128]	; (8001d68 <SystemClock_Config+0xcc>)
 8001ce6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <SystemClock_Config+0xcc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d02:	2302      	movs	r3, #2
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001d0c:	2319      	movs	r3, #25
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001d10:	2390      	movs	r3, #144	; 0x90
 8001d12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d14:	2302      	movs	r3, #2
 8001d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	4618      	mov	r0, r3
 8001d22:	f006 f807 	bl	8007d34 <HAL_RCC_OscConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d2c:	f000 f81e 	bl	8001d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d30:	230f      	movs	r3, #15
 8001d32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d34:	2302      	movs	r3, #2
 8001d36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f006 fa69 	bl	8008224 <HAL_RCC_ClockConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d58:	f000 f808 	bl	8001d6c <Error_Handler>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	3750      	adds	r7, #80	; 0x50
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40007000 	.word	0x40007000

08001d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
}
 8001d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <Error_Handler+0x8>
	...

08001d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <DMA1_Stream0_IRQHandler+0x10>)
 8001e16:	f001 f9b9 	bl	800318c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000494 	.word	0x20000494

08001e24 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <ADC_IRQHandler+0x10>)
 8001e2a:	f000 fa92 	bl	8002352 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000318 	.word	0x20000318

08001e38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001e3c:	2020      	movs	r0, #32
 8001e3e:	f001 fdad 	bl	800399c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <I2C1_EV_IRQHandler+0x10>)
 8001e4e:	f002 fbb5 	bl	80045bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000440 	.word	0x20000440

08001e5c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <I2C1_ER_IRQHandler+0x10>)
 8001e62:	f002 fd1c 	bl	800489e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000440 	.word	0x20000440

08001e70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001e74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e78:	f001 fd90 	bl	800399c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e80:	f001 fd8c 	bl	800399c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001e84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e88:	f001 fd88 	bl	800399c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <DMA2_Stream0_IRQHandler+0x10>)
 8001e96:	f001 f979 	bl	800318c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000360 	.word	0x20000360

08001ea4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <OTG_FS_IRQHandler+0x10>)
 8001eaa:	f004 fe15 	bl	8006ad8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20001b38 	.word	0x20001b38

08001eb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return 1;
 8001ebc:	2301      	movs	r3, #1
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_kill>:

int _kill(int pid, int sig)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ed2:	f00a ff6f 	bl	800cdb4 <__errno>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2216      	movs	r2, #22
 8001eda:	601a      	str	r2, [r3, #0]
  return -1;
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_exit>:

void _exit (int status)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ffe7 	bl	8001ec8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001efa:	e7fe      	b.n	8001efa <_exit+0x12>

08001efc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e00a      	b.n	8001f24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f0e:	f3af 8000 	nop.w
 8001f12:	4601      	mov	r1, r0
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	60ba      	str	r2, [r7, #8]
 8001f1a:	b2ca      	uxtb	r2, r1
 8001f1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf0      	blt.n	8001f0e <_read+0x12>
  }

  return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e009      	b.n	8001f5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	60ba      	str	r2, [r7, #8]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbf1      	blt.n	8001f48 <_write+0x12>
  }
  return len;
 8001f64:	687b      	ldr	r3, [r7, #4]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_close>:

int _close(int file)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f96:	605a      	str	r2, [r3, #4]
  return 0;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <_isatty>:

int _isatty(int file)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <_sbrk+0x5c>)
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <_sbrk+0x60>)
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <_sbrk+0x64>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	; (8002040 <_sbrk+0x68>)
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <_sbrk+0x64>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	429a      	cmp	r2, r3
 8002006:	d207      	bcs.n	8002018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002008:	f00a fed4 	bl	800cdb4 <__errno>
 800200c:	4603      	mov	r3, r0
 800200e:	220c      	movs	r2, #12
 8002010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e009      	b.n	800202c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	4a05      	ldr	r2, [pc, #20]	; (800203c <_sbrk+0x64>)
 8002028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20020000 	.word	0x20020000
 8002038:	00000400 	.word	0x00000400
 800203c:	2000060c 	.word	0x2000060c
 8002040:	20002278 	.word	0x20002278

08002044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <SystemInit+0x20>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <SystemInit+0x20>)
 8002050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 800206e:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <MX_USART1_UART_Init+0x50>)
 8002070:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 8002074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002078:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 800208e:	220c      	movs	r2, #12
 8002090:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800209e:	4805      	ldr	r0, [pc, #20]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 80020a0:	f006 faa0 	bl	80085e4 <HAL_UART_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020aa:	f7ff fe5f 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000610 	.word	0x20000610
 80020b8:	40011000 	.word	0x40011000

080020bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a19      	ldr	r2, [pc, #100]	; (8002140 <HAL_UART_MspInit+0x84>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d12c      	bne.n	8002138 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <HAL_UART_MspInit+0x88>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a17      	ldr	r2, [pc, #92]	; (8002144 <HAL_UART_MspInit+0x88>)
 80020e8:	f043 0310 	orr.w	r3, r3, #16
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_UART_MspInit+0x88>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_UART_MspInit+0x88>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a10      	ldr	r2, [pc, #64]	; (8002144 <HAL_UART_MspInit+0x88>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_UART_MspInit+0x88>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002116:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800211a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002128:	2307      	movs	r3, #7
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	4805      	ldr	r0, [pc, #20]	; (8002148 <HAL_UART_MspInit+0x8c>)
 8002134:	f001 faae 	bl	8003694 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002138:	bf00      	nop
 800213a:	3728      	adds	r7, #40	; 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40011000 	.word	0x40011000
 8002144:	40023800 	.word	0x40023800
 8002148:	40020000 	.word	0x40020000

0800214c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800214c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002184 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002150:	480d      	ldr	r0, [pc, #52]	; (8002188 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002152:	490e      	ldr	r1, [pc, #56]	; (800218c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002154:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002158:	e002      	b.n	8002160 <LoopCopyDataInit>

0800215a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800215c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215e:	3304      	adds	r3, #4

08002160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002164:	d3f9      	bcc.n	800215a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002166:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002168:	4c0b      	ldr	r4, [pc, #44]	; (8002198 <LoopFillZerobss+0x26>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800216c:	e001      	b.n	8002172 <LoopFillZerobss>

0800216e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002170:	3204      	adds	r2, #4

08002172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002174:	d3fb      	bcc.n	800216e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002176:	f7ff ff65 	bl	8002044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800217a:	f00a fe21 	bl	800cdc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800217e:	f7ff fce1 	bl	8001b44 <main>
  bx  lr    
 8002182:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002184:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800218c:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8002190:	08010690 	.word	0x08010690
  ldr r2, =_sbss
 8002194:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8002198:	20002274 	.word	0x20002274

0800219c <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800219c:	e7fe      	b.n	800219c <DMA1_Stream1_IRQHandler>
	...

080021a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a4:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_Init+0x40>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <HAL_Init+0x40>)
 80021aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_Init+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <HAL_Init+0x40>)
 80021b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_Init+0x40>)
 80021c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 fe75 	bl	8002eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ce:	200f      	movs	r0, #15
 80021d0:	f000 f808 	bl	80021e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d4:	f7ff fdd0 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023c00 	.word	0x40023c00

080021e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_InitTick+0x54>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_InitTick+0x58>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fe8d 	bl	8002f22 <HAL_SYSTICK_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00e      	b.n	8002230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d80a      	bhi.n	800222e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002218:	2200      	movs	r2, #0
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f000 fe55 	bl	8002ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002224:	4a06      	ldr	r2, [pc, #24]	; (8002240 <HAL_InitTick+0x5c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000030 	.word	0x20000030
 800223c:	20000038 	.word	0x20000038
 8002240:	20000034 	.word	0x20000034

08002244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_IncTick+0x20>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_IncTick+0x24>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_IncTick+0x24>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000038 	.word	0x20000038
 8002268:	20000654 	.word	0x20000654

0800226c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <HAL_GetTick+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000654 	.word	0x20000654

08002284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff ffee 	bl	800226c <HAL_GetTick>
 8002290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d005      	beq.n	80022aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_Delay+0x44>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022aa:	bf00      	nop
 80022ac:	f7ff ffde 	bl	800226c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d8f7      	bhi.n	80022ac <HAL_Delay+0x28>
  {
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000038 	.word	0x20000038

080022cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e033      	b.n	800234a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe feda 	bl	80010a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d118      	bne.n	800233c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002312:	f023 0302 	bic.w	r3, r3, #2
 8002316:	f043 0202 	orr.w	r2, r3, #2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fb72 	bl	8002a08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	641a      	str	r2, [r3, #64]	; 0x40
 800233a:	e001      	b.n	8002340 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d049      	beq.n	800241c <HAL_ADC_IRQHandler+0xca>
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d046      	beq.n	800241c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b00      	cmp	r3, #0
 8002398:	d105      	bne.n	80023a6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d12b      	bne.n	800240c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d127      	bne.n	800240c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d119      	bne.n	800240c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0220 	bic.w	r2, r2, #32
 80023e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f9a1 	bl	8002754 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f06f 0212 	mvn.w	r2, #18
 800241a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d057      	beq.n	80024e2 <HAL_ADC_IRQHandler+0x190>
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d054      	beq.n	80024e2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	d105      	bne.n	8002450 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d139      	bne.n	80024d2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002464:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002476:	2b00      	cmp	r3, #0
 8002478:	d12b      	bne.n	80024d2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002484:	2b00      	cmp	r3, #0
 8002486:	d124      	bne.n	80024d2 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002492:	2b00      	cmp	r3, #0
 8002494:	d11d      	bne.n	80024d2 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800249a:	2b00      	cmp	r3, #0
 800249c:	d119      	bne.n	80024d2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024ac:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fc16 	bl	8002d04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 020c 	mvn.w	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d017      	beq.n	8002528 <HAL_ADC_IRQHandler+0x1d6>
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d014      	beq.n	8002528 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10d      	bne.n	8002528 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f92f 	bl	800277c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f06f 0201 	mvn.w	r2, #1
 8002526:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002536:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d015      	beq.n	800256a <HAL_ADC_IRQHandler+0x218>
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d012      	beq.n	800256a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002548:	f043 0202 	orr.w	r2, r3, #2
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0220 	mvn.w	r2, #32
 8002558:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f918 	bl	8002790 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0220 	mvn.w	r2, #32
 8002568:	601a      	str	r2, [r3, #0]
  }
}
 800256a:	bf00      	nop
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_ADC_Start_DMA+0x1e>
 800258e:	2302      	movs	r3, #2
 8002590:	e0ce      	b.n	8002730 <HAL_ADC_Start_DMA+0x1bc>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d018      	beq.n	80025da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025b8:	4b5f      	ldr	r3, [pc, #380]	; (8002738 <HAL_ADC_Start_DMA+0x1c4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a5f      	ldr	r2, [pc, #380]	; (800273c <HAL_ADC_Start_DMA+0x1c8>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9a      	lsrs	r2, r3, #18
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025cc:	e002      	b.n	80025d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f9      	bne.n	80025ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e8:	d107      	bne.n	80025fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	f040 8086 	bne.w	8002716 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002634:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002648:	d106      	bne.n	8002658 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f023 0206 	bic.w	r2, r3, #6
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	645a      	str	r2, [r3, #68]	; 0x44
 8002656:	e002      	b.n	800265e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002666:	4b36      	ldr	r3, [pc, #216]	; (8002740 <HAL_ADC_Start_DMA+0x1cc>)
 8002668:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266e:	4a35      	ldr	r2, [pc, #212]	; (8002744 <HAL_ADC_Start_DMA+0x1d0>)
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	4a34      	ldr	r2, [pc, #208]	; (8002748 <HAL_ADC_Start_DMA+0x1d4>)
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267e:	4a33      	ldr	r2, [pc, #204]	; (800274c <HAL_ADC_Start_DMA+0x1d8>)
 8002680:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800268a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800269a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	334c      	adds	r3, #76	; 0x4c
 80026b6:	4619      	mov	r1, r3
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f000 fcec 	bl	8003098 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10f      	bne.n	80026ec <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d129      	bne.n	800272e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	e020      	b.n	800272e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a17      	ldr	r2, [pc, #92]	; (8002750 <HAL_ADC_Start_DMA+0x1dc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d11b      	bne.n	800272e <HAL_ADC_Start_DMA+0x1ba>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d114      	bne.n	800272e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	e00b      	b.n	800272e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f043 0210 	orr.w	r2, r3, #16
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000030 	.word	0x20000030
 800273c:	431bde83 	.word	0x431bde83
 8002740:	40012300 	.word	0x40012300
 8002744:	08002c01 	.word	0x08002c01
 8002748:	08002cbb 	.word	0x08002cbb
 800274c:	08002cd7 	.word	0x08002cd7
 8002750:	40012000 	.word	0x40012000

08002754 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x1c>
 80027bc:	2302      	movs	r3, #2
 80027be:	e113      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x244>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b09      	cmp	r3, #9
 80027ce:	d925      	bls.n	800281c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68d9      	ldr	r1, [r3, #12]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	3b1e      	subs	r3, #30
 80027e6:	2207      	movs	r2, #7
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43da      	mvns	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	400a      	ands	r2, r1
 80027f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68d9      	ldr	r1, [r3, #12]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	4618      	mov	r0, r3
 8002808:	4603      	mov	r3, r0
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4403      	add	r3, r0
 800280e:	3b1e      	subs	r3, #30
 8002810:	409a      	lsls	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	e022      	b.n	8002862 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6919      	ldr	r1, [r3, #16]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	2207      	movs	r2, #7
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	400a      	ands	r2, r1
 800283e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6919      	ldr	r1, [r3, #16]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	4618      	mov	r0, r3
 8002852:	4603      	mov	r3, r0
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4403      	add	r3, r0
 8002858:	409a      	lsls	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b06      	cmp	r3, #6
 8002868:	d824      	bhi.n	80028b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	3b05      	subs	r3, #5
 800287c:	221f      	movs	r2, #31
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	400a      	ands	r2, r1
 800288a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4618      	mov	r0, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3b05      	subs	r3, #5
 80028a6:	fa00 f203 	lsl.w	r2, r0, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	635a      	str	r2, [r3, #52]	; 0x34
 80028b2:	e04c      	b.n	800294e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d824      	bhi.n	8002906 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	3b23      	subs	r3, #35	; 0x23
 80028ce:	221f      	movs	r2, #31
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43da      	mvns	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	400a      	ands	r2, r1
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	4618      	mov	r0, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	3b23      	subs	r3, #35	; 0x23
 80028f8:	fa00 f203 	lsl.w	r2, r0, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
 8002904:	e023      	b.n	800294e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	3b41      	subs	r3, #65	; 0x41
 8002918:	221f      	movs	r2, #31
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	400a      	ands	r2, r1
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	4618      	mov	r0, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	3b41      	subs	r3, #65	; 0x41
 8002942:	fa00 f203 	lsl.w	r2, r0, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800294e:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <HAL_ADC_ConfigChannel+0x250>)
 8002950:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a28      	ldr	r2, [pc, #160]	; (80029f8 <HAL_ADC_ConfigChannel+0x254>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d10f      	bne.n	800297c <HAL_ADC_ConfigChannel+0x1d8>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b12      	cmp	r3, #18
 8002962:	d10b      	bne.n	800297c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <HAL_ADC_ConfigChannel+0x254>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d12b      	bne.n	80029de <HAL_ADC_ConfigChannel+0x23a>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1c      	ldr	r2, [pc, #112]	; (80029fc <HAL_ADC_ConfigChannel+0x258>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d003      	beq.n	8002998 <HAL_ADC_ConfigChannel+0x1f4>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b11      	cmp	r3, #17
 8002996:	d122      	bne.n	80029de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a11      	ldr	r2, [pc, #68]	; (80029fc <HAL_ADC_ConfigChannel+0x258>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d111      	bne.n	80029de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_ADC_ConfigChannel+0x25c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <HAL_ADC_ConfigChannel+0x260>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	0c9a      	lsrs	r2, r3, #18
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029d0:	e002      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f9      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	40012300 	.word	0x40012300
 80029f8:	40012000 	.word	0x40012000
 80029fc:	10000012 	.word	0x10000012
 8002a00:	20000030 	.word	0x20000030
 8002a04:	431bde83 	.word	0x431bde83

08002a08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a10:	4b79      	ldr	r3, [pc, #484]	; (8002bf8 <ADC_Init+0x1f0>)
 8002a12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	021a      	lsls	r2, r3, #8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6899      	ldr	r1, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <ADC_Init+0x1f4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d022      	beq.n	8002ae6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6899      	ldr	r1, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	e00f      	b.n	8002b06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002af4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0202 	bic.w	r2, r2, #2
 8002b14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6899      	ldr	r1, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	7e1b      	ldrb	r3, [r3, #24]
 8002b20:	005a      	lsls	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6859      	ldr	r1, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	035a      	lsls	r2, r3, #13
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	e007      	b.n	8002b7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	051a      	lsls	r2, r3, #20
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6899      	ldr	r1, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bbe:	025a      	lsls	r2, r3, #9
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6899      	ldr	r1, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	029a      	lsls	r2, r3, #10
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40012300 	.word	0x40012300
 8002bfc:	0f000001 	.word	0x0f000001

08002c00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d13c      	bne.n	8002c94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d12b      	bne.n	8002c8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d127      	bne.n	8002c8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d006      	beq.n	8002c58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d119      	bne.n	8002c8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0220 	bic.w	r2, r2, #32
 8002c66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f043 0201 	orr.w	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff fd61 	bl	8002754 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c92:	e00e      	b.n	8002cb2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7ff fd75 	bl	8002790 <HAL_ADC_ErrorCallback>
}
 8002ca6:	e004      	b.n	8002cb2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff fd4d 	bl	8002768 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f043 0204 	orr.w	r2, r3, #4
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff fd4a 	bl	8002790 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d34:	4013      	ands	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d4a:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	60d3      	str	r3, [r2, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <__NVIC_GetPriorityGrouping+0x18>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	f003 0307 	and.w	r3, r3, #7
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	db0b      	blt.n	8002da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	f003 021f 	and.w	r2, r3, #31
 8002d94:	4907      	ldr	r1, [pc, #28]	; (8002db4 <__NVIC_EnableIRQ+0x38>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000e100 	.word	0xe000e100

08002db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	db0a      	blt.n	8002de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	490c      	ldr	r1, [pc, #48]	; (8002e04 <__NVIC_SetPriority+0x4c>)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	0112      	lsls	r2, r2, #4
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de0:	e00a      	b.n	8002df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4908      	ldr	r1, [pc, #32]	; (8002e08 <__NVIC_SetPriority+0x50>)
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	3b04      	subs	r3, #4
 8002df0:	0112      	lsls	r2, r2, #4
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	440b      	add	r3, r1
 8002df6:	761a      	strb	r2, [r3, #24]
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000e100 	.word	0xe000e100
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	; 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f1c3 0307 	rsb	r3, r3, #7
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	bf28      	it	cs
 8002e2a:	2304      	movcs	r3, #4
 8002e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2b06      	cmp	r3, #6
 8002e34:	d902      	bls.n	8002e3c <NVIC_EncodePriority+0x30>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3b03      	subs	r3, #3
 8002e3a:	e000      	b.n	8002e3e <NVIC_EncodePriority+0x32>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	401a      	ands	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e54:	f04f 31ff 	mov.w	r1, #4294967295
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	43d9      	mvns	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	4313      	orrs	r3, r2
         );
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e84:	d301      	bcc.n	8002e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00f      	b.n	8002eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <SysTick_Config+0x40>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e92:	210f      	movs	r1, #15
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	f7ff ff8e 	bl	8002db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <SysTick_Config+0x40>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <SysTick_Config+0x40>)
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	e000e010 	.word	0xe000e010

08002eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ff29 	bl	8002d18 <__NVIC_SetPriorityGrouping>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee0:	f7ff ff3e 	bl	8002d60 <__NVIC_GetPriorityGrouping>
 8002ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	6978      	ldr	r0, [r7, #20]
 8002eec:	f7ff ff8e 	bl	8002e0c <NVIC_EncodePriority>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff5d 	bl	8002db8 <__NVIC_SetPriority>
}
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff31 	bl	8002d7c <__NVIC_EnableIRQ>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ffa2 	bl	8002e74 <SysTick_Config>
 8002f30:	4603      	mov	r3, r0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f48:	f7ff f990 	bl	800226c <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e099      	b.n	800308c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f78:	e00f      	b.n	8002f9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f7a:	f7ff f977 	bl	800226c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d908      	bls.n	8002f9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2203      	movs	r2, #3
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e078      	b.n	800308c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1e8      	bne.n	8002f7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4b38      	ldr	r3, [pc, #224]	; (8003094 <HAL_DMA_Init+0x158>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d107      	bne.n	8003004 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0307 	bic.w	r3, r3, #7
 800301a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	2b04      	cmp	r3, #4
 800302c:	d117      	bne.n	800305e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00e      	beq.n	800305e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 faab 	bl	800359c <DMA_CheckFifoParam>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2240      	movs	r2, #64	; 0x40
 8003050:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800305a:	2301      	movs	r3, #1
 800305c:	e016      	b.n	800308c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fa62 	bl	8003530 <DMA_CalcBaseAndBitshift>
 800306c:	4603      	mov	r3, r0
 800306e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	223f      	movs	r2, #63	; 0x3f
 8003076:	409a      	lsls	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	f010803f 	.word	0xf010803f

08003098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_DMA_Start_IT+0x26>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e040      	b.n	8003140 <HAL_DMA_Start_IT+0xa8>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d12f      	bne.n	8003132 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2202      	movs	r2, #2
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f9f4 	bl	80034d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	223f      	movs	r2, #63	; 0x3f
 80030f2:	409a      	lsls	r2, r3
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0216 	orr.w	r2, r2, #22
 8003106:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0208 	orr.w	r2, r2, #8
 800311e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	e005      	b.n	800313e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800313a:	2302      	movs	r3, #2
 800313c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800313e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d004      	beq.n	8003166 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e00c      	b.n	8003180 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2205      	movs	r2, #5
 800316a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003198:	4b8e      	ldr	r3, [pc, #568]	; (80033d4 <HAL_DMA_IRQHandler+0x248>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a8e      	ldr	r2, [pc, #568]	; (80033d8 <HAL_DMA_IRQHandler+0x24c>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	0a9b      	lsrs	r3, r3, #10
 80031a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b6:	2208      	movs	r2, #8
 80031b8:	409a      	lsls	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01a      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d013      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0204 	bic.w	r2, r2, #4
 80031de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	2208      	movs	r2, #8
 80031e6:	409a      	lsls	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	f043 0201 	orr.w	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	2201      	movs	r2, #1
 80031fe:	409a      	lsls	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d012      	beq.n	800322e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321a:	2201      	movs	r2, #1
 800321c:	409a      	lsls	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003226:	f043 0202 	orr.w	r2, r3, #2
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	2204      	movs	r2, #4
 8003234:	409a      	lsls	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d012      	beq.n	8003264 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00b      	beq.n	8003264 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	2204      	movs	r2, #4
 8003252:	409a      	lsls	r2, r3
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	f043 0204 	orr.w	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	2210      	movs	r2, #16
 800326a:	409a      	lsls	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d043      	beq.n	80032fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d03c      	beq.n	80032fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	2210      	movs	r2, #16
 8003288:	409a      	lsls	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d018      	beq.n	80032ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d108      	bne.n	80032bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d024      	beq.n	80032fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
 80032ba:	e01f      	b.n	80032fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01b      	beq.n	80032fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4798      	blx	r3
 80032cc:	e016      	b.n	80032fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d107      	bne.n	80032ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0208 	bic.w	r2, r2, #8
 80032ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	2220      	movs	r2, #32
 8003302:	409a      	lsls	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 808f 	beq.w	800342c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8087 	beq.w	800342c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003322:	2220      	movs	r2, #32
 8003324:	409a      	lsls	r2, r3
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b05      	cmp	r3, #5
 8003334:	d136      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0216 	bic.w	r2, r2, #22
 8003344:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003354:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <HAL_DMA_IRQHandler+0x1da>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0208 	bic.w	r2, r2, #8
 8003374:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	223f      	movs	r2, #63	; 0x3f
 800337c:	409a      	lsls	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003396:	2b00      	cmp	r3, #0
 8003398:	d07e      	beq.n	8003498 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
        }
        return;
 80033a2:	e079      	b.n	8003498 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d01d      	beq.n	80033ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10d      	bne.n	80033dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d031      	beq.n	800342c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
 80033d0:	e02c      	b.n	800342c <HAL_DMA_IRQHandler+0x2a0>
 80033d2:	bf00      	nop
 80033d4:	20000030 	.word	0x20000030
 80033d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d023      	beq.n	800342c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
 80033ec:	e01e      	b.n	800342c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10f      	bne.n	800341c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0210 	bic.w	r2, r2, #16
 800340a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	2b00      	cmp	r3, #0
 8003432:	d032      	beq.n	800349a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d022      	beq.n	8003486 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2205      	movs	r2, #5
 8003444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0201 	bic.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3301      	adds	r3, #1
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	429a      	cmp	r2, r3
 8003462:	d307      	bcc.n	8003474 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f2      	bne.n	8003458 <HAL_DMA_IRQHandler+0x2cc>
 8003472:	e000      	b.n	8003476 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003474:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
 8003496:	e000      	b.n	800349a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003498:	bf00      	nop
    }
  }
}
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ae:	b2db      	uxtb	r3, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d108      	bne.n	8003514 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003512:	e007      	b.n	8003524 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	3b10      	subs	r3, #16
 8003540:	4a14      	ldr	r2, [pc, #80]	; (8003594 <DMA_CalcBaseAndBitshift+0x64>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800354a:	4a13      	ldr	r2, [pc, #76]	; (8003598 <DMA_CalcBaseAndBitshift+0x68>)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b03      	cmp	r3, #3
 800355c:	d909      	bls.n	8003572 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003566:	f023 0303 	bic.w	r3, r3, #3
 800356a:	1d1a      	adds	r2, r3, #4
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	659a      	str	r2, [r3, #88]	; 0x58
 8003570:	e007      	b.n	8003582 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800357a:	f023 0303 	bic.w	r3, r3, #3
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	aaaaaaab 	.word	0xaaaaaaab
 8003598:	08010228 	.word	0x08010228

0800359c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d11f      	bne.n	80035f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d856      	bhi.n	800366a <DMA_CheckFifoParam+0xce>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <DMA_CheckFifoParam+0x28>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035d5 	.word	0x080035d5
 80035c8:	080035e7 	.word	0x080035e7
 80035cc:	080035d5 	.word	0x080035d5
 80035d0:	0800366b 	.word	0x0800366b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d046      	beq.n	800366e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e4:	e043      	b.n	800366e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035ee:	d140      	bne.n	8003672 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f4:	e03d      	b.n	8003672 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fe:	d121      	bne.n	8003644 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d837      	bhi.n	8003676 <DMA_CheckFifoParam+0xda>
 8003606:	a201      	add	r2, pc, #4	; (adr r2, 800360c <DMA_CheckFifoParam+0x70>)
 8003608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360c:	0800361d 	.word	0x0800361d
 8003610:	08003623 	.word	0x08003623
 8003614:	0800361d 	.word	0x0800361d
 8003618:	08003635 	.word	0x08003635
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      break;
 8003620:	e030      	b.n	8003684 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d025      	beq.n	800367a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003632:	e022      	b.n	800367a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800363c:	d11f      	bne.n	800367e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003642:	e01c      	b.n	800367e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d903      	bls.n	8003652 <DMA_CheckFifoParam+0xb6>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b03      	cmp	r3, #3
 800364e:	d003      	beq.n	8003658 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003650:	e018      	b.n	8003684 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
      break;
 8003656:	e015      	b.n	8003684 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00e      	beq.n	8003682 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      break;
 8003668:	e00b      	b.n	8003682 <DMA_CheckFifoParam+0xe6>
      break;
 800366a:	bf00      	nop
 800366c:	e00a      	b.n	8003684 <DMA_CheckFifoParam+0xe8>
      break;
 800366e:	bf00      	nop
 8003670:	e008      	b.n	8003684 <DMA_CheckFifoParam+0xe8>
      break;
 8003672:	bf00      	nop
 8003674:	e006      	b.n	8003684 <DMA_CheckFifoParam+0xe8>
      break;
 8003676:	bf00      	nop
 8003678:	e004      	b.n	8003684 <DMA_CheckFifoParam+0xe8>
      break;
 800367a:	bf00      	nop
 800367c:	e002      	b.n	8003684 <DMA_CheckFifoParam+0xe8>
      break;   
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <DMA_CheckFifoParam+0xe8>
      break;
 8003682:	bf00      	nop
    }
  } 
  
  return status; 
 8003684:	7bfb      	ldrb	r3, [r7, #15]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop

08003694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	; 0x24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	e159      	b.n	8003964 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036b0:	2201      	movs	r2, #1
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	f040 8148 	bne.w	800395e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d005      	beq.n	80036e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d130      	bne.n	8003748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	2203      	movs	r2, #3
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4013      	ands	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800371c:	2201      	movs	r2, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 0201 	and.w	r2, r3, #1
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4313      	orrs	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b03      	cmp	r3, #3
 8003752:	d017      	beq.n	8003784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d123      	bne.n	80037d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	08da      	lsrs	r2, r3, #3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3208      	adds	r2, #8
 8003798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	220f      	movs	r2, #15
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	08da      	lsrs	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3208      	adds	r2, #8
 80037d2:	69b9      	ldr	r1, [r7, #24]
 80037d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	2203      	movs	r2, #3
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0203 	and.w	r2, r3, #3
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80a2 	beq.w	800395e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	4b57      	ldr	r3, [pc, #348]	; (800397c <HAL_GPIO_Init+0x2e8>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	4a56      	ldr	r2, [pc, #344]	; (800397c <HAL_GPIO_Init+0x2e8>)
 8003824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003828:	6453      	str	r3, [r2, #68]	; 0x44
 800382a:	4b54      	ldr	r3, [pc, #336]	; (800397c <HAL_GPIO_Init+0x2e8>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003836:	4a52      	ldr	r2, [pc, #328]	; (8003980 <HAL_GPIO_Init+0x2ec>)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	089b      	lsrs	r3, r3, #2
 800383c:	3302      	adds	r3, #2
 800383e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	220f      	movs	r2, #15
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a49      	ldr	r2, [pc, #292]	; (8003984 <HAL_GPIO_Init+0x2f0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d019      	beq.n	8003896 <HAL_GPIO_Init+0x202>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a48      	ldr	r2, [pc, #288]	; (8003988 <HAL_GPIO_Init+0x2f4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_GPIO_Init+0x1fe>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a47      	ldr	r2, [pc, #284]	; (800398c <HAL_GPIO_Init+0x2f8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00d      	beq.n	800388e <HAL_GPIO_Init+0x1fa>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a46      	ldr	r2, [pc, #280]	; (8003990 <HAL_GPIO_Init+0x2fc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <HAL_GPIO_Init+0x1f6>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a45      	ldr	r2, [pc, #276]	; (8003994 <HAL_GPIO_Init+0x300>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_GPIO_Init+0x1f2>
 8003882:	2304      	movs	r3, #4
 8003884:	e008      	b.n	8003898 <HAL_GPIO_Init+0x204>
 8003886:	2307      	movs	r3, #7
 8003888:	e006      	b.n	8003898 <HAL_GPIO_Init+0x204>
 800388a:	2303      	movs	r3, #3
 800388c:	e004      	b.n	8003898 <HAL_GPIO_Init+0x204>
 800388e:	2302      	movs	r3, #2
 8003890:	e002      	b.n	8003898 <HAL_GPIO_Init+0x204>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_GPIO_Init+0x204>
 8003896:	2300      	movs	r3, #0
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	f002 0203 	and.w	r2, r2, #3
 800389e:	0092      	lsls	r2, r2, #2
 80038a0:	4093      	lsls	r3, r2
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038a8:	4935      	ldr	r1, [pc, #212]	; (8003980 <HAL_GPIO_Init+0x2ec>)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	3302      	adds	r3, #2
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038b6:	4b38      	ldr	r3, [pc, #224]	; (8003998 <HAL_GPIO_Init+0x304>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038da:	4a2f      	ldr	r2, [pc, #188]	; (8003998 <HAL_GPIO_Init+0x304>)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038e0:	4b2d      	ldr	r3, [pc, #180]	; (8003998 <HAL_GPIO_Init+0x304>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003904:	4a24      	ldr	r2, [pc, #144]	; (8003998 <HAL_GPIO_Init+0x304>)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800390a:	4b23      	ldr	r3, [pc, #140]	; (8003998 <HAL_GPIO_Init+0x304>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	43db      	mvns	r3, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800392e:	4a1a      	ldr	r2, [pc, #104]	; (8003998 <HAL_GPIO_Init+0x304>)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003934:	4b18      	ldr	r3, [pc, #96]	; (8003998 <HAL_GPIO_Init+0x304>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003958:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <HAL_GPIO_Init+0x304>)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3301      	adds	r3, #1
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	2b0f      	cmp	r3, #15
 8003968:	f67f aea2 	bls.w	80036b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	3724      	adds	r7, #36	; 0x24
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40023800 	.word	0x40023800
 8003980:	40013800 	.word	0x40013800
 8003984:	40020000 	.word	0x40020000
 8003988:	40020400 	.word	0x40020400
 800398c:	40020800 	.word	0x40020800
 8003990:	40020c00 	.word	0x40020c00
 8003994:	40021000 	.word	0x40021000
 8003998:	40013c00 	.word	0x40013c00

0800399c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039a6:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d006      	beq.n	80039c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039b2:	4a05      	ldr	r2, [pc, #20]	; (80039c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe f95a 	bl	8001c74 <HAL_GPIO_EXTI_Callback>
  }
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40013c00 	.word	0x40013c00

080039cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e12b      	b.n	8003c36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fd fdac 	bl	8001550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2224      	movs	r2, #36	; 0x24
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a30:	f004 fdb0 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 8003a34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4a81      	ldr	r2, [pc, #516]	; (8003c40 <HAL_I2C_Init+0x274>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d807      	bhi.n	8003a50 <HAL_I2C_Init+0x84>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a80      	ldr	r2, [pc, #512]	; (8003c44 <HAL_I2C_Init+0x278>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	bf94      	ite	ls
 8003a48:	2301      	movls	r3, #1
 8003a4a:	2300      	movhi	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e006      	b.n	8003a5e <HAL_I2C_Init+0x92>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4a7d      	ldr	r2, [pc, #500]	; (8003c48 <HAL_I2C_Init+0x27c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	bf94      	ite	ls
 8003a58:	2301      	movls	r3, #1
 8003a5a:	2300      	movhi	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0e7      	b.n	8003c36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a78      	ldr	r2, [pc, #480]	; (8003c4c <HAL_I2C_Init+0x280>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	0c9b      	lsrs	r3, r3, #18
 8003a70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4a6a      	ldr	r2, [pc, #424]	; (8003c40 <HAL_I2C_Init+0x274>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d802      	bhi.n	8003aa0 <HAL_I2C_Init+0xd4>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	e009      	b.n	8003ab4 <HAL_I2C_Init+0xe8>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	4a69      	ldr	r2, [pc, #420]	; (8003c50 <HAL_I2C_Init+0x284>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	099b      	lsrs	r3, r3, #6
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ac6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	495c      	ldr	r1, [pc, #368]	; (8003c40 <HAL_I2C_Init+0x274>)
 8003ad0:	428b      	cmp	r3, r1
 8003ad2:	d819      	bhi.n	8003b08 <HAL_I2C_Init+0x13c>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1e59      	subs	r1, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ae2:	1c59      	adds	r1, r3, #1
 8003ae4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ae8:	400b      	ands	r3, r1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_I2C_Init+0x138>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1e59      	subs	r1, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b02:	e051      	b.n	8003ba8 <HAL_I2C_Init+0x1dc>
 8003b04:	2304      	movs	r3, #4
 8003b06:	e04f      	b.n	8003ba8 <HAL_I2C_Init+0x1dc>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d111      	bne.n	8003b34 <HAL_I2C_Init+0x168>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1e58      	subs	r0, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	440b      	add	r3, r1
 8003b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b22:	3301      	adds	r3, #1
 8003b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	e012      	b.n	8003b5a <HAL_I2C_Init+0x18e>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1e58      	subs	r0, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	0099      	lsls	r1, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_Init+0x196>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e022      	b.n	8003ba8 <HAL_I2C_Init+0x1dc>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10e      	bne.n	8003b88 <HAL_I2C_Init+0x1bc>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1e58      	subs	r0, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6859      	ldr	r1, [r3, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	440b      	add	r3, r1
 8003b78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b86:	e00f      	b.n	8003ba8 <HAL_I2C_Init+0x1dc>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1e58      	subs	r0, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6859      	ldr	r1, [r3, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	0099      	lsls	r1, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	6809      	ldr	r1, [r1, #0]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69da      	ldr	r2, [r3, #28]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6911      	ldr	r1, [r2, #16]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68d2      	ldr	r2, [r2, #12]
 8003be2:	4311      	orrs	r1, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	000186a0 	.word	0x000186a0
 8003c44:	001e847f 	.word	0x001e847f
 8003c48:	003d08ff 	.word	0x003d08ff
 8003c4c:	431bde83 	.word	0x431bde83
 8003c50:	10624dd3 	.word	0x10624dd3

08003c54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	4611      	mov	r1, r2
 8003c60:	461a      	mov	r2, r3
 8003c62:	4603      	mov	r3, r0
 8003c64:	817b      	strh	r3, [r7, #10]
 8003c66:	460b      	mov	r3, r1
 8003c68:	813b      	strh	r3, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c6e:	f7fe fafd 	bl	800226c <HAL_GetTick>
 8003c72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	f040 80d9 	bne.w	8003e34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	2319      	movs	r3, #25
 8003c88:	2201      	movs	r2, #1
 8003c8a:	496d      	ldr	r1, [pc, #436]	; (8003e40 <HAL_I2C_Mem_Write+0x1ec>)
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f002 fba9 	bl	80063e4 <I2C_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e0cc      	b.n	8003e36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_I2C_Mem_Write+0x56>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e0c5      	b.n	8003e36 <HAL_I2C_Mem_Write+0x1e2>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d007      	beq.n	8003cd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2221      	movs	r2, #33	; 0x21
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2240      	movs	r2, #64	; 0x40
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a3a      	ldr	r2, [r7, #32]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a4d      	ldr	r2, [pc, #308]	; (8003e44 <HAL_I2C_Mem_Write+0x1f0>)
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d12:	88f8      	ldrh	r0, [r7, #6]
 8003d14:	893a      	ldrh	r2, [r7, #8]
 8003d16:	8979      	ldrh	r1, [r7, #10]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	4603      	mov	r3, r0
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f002 f826 	bl	8005d74 <I2C_RequestMemoryWrite>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d052      	beq.n	8003dd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e081      	b.n	8003e36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f002 fc2a 	bl	8006590 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00d      	beq.n	8003d5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d107      	bne.n	8003d5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e06b      	b.n	8003e36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	781a      	ldrb	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_I2C_Mem_Write+0x180>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d017      	beq.n	8003dd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	781a      	ldrb	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1aa      	bne.n	8003d32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f002 fc16 	bl	8006612 <I2C_WaitOnBTFFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00d      	beq.n	8003e08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d107      	bne.n	8003e04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e016      	b.n	8003e36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e000      	b.n	8003e36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
  }
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	00100002 	.word	0x00100002
 8003e44:	ffff0000 	.word	0xffff0000

08003e48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	; 0x30
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	4608      	mov	r0, r1
 8003e52:	4611      	mov	r1, r2
 8003e54:	461a      	mov	r2, r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	817b      	strh	r3, [r7, #10]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	813b      	strh	r3, [r7, #8]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e62:	f7fe fa03 	bl	800226c <HAL_GetTick>
 8003e66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	f040 8208 	bne.w	8004286 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	2319      	movs	r3, #25
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	497b      	ldr	r1, [pc, #492]	; (800406c <HAL_I2C_Mem_Read+0x224>)
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f002 faaf 	bl	80063e4 <I2C_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e1fb      	b.n	8004288 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_I2C_Mem_Read+0x56>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e1f4      	b.n	8004288 <HAL_I2C_Mem_Read+0x440>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d007      	beq.n	8003ec4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ed2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2222      	movs	r2, #34	; 0x22
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2240      	movs	r2, #64	; 0x40
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4a5b      	ldr	r2, [pc, #364]	; (8004070 <HAL_I2C_Mem_Read+0x228>)
 8003f04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f06:	88f8      	ldrh	r0, [r7, #6]
 8003f08:	893a      	ldrh	r2, [r7, #8]
 8003f0a:	8979      	ldrh	r1, [r7, #10]
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	4603      	mov	r3, r0
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f001 ffc2 	bl	8005ea0 <I2C_RequestMemoryRead>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e1b0      	b.n	8004288 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d113      	bne.n	8003f56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	623b      	str	r3, [r7, #32]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	623b      	str	r3, [r7, #32]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	623b      	str	r3, [r7, #32]
 8003f42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e184      	b.n	8004260 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d11b      	bne.n	8003f96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	e164      	b.n	8004260 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d11b      	bne.n	8003fd6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	e144      	b.n	8004260 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fec:	e138      	b.n	8004260 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	f200 80f1 	bhi.w	80041da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d123      	bne.n	8004048 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004002:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f002 fb77 	bl	80066f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e139      	b.n	8004288 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004046:	e10b      	b.n	8004260 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404c:	2b02      	cmp	r3, #2
 800404e:	d14e      	bne.n	80040ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	2200      	movs	r2, #0
 8004058:	4906      	ldr	r1, [pc, #24]	; (8004074 <HAL_I2C_Mem_Read+0x22c>)
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f002 f9c2 	bl	80063e4 <I2C_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e10e      	b.n	8004288 <HAL_I2C_Mem_Read+0x440>
 800406a:	bf00      	nop
 800406c:	00100002 	.word	0x00100002
 8004070:	ffff0000 	.word	0xffff0000
 8004074:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004086:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040ec:	e0b8      	b.n	8004260 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	2200      	movs	r2, #0
 80040f6:	4966      	ldr	r1, [pc, #408]	; (8004290 <HAL_I2C_Mem_Read+0x448>)
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f002 f973 	bl	80063e4 <I2C_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0bf      	b.n	8004288 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004150:	2200      	movs	r2, #0
 8004152:	494f      	ldr	r1, [pc, #316]	; (8004290 <HAL_I2C_Mem_Read+0x448>)
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f002 f945 	bl	80063e4 <I2C_WaitOnFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e091      	b.n	8004288 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041d8:	e042      	b.n	8004260 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f002 fa8a 	bl	80066f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e04c      	b.n	8004288 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b04      	cmp	r3, #4
 800422c:	d118      	bne.n	8004260 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	f47f aec2 	bne.w	8003fee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	e000      	b.n	8004288 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004286:	2302      	movs	r3, #2
  }
}
 8004288:	4618      	mov	r0, r3
 800428a:	3728      	adds	r7, #40	; 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	00010004 	.word	0x00010004

08004294 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08c      	sub	sp, #48	; 0x30
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	4608      	mov	r0, r1
 800429e:	4611      	mov	r1, r2
 80042a0:	461a      	mov	r2, r3
 80042a2:	4603      	mov	r3, r0
 80042a4:	817b      	strh	r3, [r7, #10]
 80042a6:	460b      	mov	r3, r1
 80042a8:	813b      	strh	r3, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ae:	f7fd ffdd 	bl	800226c <HAL_GetTick>
 80042b2:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	f040 8176 	bne.w	80045b2 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80042c6:	4b95      	ldr	r3, [pc, #596]	; (800451c <HAL_I2C_Mem_Read_DMA+0x288>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	08db      	lsrs	r3, r3, #3
 80042cc:	4a94      	ldr	r2, [pc, #592]	; (8004520 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	0a1a      	lsrs	r2, r3, #8
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	009a      	lsls	r2, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d116      	bne.n	800431a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f043 0220 	orr.w	r2, r3, #32
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e14c      	b.n	80045b4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b02      	cmp	r3, #2
 8004326:	d0db      	beq.n	80042e0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_I2C_Mem_Read_DMA+0xa2>
 8004332:	2302      	movs	r3, #2
 8004334:	e13e      	b.n	80045b4 <HAL_I2C_Mem_Read_DMA+0x320>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d007      	beq.n	800435c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800436a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2222      	movs	r2, #34	; 0x22
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2240      	movs	r2, #64	; 0x40
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004386:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800438c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4a62      	ldr	r2, [pc, #392]	; (8004524 <HAL_I2C_Mem_Read_DMA+0x290>)
 800439c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800439e:	897a      	ldrh	r2, [r7, #10]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80043a4:	893a      	ldrh	r2, [r7, #8]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80043aa:	88fa      	ldrh	r2, [r7, #6]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 80cc 	beq.w	8004558 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d02d      	beq.n	8004424 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	4a56      	ldr	r2, [pc, #344]	; (8004528 <HAL_I2C_Mem_Read_DMA+0x294>)
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	4a55      	ldr	r2, [pc, #340]	; (800452c <HAL_I2C_Mem_Read_DMA+0x298>)
 80043d6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	2200      	movs	r2, #0
 80043de:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	2200      	movs	r2, #0
 80043e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	2200      	movs	r2, #0
 80043ee:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	2200      	movs	r2, #0
 80043f6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3310      	adds	r3, #16
 8004402:	4619      	mov	r1, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	461a      	mov	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	f7fe fe43 	bl	8003098 <HAL_DMA_Start_IT>
 8004412:	4603      	mov	r3, r0
 8004414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004418:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 8087 	bne.w	8004530 <HAL_I2C_Mem_Read_DMA+0x29c>
 8004422:	e013      	b.n	800444c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0b3      	b.n	80045b4 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800444c:	88f8      	ldrh	r0, [r7, #6]
 800444e:	893a      	ldrh	r2, [r7, #8]
 8004450:	8979      	ldrh	r1, [r7, #10]
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	2323      	movs	r3, #35	; 0x23
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	4603      	mov	r3, r0
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f001 fd1f 	bl	8005ea0 <I2C_RequestMemoryRead>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d023      	beq.n	80044b0 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	4618      	mov	r0, r3
 800446e:	f7fe fe6b 	bl	8003148 <HAL_DMA_Abort_IT>
 8004472:	4603      	mov	r3, r0
 8004474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	2200      	movs	r2, #0
 800447e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e081      	b.n	80045b4 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d108      	bne.n	80044ca <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	e007      	b.n	80044da <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004506:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004516:	605a      	str	r2, [r3, #4]
 8004518:	e049      	b.n	80045ae <HAL_I2C_Mem_Read_DMA+0x31a>
 800451a:	bf00      	nop
 800451c:	20000030 	.word	0x20000030
 8004520:	14f8b589 	.word	0x14f8b589
 8004524:	ffff0000 	.word	0xffff0000
 8004528:	08006071 	.word	0x08006071
 800452c:	0800621b 	.word	0x0800621b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f043 0210 	orr.w	r2, r3, #16
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e02d      	b.n	80045b4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004558:	88f8      	ldrh	r0, [r7, #6]
 800455a:	893a      	ldrh	r2, [r7, #8]
 800455c:	8979      	ldrh	r1, [r7, #10]
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	2323      	movs	r3, #35	; 0x23
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	4603      	mov	r3, r0
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f001 fc99 	bl	8005ea0 <I2C_RequestMemoryRead>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e01d      	b.n	80045b4 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e000      	b.n	80045b4 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 80045b2:	2302      	movs	r3, #2
  }
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3728      	adds	r7, #40	; 0x28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d003      	beq.n	80045f4 <HAL_I2C_EV_IRQHandler+0x38>
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	f040 80c1 	bne.w	8004776 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10d      	bne.n	800462a <HAL_I2C_EV_IRQHandler+0x6e>
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004614:	d003      	beq.n	800461e <HAL_I2C_EV_IRQHandler+0x62>
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800461c:	d101      	bne.n	8004622 <HAL_I2C_EV_IRQHandler+0x66>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_I2C_EV_IRQHandler+0x68>
 8004622:	2300      	movs	r3, #0
 8004624:	2b01      	cmp	r3, #1
 8004626:	f000 8132 	beq.w	800488e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00c      	beq.n	800464e <HAL_I2C_EV_IRQHandler+0x92>
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	0a5b      	lsrs	r3, r3, #9
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d006      	beq.n	800464e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f002 f8de 	bl	8006802 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fd79 	bl	800513e <I2C_Master_SB>
 800464c:	e092      	b.n	8004774 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	08db      	lsrs	r3, r3, #3
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_I2C_EV_IRQHandler+0xb2>
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	0a5b      	lsrs	r3, r3, #9
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fdef 	bl	800524a <I2C_Master_ADD10>
 800466c:	e082      	b.n	8004774 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <HAL_I2C_EV_IRQHandler+0xd2>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	0a5b      	lsrs	r3, r3, #9
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fe09 	bl	800529e <I2C_Master_ADDR>
 800468c:	e072      	b.n	8004774 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d03b      	beq.n	8004712 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a8:	f000 80f3 	beq.w	8004892 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	09db      	lsrs	r3, r3, #7
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00f      	beq.n	80046d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	0a9b      	lsrs	r3, r3, #10
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d009      	beq.n	80046d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d103      	bne.n	80046d8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f9e9 	bl	8004aa8 <I2C_MasterTransmit_TXE>
 80046d6:	e04d      	b.n	8004774 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	089b      	lsrs	r3, r3, #2
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80d6 	beq.w	8004892 <HAL_I2C_EV_IRQHandler+0x2d6>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	0a5b      	lsrs	r3, r3, #9
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80cf 	beq.w	8004892 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046f4:	7bbb      	ldrb	r3, [r7, #14]
 80046f6:	2b21      	cmp	r3, #33	; 0x21
 80046f8:	d103      	bne.n	8004702 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fa70 	bl	8004be0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004700:	e0c7      	b.n	8004892 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	f040 80c4 	bne.w	8004892 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fade 	bl	8004ccc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004710:	e0bf      	b.n	8004892 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004720:	f000 80b7 	beq.w	8004892 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00f      	beq.n	8004750 <HAL_I2C_EV_IRQHandler+0x194>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	0a9b      	lsrs	r3, r3, #10
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d009      	beq.n	8004750 <HAL_I2C_EV_IRQHandler+0x194>
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d103      	bne.n	8004750 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fb53 	bl	8004df4 <I2C_MasterReceive_RXNE>
 800474e:	e011      	b.n	8004774 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 809a 	beq.w	8004892 <HAL_I2C_EV_IRQHandler+0x2d6>
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	0a5b      	lsrs	r3, r3, #9
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8093 	beq.w	8004892 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fbfc 	bl	8004f6a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004772:	e08e      	b.n	8004892 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004774:	e08d      	b.n	8004892 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	e007      	b.n	8004798 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	085b      	lsrs	r3, r3, #1
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d012      	beq.n	80047ca <HAL_I2C_EV_IRQHandler+0x20e>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	0a5b      	lsrs	r3, r3, #9
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00c      	beq.n	80047ca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80047c0:	69b9      	ldr	r1, [r7, #24]
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 ffba 	bl	800573c <I2C_Slave_ADDR>
 80047c8:	e066      	b.n	8004898 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_I2C_EV_IRQHandler+0x22e>
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	0a5b      	lsrs	r3, r3, #9
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fff4 	bl	80057d0 <I2C_Slave_STOPF>
 80047e8:	e056      	b.n	8004898 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047ea:	7bbb      	ldrb	r3, [r7, #14]
 80047ec:	2b21      	cmp	r3, #33	; 0x21
 80047ee:	d002      	beq.n	80047f6 <HAL_I2C_EV_IRQHandler+0x23a>
 80047f0:	7bbb      	ldrb	r3, [r7, #14]
 80047f2:	2b29      	cmp	r3, #41	; 0x29
 80047f4:	d125      	bne.n	8004842 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	09db      	lsrs	r3, r3, #7
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00f      	beq.n	8004822 <HAL_I2C_EV_IRQHandler+0x266>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	0a9b      	lsrs	r3, r3, #10
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_I2C_EV_IRQHandler+0x266>
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	089b      	lsrs	r3, r3, #2
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fed0 	bl	80055c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004820:	e039      	b.n	8004896 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d033      	beq.n	8004896 <HAL_I2C_EV_IRQHandler+0x2da>
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	0a5b      	lsrs	r3, r3, #9
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d02d      	beq.n	8004896 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fefd 	bl	800563a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004840:	e029      	b.n	8004896 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	099b      	lsrs	r3, r3, #6
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00f      	beq.n	800486e <HAL_I2C_EV_IRQHandler+0x2b2>
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	0a9b      	lsrs	r3, r3, #10
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <HAL_I2C_EV_IRQHandler+0x2b2>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d103      	bne.n	800486e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 ff08 	bl	800567c <I2C_SlaveReceive_RXNE>
 800486c:	e014      	b.n	8004898 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	089b      	lsrs	r3, r3, #2
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00e      	beq.n	8004898 <HAL_I2C_EV_IRQHandler+0x2dc>
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	0a5b      	lsrs	r3, r3, #9
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 ff36 	bl	80056f8 <I2C_SlaveReceive_BTF>
 800488c:	e004      	b.n	8004898 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800488e:	bf00      	nop
 8004890:	e002      	b.n	8004898 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004896:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b08a      	sub	sp, #40	; 0x28
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	0a1b      	lsrs	r3, r3, #8
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00e      	beq.n	80048ec <HAL_I2C_ER_IRQHandler+0x4e>
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	0a1b      	lsrs	r3, r3, #8
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048ea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	0a5b      	lsrs	r3, r3, #9
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00e      	beq.n	8004916 <HAL_I2C_ER_IRQHandler+0x78>
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	f043 0302 	orr.w	r3, r3, #2
 800490a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004914:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	0a9b      	lsrs	r3, r3, #10
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d03f      	beq.n	80049a2 <HAL_I2C_ER_IRQHandler+0x104>
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	0a1b      	lsrs	r3, r3, #8
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d039      	beq.n	80049a2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800492e:	7efb      	ldrb	r3, [r7, #27]
 8004930:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29b      	uxth	r3, r3
 8004938:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004940:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004948:	7ebb      	ldrb	r3, [r7, #26]
 800494a:	2b20      	cmp	r3, #32
 800494c:	d112      	bne.n	8004974 <HAL_I2C_ER_IRQHandler+0xd6>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10f      	bne.n	8004974 <HAL_I2C_ER_IRQHandler+0xd6>
 8004954:	7cfb      	ldrb	r3, [r7, #19]
 8004956:	2b21      	cmp	r3, #33	; 0x21
 8004958:	d008      	beq.n	800496c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800495a:	7cfb      	ldrb	r3, [r7, #19]
 800495c:	2b29      	cmp	r3, #41	; 0x29
 800495e:	d005      	beq.n	800496c <HAL_I2C_ER_IRQHandler+0xce>
 8004960:	7cfb      	ldrb	r3, [r7, #19]
 8004962:	2b28      	cmp	r3, #40	; 0x28
 8004964:	d106      	bne.n	8004974 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b21      	cmp	r3, #33	; 0x21
 800496a:	d103      	bne.n	8004974 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f001 f85f 	bl	8005a30 <I2C_Slave_AF>
 8004972:	e016      	b.n	80049a2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800497c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	f043 0304 	orr.w	r3, r3, #4
 8004984:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004986:	7efb      	ldrb	r3, [r7, #27]
 8004988:	2b10      	cmp	r3, #16
 800498a:	d002      	beq.n	8004992 <HAL_I2C_ER_IRQHandler+0xf4>
 800498c:	7efb      	ldrb	r3, [r7, #27]
 800498e:	2b40      	cmp	r3, #64	; 0x40
 8004990:	d107      	bne.n	80049a2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	0adb      	lsrs	r3, r3, #11
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00e      	beq.n	80049cc <HAL_I2C_ER_IRQHandler+0x12e>
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	0a1b      	lsrs	r3, r3, #8
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	f043 0308 	orr.w	r3, r3, #8
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80049ca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f001 f896 	bl	8005b10 <I2C_ITError>
  }
}
 80049e4:	bf00      	nop
 80049e6:	3728      	adds	r7, #40	; 0x28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	70fb      	strb	r3, [r7, #3]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004abe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d150      	bne.n	8004b70 <I2C_MasterTransmit_TXE+0xc8>
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b21      	cmp	r3, #33	; 0x21
 8004ad2:	d14d      	bne.n	8004b70 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d01d      	beq.n	8004b16 <I2C_MasterTransmit_TXE+0x6e>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d01a      	beq.n	8004b16 <I2C_MasterTransmit_TXE+0x6e>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ae6:	d016      	beq.n	8004b16 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004af6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2211      	movs	r2, #17
 8004afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff ff6c 	bl	80049ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b14:	e060      	b.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b24:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b34:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d107      	bne.n	8004b60 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff ff87 	bl	8004a6c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b5e:	e03b      	b.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ff3f 	bl	80049ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b6e:	e033      	b.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	2b21      	cmp	r3, #33	; 0x21
 8004b74:	d005      	beq.n	8004b82 <I2C_MasterTransmit_TXE+0xda>
 8004b76:	7bbb      	ldrb	r3, [r7, #14]
 8004b78:	2b40      	cmp	r3, #64	; 0x40
 8004b7a:	d12d      	bne.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b22      	cmp	r3, #34	; 0x22
 8004b80:	d12a      	bne.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d108      	bne.n	8004b9e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b9c:	e01c      	b.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d103      	bne.n	8004bb2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f88e 	bl	8004ccc <I2C_MemoryTransmit_TXE_BTF>
}
 8004bb0:	e012      	b.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	781a      	ldrb	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004bd6:	e7ff      	b.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b21      	cmp	r3, #33	; 0x21
 8004bf8:	d164      	bne.n	8004cc4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d012      	beq.n	8004c2a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	781a      	ldrb	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004c28:	e04c      	b.n	8004cc4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d01d      	beq.n	8004c6c <I2C_MasterTransmit_BTF+0x8c>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d01a      	beq.n	8004c6c <I2C_MasterTransmit_BTF+0x8c>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c3c:	d016      	beq.n	8004c6c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c4c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2211      	movs	r2, #17
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff fec1 	bl	80049ec <HAL_I2C_MasterTxCpltCallback>
}
 8004c6a:	e02b      	b.n	8004cc4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c7a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b40      	cmp	r3, #64	; 0x40
 8004ca4:	d107      	bne.n	8004cb6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fedc 	bl	8004a6c <HAL_I2C_MemTxCpltCallback>
}
 8004cb4:	e006      	b.n	8004cc4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff fe94 	bl	80049ec <HAL_I2C_MasterTxCpltCallback>
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d11d      	bne.n	8004d20 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10b      	bne.n	8004d04 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfc:	1c9a      	adds	r2, r3, #2
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004d02:	e073      	b.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	121b      	asrs	r3, r3, #8
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d1e:	e065      	b.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d10b      	bne.n	8004d40 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d3e:	e055      	b.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d151      	bne.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b22      	cmp	r3, #34	; 0x22
 8004d4c:	d10d      	bne.n	8004d6a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d5c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d68:	e040      	b.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d015      	beq.n	8004da0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b21      	cmp	r3, #33	; 0x21
 8004d78:	d112      	bne.n	8004da0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	781a      	ldrb	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d9e:	e025      	b.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d120      	bne.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	2b21      	cmp	r3, #33	; 0x21
 8004dae:	d11d      	bne.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dbe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7ff fe40 	bl	8004a6c <HAL_I2C_MemTxCpltCallback>
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b22      	cmp	r3, #34	; 0x22
 8004e06:	f040 80ac 	bne.w	8004f62 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d921      	bls.n	8004e5c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	f040 808c 	bne.w	8004f62 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e58:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004e5a:	e082      	b.n	8004f62 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d075      	beq.n	8004f50 <I2C_MasterReceive_RXNE+0x15c>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d002      	beq.n	8004e70 <I2C_MasterReceive_RXNE+0x7c>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d16f      	bne.n	8004f50 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f001 fc0f 	bl	8006694 <I2C_WaitOnSTOPRequestThroughIT>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d142      	bne.n	8004f02 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b40      	cmp	r3, #64	; 0x40
 8004ed4:	d10a      	bne.n	8004eec <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7fc feb5 	bl	8001c54 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004eea:	e03a      	b.n	8004f62 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2212      	movs	r2, #18
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff fd80 	bl	8004a00 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f00:	e02f      	b.n	8004f62 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f10:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff fd99 	bl	8004a80 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f4e:	e008      	b.n	8004f62 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5e:	605a      	str	r2, [r3, #4]
}
 8004f60:	e7ff      	b.n	8004f62 <I2C_MasterReceive_RXNE+0x16e>
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d11b      	bne.n	8004fba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f90:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004fb8:	e0bd      	b.n	8005136 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d129      	bne.n	8005018 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d00a      	beq.n	8004ff0 <I2C_MasterReceive_BTF+0x86>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d007      	beq.n	8004ff0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005016:	e08e      	b.n	8005136 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d176      	bne.n	8005110 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d002      	beq.n	800502e <I2C_MasterReceive_BTF+0xc4>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b10      	cmp	r3, #16
 800502c:	d108      	bne.n	8005040 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e019      	b.n	8005074 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b04      	cmp	r3, #4
 8005044:	d002      	beq.n	800504c <I2C_MasterReceive_BTF+0xe2>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d108      	bne.n	800505e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	e00a      	b.n	8005074 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b10      	cmp	r3, #16
 8005062:	d007      	beq.n	8005074 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005072:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80050ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b40      	cmp	r3, #64	; 0x40
 80050e2:	d10a      	bne.n	80050fa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fc fdae 	bl	8001c54 <HAL_I2C_MemRxCpltCallback>
}
 80050f8:	e01d      	b.n	8005136 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2212      	movs	r2, #18
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff fc79 	bl	8004a00 <HAL_I2C_MasterRxCpltCallback>
}
 800510e:	e012      	b.n	8005136 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d117      	bne.n	8005182 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	b2db      	uxtb	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800516a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800516c:	e067      	b.n	800523e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	b2da      	uxtb	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	611a      	str	r2, [r3, #16]
}
 8005180:	e05d      	b.n	800523e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518a:	d133      	bne.n	80051f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b21      	cmp	r3, #33	; 0x21
 8005196:	d109      	bne.n	80051ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519c:	b2db      	uxtb	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051a8:	611a      	str	r2, [r3, #16]
 80051aa:	e008      	b.n	80051be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d004      	beq.n	80051d0 <I2C_Master_SB+0x92>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d108      	bne.n	80051e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d032      	beq.n	800523e <I2C_Master_SB+0x100>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d02d      	beq.n	800523e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051f0:	605a      	str	r2, [r3, #4]
}
 80051f2:	e024      	b.n	800523e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10e      	bne.n	800521a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005200:	b29b      	uxth	r3, r3
 8005202:	11db      	asrs	r3, r3, #7
 8005204:	b2db      	uxtb	r3, r3
 8005206:	f003 0306 	and.w	r3, r3, #6
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f063 030f 	orn	r3, r3, #15
 8005210:	b2da      	uxtb	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	611a      	str	r2, [r3, #16]
}
 8005218:	e011      	b.n	800523e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521e:	2b01      	cmp	r3, #1
 8005220:	d10d      	bne.n	800523e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	b29b      	uxth	r3, r3
 8005228:	11db      	asrs	r3, r3, #7
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f003 0306 	and.w	r3, r3, #6
 8005230:	b2db      	uxtb	r3, r3
 8005232:	f063 030e 	orn	r3, r3, #14
 8005236:	b2da      	uxtb	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	611a      	str	r2, [r3, #16]
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005256:	b2da      	uxtb	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <I2C_Master_ADD10+0x26>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d108      	bne.n	8005282 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00c      	beq.n	8005292 <I2C_Master_ADD10+0x48>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d007      	beq.n	8005292 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005290:	605a      	str	r2, [r3, #4]
  }
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800529e:	b480      	push	{r7}
 80052a0:	b091      	sub	sp, #68	; 0x44
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b22      	cmp	r3, #34	; 0x22
 80052c6:	f040 8169 	bne.w	800559c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10f      	bne.n	80052f2 <I2C_Master_ADDR+0x54>
 80052d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	d10b      	bne.n	80052f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052da:	2300      	movs	r3, #0
 80052dc:	633b      	str	r3, [r7, #48]	; 0x30
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	633b      	str	r3, [r7, #48]	; 0x30
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	633b      	str	r3, [r7, #48]	; 0x30
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	e160      	b.n	80055b4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d11d      	bne.n	8005336 <I2C_Master_ADDR+0x98>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005302:	d118      	bne.n	8005336 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005304:	2300      	movs	r3, #0
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005318:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005328:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	651a      	str	r2, [r3, #80]	; 0x50
 8005334:	e13e      	b.n	80055b4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d113      	bne.n	8005368 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005340:	2300      	movs	r3, #0
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e115      	b.n	8005594 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b01      	cmp	r3, #1
 8005370:	f040 808a 	bne.w	8005488 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800537a:	d137      	bne.n	80053ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800539a:	d113      	bne.n	80053c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ac:	2300      	movs	r3, #0
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	e0e7      	b.n	8005594 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c4:	2300      	movs	r3, #0
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	623b      	str	r3, [r7, #32]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e0d3      	b.n	8005594 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d02e      	beq.n	8005450 <I2C_Master_ADDR+0x1b2>
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d02b      	beq.n	8005450 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80053f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fa:	2b12      	cmp	r3, #18
 80053fc:	d102      	bne.n	8005404 <I2C_Master_ADDR+0x166>
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	2b01      	cmp	r3, #1
 8005402:	d125      	bne.n	8005450 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	2b04      	cmp	r3, #4
 8005408:	d00e      	beq.n	8005428 <I2C_Master_ADDR+0x18a>
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	2b02      	cmp	r3, #2
 800540e:	d00b      	beq.n	8005428 <I2C_Master_ADDR+0x18a>
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	2b10      	cmp	r3, #16
 8005414:	d008      	beq.n	8005428 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e007      	b.n	8005438 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005436:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005438:	2300      	movs	r3, #0
 800543a:	61fb      	str	r3, [r7, #28]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	61fb      	str	r3, [r7, #28]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	e0a1      	b.n	8005594 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e085      	b.n	8005594 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d14d      	bne.n	800552e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	2b04      	cmp	r3, #4
 8005496:	d016      	beq.n	80054c6 <I2C_Master_ADDR+0x228>
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	2b02      	cmp	r3, #2
 800549c:	d013      	beq.n	80054c6 <I2C_Master_ADDR+0x228>
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	2b10      	cmp	r3, #16
 80054a2:	d010      	beq.n	80054c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e007      	b.n	80054d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e4:	d117      	bne.n	8005516 <I2C_Master_ADDR+0x278>
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054ec:	d00b      	beq.n	8005506 <I2C_Master_ADDR+0x268>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d008      	beq.n	8005506 <I2C_Master_ADDR+0x268>
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d005      	beq.n	8005506 <I2C_Master_ADDR+0x268>
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d002      	beq.n	8005506 <I2C_Master_ADDR+0x268>
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	2b20      	cmp	r3, #32
 8005504:	d107      	bne.n	8005516 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005514:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	e032      	b.n	8005594 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800553c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800554c:	d117      	bne.n	800557e <I2C_Master_ADDR+0x2e0>
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005554:	d00b      	beq.n	800556e <I2C_Master_ADDR+0x2d0>
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	2b01      	cmp	r3, #1
 800555a:	d008      	beq.n	800556e <I2C_Master_ADDR+0x2d0>
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	2b08      	cmp	r3, #8
 8005560:	d005      	beq.n	800556e <I2C_Master_ADDR+0x2d0>
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	2b10      	cmp	r3, #16
 8005566:	d002      	beq.n	800556e <I2C_Master_ADDR+0x2d0>
 8005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556a:	2b20      	cmp	r3, #32
 800556c:	d107      	bne.n	800557e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800557c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557e:	2300      	movs	r3, #0
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800559a:	e00b      	b.n	80055b4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
}
 80055b2:	e7ff      	b.n	80055b4 <I2C_Master_ADDR+0x316>
 80055b4:	bf00      	nop
 80055b6:	3744      	adds	r7, #68	; 0x44
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d02b      	beq.n	8005632 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	781a      	ldrb	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d114      	bne.n	8005632 <I2C_SlaveTransmit_TXE+0x72>
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b29      	cmp	r3, #41	; 0x29
 800560c:	d111      	bne.n	8005632 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2221      	movs	r2, #33	; 0x21
 8005622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2228      	movs	r2, #40	; 0x28
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff f9f1 	bl	8004a14 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d011      	beq.n	8005670 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	781a      	ldrb	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d02c      	beq.n	80056f0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d114      	bne.n	80056f0 <I2C_SlaveReceive_RXNE+0x74>
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b2a      	cmp	r3, #42	; 0x2a
 80056ca:	d111      	bne.n	80056f0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2222      	movs	r2, #34	; 0x22
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2228      	movs	r2, #40	; 0x28
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff f99c 	bl	8004a28 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d012      	beq.n	8005730 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005746:	2300      	movs	r3, #0
 8005748:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005756:	2b28      	cmp	r3, #40	; 0x28
 8005758:	d127      	bne.n	80057aa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005768:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	089b      	lsrs	r3, r3, #2
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005776:	2301      	movs	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	09db      	lsrs	r3, r3, #7
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d103      	bne.n	800578e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	81bb      	strh	r3, [r7, #12]
 800578c:	e002      	b.n	8005794 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800579c:	89ba      	ldrh	r2, [r7, #12]
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7ff f94a 	bl	8004a3c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80057a8:	e00e      	b.n	80057c8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057aa:	2300      	movs	r3, #0
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80057f0:	2300      	movs	r3, #0
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	60bb      	str	r3, [r7, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800582c:	d172      	bne.n	8005914 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	2b22      	cmp	r3, #34	; 0x22
 8005832:	d002      	beq.n	800583a <I2C_Slave_STOPF+0x6a>
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	2b2a      	cmp	r3, #42	; 0x2a
 8005838:	d135      	bne.n	80058a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	b29a      	uxth	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f043 0204 	orr.w	r2, r3, #4
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800586c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	4618      	mov	r0, r3
 8005874:	f7fd fe14 	bl	80034a0 <HAL_DMA_GetState>
 8005878:	4603      	mov	r3, r0
 800587a:	2b01      	cmp	r3, #1
 800587c:	d049      	beq.n	8005912 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	4a69      	ldr	r2, [pc, #420]	; (8005a28 <I2C_Slave_STOPF+0x258>)
 8005884:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	4618      	mov	r0, r3
 800588c:	f7fd fc5c 	bl	8003148 <HAL_DMA_Abort_IT>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d03d      	beq.n	8005912 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058a0:	4610      	mov	r0, r2
 80058a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058a4:	e035      	b.n	8005912 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f043 0204 	orr.w	r2, r3, #4
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fd fdde 	bl	80034a0 <HAL_DMA_GetState>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d014      	beq.n	8005914 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	4a4e      	ldr	r2, [pc, #312]	; (8005a28 <I2C_Slave_STOPF+0x258>)
 80058f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fd fc26 	bl	8003148 <HAL_DMA_Abort_IT>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800590c:	4610      	mov	r0, r2
 800590e:	4798      	blx	r3
 8005910:	e000      	b.n	8005914 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005912:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d03e      	beq.n	800599c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b04      	cmp	r3, #4
 800592a:	d112      	bne.n	8005952 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691a      	ldr	r2, [r3, #16]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	3b01      	subs	r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d112      	bne.n	8005986 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	f043 0204 	orr.w	r2, r3, #4
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f8b3 	bl	8005b10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80059aa:	e039      	b.n	8005a20 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b2a      	cmp	r3, #42	; 0x2a
 80059b0:	d109      	bne.n	80059c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2228      	movs	r2, #40	; 0x28
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff f831 	bl	8004a28 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b28      	cmp	r3, #40	; 0x28
 80059d0:	d111      	bne.n	80059f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a15      	ldr	r2, [pc, #84]	; (8005a2c <I2C_Slave_STOPF+0x25c>)
 80059d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff f832 	bl	8004a58 <HAL_I2C_ListenCpltCallback>
}
 80059f4:	e014      	b.n	8005a20 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	2b22      	cmp	r3, #34	; 0x22
 80059fc:	d002      	beq.n	8005a04 <I2C_Slave_STOPF+0x234>
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	2b22      	cmp	r3, #34	; 0x22
 8005a02:	d10d      	bne.n	8005a20 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff f804 	bl	8004a28 <HAL_I2C_SlaveRxCpltCallback>
}
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	08006295 	.word	0x08006295
 8005a2c:	ffff0000 	.word	0xffff0000

08005a30 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d002      	beq.n	8005a52 <I2C_Slave_AF+0x22>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d129      	bne.n	8005aa6 <I2C_Slave_AF+0x76>
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b28      	cmp	r3, #40	; 0x28
 8005a56:	d126      	bne.n	8005aa6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a2c      	ldr	r2, [pc, #176]	; (8005b0c <I2C_Slave_AF+0xdc>)
 8005a5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a6c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a76:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a86:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fe ffda 	bl	8004a58 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005aa4:	e02e      	b.n	8005b04 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	2b21      	cmp	r3, #33	; 0x21
 8005aaa:	d126      	bne.n	8005afa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <I2C_Slave_AF+0xdc>)
 8005ab0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2221      	movs	r2, #33	; 0x21
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ad6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ae0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fe ff8e 	bl	8004a14 <HAL_I2C_SlaveTxCpltCallback>
}
 8005af8:	e004      	b.n	8005b04 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b02:	615a      	str	r2, [r3, #20]
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	ffff0000 	.word	0xffff0000

08005b10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	2b10      	cmp	r3, #16
 8005b2c:	d002      	beq.n	8005b34 <I2C_ITError+0x24>
 8005b2e:	7bbb      	ldrb	r3, [r7, #14]
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d10a      	bne.n	8005b4a <I2C_ITError+0x3a>
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	2b22      	cmp	r3, #34	; 0x22
 8005b38:	d107      	bne.n	8005b4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b50:	2b28      	cmp	r3, #40	; 0x28
 8005b52:	d107      	bne.n	8005b64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2228      	movs	r2, #40	; 0x28
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b62:	e015      	b.n	8005b90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b72:	d00a      	beq.n	8005b8a <I2C_ITError+0x7a>
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b60      	cmp	r3, #96	; 0x60
 8005b78:	d007      	beq.n	8005b8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9e:	d162      	bne.n	8005c66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d020      	beq.n	8005c00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	4a6a      	ldr	r2, [pc, #424]	; (8005d6c <I2C_ITError+0x25c>)
 8005bc4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fd fabc 	bl	8003148 <HAL_DMA_Abort_IT>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8089 	beq.w	8005cea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0201 	bic.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	4798      	blx	r3
 8005bfe:	e074      	b.n	8005cea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	4a59      	ldr	r2, [pc, #356]	; (8005d6c <I2C_ITError+0x25c>)
 8005c06:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fd fa9b 	bl	8003148 <HAL_DMA_Abort_IT>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d068      	beq.n	8005cea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d10b      	bne.n	8005c3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c60:	4610      	mov	r0, r2
 8005c62:	4798      	blx	r3
 8005c64:	e041      	b.n	8005cea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b60      	cmp	r3, #96	; 0x60
 8005c70:	d125      	bne.n	8005cbe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	d10b      	bne.n	8005ca6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fe feec 	bl	8004a94 <HAL_I2C_AbortCpltCallback>
 8005cbc:	e015      	b.n	8005cea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d10b      	bne.n	8005ce4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fe fecb 	bl	8004a80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10e      	bne.n	8005d18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d109      	bne.n	8005d18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d104      	bne.n	8005d18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d113      	bne.n	8005d64 <I2C_ITError+0x254>
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	2b28      	cmp	r3, #40	; 0x28
 8005d40:	d110      	bne.n	8005d64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a0a      	ldr	r2, [pc, #40]	; (8005d70 <I2C_ITError+0x260>)
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fe fe7a 	bl	8004a58 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d64:	bf00      	nop
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	08006295 	.word	0x08006295
 8005d70:	ffff0000 	.word	0xffff0000

08005d74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	461a      	mov	r2, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	817b      	strh	r3, [r7, #10]
 8005d86:	460b      	mov	r3, r1
 8005d88:	813b      	strh	r3, [r7, #8]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 fb1a 	bl	80063e4 <I2C_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00d      	beq.n	8005dd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc4:	d103      	bne.n	8005dce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e05f      	b.n	8005e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dd2:	897b      	ldrh	r3, [r7, #10]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005de0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	492d      	ldr	r1, [pc, #180]	; (8005e9c <I2C_RequestMemoryWrite+0x128>)
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fb52 	bl	8006492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e04c      	b.n	8005e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e10:	6a39      	ldr	r1, [r7, #32]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fbbc 	bl	8006590 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00d      	beq.n	8005e3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d107      	bne.n	8005e36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e02b      	b.n	8005e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e3a:	88fb      	ldrh	r3, [r7, #6]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d105      	bne.n	8005e4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e40:	893b      	ldrh	r3, [r7, #8]
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	611a      	str	r2, [r3, #16]
 8005e4a:	e021      	b.n	8005e90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e4c:	893b      	ldrh	r3, [r7, #8]
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5c:	6a39      	ldr	r1, [r7, #32]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fb96 	bl	8006590 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00d      	beq.n	8005e86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d107      	bne.n	8005e82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e005      	b.n	8005e92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e86:	893b      	ldrh	r3, [r7, #8]
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	00010002 	.word	0x00010002

08005ea0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	4611      	mov	r1, r2
 8005eac:	461a      	mov	r2, r3
 8005eae:	4603      	mov	r3, r0
 8005eb0:	817b      	strh	r3, [r7, #10]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	813b      	strh	r3, [r7, #8]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ec8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fa7c 	bl	80063e4 <I2C_WaitOnFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00d      	beq.n	8005f0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f00:	d103      	bne.n	8005f0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e0aa      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f0e:	897b      	ldrh	r3, [r7, #10]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	6a3a      	ldr	r2, [r7, #32]
 8005f22:	4952      	ldr	r1, [pc, #328]	; (800606c <I2C_RequestMemoryRead+0x1cc>)
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 fab4 	bl	8006492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e097      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4c:	6a39      	ldr	r1, [r7, #32]
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fb1e 	bl	8006590 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00d      	beq.n	8005f76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d107      	bne.n	8005f72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e076      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d105      	bne.n	8005f88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f7c:	893b      	ldrh	r3, [r7, #8]
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	611a      	str	r2, [r3, #16]
 8005f86:	e021      	b.n	8005fcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f88:	893b      	ldrh	r3, [r7, #8]
 8005f8a:	0a1b      	lsrs	r3, r3, #8
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f98:	6a39      	ldr	r1, [r7, #32]
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 faf8 	bl	8006590 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00d      	beq.n	8005fc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d107      	bne.n	8005fbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e050      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fc2:	893b      	ldrh	r3, [r7, #8]
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fce:	6a39      	ldr	r1, [r7, #32]
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fadd 	bl	8006590 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00d      	beq.n	8005ff8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d107      	bne.n	8005ff4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e035      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006006:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	2200      	movs	r2, #0
 8006010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f9e5 	bl	80063e4 <I2C_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00d      	beq.n	800603c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602e:	d103      	bne.n	8006038 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006036:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e013      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800603c:	897b      	ldrh	r3, [r7, #10]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	b2da      	uxtb	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	6a3a      	ldr	r2, [r7, #32]
 8006050:	4906      	ldr	r1, [pc, #24]	; (800606c <I2C_RequestMemoryRead+0x1cc>)
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fa1d 	bl	8006492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	00010002 	.word	0x00010002

08006070 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006084:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800608c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80060a2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b0:	2200      	movs	r2, #0
 80060b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	2200      	movs	r2, #0
 80060c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80060c4:	7cfb      	ldrb	r3, [r7, #19]
 80060c6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80060ca:	2b21      	cmp	r3, #33	; 0x21
 80060cc:	d007      	beq.n	80060de <I2C_DMAXferCplt+0x6e>
 80060ce:	7cfb      	ldrb	r3, [r7, #19]
 80060d0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80060d4:	2b22      	cmp	r3, #34	; 0x22
 80060d6:	d131      	bne.n	800613c <I2C_DMAXferCplt+0xcc>
 80060d8:	7cbb      	ldrb	r3, [r7, #18]
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d12e      	bne.n	800613c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060ec:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2200      	movs	r2, #0
 80060f2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80060f4:	7cfb      	ldrb	r3, [r7, #19]
 80060f6:	2b29      	cmp	r3, #41	; 0x29
 80060f8:	d10a      	bne.n	8006110 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2221      	movs	r2, #33	; 0x21
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2228      	movs	r2, #40	; 0x28
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006108:	6978      	ldr	r0, [r7, #20]
 800610a:	f7fe fc83 	bl	8004a14 <HAL_I2C_SlaveTxCpltCallback>
 800610e:	e00c      	b.n	800612a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006110:	7cfb      	ldrb	r3, [r7, #19]
 8006112:	2b2a      	cmp	r3, #42	; 0x2a
 8006114:	d109      	bne.n	800612a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2222      	movs	r2, #34	; 0x22
 800611a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2228      	movs	r2, #40	; 0x28
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006124:	6978      	ldr	r0, [r7, #20]
 8006126:	f7fe fc7f 	bl	8004a28 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006138:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800613a:	e06a      	b.n	8006212 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d064      	beq.n	8006212 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b01      	cmp	r3, #1
 8006150:	d107      	bne.n	8006162 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006160:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006170:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006178:	d009      	beq.n	800618e <I2C_DMAXferCplt+0x11e>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b08      	cmp	r3, #8
 800617e:	d006      	beq.n	800618e <I2C_DMAXferCplt+0x11e>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006186:	d002      	beq.n	800618e <I2C_DMAXferCplt+0x11e>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b20      	cmp	r3, #32
 800618c:	d107      	bne.n	800619e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800619c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061ac:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061bc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2200      	movs	r2, #0
 80061c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80061cc:	6978      	ldr	r0, [r7, #20]
 80061ce:	f7fe fc57 	bl	8004a80 <HAL_I2C_ErrorCallback>
}
 80061d2:	e01e      	b.n	8006212 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	d10a      	bne.n	80061fe <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80061f6:	6978      	ldr	r0, [r7, #20]
 80061f8:	f7fb fd2c 	bl	8001c54 <HAL_I2C_MemRxCpltCallback>
}
 80061fc:	e009      	b.n	8006212 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2212      	movs	r2, #18
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800620c:	6978      	ldr	r0, [r7, #20]
 800620e:	f7fe fbf7 	bl	8004a00 <HAL_I2C_MasterRxCpltCallback>
}
 8006212:	bf00      	nop
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006226:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006234:	2200      	movs	r2, #0
 8006236:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	2200      	movs	r2, #0
 8006246:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7fd f937 	bl	80034bc <HAL_DMA_GetError>
 800624e:	4603      	mov	r3, r0
 8006250:	2b02      	cmp	r3, #2
 8006252:	d01b      	beq.n	800628c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006262:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2220      	movs	r2, #32
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	f043 0210 	orr.w	r2, r3, #16
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7fe fbfa 	bl	8004a80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80062ae:	4b4b      	ldr	r3, [pc, #300]	; (80063dc <I2C_DMAAbort+0x148>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	08db      	lsrs	r3, r3, #3
 80062b4:	4a4a      	ldr	r2, [pc, #296]	; (80063e0 <I2C_DMAAbort+0x14c>)
 80062b6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ba:	0a1a      	lsrs	r2, r3, #8
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	00da      	lsls	r2, r3, #3
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	f043 0220 	orr.w	r2, r3, #32
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80062da:	e00a      	b.n	80062f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3b01      	subs	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f0:	d0ea      	beq.n	80062c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fe:	2200      	movs	r2, #0
 8006300:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	2200      	movs	r2, #0
 8006310:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006320:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2200      	movs	r2, #0
 8006326:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006334:	2200      	movs	r2, #0
 8006336:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	2200      	movs	r2, #0
 8006346:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0201 	bic.w	r2, r2, #1
 8006356:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b60      	cmp	r3, #96	; 0x60
 8006362:	d10e      	bne.n	8006382 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2200      	movs	r2, #0
 8006378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800637a:	6978      	ldr	r0, [r7, #20]
 800637c:	f7fe fb8a 	bl	8004a94 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006380:	e027      	b.n	80063d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006382:	7cfb      	ldrb	r3, [r7, #19]
 8006384:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006388:	2b28      	cmp	r3, #40	; 0x28
 800638a:	d117      	bne.n	80063bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2200      	movs	r2, #0
 80063b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2228      	movs	r2, #40	; 0x28
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80063ba:	e007      	b.n	80063cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80063cc:	6978      	ldr	r0, [r7, #20]
 80063ce:	f7fe fb57 	bl	8004a80 <HAL_I2C_ErrorCallback>
}
 80063d2:	bf00      	nop
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000030 	.word	0x20000030
 80063e0:	14f8b589 	.word	0x14f8b589

080063e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	4613      	mov	r3, r2
 80063f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063f4:	e025      	b.n	8006442 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fc:	d021      	beq.n	8006442 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fe:	f7fb ff35 	bl	800226c <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d302      	bcc.n	8006414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d116      	bne.n	8006442 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	f043 0220 	orr.w	r2, r3, #32
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e023      	b.n	800648a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	0c1b      	lsrs	r3, r3, #16
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b01      	cmp	r3, #1
 800644a:	d10d      	bne.n	8006468 <I2C_WaitOnFlagUntilTimeout+0x84>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	43da      	mvns	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4013      	ands	r3, r2
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	bf0c      	ite	eq
 800645e:	2301      	moveq	r3, #1
 8006460:	2300      	movne	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	e00c      	b.n	8006482 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	43da      	mvns	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4013      	ands	r3, r2
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	bf0c      	ite	eq
 800647a:	2301      	moveq	r3, #1
 800647c:	2300      	movne	r3, #0
 800647e:	b2db      	uxtb	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	429a      	cmp	r2, r3
 8006486:	d0b6      	beq.n	80063f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064a0:	e051      	b.n	8006546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b0:	d123      	bne.n	80064fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f043 0204 	orr.w	r2, r3, #4
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e046      	b.n	8006588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d021      	beq.n	8006546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006502:	f7fb feb3 	bl	800226c <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	429a      	cmp	r2, r3
 8006510:	d302      	bcc.n	8006518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d116      	bne.n	8006546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2220      	movs	r2, #32
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f043 0220 	orr.w	r2, r3, #32
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e020      	b.n	8006588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	0c1b      	lsrs	r3, r3, #16
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b01      	cmp	r3, #1
 800654e:	d10c      	bne.n	800656a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	43da      	mvns	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4013      	ands	r3, r2
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	bf14      	ite	ne
 8006562:	2301      	movne	r3, #1
 8006564:	2300      	moveq	r3, #0
 8006566:	b2db      	uxtb	r3, r3
 8006568:	e00b      	b.n	8006582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	43da      	mvns	r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	4013      	ands	r3, r2
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	bf14      	ite	ne
 800657c:	2301      	movne	r3, #1
 800657e:	2300      	moveq	r3, #0
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d18d      	bne.n	80064a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800659c:	e02d      	b.n	80065fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 f900 	bl	80067a4 <I2C_IsAcknowledgeFailed>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e02d      	b.n	800660a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b4:	d021      	beq.n	80065fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b6:	f7fb fe59 	bl	800226c <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d302      	bcc.n	80065cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d116      	bne.n	80065fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	f043 0220 	orr.w	r2, r3, #32
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e007      	b.n	800660a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006604:	2b80      	cmp	r3, #128	; 0x80
 8006606:	d1ca      	bne.n	800659e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800661e:	e02d      	b.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 f8bf 	bl	80067a4 <I2C_IsAcknowledgeFailed>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e02d      	b.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d021      	beq.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006638:	f7fb fe18 	bl	800226c <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	429a      	cmp	r2, r3
 8006646:	d302      	bcc.n	800664e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d116      	bne.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006668:	f043 0220 	orr.w	r2, r3, #32
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e007      	b.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b04      	cmp	r3, #4
 8006688:	d1ca      	bne.n	8006620 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80066a0:	4b13      	ldr	r3, [pc, #76]	; (80066f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	08db      	lsrs	r3, r3, #3
 80066a6:	4a13      	ldr	r2, [pc, #76]	; (80066f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80066a8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ac:	0a1a      	lsrs	r2, r3, #8
 80066ae:	4613      	mov	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d107      	bne.n	80066d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	f043 0220 	orr.w	r2, r3, #32
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e008      	b.n	80066e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e0:	d0e9      	beq.n	80066b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	20000030 	.word	0x20000030
 80066f4:	14f8b589 	.word	0x14f8b589

080066f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006704:	e042      	b.n	800678c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f003 0310 	and.w	r3, r3, #16
 8006710:	2b10      	cmp	r3, #16
 8006712:	d119      	bne.n	8006748 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0210 	mvn.w	r2, #16
 800671c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e029      	b.n	800679c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006748:	f7fb fd90 	bl	800226c <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	429a      	cmp	r2, r3
 8006756:	d302      	bcc.n	800675e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d116      	bne.n	800678c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006778:	f043 0220 	orr.w	r2, r3, #32
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e007      	b.n	800679c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006796:	2b40      	cmp	r3, #64	; 0x40
 8006798:	d1b5      	bne.n	8006706 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ba:	d11b      	bne.n	80067f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	f043 0204 	orr.w	r2, r3, #4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e000      	b.n	80067f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006812:	d103      	bne.n	800681c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800681a:	e007      	b.n	800682c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006824:	d102      	bne.n	800682c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2208      	movs	r2, #8
 800682a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800683a:	b08f      	sub	sp, #60	; 0x3c
 800683c:	af0a      	add	r7, sp, #40	; 0x28
 800683e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e10f      	b.n	8006a6a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f005 ff9b 	bl	800c7a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2203      	movs	r2, #3
 800686e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f002 fa82 	bl	8008d92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	687e      	ldr	r6, [r7, #4]
 8006896:	466d      	mov	r5, sp
 8006898:	f106 0410 	add.w	r4, r6, #16
 800689c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800689e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80068ac:	1d33      	adds	r3, r6, #4
 80068ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068b0:	6838      	ldr	r0, [r7, #0]
 80068b2:	f002 f959 	bl	8008b68 <USB_CoreInit>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e0d0      	b.n	8006a6a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2100      	movs	r1, #0
 80068ce:	4618      	mov	r0, r3
 80068d0:	f002 fa70 	bl	8008db4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068d4:	2300      	movs	r3, #0
 80068d6:	73fb      	strb	r3, [r7, #15]
 80068d8:	e04a      	b.n	8006970 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80068da:	7bfa      	ldrb	r2, [r7, #15]
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	4613      	mov	r3, r2
 80068e0:	00db      	lsls	r3, r3, #3
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	333d      	adds	r3, #61	; 0x3d
 80068ea:	2201      	movs	r2, #1
 80068ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80068ee:	7bfa      	ldrb	r2, [r7, #15]
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	333c      	adds	r3, #60	; 0x3c
 80068fe:	7bfa      	ldrb	r2, [r7, #15]
 8006900:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006902:	7bfa      	ldrb	r2, [r7, #15]
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	b298      	uxth	r0, r3
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	00db      	lsls	r3, r3, #3
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	440b      	add	r3, r1
 8006914:	3344      	adds	r3, #68	; 0x44
 8006916:	4602      	mov	r2, r0
 8006918:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800691a:	7bfa      	ldrb	r2, [r7, #15]
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	4613      	mov	r3, r2
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	3340      	adds	r3, #64	; 0x40
 800692a:	2200      	movs	r2, #0
 800692c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800692e:	7bfa      	ldrb	r2, [r7, #15]
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	4413      	add	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	440b      	add	r3, r1
 800693c:	3348      	adds	r3, #72	; 0x48
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006942:	7bfa      	ldrb	r2, [r7, #15]
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	440b      	add	r3, r1
 8006950:	334c      	adds	r3, #76	; 0x4c
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006956:	7bfa      	ldrb	r2, [r7, #15]
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	4613      	mov	r3, r2
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	440b      	add	r3, r1
 8006964:	3354      	adds	r3, #84	; 0x54
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	3301      	adds	r3, #1
 800696e:	73fb      	strb	r3, [r7, #15]
 8006970:	7bfa      	ldrb	r2, [r7, #15]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	429a      	cmp	r2, r3
 8006978:	d3af      	bcc.n	80068da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
 800697e:	e044      	b.n	8006a0a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006980:	7bfa      	ldrb	r2, [r7, #15]
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	4613      	mov	r3, r2
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	4413      	add	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	440b      	add	r3, r1
 800698e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006992:	2200      	movs	r2, #0
 8006994:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006996:	7bfa      	ldrb	r2, [r7, #15]
 8006998:	6879      	ldr	r1, [r7, #4]
 800699a:	4613      	mov	r3, r2
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	4413      	add	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	440b      	add	r3, r1
 80069a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80069a8:	7bfa      	ldrb	r2, [r7, #15]
 80069aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80069ac:	7bfa      	ldrb	r2, [r7, #15]
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	4613      	mov	r3, r2
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80069be:	2200      	movs	r2, #0
 80069c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80069c2:	7bfa      	ldrb	r2, [r7, #15]
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	4613      	mov	r3, r2
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	440b      	add	r3, r1
 80069d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80069d8:	7bfa      	ldrb	r2, [r7, #15]
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	4613      	mov	r3, r2
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	440b      	add	r3, r1
 80069e6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80069ee:	7bfa      	ldrb	r2, [r7, #15]
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	4613      	mov	r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	440b      	add	r3, r1
 80069fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	3301      	adds	r3, #1
 8006a08:	73fb      	strb	r3, [r7, #15]
 8006a0a:	7bfa      	ldrb	r2, [r7, #15]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d3b5      	bcc.n	8006980 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	687e      	ldr	r6, [r7, #4]
 8006a1c:	466d      	mov	r5, sp
 8006a1e:	f106 0410 	add.w	r4, r6, #16
 8006a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a32:	1d33      	adds	r3, r6, #4
 8006a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a36:	6838      	ldr	r0, [r7, #0]
 8006a38:	f002 fa08 	bl	8008e4c <USB_DevInit>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d005      	beq.n	8006a4e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e00d      	b.n	8006a6a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f003 fb57 	bl	800a116 <USB_DevDisconnect>

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_PCD_Start+0x1c>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e020      	b.n	8006ad0 <HAL_PCD_Start+0x5e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d109      	bne.n	8006ab2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d005      	beq.n	8006ab2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f002 f95a 	bl	8008d70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f003 fb07 	bl	800a0d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006ad8:	b590      	push	{r4, r7, lr}
 8006ada:	b08d      	sub	sp, #52	; 0x34
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f003 fbc5 	bl	800a27e <USB_GetMode>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f040 848a 	bne.w	8007410 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f003 fb29 	bl	800a158 <USB_ReadInterrupts>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 8480 	beq.w	800740e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	0a1b      	lsrs	r3, r3, #8
 8006b18:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f003 fb16 	bl	800a158 <USB_ReadInterrupts>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d107      	bne.n	8006b46 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	695a      	ldr	r2, [r3, #20]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f002 0202 	and.w	r2, r2, #2
 8006b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f003 fb04 	bl	800a158 <USB_ReadInterrupts>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f003 0310 	and.w	r3, r3, #16
 8006b56:	2b10      	cmp	r3, #16
 8006b58:	d161      	bne.n	8006c1e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	699a      	ldr	r2, [r3, #24]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0210 	bic.w	r2, r2, #16
 8006b68:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	f003 020f 	and.w	r2, r3, #15
 8006b76:	4613      	mov	r3, r2
 8006b78:	00db      	lsls	r3, r3, #3
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	4413      	add	r3, r2
 8006b86:	3304      	adds	r3, #4
 8006b88:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	0c5b      	lsrs	r3, r3, #17
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d124      	bne.n	8006be0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d035      	beq.n	8006c0e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	091b      	lsrs	r3, r3, #4
 8006baa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6a38      	ldr	r0, [r7, #32]
 8006bb6:	f003 f93b 	bl	8009e30 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	091b      	lsrs	r3, r3, #4
 8006bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bc6:	441a      	add	r2, r3
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	6a1a      	ldr	r2, [r3, #32]
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	091b      	lsrs	r3, r3, #4
 8006bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bd8:	441a      	add	r2, r3
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	621a      	str	r2, [r3, #32]
 8006bde:	e016      	b.n	8006c0e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	0c5b      	lsrs	r3, r3, #17
 8006be4:	f003 030f 	and.w	r3, r3, #15
 8006be8:	2b06      	cmp	r3, #6
 8006bea:	d110      	bne.n	8006c0e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006bf2:	2208      	movs	r2, #8
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6a38      	ldr	r0, [r7, #32]
 8006bf8:	f003 f91a 	bl	8009e30 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	6a1a      	ldr	r2, [r3, #32]
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	091b      	lsrs	r3, r3, #4
 8006c04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c08:	441a      	add	r2, r3
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699a      	ldr	r2, [r3, #24]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 0210 	orr.w	r2, r2, #16
 8006c1c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f003 fa98 	bl	800a158 <USB_ReadInterrupts>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c32:	f040 80a7 	bne.w	8006d84 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f003 fa9d 	bl	800a17e <USB_ReadDevAllOutEpInterrupt>
 8006c44:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006c46:	e099      	b.n	8006d7c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 808e 	beq.w	8006d70 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f003 fac1 	bl	800a1e6 <USB_ReadDevOutEPInterrupt>
 8006c64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00c      	beq.n	8006c8a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	2301      	movs	r3, #1
 8006c80:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fec3 	bl	8007a10 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00c      	beq.n	8006cae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 ff99 	bl	8007be0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	2310      	movs	r3, #16
 8006cc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d030      	beq.n	8006d36 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cdc:	2b80      	cmp	r3, #128	; 0x80
 8006cde:	d109      	bne.n	8006cf4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cf2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	4413      	add	r3, r2
 8006d06:	3304      	adds	r3, #4
 8006d08:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	78db      	ldrb	r3, [r3, #3]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d108      	bne.n	8006d24 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2200      	movs	r2, #0
 8006d16:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f005 fe3a 	bl	800c998 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d30:	461a      	mov	r2, r3
 8006d32:	2302      	movs	r3, #2
 8006d34:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2320      	movs	r3, #32
 8006d50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d009      	beq.n	8006d70 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d68:	461a      	mov	r2, r3
 8006d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d6e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	3301      	adds	r3, #1
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f47f af62 	bne.w	8006c48 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f003 f9e5 	bl	800a158 <USB_ReadInterrupts>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d98:	f040 80db 	bne.w	8006f52 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f003 fa06 	bl	800a1b2 <USB_ReadDevAllInEpInterrupt>
 8006da6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006dac:	e0cd      	b.n	8006f4a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 80c2 	beq.w	8006f3e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f003 fa2c 	bl	800a222 <USB_ReadDevInEPInterrupt>
 8006dca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d057      	beq.n	8006e86 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	2201      	movs	r2, #1
 8006dde:	fa02 f303 	lsl.w	r3, r2, r3
 8006de2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	43db      	mvns	r3, r3
 8006df0:	69f9      	ldr	r1, [r7, #28]
 8006df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006df6:	4013      	ands	r3, r2
 8006df8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e06:	461a      	mov	r2, r3
 8006e08:	2301      	movs	r3, #1
 8006e0a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d132      	bne.n	8006e7a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e18:	4613      	mov	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	334c      	adds	r3, #76	; 0x4c
 8006e24:	6819      	ldr	r1, [r3, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4403      	add	r3, r0
 8006e34:	3348      	adds	r3, #72	; 0x48
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4419      	add	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e3e:	4613      	mov	r3, r2
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	4413      	add	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4403      	add	r3, r0
 8006e48:	334c      	adds	r3, #76	; 0x4c
 8006e4a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d113      	bne.n	8006e7a <HAL_PCD_IRQHandler+0x3a2>
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e56:	4613      	mov	r3, r2
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	3354      	adds	r3, #84	; 0x54
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d108      	bne.n	8006e7a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e72:	461a      	mov	r2, r3
 8006e74:	2101      	movs	r1, #1
 8006e76:	f003 fa33 	bl	800a2e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f005 fd0e 	bl	800c8a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d008      	beq.n	8006ea2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	2308      	movs	r3, #8
 8006ea0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f003 0310 	and.w	r3, r3, #16
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb8:	461a      	mov	r2, r3
 8006eba:	2310      	movs	r3, #16
 8006ebc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d008      	beq.n	8006eda <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	2340      	movs	r3, #64	; 0x40
 8006ed8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d023      	beq.n	8006f2c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006ee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ee6:	6a38      	ldr	r0, [r7, #32]
 8006ee8:	f002 f914 	bl	8009114 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eee:	4613      	mov	r3, r2
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	3338      	adds	r3, #56	; 0x38
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	4413      	add	r3, r2
 8006efc:	3304      	adds	r3, #4
 8006efe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	78db      	ldrb	r3, [r3, #3]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d108      	bne.n	8006f1a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f005 fd51 	bl	800c9bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f26:	461a      	mov	r2, r3
 8006f28:	2302      	movs	r3, #2
 8006f2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fcdb 	bl	80078f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	3301      	adds	r3, #1
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	085b      	lsrs	r3, r3, #1
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f47f af2e 	bne.w	8006dae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f003 f8fe 	bl	800a158 <USB_ReadInterrupts>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f66:	d122      	bne.n	8006fae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d108      	bne.n	8006f98 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f8e:	2100      	movs	r1, #0
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fec3 	bl	8007d1c <HAL_PCDEx_LPM_Callback>
 8006f96:	e002      	b.n	8006f9e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f005 fcef 	bl	800c97c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695a      	ldr	r2, [r3, #20]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f003 f8d0 	bl	800a158 <USB_ReadInterrupts>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc2:	d112      	bne.n	8006fea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d102      	bne.n	8006fda <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f005 fcab 	bl	800c930 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	695a      	ldr	r2, [r3, #20]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006fe8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f003 f8b2 	bl	800a158 <USB_ReadInterrupts>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffe:	f040 80b7 	bne.w	8007170 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007010:	f023 0301 	bic.w	r3, r3, #1
 8007014:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2110      	movs	r1, #16
 800701c:	4618      	mov	r0, r3
 800701e:	f002 f879 	bl	8009114 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007022:	2300      	movs	r3, #0
 8007024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007026:	e046      	b.n	80070b6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007034:	461a      	mov	r2, r3
 8007036:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800703a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800704c:	0151      	lsls	r1, r2, #5
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	440a      	add	r2, r1
 8007052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800705a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007068:	461a      	mov	r2, r3
 800706a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800706e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007080:	0151      	lsls	r1, r2, #5
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	440a      	add	r2, r1
 8007086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800708a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800708e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	69fa      	ldr	r2, [r7, #28]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	3301      	adds	r3, #1
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070bc:	429a      	cmp	r2, r3
 80070be:	d3b3      	bcc.n	8007028 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80070d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d016      	beq.n	800710a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ec:	f043 030b 	orr.w	r3, r3, #11
 80070f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fc:	69fa      	ldr	r2, [r7, #28]
 80070fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007102:	f043 030b 	orr.w	r3, r3, #11
 8007106:	6453      	str	r3, [r2, #68]	; 0x44
 8007108:	e015      	b.n	8007136 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007118:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800711c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007120:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007130:	f043 030b 	orr.w	r3, r3, #11
 8007134:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007144:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007148:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800715a:	461a      	mov	r2, r3
 800715c:	f003 f8c0 	bl	800a2e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	695a      	ldr	r2, [r3, #20]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800716e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4618      	mov	r0, r3
 8007176:	f002 ffef 	bl	800a158 <USB_ReadInterrupts>
 800717a:	4603      	mov	r3, r0
 800717c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007184:	d124      	bne.n	80071d0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f003 f885 	bl	800a29a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4618      	mov	r0, r3
 8007196:	f002 f83a 	bl	800920e <USB_GetDevSpeed>
 800719a:	4603      	mov	r3, r0
 800719c:	461a      	mov	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681c      	ldr	r4, [r3, #0]
 80071a6:	f001 f9e9 	bl	800857c <HAL_RCC_GetHCLKFreq>
 80071aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	461a      	mov	r2, r3
 80071b4:	4620      	mov	r0, r4
 80071b6:	f001 fd39 	bl	8008c2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f005 fb99 	bl	800c8f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695a      	ldr	r2, [r3, #20]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80071ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f002 ffbf 	bl	800a158 <USB_ReadInterrupts>
 80071da:	4603      	mov	r3, r0
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d10a      	bne.n	80071fa <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f005 fb76 	bl	800c8d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695a      	ldr	r2, [r3, #20]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f002 0208 	and.w	r2, r2, #8
 80071f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f002 ffaa 	bl	800a158 <USB_ReadInterrupts>
 8007204:	4603      	mov	r3, r0
 8007206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720a:	2b80      	cmp	r3, #128	; 0x80
 800720c:	d122      	bne.n	8007254 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800721a:	2301      	movs	r3, #1
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
 800721e:	e014      	b.n	800724a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007224:	4613      	mov	r3, r2
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d105      	bne.n	8007244 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	b2db      	uxtb	r3, r3
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fb27 	bl	8007892 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	3301      	adds	r3, #1
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007250:	429a      	cmp	r2, r3
 8007252:	d3e5      	bcc.n	8007220 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4618      	mov	r0, r3
 800725a:	f002 ff7d 	bl	800a158 <USB_ReadInterrupts>
 800725e:	4603      	mov	r3, r0
 8007260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007268:	d13b      	bne.n	80072e2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800726a:	2301      	movs	r3, #1
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
 800726e:	e02b      	b.n	80072c8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007284:	4613      	mov	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	440b      	add	r3, r1
 800728e:	3340      	adds	r3, #64	; 0x40
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d115      	bne.n	80072c2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007296:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007298:	2b00      	cmp	r3, #0
 800729a:	da12      	bge.n	80072c2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800729c:	6879      	ldr	r1, [r7, #4]
 800729e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a0:	4613      	mov	r3, r2
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	4413      	add	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	333f      	adds	r3, #63	; 0x3f
 80072ac:	2201      	movs	r2, #1
 80072ae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fae8 	bl	8007892 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	3301      	adds	r3, #1
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d3ce      	bcc.n	8007270 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	695a      	ldr	r2, [r3, #20]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80072e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f002 ff36 	bl	800a158 <USB_ReadInterrupts>
 80072ec:	4603      	mov	r3, r0
 80072ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072f6:	d155      	bne.n	80073a4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072f8:	2301      	movs	r3, #1
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
 80072fc:	e045      	b.n	800738a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007312:	4613      	mov	r3, r2
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d12e      	bne.n	8007384 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007326:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007328:	2b00      	cmp	r3, #0
 800732a:	da2b      	bge.n	8007384 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007338:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800733c:	429a      	cmp	r2, r3
 800733e:	d121      	bne.n	8007384 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007344:	4613      	mov	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	440b      	add	r3, r1
 800734e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007352:	2201      	movs	r2, #1
 8007354:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	69fa      	ldr	r2, [r7, #28]
 8007378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800737c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007380:	6053      	str	r3, [r2, #4]
            break;
 8007382:	e007      	b.n	8007394 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	3301      	adds	r3, #1
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007390:	429a      	cmp	r2, r3
 8007392:	d3b4      	bcc.n	80072fe <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	695a      	ldr	r2, [r3, #20]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80073a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f002 fed5 	bl	800a158 <USB_ReadInterrupts>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b8:	d10a      	bne.n	80073d0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f005 fb10 	bl	800c9e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695a      	ldr	r2, [r3, #20]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80073ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f002 febf 	bl	800a158 <USB_ReadInterrupts>
 80073da:	4603      	mov	r3, r0
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d115      	bne.n	8007410 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f005 fb00 	bl	800c9fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6859      	ldr	r1, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	430a      	orrs	r2, r1
 800740a:	605a      	str	r2, [r3, #4]
 800740c:	e000      	b.n	8007410 <HAL_PCD_IRQHandler+0x938>
      return;
 800740e:	bf00      	nop
    }
  }
}
 8007410:	3734      	adds	r7, #52	; 0x34
 8007412:	46bd      	mov	sp, r7
 8007414:	bd90      	pop	{r4, r7, pc}

08007416 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	460b      	mov	r3, r1
 8007420:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007428:	2b01      	cmp	r3, #1
 800742a:	d101      	bne.n	8007430 <HAL_PCD_SetAddress+0x1a>
 800742c:	2302      	movs	r3, #2
 800742e:	e013      	b.n	8007458 <HAL_PCD_SetAddress+0x42>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	78fa      	ldrb	r2, [r7, #3]
 800743c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	4611      	mov	r1, r2
 8007448:	4618      	mov	r0, r3
 800744a:	f002 fe1d 	bl	800a088 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	4608      	mov	r0, r1
 800746a:	4611      	mov	r1, r2
 800746c:	461a      	mov	r2, r3
 800746e:	4603      	mov	r3, r0
 8007470:	70fb      	strb	r3, [r7, #3]
 8007472:	460b      	mov	r3, r1
 8007474:	803b      	strh	r3, [r7, #0]
 8007476:	4613      	mov	r3, r2
 8007478:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800747e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007482:	2b00      	cmp	r3, #0
 8007484:	da0f      	bge.n	80074a6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	f003 020f 	and.w	r2, r3, #15
 800748c:	4613      	mov	r3, r2
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	3338      	adds	r3, #56	; 0x38
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	4413      	add	r3, r2
 800749a:	3304      	adds	r3, #4
 800749c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	705a      	strb	r2, [r3, #1]
 80074a4:	e00f      	b.n	80074c6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074a6:	78fb      	ldrb	r3, [r7, #3]
 80074a8:	f003 020f 	and.w	r2, r3, #15
 80074ac:	4613      	mov	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	4413      	add	r3, r2
 80074bc:	3304      	adds	r3, #4
 80074be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	f003 030f 	and.w	r3, r3, #15
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80074d2:	883a      	ldrh	r2, [r7, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	78ba      	ldrb	r2, [r7, #2]
 80074dc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	785b      	ldrb	r3, [r3, #1]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d004      	beq.n	80074f0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80074f0:	78bb      	ldrb	r3, [r7, #2]
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d102      	bne.n	80074fc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_PCD_EP_Open+0xaa>
 8007506:	2302      	movs	r3, #2
 8007508:	e00e      	b.n	8007528 <HAL_PCD_EP_Open+0xc8>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68f9      	ldr	r1, [r7, #12]
 8007518:	4618      	mov	r0, r3
 800751a:	f001 fe9d 	bl	8009258 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007526:	7afb      	ldrb	r3, [r7, #11]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800753c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007540:	2b00      	cmp	r3, #0
 8007542:	da0f      	bge.n	8007564 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	f003 020f 	and.w	r2, r3, #15
 800754a:	4613      	mov	r3, r2
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	3338      	adds	r3, #56	; 0x38
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	4413      	add	r3, r2
 8007558:	3304      	adds	r3, #4
 800755a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	705a      	strb	r2, [r3, #1]
 8007562:	e00f      	b.n	8007584 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	f003 020f 	and.w	r2, r3, #15
 800756a:	4613      	mov	r3, r2
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	4413      	add	r3, r2
 800757a:	3304      	adds	r3, #4
 800757c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007584:	78fb      	ldrb	r3, [r7, #3]
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	b2da      	uxtb	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007596:	2b01      	cmp	r3, #1
 8007598:	d101      	bne.n	800759e <HAL_PCD_EP_Close+0x6e>
 800759a:	2302      	movs	r3, #2
 800759c:	e00e      	b.n	80075bc <HAL_PCD_EP_Close+0x8c>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68f9      	ldr	r1, [r7, #12]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f001 fedb 	bl	8009368 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	460b      	mov	r3, r1
 80075d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075d4:	7afb      	ldrb	r3, [r7, #11]
 80075d6:	f003 020f 	and.w	r2, r3, #15
 80075da:	4613      	mov	r3, r2
 80075dc:	00db      	lsls	r3, r3, #3
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4413      	add	r3, r2
 80075ea:	3304      	adds	r3, #4
 80075ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2200      	movs	r2, #0
 80075fe:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2200      	movs	r2, #0
 8007604:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007606:	7afb      	ldrb	r3, [r7, #11]
 8007608:	f003 030f 	and.w	r3, r3, #15
 800760c:	b2da      	uxtb	r2, r3
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d102      	bne.n	8007620 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007620:	7afb      	ldrb	r3, [r7, #11]
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	2b00      	cmp	r3, #0
 8007628:	d109      	bne.n	800763e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	461a      	mov	r2, r3
 8007636:	6979      	ldr	r1, [r7, #20]
 8007638:	f002 f9ba 	bl	80099b0 <USB_EP0StartXfer>
 800763c:	e008      	b.n	8007650 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	6979      	ldr	r1, [r7, #20]
 800764c:	f001 ff68 	bl	8009520 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	f003 020f 	and.w	r2, r3, #15
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	4613      	mov	r3, r2
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	4413      	add	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	440b      	add	r3, r1
 8007678:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800767c:	681b      	ldr	r3, [r3, #0]
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b086      	sub	sp, #24
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	607a      	str	r2, [r7, #4]
 8007694:	603b      	str	r3, [r7, #0]
 8007696:	460b      	mov	r3, r1
 8007698:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	f003 020f 	and.w	r2, r3, #15
 80076a0:	4613      	mov	r3, r2
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	3338      	adds	r3, #56	; 0x38
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	3304      	adds	r3, #4
 80076b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2200      	movs	r2, #0
 80076c2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2201      	movs	r2, #1
 80076c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076ca:	7afb      	ldrb	r3, [r7, #11]
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d102      	bne.n	80076e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d109      	bne.n	8007702 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	6979      	ldr	r1, [r7, #20]
 80076fc:	f002 f958 	bl	80099b0 <USB_EP0StartXfer>
 8007700:	e008      	b.n	8007714 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	461a      	mov	r2, r3
 800770e:	6979      	ldr	r1, [r7, #20]
 8007710:	f001 ff06 	bl	8009520 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	f003 020f 	and.w	r2, r3, #15
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	429a      	cmp	r2, r3
 8007736:	d901      	bls.n	800773c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e050      	b.n	80077de <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800773c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007740:	2b00      	cmp	r3, #0
 8007742:	da0f      	bge.n	8007764 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	f003 020f 	and.w	r2, r3, #15
 800774a:	4613      	mov	r3, r2
 800774c:	00db      	lsls	r3, r3, #3
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	3338      	adds	r3, #56	; 0x38
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	4413      	add	r3, r2
 8007758:	3304      	adds	r3, #4
 800775a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2201      	movs	r2, #1
 8007760:	705a      	strb	r2, [r3, #1]
 8007762:	e00d      	b.n	8007780 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	4613      	mov	r3, r2
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	4413      	add	r3, r2
 8007776:	3304      	adds	r3, #4
 8007778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007786:	78fb      	ldrb	r3, [r7, #3]
 8007788:	f003 030f 	and.w	r3, r3, #15
 800778c:	b2da      	uxtb	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007798:	2b01      	cmp	r3, #1
 800779a:	d101      	bne.n	80077a0 <HAL_PCD_EP_SetStall+0x82>
 800779c:	2302      	movs	r3, #2
 800779e:	e01e      	b.n	80077de <HAL_PCD_EP_SetStall+0xc0>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68f9      	ldr	r1, [r7, #12]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f002 fb96 	bl	8009ee0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10a      	bne.n	80077d4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	b2d9      	uxtb	r1, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80077ce:	461a      	mov	r2, r3
 80077d0:	f002 fd86 	bl	800a2e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	460b      	mov	r3, r1
 80077f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	f003 020f 	and.w	r2, r3, #15
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d901      	bls.n	8007804 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e042      	b.n	800788a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007808:	2b00      	cmp	r3, #0
 800780a:	da0f      	bge.n	800782c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	f003 020f 	and.w	r2, r3, #15
 8007812:	4613      	mov	r3, r2
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	3338      	adds	r3, #56	; 0x38
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	4413      	add	r3, r2
 8007820:	3304      	adds	r3, #4
 8007822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	705a      	strb	r2, [r3, #1]
 800782a:	e00f      	b.n	800784c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	f003 020f 	and.w	r2, r3, #15
 8007832:	4613      	mov	r3, r2
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	3304      	adds	r3, #4
 8007844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	f003 030f 	and.w	r3, r3, #15
 8007858:	b2da      	uxtb	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <HAL_PCD_EP_ClrStall+0x86>
 8007868:	2302      	movs	r3, #2
 800786a:	e00e      	b.n	800788a <HAL_PCD_EP_ClrStall+0xa4>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68f9      	ldr	r1, [r7, #12]
 800787a:	4618      	mov	r0, r3
 800787c:	f002 fb9e 	bl	8009fbc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	460b      	mov	r3, r1
 800789c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800789e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	da0c      	bge.n	80078c0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078a6:	78fb      	ldrb	r3, [r7, #3]
 80078a8:	f003 020f 	and.w	r2, r3, #15
 80078ac:	4613      	mov	r3, r2
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	3338      	adds	r3, #56	; 0x38
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	4413      	add	r3, r2
 80078ba:	3304      	adds	r3, #4
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	e00c      	b.n	80078da <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	f003 020f 	and.w	r2, r3, #15
 80078c6:	4613      	mov	r3, r2
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	4413      	add	r3, r2
 80078d6:	3304      	adds	r3, #4
 80078d8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68f9      	ldr	r1, [r7, #12]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f002 f9bd 	bl	8009c60 <USB_EPStopXfer>
 80078e6:	4603      	mov	r3, r0
 80078e8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80078ea:	7afb      	ldrb	r3, [r7, #11]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08a      	sub	sp, #40	; 0x28
 80078f8:	af02      	add	r7, sp, #8
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	4613      	mov	r3, r2
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	4413      	add	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	3338      	adds	r3, #56	; 0x38
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	4413      	add	r3, r2
 8007918:	3304      	adds	r3, #4
 800791a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6a1a      	ldr	r2, [r3, #32]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	429a      	cmp	r2, r3
 8007926:	d901      	bls.n	800792c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e06c      	b.n	8007a06 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	699a      	ldr	r2, [r3, #24]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	69fa      	ldr	r2, [r7, #28]
 800793e:	429a      	cmp	r2, r3
 8007940:	d902      	bls.n	8007948 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	3303      	adds	r3, #3
 800794c:	089b      	lsrs	r3, r3, #2
 800794e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007950:	e02b      	b.n	80079aa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	69fa      	ldr	r2, [r7, #28]
 8007964:	429a      	cmp	r2, r3
 8007966:	d902      	bls.n	800796e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	3303      	adds	r3, #3
 8007972:	089b      	lsrs	r3, r3, #2
 8007974:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6919      	ldr	r1, [r3, #16]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	b2da      	uxtb	r2, r3
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007986:	b2db      	uxtb	r3, r3
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	4603      	mov	r3, r0
 800798c:	6978      	ldr	r0, [r7, #20]
 800798e:	f002 fa11 	bl	8009db4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	691a      	ldr	r2, [r3, #16]
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	441a      	add	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a1a      	ldr	r2, [r3, #32]
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	441a      	add	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d809      	bhi.n	80079d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6a1a      	ldr	r2, [r3, #32]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d203      	bcs.n	80079d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1be      	bne.n	8007952 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	699a      	ldr	r2, [r3, #24]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d811      	bhi.n	8007a04 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	f003 030f 	and.w	r3, r3, #15
 80079e6:	2201      	movs	r2, #1
 80079e8:	fa02 f303 	lsl.w	r3, r2, r3
 80079ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	43db      	mvns	r3, r3
 80079fa:	6939      	ldr	r1, [r7, #16]
 80079fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a00:	4013      	ands	r3, r2
 8007a02:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3720      	adds	r7, #32
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	333c      	adds	r3, #60	; 0x3c
 8007a28:	3304      	adds	r3, #4
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d17b      	bne.n	8007b3e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d015      	beq.n	8007a7c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	4a61      	ldr	r2, [pc, #388]	; (8007bd8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	f240 80b9 	bls.w	8007bcc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 80b3 	beq.w	8007bcc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a72:	461a      	mov	r2, r3
 8007a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a78:	6093      	str	r3, [r2, #8]
 8007a7a:	e0a7      	b.n	8007bcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a92:	461a      	mov	r2, r3
 8007a94:	2320      	movs	r3, #32
 8007a96:	6093      	str	r3, [r2, #8]
 8007a98:	e098      	b.n	8007bcc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f040 8093 	bne.w	8007bcc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	4a4b      	ldr	r2, [pc, #300]	; (8007bd8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d90f      	bls.n	8007ace <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00a      	beq.n	8007ace <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aca:	6093      	str	r3, [r2, #8]
 8007acc:	e07e      	b.n	8007bcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	4413      	add	r3, r2
 8007ae0:	3304      	adds	r3, #4
 8007ae2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	0159      	lsls	r1, r3, #5
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	440b      	add	r3, r1
 8007af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007afa:	1ad2      	subs	r2, r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d114      	bne.n	8007b30 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b18:	461a      	mov	r2, r3
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	f002 fbe0 	bl	800a2e0 <USB_EP0_OutStart>
 8007b20:	e006      	b.n	8007b30 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	441a      	add	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f004 fe98 	bl	800c86c <HAL_PCD_DataOutStageCallback>
 8007b3c:	e046      	b.n	8007bcc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	4a26      	ldr	r2, [pc, #152]	; (8007bdc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d124      	bne.n	8007b90 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00a      	beq.n	8007b66 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b62:	6093      	str	r3, [r2, #8]
 8007b64:	e032      	b.n	8007bcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d008      	beq.n	8007b82 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	2320      	movs	r3, #32
 8007b80:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f004 fe6f 	bl	800c86c <HAL_PCD_DataOutStageCallback>
 8007b8e:	e01d      	b.n	8007bcc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d114      	bne.n	8007bc0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	4413      	add	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	440b      	add	r3, r1
 8007ba4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d108      	bne.n	8007bc0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007bb8:	461a      	mov	r2, r3
 8007bba:	2100      	movs	r1, #0
 8007bbc:	f002 fb90 	bl	800a2e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f004 fe50 	bl	800c86c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3720      	adds	r7, #32
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	4f54300a 	.word	0x4f54300a
 8007bdc:	4f54310a 	.word	0x4f54310a

08007be0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	333c      	adds	r3, #60	; 0x3c
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4a15      	ldr	r2, [pc, #84]	; (8007c68 <PCD_EP_OutSetupPacket_int+0x88>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d90e      	bls.n	8007c34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d009      	beq.n	8007c34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f004 fe07 	bl	800c848 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4a0a      	ldr	r2, [pc, #40]	; (8007c68 <PCD_EP_OutSetupPacket_int+0x88>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d90c      	bls.n	8007c5c <PCD_EP_OutSetupPacket_int+0x7c>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d108      	bne.n	8007c5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007c54:	461a      	mov	r2, r3
 8007c56:	2101      	movs	r1, #1
 8007c58:	f002 fb42 	bl	800a2e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	4f54300a 	.word	0x4f54300a

08007c6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d107      	bne.n	8007c9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007c8a:	883b      	ldrh	r3, [r7, #0]
 8007c8c:	0419      	lsls	r1, r3, #16
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	629a      	str	r2, [r3, #40]	; 0x28
 8007c98:	e028      	b.n	8007cec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca0:	0c1b      	lsrs	r3, r3, #16
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73fb      	strb	r3, [r7, #15]
 8007cac:	e00d      	b.n	8007cca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	3340      	adds	r3, #64	; 0x40
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	0c1b      	lsrs	r3, r3, #16
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	73fb      	strb	r3, [r7, #15]
 8007cca:	7bfa      	ldrb	r2, [r7, #15]
 8007ccc:	78fb      	ldrb	r3, [r7, #3]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d3ec      	bcc.n	8007cae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007cd4:	883b      	ldrh	r3, [r7, #0]
 8007cd6:	0418      	lsls	r0, r3, #16
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6819      	ldr	r1, [r3, #0]
 8007cdc:	78fb      	ldrb	r3, [r7, #3]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	4302      	orrs	r2, r0
 8007ce4:	3340      	adds	r3, #64	; 0x40
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	460b      	mov	r3, r1
 8007d04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	887a      	ldrh	r2, [r7, #2]
 8007d0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e267      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d075      	beq.n	8007e3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d52:	4b88      	ldr	r3, [pc, #544]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 030c 	and.w	r3, r3, #12
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d00c      	beq.n	8007d78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d5e:	4b85      	ldr	r3, [pc, #532]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d66:	2b08      	cmp	r3, #8
 8007d68:	d112      	bne.n	8007d90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d6a:	4b82      	ldr	r3, [pc, #520]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d76:	d10b      	bne.n	8007d90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d78:	4b7e      	ldr	r3, [pc, #504]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d05b      	beq.n	8007e3c <HAL_RCC_OscConfig+0x108>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d157      	bne.n	8007e3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e242      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d98:	d106      	bne.n	8007da8 <HAL_RCC_OscConfig+0x74>
 8007d9a:	4b76      	ldr	r3, [pc, #472]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a75      	ldr	r2, [pc, #468]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	e01d      	b.n	8007de4 <HAL_RCC_OscConfig+0xb0>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007db0:	d10c      	bne.n	8007dcc <HAL_RCC_OscConfig+0x98>
 8007db2:	4b70      	ldr	r3, [pc, #448]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a6f      	ldr	r2, [pc, #444]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	4b6d      	ldr	r3, [pc, #436]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a6c      	ldr	r2, [pc, #432]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dc8:	6013      	str	r3, [r2, #0]
 8007dca:	e00b      	b.n	8007de4 <HAL_RCC_OscConfig+0xb0>
 8007dcc:	4b69      	ldr	r3, [pc, #420]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a68      	ldr	r2, [pc, #416]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	4b66      	ldr	r3, [pc, #408]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a65      	ldr	r2, [pc, #404]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d013      	beq.n	8007e14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dec:	f7fa fa3e 	bl	800226c <HAL_GetTick>
 8007df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007df4:	f7fa fa3a 	bl	800226c <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b64      	cmp	r3, #100	; 0x64
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e207      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e06:	4b5b      	ldr	r3, [pc, #364]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0f0      	beq.n	8007df4 <HAL_RCC_OscConfig+0xc0>
 8007e12:	e014      	b.n	8007e3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e14:	f7fa fa2a 	bl	800226c <HAL_GetTick>
 8007e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e1a:	e008      	b.n	8007e2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e1c:	f7fa fa26 	bl	800226c <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b64      	cmp	r3, #100	; 0x64
 8007e28:	d901      	bls.n	8007e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e1f3      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e2e:	4b51      	ldr	r3, [pc, #324]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1f0      	bne.n	8007e1c <HAL_RCC_OscConfig+0xe8>
 8007e3a:	e000      	b.n	8007e3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d063      	beq.n	8007f12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e4a:	4b4a      	ldr	r3, [pc, #296]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 030c 	and.w	r3, r3, #12
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00b      	beq.n	8007e6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e56:	4b47      	ldr	r3, [pc, #284]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e5e:	2b08      	cmp	r3, #8
 8007e60:	d11c      	bne.n	8007e9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e62:	4b44      	ldr	r3, [pc, #272]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d116      	bne.n	8007e9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e6e:	4b41      	ldr	r3, [pc, #260]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d005      	beq.n	8007e86 <HAL_RCC_OscConfig+0x152>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d001      	beq.n	8007e86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e1c7      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e86:	4b3b      	ldr	r3, [pc, #236]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	4937      	ldr	r1, [pc, #220]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e9a:	e03a      	b.n	8007f12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d020      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ea4:	4b34      	ldr	r3, [pc, #208]	; (8007f78 <HAL_RCC_OscConfig+0x244>)
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eaa:	f7fa f9df 	bl	800226c <HAL_GetTick>
 8007eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eb0:	e008      	b.n	8007ec4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eb2:	f7fa f9db 	bl	800226c <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d901      	bls.n	8007ec4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e1a8      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ec4:	4b2b      	ldr	r3, [pc, #172]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d0f0      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed0:	4b28      	ldr	r3, [pc, #160]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	00db      	lsls	r3, r3, #3
 8007ede:	4925      	ldr	r1, [pc, #148]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	600b      	str	r3, [r1, #0]
 8007ee4:	e015      	b.n	8007f12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ee6:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <HAL_RCC_OscConfig+0x244>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eec:	f7fa f9be 	bl	800226c <HAL_GetTick>
 8007ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ef4:	f7fa f9ba 	bl	800226c <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e187      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f06:	4b1b      	ldr	r3, [pc, #108]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1f0      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0308 	and.w	r3, r3, #8
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d036      	beq.n	8007f8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d016      	beq.n	8007f54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f26:	4b15      	ldr	r3, [pc, #84]	; (8007f7c <HAL_RCC_OscConfig+0x248>)
 8007f28:	2201      	movs	r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f2c:	f7fa f99e 	bl	800226c <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f34:	f7fa f99a 	bl	800226c <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e167      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f46:	4b0b      	ldr	r3, [pc, #44]	; (8007f74 <HAL_RCC_OscConfig+0x240>)
 8007f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0f0      	beq.n	8007f34 <HAL_RCC_OscConfig+0x200>
 8007f52:	e01b      	b.n	8007f8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f54:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <HAL_RCC_OscConfig+0x248>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f5a:	f7fa f987 	bl	800226c <HAL_GetTick>
 8007f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f60:	e00e      	b.n	8007f80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f62:	f7fa f983 	bl	800226c <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d907      	bls.n	8007f80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e150      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
 8007f74:	40023800 	.word	0x40023800
 8007f78:	42470000 	.word	0x42470000
 8007f7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f80:	4b88      	ldr	r3, [pc, #544]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8007f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f84:	f003 0302 	and.w	r3, r3, #2
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1ea      	bne.n	8007f62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 8097 	beq.w	80080c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f9e:	4b81      	ldr	r3, [pc, #516]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10f      	bne.n	8007fca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007faa:	2300      	movs	r3, #0
 8007fac:	60bb      	str	r3, [r7, #8]
 8007fae:	4b7d      	ldr	r3, [pc, #500]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	4a7c      	ldr	r2, [pc, #496]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8007fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8007fba:	4b7a      	ldr	r3, [pc, #488]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fc2:	60bb      	str	r3, [r7, #8]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fca:	4b77      	ldr	r3, [pc, #476]	; (80081a8 <HAL_RCC_OscConfig+0x474>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d118      	bne.n	8008008 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fd6:	4b74      	ldr	r3, [pc, #464]	; (80081a8 <HAL_RCC_OscConfig+0x474>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a73      	ldr	r2, [pc, #460]	; (80081a8 <HAL_RCC_OscConfig+0x474>)
 8007fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fe2:	f7fa f943 	bl	800226c <HAL_GetTick>
 8007fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fe8:	e008      	b.n	8007ffc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fea:	f7fa f93f 	bl	800226c <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d901      	bls.n	8007ffc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e10c      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ffc:	4b6a      	ldr	r3, [pc, #424]	; (80081a8 <HAL_RCC_OscConfig+0x474>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0f0      	beq.n	8007fea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d106      	bne.n	800801e <HAL_RCC_OscConfig+0x2ea>
 8008010:	4b64      	ldr	r3, [pc, #400]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8008012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008014:	4a63      	ldr	r2, [pc, #396]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8008016:	f043 0301 	orr.w	r3, r3, #1
 800801a:	6713      	str	r3, [r2, #112]	; 0x70
 800801c:	e01c      	b.n	8008058 <HAL_RCC_OscConfig+0x324>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	2b05      	cmp	r3, #5
 8008024:	d10c      	bne.n	8008040 <HAL_RCC_OscConfig+0x30c>
 8008026:	4b5f      	ldr	r3, [pc, #380]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8008028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802a:	4a5e      	ldr	r2, [pc, #376]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 800802c:	f043 0304 	orr.w	r3, r3, #4
 8008030:	6713      	str	r3, [r2, #112]	; 0x70
 8008032:	4b5c      	ldr	r3, [pc, #368]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8008034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008036:	4a5b      	ldr	r2, [pc, #364]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8008038:	f043 0301 	orr.w	r3, r3, #1
 800803c:	6713      	str	r3, [r2, #112]	; 0x70
 800803e:	e00b      	b.n	8008058 <HAL_RCC_OscConfig+0x324>
 8008040:	4b58      	ldr	r3, [pc, #352]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8008042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008044:	4a57      	ldr	r2, [pc, #348]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8008046:	f023 0301 	bic.w	r3, r3, #1
 800804a:	6713      	str	r3, [r2, #112]	; 0x70
 800804c:	4b55      	ldr	r3, [pc, #340]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 800804e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008050:	4a54      	ldr	r2, [pc, #336]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8008052:	f023 0304 	bic.w	r3, r3, #4
 8008056:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d015      	beq.n	800808c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008060:	f7fa f904 	bl	800226c <HAL_GetTick>
 8008064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008066:	e00a      	b.n	800807e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008068:	f7fa f900 	bl	800226c <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	f241 3288 	movw	r2, #5000	; 0x1388
 8008076:	4293      	cmp	r3, r2
 8008078:	d901      	bls.n	800807e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e0cb      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800807e:	4b49      	ldr	r3, [pc, #292]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8008080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d0ee      	beq.n	8008068 <HAL_RCC_OscConfig+0x334>
 800808a:	e014      	b.n	80080b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800808c:	f7fa f8ee 	bl	800226c <HAL_GetTick>
 8008090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008092:	e00a      	b.n	80080aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008094:	f7fa f8ea 	bl	800226c <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	f241 3288 	movw	r2, #5000	; 0x1388
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d901      	bls.n	80080aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e0b5      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080aa:	4b3e      	ldr	r3, [pc, #248]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 80080ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1ee      	bne.n	8008094 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d105      	bne.n	80080c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080bc:	4b39      	ldr	r3, [pc, #228]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 80080be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c0:	4a38      	ldr	r2, [pc, #224]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 80080c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 80a1 	beq.w	8008214 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080d2:	4b34      	ldr	r3, [pc, #208]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 030c 	and.w	r3, r3, #12
 80080da:	2b08      	cmp	r3, #8
 80080dc:	d05c      	beq.n	8008198 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d141      	bne.n	800816a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080e6:	4b31      	ldr	r3, [pc, #196]	; (80081ac <HAL_RCC_OscConfig+0x478>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ec:	f7fa f8be 	bl	800226c <HAL_GetTick>
 80080f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080f2:	e008      	b.n	8008106 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080f4:	f7fa f8ba 	bl	800226c <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d901      	bls.n	8008106 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e087      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008106:	4b27      	ldr	r3, [pc, #156]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1f0      	bne.n	80080f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	69da      	ldr	r2, [r3, #28]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	019b      	lsls	r3, r3, #6
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008128:	085b      	lsrs	r3, r3, #1
 800812a:	3b01      	subs	r3, #1
 800812c:	041b      	lsls	r3, r3, #16
 800812e:	431a      	orrs	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	061b      	lsls	r3, r3, #24
 8008136:	491b      	ldr	r1, [pc, #108]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 8008138:	4313      	orrs	r3, r2
 800813a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800813c:	4b1b      	ldr	r3, [pc, #108]	; (80081ac <HAL_RCC_OscConfig+0x478>)
 800813e:	2201      	movs	r2, #1
 8008140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008142:	f7fa f893 	bl	800226c <HAL_GetTick>
 8008146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008148:	e008      	b.n	800815c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800814a:	f7fa f88f 	bl	800226c <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b02      	cmp	r3, #2
 8008156:	d901      	bls.n	800815c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e05c      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800815c:	4b11      	ldr	r3, [pc, #68]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d0f0      	beq.n	800814a <HAL_RCC_OscConfig+0x416>
 8008168:	e054      	b.n	8008214 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800816a:	4b10      	ldr	r3, [pc, #64]	; (80081ac <HAL_RCC_OscConfig+0x478>)
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008170:	f7fa f87c 	bl	800226c <HAL_GetTick>
 8008174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008176:	e008      	b.n	800818a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008178:	f7fa f878 	bl	800226c <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d901      	bls.n	800818a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e045      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800818a:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <HAL_RCC_OscConfig+0x470>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1f0      	bne.n	8008178 <HAL_RCC_OscConfig+0x444>
 8008196:	e03d      	b.n	8008214 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d107      	bne.n	80081b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e038      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
 80081a4:	40023800 	.word	0x40023800
 80081a8:	40007000 	.word	0x40007000
 80081ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081b0:	4b1b      	ldr	r3, [pc, #108]	; (8008220 <HAL_RCC_OscConfig+0x4ec>)
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d028      	beq.n	8008210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d121      	bne.n	8008210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d11a      	bne.n	8008210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081e0:	4013      	ands	r3, r2
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d111      	bne.n	8008210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	085b      	lsrs	r3, r3, #1
 80081f8:	3b01      	subs	r3, #1
 80081fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d107      	bne.n	8008210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800820c:	429a      	cmp	r2, r3
 800820e:	d001      	beq.n	8008214 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	40023800 	.word	0x40023800

08008224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e0cc      	b.n	80083d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008238:	4b68      	ldr	r3, [pc, #416]	; (80083dc <HAL_RCC_ClockConfig+0x1b8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0307 	and.w	r3, r3, #7
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d90c      	bls.n	8008260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008246:	4b65      	ldr	r3, [pc, #404]	; (80083dc <HAL_RCC_ClockConfig+0x1b8>)
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800824e:	4b63      	ldr	r3, [pc, #396]	; (80083dc <HAL_RCC_ClockConfig+0x1b8>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0307 	and.w	r3, r3, #7
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	429a      	cmp	r2, r3
 800825a:	d001      	beq.n	8008260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e0b8      	b.n	80083d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0302 	and.w	r3, r3, #2
 8008268:	2b00      	cmp	r3, #0
 800826a:	d020      	beq.n	80082ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0304 	and.w	r3, r3, #4
 8008274:	2b00      	cmp	r3, #0
 8008276:	d005      	beq.n	8008284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008278:	4b59      	ldr	r3, [pc, #356]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	4a58      	ldr	r2, [pc, #352]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 800827e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0308 	and.w	r3, r3, #8
 800828c:	2b00      	cmp	r3, #0
 800828e:	d005      	beq.n	800829c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008290:	4b53      	ldr	r3, [pc, #332]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	4a52      	ldr	r2, [pc, #328]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800829a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800829c:	4b50      	ldr	r3, [pc, #320]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	494d      	ldr	r1, [pc, #308]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d044      	beq.n	8008344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d107      	bne.n	80082d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082c2:	4b47      	ldr	r3, [pc, #284]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d119      	bne.n	8008302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e07f      	b.n	80083d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d003      	beq.n	80082e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d107      	bne.n	80082f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082e2:	4b3f      	ldr	r3, [pc, #252]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d109      	bne.n	8008302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e06f      	b.n	80083d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082f2:	4b3b      	ldr	r3, [pc, #236]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0302 	and.w	r3, r3, #2
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e067      	b.n	80083d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008302:	4b37      	ldr	r3, [pc, #220]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f023 0203 	bic.w	r2, r3, #3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	4934      	ldr	r1, [pc, #208]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008310:	4313      	orrs	r3, r2
 8008312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008314:	f7f9 ffaa 	bl	800226c <HAL_GetTick>
 8008318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800831a:	e00a      	b.n	8008332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800831c:	f7f9 ffa6 	bl	800226c <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	f241 3288 	movw	r2, #5000	; 0x1388
 800832a:	4293      	cmp	r3, r2
 800832c:	d901      	bls.n	8008332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e04f      	b.n	80083d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008332:	4b2b      	ldr	r3, [pc, #172]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f003 020c 	and.w	r2, r3, #12
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	429a      	cmp	r2, r3
 8008342:	d1eb      	bne.n	800831c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008344:	4b25      	ldr	r3, [pc, #148]	; (80083dc <HAL_RCC_ClockConfig+0x1b8>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	429a      	cmp	r2, r3
 8008350:	d20c      	bcs.n	800836c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008352:	4b22      	ldr	r3, [pc, #136]	; (80083dc <HAL_RCC_ClockConfig+0x1b8>)
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800835a:	4b20      	ldr	r3, [pc, #128]	; (80083dc <HAL_RCC_ClockConfig+0x1b8>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	429a      	cmp	r2, r3
 8008366:	d001      	beq.n	800836c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e032      	b.n	80083d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b00      	cmp	r3, #0
 8008376:	d008      	beq.n	800838a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008378:	4b19      	ldr	r3, [pc, #100]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	4916      	ldr	r1, [pc, #88]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008386:	4313      	orrs	r3, r2
 8008388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0308 	and.w	r3, r3, #8
 8008392:	2b00      	cmp	r3, #0
 8008394:	d009      	beq.n	80083aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008396:	4b12      	ldr	r3, [pc, #72]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	490e      	ldr	r1, [pc, #56]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083aa:	f000 f821 	bl	80083f0 <HAL_RCC_GetSysClockFreq>
 80083ae:	4602      	mov	r2, r0
 80083b0:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <HAL_RCC_ClockConfig+0x1bc>)
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	091b      	lsrs	r3, r3, #4
 80083b6:	f003 030f 	and.w	r3, r3, #15
 80083ba:	490a      	ldr	r1, [pc, #40]	; (80083e4 <HAL_RCC_ClockConfig+0x1c0>)
 80083bc:	5ccb      	ldrb	r3, [r1, r3]
 80083be:	fa22 f303 	lsr.w	r3, r2, r3
 80083c2:	4a09      	ldr	r2, [pc, #36]	; (80083e8 <HAL_RCC_ClockConfig+0x1c4>)
 80083c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083c6:	4b09      	ldr	r3, [pc, #36]	; (80083ec <HAL_RCC_ClockConfig+0x1c8>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7f9 ff0a 	bl	80021e4 <HAL_InitTick>

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	40023c00 	.word	0x40023c00
 80083e0:	40023800 	.word	0x40023800
 80083e4:	08010210 	.word	0x08010210
 80083e8:	20000030 	.word	0x20000030
 80083ec:	20000034 	.word	0x20000034

080083f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083f4:	b090      	sub	sp, #64	; 0x40
 80083f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	637b      	str	r3, [r7, #52]	; 0x34
 80083fc:	2300      	movs	r3, #0
 80083fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008400:	2300      	movs	r3, #0
 8008402:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008404:	2300      	movs	r3, #0
 8008406:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008408:	4b59      	ldr	r3, [pc, #356]	; (8008570 <HAL_RCC_GetSysClockFreq+0x180>)
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f003 030c 	and.w	r3, r3, #12
 8008410:	2b08      	cmp	r3, #8
 8008412:	d00d      	beq.n	8008430 <HAL_RCC_GetSysClockFreq+0x40>
 8008414:	2b08      	cmp	r3, #8
 8008416:	f200 80a1 	bhi.w	800855c <HAL_RCC_GetSysClockFreq+0x16c>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <HAL_RCC_GetSysClockFreq+0x34>
 800841e:	2b04      	cmp	r3, #4
 8008420:	d003      	beq.n	800842a <HAL_RCC_GetSysClockFreq+0x3a>
 8008422:	e09b      	b.n	800855c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008424:	4b53      	ldr	r3, [pc, #332]	; (8008574 <HAL_RCC_GetSysClockFreq+0x184>)
 8008426:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008428:	e09b      	b.n	8008562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800842a:	4b53      	ldr	r3, [pc, #332]	; (8008578 <HAL_RCC_GetSysClockFreq+0x188>)
 800842c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800842e:	e098      	b.n	8008562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008430:	4b4f      	ldr	r3, [pc, #316]	; (8008570 <HAL_RCC_GetSysClockFreq+0x180>)
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008438:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800843a:	4b4d      	ldr	r3, [pc, #308]	; (8008570 <HAL_RCC_GetSysClockFreq+0x180>)
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d028      	beq.n	8008498 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008446:	4b4a      	ldr	r3, [pc, #296]	; (8008570 <HAL_RCC_GetSysClockFreq+0x180>)
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	099b      	lsrs	r3, r3, #6
 800844c:	2200      	movs	r2, #0
 800844e:	623b      	str	r3, [r7, #32]
 8008450:	627a      	str	r2, [r7, #36]	; 0x24
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008458:	2100      	movs	r1, #0
 800845a:	4b47      	ldr	r3, [pc, #284]	; (8008578 <HAL_RCC_GetSysClockFreq+0x188>)
 800845c:	fb03 f201 	mul.w	r2, r3, r1
 8008460:	2300      	movs	r3, #0
 8008462:	fb00 f303 	mul.w	r3, r0, r3
 8008466:	4413      	add	r3, r2
 8008468:	4a43      	ldr	r2, [pc, #268]	; (8008578 <HAL_RCC_GetSysClockFreq+0x188>)
 800846a:	fba0 1202 	umull	r1, r2, r0, r2
 800846e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008470:	460a      	mov	r2, r1
 8008472:	62ba      	str	r2, [r7, #40]	; 0x28
 8008474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008476:	4413      	add	r3, r2
 8008478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800847a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847c:	2200      	movs	r2, #0
 800847e:	61bb      	str	r3, [r7, #24]
 8008480:	61fa      	str	r2, [r7, #28]
 8008482:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008486:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800848a:	f7f8 fbe5 	bl	8000c58 <__aeabi_uldivmod>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4613      	mov	r3, r2
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008496:	e053      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008498:	4b35      	ldr	r3, [pc, #212]	; (8008570 <HAL_RCC_GetSysClockFreq+0x180>)
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	099b      	lsrs	r3, r3, #6
 800849e:	2200      	movs	r2, #0
 80084a0:	613b      	str	r3, [r7, #16]
 80084a2:	617a      	str	r2, [r7, #20]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80084aa:	f04f 0b00 	mov.w	fp, #0
 80084ae:	4652      	mov	r2, sl
 80084b0:	465b      	mov	r3, fp
 80084b2:	f04f 0000 	mov.w	r0, #0
 80084b6:	f04f 0100 	mov.w	r1, #0
 80084ba:	0159      	lsls	r1, r3, #5
 80084bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084c0:	0150      	lsls	r0, r2, #5
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	ebb2 080a 	subs.w	r8, r2, sl
 80084ca:	eb63 090b 	sbc.w	r9, r3, fp
 80084ce:	f04f 0200 	mov.w	r2, #0
 80084d2:	f04f 0300 	mov.w	r3, #0
 80084d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80084da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80084de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80084e2:	ebb2 0408 	subs.w	r4, r2, r8
 80084e6:	eb63 0509 	sbc.w	r5, r3, r9
 80084ea:	f04f 0200 	mov.w	r2, #0
 80084ee:	f04f 0300 	mov.w	r3, #0
 80084f2:	00eb      	lsls	r3, r5, #3
 80084f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084f8:	00e2      	lsls	r2, r4, #3
 80084fa:	4614      	mov	r4, r2
 80084fc:	461d      	mov	r5, r3
 80084fe:	eb14 030a 	adds.w	r3, r4, sl
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	eb45 030b 	adc.w	r3, r5, fp
 8008508:	607b      	str	r3, [r7, #4]
 800850a:	f04f 0200 	mov.w	r2, #0
 800850e:	f04f 0300 	mov.w	r3, #0
 8008512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008516:	4629      	mov	r1, r5
 8008518:	028b      	lsls	r3, r1, #10
 800851a:	4621      	mov	r1, r4
 800851c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008520:	4621      	mov	r1, r4
 8008522:	028a      	lsls	r2, r1, #10
 8008524:	4610      	mov	r0, r2
 8008526:	4619      	mov	r1, r3
 8008528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852a:	2200      	movs	r2, #0
 800852c:	60bb      	str	r3, [r7, #8]
 800852e:	60fa      	str	r2, [r7, #12]
 8008530:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008534:	f7f8 fb90 	bl	8000c58 <__aeabi_uldivmod>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4613      	mov	r3, r2
 800853e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008540:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <HAL_RCC_GetSysClockFreq+0x180>)
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	0c1b      	lsrs	r3, r3, #16
 8008546:	f003 0303 	and.w	r3, r3, #3
 800854a:	3301      	adds	r3, #1
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008550:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	fbb2 f3f3 	udiv	r3, r2, r3
 8008558:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800855a:	e002      	b.n	8008562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800855c:	4b05      	ldr	r3, [pc, #20]	; (8008574 <HAL_RCC_GetSysClockFreq+0x184>)
 800855e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008564:	4618      	mov	r0, r3
 8008566:	3740      	adds	r7, #64	; 0x40
 8008568:	46bd      	mov	sp, r7
 800856a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800856e:	bf00      	nop
 8008570:	40023800 	.word	0x40023800
 8008574:	00f42400 	.word	0x00f42400
 8008578:	017d7840 	.word	0x017d7840

0800857c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800857c:	b480      	push	{r7}
 800857e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008580:	4b03      	ldr	r3, [pc, #12]	; (8008590 <HAL_RCC_GetHCLKFreq+0x14>)
 8008582:	681b      	ldr	r3, [r3, #0]
}
 8008584:	4618      	mov	r0, r3
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	20000030 	.word	0x20000030

08008594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008598:	f7ff fff0 	bl	800857c <HAL_RCC_GetHCLKFreq>
 800859c:	4602      	mov	r2, r0
 800859e:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	0a9b      	lsrs	r3, r3, #10
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	4903      	ldr	r1, [pc, #12]	; (80085b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085aa:	5ccb      	ldrb	r3, [r1, r3]
 80085ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	40023800 	.word	0x40023800
 80085b8:	08010220 	.word	0x08010220

080085bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085c0:	f7ff ffdc 	bl	800857c <HAL_RCC_GetHCLKFreq>
 80085c4:	4602      	mov	r2, r0
 80085c6:	4b05      	ldr	r3, [pc, #20]	; (80085dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	0b5b      	lsrs	r3, r3, #13
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	4903      	ldr	r1, [pc, #12]	; (80085e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085d2:	5ccb      	ldrb	r3, [r1, r3]
 80085d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085d8:	4618      	mov	r0, r3
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	40023800 	.word	0x40023800
 80085e0:	08010220 	.word	0x08010220

080085e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e03f      	b.n	8008676 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d106      	bne.n	8008610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7f9 fd56 	bl	80020bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2224      	movs	r2, #36	; 0x24
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68da      	ldr	r2, [r3, #12]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f829 	bl	8008680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	691a      	ldr	r2, [r3, #16]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800863c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	695a      	ldr	r2, [r3, #20]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800864c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800865c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2220      	movs	r2, #32
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2220      	movs	r2, #32
 8008670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008684:	b0c0      	sub	sp, #256	; 0x100
 8008686:	af00      	add	r7, sp, #0
 8008688:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800868c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800869c:	68d9      	ldr	r1, [r3, #12]
 800869e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	ea40 0301 	orr.w	r3, r0, r1
 80086a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	431a      	orrs	r2, r3
 80086b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	431a      	orrs	r2, r3
 80086c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80086cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80086d8:	f021 010c 	bic.w	r1, r1, #12
 80086dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086e6:	430b      	orrs	r3, r1
 80086e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80086f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086fa:	6999      	ldr	r1, [r3, #24]
 80086fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	ea40 0301 	orr.w	r3, r0, r1
 8008706:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	4b8f      	ldr	r3, [pc, #572]	; (800894c <UART_SetConfig+0x2cc>)
 8008710:	429a      	cmp	r2, r3
 8008712:	d005      	beq.n	8008720 <UART_SetConfig+0xa0>
 8008714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	4b8d      	ldr	r3, [pc, #564]	; (8008950 <UART_SetConfig+0x2d0>)
 800871c:	429a      	cmp	r2, r3
 800871e:	d104      	bne.n	800872a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008720:	f7ff ff4c 	bl	80085bc <HAL_RCC_GetPCLK2Freq>
 8008724:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008728:	e003      	b.n	8008732 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800872a:	f7ff ff33 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800872e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800873c:	f040 810c 	bne.w	8008958 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008744:	2200      	movs	r2, #0
 8008746:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800874a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800874e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008752:	4622      	mov	r2, r4
 8008754:	462b      	mov	r3, r5
 8008756:	1891      	adds	r1, r2, r2
 8008758:	65b9      	str	r1, [r7, #88]	; 0x58
 800875a:	415b      	adcs	r3, r3
 800875c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800875e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008762:	4621      	mov	r1, r4
 8008764:	eb12 0801 	adds.w	r8, r2, r1
 8008768:	4629      	mov	r1, r5
 800876a:	eb43 0901 	adc.w	r9, r3, r1
 800876e:	f04f 0200 	mov.w	r2, #0
 8008772:	f04f 0300 	mov.w	r3, #0
 8008776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800877a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800877e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008782:	4690      	mov	r8, r2
 8008784:	4699      	mov	r9, r3
 8008786:	4623      	mov	r3, r4
 8008788:	eb18 0303 	adds.w	r3, r8, r3
 800878c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008790:	462b      	mov	r3, r5
 8008792:	eb49 0303 	adc.w	r3, r9, r3
 8008796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800879a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80087aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80087ae:	460b      	mov	r3, r1
 80087b0:	18db      	adds	r3, r3, r3
 80087b2:	653b      	str	r3, [r7, #80]	; 0x50
 80087b4:	4613      	mov	r3, r2
 80087b6:	eb42 0303 	adc.w	r3, r2, r3
 80087ba:	657b      	str	r3, [r7, #84]	; 0x54
 80087bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80087c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80087c4:	f7f8 fa48 	bl	8000c58 <__aeabi_uldivmod>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4b61      	ldr	r3, [pc, #388]	; (8008954 <UART_SetConfig+0x2d4>)
 80087ce:	fba3 2302 	umull	r2, r3, r3, r2
 80087d2:	095b      	lsrs	r3, r3, #5
 80087d4:	011c      	lsls	r4, r3, #4
 80087d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087da:	2200      	movs	r2, #0
 80087dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80087e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80087e8:	4642      	mov	r2, r8
 80087ea:	464b      	mov	r3, r9
 80087ec:	1891      	adds	r1, r2, r2
 80087ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80087f0:	415b      	adcs	r3, r3
 80087f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80087f8:	4641      	mov	r1, r8
 80087fa:	eb12 0a01 	adds.w	sl, r2, r1
 80087fe:	4649      	mov	r1, r9
 8008800:	eb43 0b01 	adc.w	fp, r3, r1
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008810:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008818:	4692      	mov	sl, r2
 800881a:	469b      	mov	fp, r3
 800881c:	4643      	mov	r3, r8
 800881e:	eb1a 0303 	adds.w	r3, sl, r3
 8008822:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008826:	464b      	mov	r3, r9
 8008828:	eb4b 0303 	adc.w	r3, fp, r3
 800882c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800883c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008840:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008844:	460b      	mov	r3, r1
 8008846:	18db      	adds	r3, r3, r3
 8008848:	643b      	str	r3, [r7, #64]	; 0x40
 800884a:	4613      	mov	r3, r2
 800884c:	eb42 0303 	adc.w	r3, r2, r3
 8008850:	647b      	str	r3, [r7, #68]	; 0x44
 8008852:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008856:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800885a:	f7f8 f9fd 	bl	8000c58 <__aeabi_uldivmod>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	4611      	mov	r1, r2
 8008864:	4b3b      	ldr	r3, [pc, #236]	; (8008954 <UART_SetConfig+0x2d4>)
 8008866:	fba3 2301 	umull	r2, r3, r3, r1
 800886a:	095b      	lsrs	r3, r3, #5
 800886c:	2264      	movs	r2, #100	; 0x64
 800886e:	fb02 f303 	mul.w	r3, r2, r3
 8008872:	1acb      	subs	r3, r1, r3
 8008874:	00db      	lsls	r3, r3, #3
 8008876:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800887a:	4b36      	ldr	r3, [pc, #216]	; (8008954 <UART_SetConfig+0x2d4>)
 800887c:	fba3 2302 	umull	r2, r3, r3, r2
 8008880:	095b      	lsrs	r3, r3, #5
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008888:	441c      	add	r4, r3
 800888a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800888e:	2200      	movs	r2, #0
 8008890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008894:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008898:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800889c:	4642      	mov	r2, r8
 800889e:	464b      	mov	r3, r9
 80088a0:	1891      	adds	r1, r2, r2
 80088a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80088a4:	415b      	adcs	r3, r3
 80088a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088ac:	4641      	mov	r1, r8
 80088ae:	1851      	adds	r1, r2, r1
 80088b0:	6339      	str	r1, [r7, #48]	; 0x30
 80088b2:	4649      	mov	r1, r9
 80088b4:	414b      	adcs	r3, r1
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
 80088b8:	f04f 0200 	mov.w	r2, #0
 80088bc:	f04f 0300 	mov.w	r3, #0
 80088c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80088c4:	4659      	mov	r1, fp
 80088c6:	00cb      	lsls	r3, r1, #3
 80088c8:	4651      	mov	r1, sl
 80088ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ce:	4651      	mov	r1, sl
 80088d0:	00ca      	lsls	r2, r1, #3
 80088d2:	4610      	mov	r0, r2
 80088d4:	4619      	mov	r1, r3
 80088d6:	4603      	mov	r3, r0
 80088d8:	4642      	mov	r2, r8
 80088da:	189b      	adds	r3, r3, r2
 80088dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088e0:	464b      	mov	r3, r9
 80088e2:	460a      	mov	r2, r1
 80088e4:	eb42 0303 	adc.w	r3, r2, r3
 80088e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80088fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008900:	460b      	mov	r3, r1
 8008902:	18db      	adds	r3, r3, r3
 8008904:	62bb      	str	r3, [r7, #40]	; 0x28
 8008906:	4613      	mov	r3, r2
 8008908:	eb42 0303 	adc.w	r3, r2, r3
 800890c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800890e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008912:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008916:	f7f8 f99f 	bl	8000c58 <__aeabi_uldivmod>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <UART_SetConfig+0x2d4>)
 8008920:	fba3 1302 	umull	r1, r3, r3, r2
 8008924:	095b      	lsrs	r3, r3, #5
 8008926:	2164      	movs	r1, #100	; 0x64
 8008928:	fb01 f303 	mul.w	r3, r1, r3
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	3332      	adds	r3, #50	; 0x32
 8008932:	4a08      	ldr	r2, [pc, #32]	; (8008954 <UART_SetConfig+0x2d4>)
 8008934:	fba2 2303 	umull	r2, r3, r2, r3
 8008938:	095b      	lsrs	r3, r3, #5
 800893a:	f003 0207 	and.w	r2, r3, #7
 800893e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4422      	add	r2, r4
 8008946:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008948:	e105      	b.n	8008b56 <UART_SetConfig+0x4d6>
 800894a:	bf00      	nop
 800894c:	40011000 	.word	0x40011000
 8008950:	40011400 	.word	0x40011400
 8008954:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800895c:	2200      	movs	r2, #0
 800895e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008962:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008966:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800896a:	4642      	mov	r2, r8
 800896c:	464b      	mov	r3, r9
 800896e:	1891      	adds	r1, r2, r2
 8008970:	6239      	str	r1, [r7, #32]
 8008972:	415b      	adcs	r3, r3
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
 8008976:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800897a:	4641      	mov	r1, r8
 800897c:	1854      	adds	r4, r2, r1
 800897e:	4649      	mov	r1, r9
 8008980:	eb43 0501 	adc.w	r5, r3, r1
 8008984:	f04f 0200 	mov.w	r2, #0
 8008988:	f04f 0300 	mov.w	r3, #0
 800898c:	00eb      	lsls	r3, r5, #3
 800898e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008992:	00e2      	lsls	r2, r4, #3
 8008994:	4614      	mov	r4, r2
 8008996:	461d      	mov	r5, r3
 8008998:	4643      	mov	r3, r8
 800899a:	18e3      	adds	r3, r4, r3
 800899c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80089a0:	464b      	mov	r3, r9
 80089a2:	eb45 0303 	adc.w	r3, r5, r3
 80089a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80089aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089ba:	f04f 0200 	mov.w	r2, #0
 80089be:	f04f 0300 	mov.w	r3, #0
 80089c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80089c6:	4629      	mov	r1, r5
 80089c8:	008b      	lsls	r3, r1, #2
 80089ca:	4621      	mov	r1, r4
 80089cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089d0:	4621      	mov	r1, r4
 80089d2:	008a      	lsls	r2, r1, #2
 80089d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80089d8:	f7f8 f93e 	bl	8000c58 <__aeabi_uldivmod>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4b60      	ldr	r3, [pc, #384]	; (8008b64 <UART_SetConfig+0x4e4>)
 80089e2:	fba3 2302 	umull	r2, r3, r3, r2
 80089e6:	095b      	lsrs	r3, r3, #5
 80089e8:	011c      	lsls	r4, r3, #4
 80089ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089ee:	2200      	movs	r2, #0
 80089f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80089f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80089f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80089fc:	4642      	mov	r2, r8
 80089fe:	464b      	mov	r3, r9
 8008a00:	1891      	adds	r1, r2, r2
 8008a02:	61b9      	str	r1, [r7, #24]
 8008a04:	415b      	adcs	r3, r3
 8008a06:	61fb      	str	r3, [r7, #28]
 8008a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a0c:	4641      	mov	r1, r8
 8008a0e:	1851      	adds	r1, r2, r1
 8008a10:	6139      	str	r1, [r7, #16]
 8008a12:	4649      	mov	r1, r9
 8008a14:	414b      	adcs	r3, r1
 8008a16:	617b      	str	r3, [r7, #20]
 8008a18:	f04f 0200 	mov.w	r2, #0
 8008a1c:	f04f 0300 	mov.w	r3, #0
 8008a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a24:	4659      	mov	r1, fp
 8008a26:	00cb      	lsls	r3, r1, #3
 8008a28:	4651      	mov	r1, sl
 8008a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a2e:	4651      	mov	r1, sl
 8008a30:	00ca      	lsls	r2, r1, #3
 8008a32:	4610      	mov	r0, r2
 8008a34:	4619      	mov	r1, r3
 8008a36:	4603      	mov	r3, r0
 8008a38:	4642      	mov	r2, r8
 8008a3a:	189b      	adds	r3, r3, r2
 8008a3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a40:	464b      	mov	r3, r9
 8008a42:	460a      	mov	r2, r1
 8008a44:	eb42 0303 	adc.w	r3, r2, r3
 8008a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a58:	f04f 0200 	mov.w	r2, #0
 8008a5c:	f04f 0300 	mov.w	r3, #0
 8008a60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008a64:	4649      	mov	r1, r9
 8008a66:	008b      	lsls	r3, r1, #2
 8008a68:	4641      	mov	r1, r8
 8008a6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a6e:	4641      	mov	r1, r8
 8008a70:	008a      	lsls	r2, r1, #2
 8008a72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008a76:	f7f8 f8ef 	bl	8000c58 <__aeabi_uldivmod>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4b39      	ldr	r3, [pc, #228]	; (8008b64 <UART_SetConfig+0x4e4>)
 8008a80:	fba3 1302 	umull	r1, r3, r3, r2
 8008a84:	095b      	lsrs	r3, r3, #5
 8008a86:	2164      	movs	r1, #100	; 0x64
 8008a88:	fb01 f303 	mul.w	r3, r1, r3
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	011b      	lsls	r3, r3, #4
 8008a90:	3332      	adds	r3, #50	; 0x32
 8008a92:	4a34      	ldr	r2, [pc, #208]	; (8008b64 <UART_SetConfig+0x4e4>)
 8008a94:	fba2 2303 	umull	r2, r3, r2, r3
 8008a98:	095b      	lsrs	r3, r3, #5
 8008a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a9e:	441c      	add	r4, r3
 8008aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	673b      	str	r3, [r7, #112]	; 0x70
 8008aa8:	677a      	str	r2, [r7, #116]	; 0x74
 8008aaa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008aae:	4642      	mov	r2, r8
 8008ab0:	464b      	mov	r3, r9
 8008ab2:	1891      	adds	r1, r2, r2
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	415b      	adcs	r3, r3
 8008ab8:	60fb      	str	r3, [r7, #12]
 8008aba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008abe:	4641      	mov	r1, r8
 8008ac0:	1851      	adds	r1, r2, r1
 8008ac2:	6039      	str	r1, [r7, #0]
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	414b      	adcs	r3, r1
 8008ac8:	607b      	str	r3, [r7, #4]
 8008aca:	f04f 0200 	mov.w	r2, #0
 8008ace:	f04f 0300 	mov.w	r3, #0
 8008ad2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ad6:	4659      	mov	r1, fp
 8008ad8:	00cb      	lsls	r3, r1, #3
 8008ada:	4651      	mov	r1, sl
 8008adc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ae0:	4651      	mov	r1, sl
 8008ae2:	00ca      	lsls	r2, r1, #3
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4603      	mov	r3, r0
 8008aea:	4642      	mov	r2, r8
 8008aec:	189b      	adds	r3, r3, r2
 8008aee:	66bb      	str	r3, [r7, #104]	; 0x68
 8008af0:	464b      	mov	r3, r9
 8008af2:	460a      	mov	r2, r1
 8008af4:	eb42 0303 	adc.w	r3, r2, r3
 8008af8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	663b      	str	r3, [r7, #96]	; 0x60
 8008b04:	667a      	str	r2, [r7, #100]	; 0x64
 8008b06:	f04f 0200 	mov.w	r2, #0
 8008b0a:	f04f 0300 	mov.w	r3, #0
 8008b0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008b12:	4649      	mov	r1, r9
 8008b14:	008b      	lsls	r3, r1, #2
 8008b16:	4641      	mov	r1, r8
 8008b18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b1c:	4641      	mov	r1, r8
 8008b1e:	008a      	lsls	r2, r1, #2
 8008b20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008b24:	f7f8 f898 	bl	8000c58 <__aeabi_uldivmod>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4b0d      	ldr	r3, [pc, #52]	; (8008b64 <UART_SetConfig+0x4e4>)
 8008b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8008b32:	095b      	lsrs	r3, r3, #5
 8008b34:	2164      	movs	r1, #100	; 0x64
 8008b36:	fb01 f303 	mul.w	r3, r1, r3
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	011b      	lsls	r3, r3, #4
 8008b3e:	3332      	adds	r3, #50	; 0x32
 8008b40:	4a08      	ldr	r2, [pc, #32]	; (8008b64 <UART_SetConfig+0x4e4>)
 8008b42:	fba2 2303 	umull	r2, r3, r2, r3
 8008b46:	095b      	lsrs	r3, r3, #5
 8008b48:	f003 020f 	and.w	r2, r3, #15
 8008b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4422      	add	r2, r4
 8008b54:	609a      	str	r2, [r3, #8]
}
 8008b56:	bf00      	nop
 8008b58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b62:	bf00      	nop
 8008b64:	51eb851f 	.word	0x51eb851f

08008b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b68:	b084      	sub	sp, #16
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	f107 001c 	add.w	r0, r7, #28
 8008b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d122      	bne.n	8008bc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d105      	bne.n	8008bba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 fbee 	bl	800a39c <USB_CoreReset>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]
 8008bc4:	e01a      	b.n	8008bfc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 fbe2 	bl	800a39c <USB_CoreReset>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d106      	bne.n	8008bf0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	639a      	str	r2, [r3, #56]	; 0x38
 8008bee:	e005      	b.n	8008bfc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d10b      	bne.n	8008c1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f043 0206 	orr.w	r2, r3, #6
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f043 0220 	orr.w	r2, r3, #32
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c26:	b004      	add	sp, #16
 8008c28:	4770      	bx	lr
	...

08008c2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	4613      	mov	r3, r2
 8008c38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d165      	bne.n	8008d0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	4a41      	ldr	r2, [pc, #260]	; (8008d48 <USB_SetTurnaroundTime+0x11c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d906      	bls.n	8008c56 <USB_SetTurnaroundTime+0x2a>
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	4a40      	ldr	r2, [pc, #256]	; (8008d4c <USB_SetTurnaroundTime+0x120>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d202      	bcs.n	8008c56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008c50:	230f      	movs	r3, #15
 8008c52:	617b      	str	r3, [r7, #20]
 8008c54:	e062      	b.n	8008d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	4a3c      	ldr	r2, [pc, #240]	; (8008d4c <USB_SetTurnaroundTime+0x120>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d306      	bcc.n	8008c6c <USB_SetTurnaroundTime+0x40>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	4a3b      	ldr	r2, [pc, #236]	; (8008d50 <USB_SetTurnaroundTime+0x124>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d202      	bcs.n	8008c6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008c66:	230e      	movs	r3, #14
 8008c68:	617b      	str	r3, [r7, #20]
 8008c6a:	e057      	b.n	8008d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	4a38      	ldr	r2, [pc, #224]	; (8008d50 <USB_SetTurnaroundTime+0x124>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d306      	bcc.n	8008c82 <USB_SetTurnaroundTime+0x56>
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	4a37      	ldr	r2, [pc, #220]	; (8008d54 <USB_SetTurnaroundTime+0x128>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d202      	bcs.n	8008c82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008c7c:	230d      	movs	r3, #13
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	e04c      	b.n	8008d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	4a33      	ldr	r2, [pc, #204]	; (8008d54 <USB_SetTurnaroundTime+0x128>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d306      	bcc.n	8008c98 <USB_SetTurnaroundTime+0x6c>
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	4a32      	ldr	r2, [pc, #200]	; (8008d58 <USB_SetTurnaroundTime+0x12c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d802      	bhi.n	8008c98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008c92:	230c      	movs	r3, #12
 8008c94:	617b      	str	r3, [r7, #20]
 8008c96:	e041      	b.n	8008d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	4a2f      	ldr	r2, [pc, #188]	; (8008d58 <USB_SetTurnaroundTime+0x12c>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d906      	bls.n	8008cae <USB_SetTurnaroundTime+0x82>
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	4a2e      	ldr	r2, [pc, #184]	; (8008d5c <USB_SetTurnaroundTime+0x130>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d802      	bhi.n	8008cae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008ca8:	230b      	movs	r3, #11
 8008caa:	617b      	str	r3, [r7, #20]
 8008cac:	e036      	b.n	8008d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	4a2a      	ldr	r2, [pc, #168]	; (8008d5c <USB_SetTurnaroundTime+0x130>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d906      	bls.n	8008cc4 <USB_SetTurnaroundTime+0x98>
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	4a29      	ldr	r2, [pc, #164]	; (8008d60 <USB_SetTurnaroundTime+0x134>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d802      	bhi.n	8008cc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008cbe:	230a      	movs	r3, #10
 8008cc0:	617b      	str	r3, [r7, #20]
 8008cc2:	e02b      	b.n	8008d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	4a26      	ldr	r2, [pc, #152]	; (8008d60 <USB_SetTurnaroundTime+0x134>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d906      	bls.n	8008cda <USB_SetTurnaroundTime+0xae>
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	4a25      	ldr	r2, [pc, #148]	; (8008d64 <USB_SetTurnaroundTime+0x138>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d202      	bcs.n	8008cda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008cd4:	2309      	movs	r3, #9
 8008cd6:	617b      	str	r3, [r7, #20]
 8008cd8:	e020      	b.n	8008d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	4a21      	ldr	r2, [pc, #132]	; (8008d64 <USB_SetTurnaroundTime+0x138>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d306      	bcc.n	8008cf0 <USB_SetTurnaroundTime+0xc4>
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	4a20      	ldr	r2, [pc, #128]	; (8008d68 <USB_SetTurnaroundTime+0x13c>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d802      	bhi.n	8008cf0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008cea:	2308      	movs	r3, #8
 8008cec:	617b      	str	r3, [r7, #20]
 8008cee:	e015      	b.n	8008d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	4a1d      	ldr	r2, [pc, #116]	; (8008d68 <USB_SetTurnaroundTime+0x13c>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d906      	bls.n	8008d06 <USB_SetTurnaroundTime+0xda>
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	4a1c      	ldr	r2, [pc, #112]	; (8008d6c <USB_SetTurnaroundTime+0x140>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d202      	bcs.n	8008d06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008d00:	2307      	movs	r3, #7
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	e00a      	b.n	8008d1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008d06:	2306      	movs	r3, #6
 8008d08:	617b      	str	r3, [r7, #20]
 8008d0a:	e007      	b.n	8008d1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008d0c:	79fb      	ldrb	r3, [r7, #7]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d102      	bne.n	8008d18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008d12:	2309      	movs	r3, #9
 8008d14:	617b      	str	r3, [r7, #20]
 8008d16:	e001      	b.n	8008d1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008d18:	2309      	movs	r3, #9
 8008d1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	68da      	ldr	r2, [r3, #12]
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	029b      	lsls	r3, r3, #10
 8008d30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008d34:	431a      	orrs	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	371c      	adds	r7, #28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	00d8acbf 	.word	0x00d8acbf
 8008d4c:	00e4e1c0 	.word	0x00e4e1c0
 8008d50:	00f42400 	.word	0x00f42400
 8008d54:	01067380 	.word	0x01067380
 8008d58:	011a499f 	.word	0x011a499f
 8008d5c:	01312cff 	.word	0x01312cff
 8008d60:	014ca43f 	.word	0x014ca43f
 8008d64:	016e3600 	.word	0x016e3600
 8008d68:	01a6ab1f 	.word	0x01a6ab1f
 8008d6c:	01e84800 	.word	0x01e84800

08008d70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f043 0201 	orr.w	r2, r3, #1
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b083      	sub	sp, #12
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f023 0201 	bic.w	r2, r3, #1
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d115      	bne.n	8008e02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008de2:	2001      	movs	r0, #1
 8008de4:	f7f9 fa4e 	bl	8002284 <HAL_Delay>
      ms++;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f001 fa45 	bl	800a27e <USB_GetMode>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d01e      	beq.n	8008e38 <USB_SetCurrentMode+0x84>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b31      	cmp	r3, #49	; 0x31
 8008dfe:	d9f0      	bls.n	8008de2 <USB_SetCurrentMode+0x2e>
 8008e00:	e01a      	b.n	8008e38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e02:	78fb      	ldrb	r3, [r7, #3]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d115      	bne.n	8008e34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e14:	2001      	movs	r0, #1
 8008e16:	f7f9 fa35 	bl	8002284 <HAL_Delay>
      ms++;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f001 fa2c 	bl	800a27e <USB_GetMode>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d005      	beq.n	8008e38 <USB_SetCurrentMode+0x84>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b31      	cmp	r3, #49	; 0x31
 8008e30:	d9f0      	bls.n	8008e14 <USB_SetCurrentMode+0x60>
 8008e32:	e001      	b.n	8008e38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e005      	b.n	8008e44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b32      	cmp	r3, #50	; 0x32
 8008e3c:	d101      	bne.n	8008e42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e000      	b.n	8008e44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b086      	sub	sp, #24
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e66:	2300      	movs	r3, #0
 8008e68:	613b      	str	r3, [r7, #16]
 8008e6a:	e009      	b.n	8008e80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	3340      	adds	r3, #64	; 0x40
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	2200      	movs	r2, #0
 8008e78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	613b      	str	r3, [r7, #16]
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	2b0e      	cmp	r3, #14
 8008e84:	d9f2      	bls.n	8008e6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d11c      	bne.n	8008ec6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e9a:	f043 0302 	orr.w	r3, r3, #2
 8008e9e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	639a      	str	r2, [r3, #56]	; 0x38
 8008ec4:	e00b      	b.n	8008ede <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef8:	461a      	mov	r2, r3
 8008efa:	680b      	ldr	r3, [r1, #0]
 8008efc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d10c      	bne.n	8008f1e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d104      	bne.n	8008f14 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f965 	bl	80091dc <USB_SetDevSpeed>
 8008f12:	e008      	b.n	8008f26 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f14:	2101      	movs	r1, #1
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f960 	bl	80091dc <USB_SetDevSpeed>
 8008f1c:	e003      	b.n	8008f26 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f1e:	2103      	movs	r1, #3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f95b 	bl	80091dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f26:	2110      	movs	r1, #16
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f8f3 	bl	8009114 <USB_FlushTxFifo>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f91f 	bl	800917c <USB_FlushRxFifo>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4e:	461a      	mov	r2, r3
 8008f50:	2300      	movs	r3, #0
 8008f52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f66:	461a      	mov	r2, r3
 8008f68:	2300      	movs	r3, #0
 8008f6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	613b      	str	r3, [r7, #16]
 8008f70:	e043      	b.n	8008ffa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f88:	d118      	bne.n	8008fbc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10a      	bne.n	8008fa6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	e013      	b.n	8008fce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	e008      	b.n	8008fce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc8:	461a      	mov	r2, r3
 8008fca:	2300      	movs	r3, #0
 8008fcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fda:	461a      	mov	r2, r3
 8008fdc:	2300      	movs	r3, #0
 8008fde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fec:	461a      	mov	r2, r3
 8008fee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ff2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	613b      	str	r3, [r7, #16]
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d3b7      	bcc.n	8008f72 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009002:	2300      	movs	r3, #0
 8009004:	613b      	str	r3, [r7, #16]
 8009006:	e043      	b.n	8009090 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800901a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800901e:	d118      	bne.n	8009052 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10a      	bne.n	800903c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	4413      	add	r3, r2
 800902e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009032:	461a      	mov	r2, r3
 8009034:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009038:	6013      	str	r3, [r2, #0]
 800903a:	e013      	b.n	8009064 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	015a      	lsls	r2, r3, #5
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	4413      	add	r3, r2
 8009044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009048:	461a      	mov	r2, r3
 800904a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	e008      	b.n	8009064 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	015a      	lsls	r2, r3, #5
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	4413      	add	r3, r2
 800905a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905e:	461a      	mov	r2, r3
 8009060:	2300      	movs	r3, #0
 8009062:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009070:	461a      	mov	r2, r3
 8009072:	2300      	movs	r3, #0
 8009074:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009082:	461a      	mov	r2, r3
 8009084:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009088:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	3301      	adds	r3, #1
 800908e:	613b      	str	r3, [r7, #16]
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	429a      	cmp	r2, r3
 8009096:	d3b7      	bcc.n	8009008 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80090b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d105      	bne.n	80090cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	f043 0210 	orr.w	r2, r3, #16
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	699a      	ldr	r2, [r3, #24]
 80090d0:	4b0f      	ldr	r3, [pc, #60]	; (8009110 <USB_DevInit+0x2c4>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80090d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d005      	beq.n	80090ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	f043 0208 	orr.w	r2, r3, #8
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80090ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d107      	bne.n	8009100 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090f8:	f043 0304 	orr.w	r3, r3, #4
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009100:	7dfb      	ldrb	r3, [r7, #23]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800910c:	b004      	add	sp, #16
 800910e:	4770      	bx	lr
 8009110:	803c3800 	.word	0x803c3800

08009114 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3301      	adds	r3, #1
 8009126:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	4a13      	ldr	r2, [pc, #76]	; (8009178 <USB_FlushTxFifo+0x64>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d901      	bls.n	8009134 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	e01b      	b.n	800916c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	daf2      	bge.n	8009122 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800913c:	2300      	movs	r3, #0
 800913e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	019b      	lsls	r3, r3, #6
 8009144:	f043 0220 	orr.w	r2, r3, #32
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3301      	adds	r3, #1
 8009150:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4a08      	ldr	r2, [pc, #32]	; (8009178 <USB_FlushTxFifo+0x64>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d901      	bls.n	800915e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e006      	b.n	800916c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	f003 0320 	and.w	r3, r3, #32
 8009166:	2b20      	cmp	r3, #32
 8009168:	d0f0      	beq.n	800914c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	00030d40 	.word	0x00030d40

0800917c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009184:	2300      	movs	r3, #0
 8009186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	3301      	adds	r3, #1
 800918c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	4a11      	ldr	r2, [pc, #68]	; (80091d8 <USB_FlushRxFifo+0x5c>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d901      	bls.n	800919a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009196:	2303      	movs	r3, #3
 8009198:	e018      	b.n	80091cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	daf2      	bge.n	8009188 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80091a2:	2300      	movs	r3, #0
 80091a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2210      	movs	r2, #16
 80091aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3301      	adds	r3, #1
 80091b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4a08      	ldr	r2, [pc, #32]	; (80091d8 <USB_FlushRxFifo+0x5c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d901      	bls.n	80091be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e006      	b.n	80091cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	f003 0310 	and.w	r3, r3, #16
 80091c6:	2b10      	cmp	r3, #16
 80091c8:	d0f0      	beq.n	80091ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	00030d40 	.word	0x00030d40

080091dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	460b      	mov	r3, r1
 80091e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	78fb      	ldrb	r3, [r7, #3]
 80091f6:	68f9      	ldr	r1, [r7, #12]
 80091f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091fc:	4313      	orrs	r3, r2
 80091fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800920e:	b480      	push	{r7}
 8009210:	b087      	sub	sp, #28
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f003 0306 	and.w	r3, r3, #6
 8009226:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d102      	bne.n	8009234 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800922e:	2300      	movs	r3, #0
 8009230:	75fb      	strb	r3, [r7, #23]
 8009232:	e00a      	b.n	800924a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b02      	cmp	r3, #2
 8009238:	d002      	beq.n	8009240 <USB_GetDevSpeed+0x32>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b06      	cmp	r3, #6
 800923e:	d102      	bne.n	8009246 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009240:	2302      	movs	r3, #2
 8009242:	75fb      	strb	r3, [r7, #23]
 8009244:	e001      	b.n	800924a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009246:	230f      	movs	r3, #15
 8009248:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800924a:	7dfb      	ldrb	r3, [r7, #23]
}
 800924c:	4618      	mov	r0, r3
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	785b      	ldrb	r3, [r3, #1]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d13a      	bne.n	80092ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927a:	69da      	ldr	r2, [r3, #28]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 030f 	and.w	r3, r3, #15
 8009284:	2101      	movs	r1, #1
 8009286:	fa01 f303 	lsl.w	r3, r1, r3
 800928a:	b29b      	uxth	r3, r3
 800928c:	68f9      	ldr	r1, [r7, #12]
 800928e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009292:	4313      	orrs	r3, r2
 8009294:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d155      	bne.n	8009358 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	791b      	ldrb	r3, [r3, #4]
 80092c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80092c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	059b      	lsls	r3, r3, #22
 80092ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80092d0:	4313      	orrs	r3, r2
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	0151      	lsls	r1, r2, #5
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	440a      	add	r2, r1
 80092da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	e036      	b.n	8009358 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f0:	69da      	ldr	r2, [r3, #28]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	f003 030f 	and.w	r3, r3, #15
 80092fa:	2101      	movs	r1, #1
 80092fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009300:	041b      	lsls	r3, r3, #16
 8009302:	68f9      	ldr	r1, [r7, #12]
 8009304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009308:	4313      	orrs	r3, r2
 800930a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d11a      	bne.n	8009358 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	015a      	lsls	r2, r3, #5
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	4413      	add	r3, r2
 800932a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	791b      	ldrb	r3, [r3, #4]
 800933c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800933e:	430b      	orrs	r3, r1
 8009340:	4313      	orrs	r3, r2
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	0151      	lsls	r1, r2, #5
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	440a      	add	r2, r1
 800934a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009356:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
	...

08009368 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	785b      	ldrb	r3, [r3, #1]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d161      	bne.n	8009448 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800939a:	d11f      	bne.n	80093dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	015a      	lsls	r2, r3, #5
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	0151      	lsls	r1, r2, #5
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	440a      	add	r2, r1
 80093b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	0151      	lsls	r1, r2, #5
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	440a      	add	r2, r1
 80093d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	f003 030f 	and.w	r3, r3, #15
 80093ec:	2101      	movs	r1, #1
 80093ee:	fa01 f303 	lsl.w	r3, r1, r3
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	43db      	mvns	r3, r3
 80093f6:	68f9      	ldr	r1, [r7, #12]
 80093f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093fc:	4013      	ands	r3, r2
 80093fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009406:	69da      	ldr	r2, [r3, #28]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	f003 030f 	and.w	r3, r3, #15
 8009410:	2101      	movs	r1, #1
 8009412:	fa01 f303 	lsl.w	r3, r1, r3
 8009416:	b29b      	uxth	r3, r3
 8009418:	43db      	mvns	r3, r3
 800941a:	68f9      	ldr	r1, [r7, #12]
 800941c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009420:	4013      	ands	r3, r2
 8009422:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	0159      	lsls	r1, r3, #5
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	440b      	add	r3, r1
 800943a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943e:	4619      	mov	r1, r3
 8009440:	4b35      	ldr	r3, [pc, #212]	; (8009518 <USB_DeactivateEndpoint+0x1b0>)
 8009442:	4013      	ands	r3, r2
 8009444:	600b      	str	r3, [r1, #0]
 8009446:	e060      	b.n	800950a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800945a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800945e:	d11f      	bne.n	80094a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	0151      	lsls	r1, r2, #5
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	440a      	add	r2, r1
 8009476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800947a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800947e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	0151      	lsls	r1, r2, #5
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	440a      	add	r2, r1
 8009496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800949a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800949e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	f003 030f 	and.w	r3, r3, #15
 80094b0:	2101      	movs	r1, #1
 80094b2:	fa01 f303 	lsl.w	r3, r1, r3
 80094b6:	041b      	lsls	r3, r3, #16
 80094b8:	43db      	mvns	r3, r3
 80094ba:	68f9      	ldr	r1, [r7, #12]
 80094bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094c0:	4013      	ands	r3, r2
 80094c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ca:	69da      	ldr	r2, [r3, #28]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	f003 030f 	and.w	r3, r3, #15
 80094d4:	2101      	movs	r1, #1
 80094d6:	fa01 f303 	lsl.w	r3, r1, r3
 80094da:	041b      	lsls	r3, r3, #16
 80094dc:	43db      	mvns	r3, r3
 80094de:	68f9      	ldr	r1, [r7, #12]
 80094e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094e4:	4013      	ands	r3, r2
 80094e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	0159      	lsls	r1, r3, #5
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	440b      	add	r3, r1
 80094fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009502:	4619      	mov	r1, r3
 8009504:	4b05      	ldr	r3, [pc, #20]	; (800951c <USB_DeactivateEndpoint+0x1b4>)
 8009506:	4013      	ands	r3, r2
 8009508:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	ec337800 	.word	0xec337800
 800951c:	eff37800 	.word	0xeff37800

08009520 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b08a      	sub	sp, #40	; 0x28
 8009524:	af02      	add	r7, sp, #8
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4613      	mov	r3, r2
 800952c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	785b      	ldrb	r3, [r3, #1]
 800953c:	2b01      	cmp	r3, #1
 800953e:	f040 815c 	bne.w	80097fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d132      	bne.n	80095b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	015a      	lsls	r2, r3, #5
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	4413      	add	r3, r2
 8009552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	69ba      	ldr	r2, [r7, #24]
 800955a:	0151      	lsls	r1, r2, #5
 800955c:	69fa      	ldr	r2, [r7, #28]
 800955e:	440a      	add	r2, r1
 8009560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009564:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009568:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800956c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	4413      	add	r3, r2
 8009576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	69ba      	ldr	r2, [r7, #24]
 800957e:	0151      	lsls	r1, r2, #5
 8009580:	69fa      	ldr	r2, [r7, #28]
 8009582:	440a      	add	r2, r1
 8009584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800958c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	4413      	add	r3, r2
 8009596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	69ba      	ldr	r2, [r7, #24]
 800959e:	0151      	lsls	r1, r2, #5
 80095a0:	69fa      	ldr	r2, [r7, #28]
 80095a2:	440a      	add	r2, r1
 80095a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a8:	0cdb      	lsrs	r3, r3, #19
 80095aa:	04db      	lsls	r3, r3, #19
 80095ac:	6113      	str	r3, [r2, #16]
 80095ae:	e074      	b.n	800969a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	69ba      	ldr	r2, [r7, #24]
 80095c0:	0151      	lsls	r1, r2, #5
 80095c2:	69fa      	ldr	r2, [r7, #28]
 80095c4:	440a      	add	r2, r1
 80095c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ca:	0cdb      	lsrs	r3, r3, #19
 80095cc:	04db      	lsls	r3, r3, #19
 80095ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	0151      	lsls	r1, r2, #5
 80095e2:	69fa      	ldr	r2, [r7, #28]
 80095e4:	440a      	add	r2, r1
 80095e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009600:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	6999      	ldr	r1, [r3, #24]
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	440b      	add	r3, r1
 800960c:	1e59      	subs	r1, r3, #1
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	fbb1 f3f3 	udiv	r3, r1, r3
 8009616:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009618:	4b9d      	ldr	r3, [pc, #628]	; (8009890 <USB_EPStartXfer+0x370>)
 800961a:	400b      	ands	r3, r1
 800961c:	69b9      	ldr	r1, [r7, #24]
 800961e:	0148      	lsls	r0, r1, #5
 8009620:	69f9      	ldr	r1, [r7, #28]
 8009622:	4401      	add	r1, r0
 8009624:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009628:	4313      	orrs	r3, r2
 800962a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009638:	691a      	ldr	r2, [r3, #16]
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009642:	69b9      	ldr	r1, [r7, #24]
 8009644:	0148      	lsls	r0, r1, #5
 8009646:	69f9      	ldr	r1, [r7, #28]
 8009648:	4401      	add	r1, r0
 800964a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800964e:	4313      	orrs	r3, r2
 8009650:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	791b      	ldrb	r3, [r3, #4]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d11f      	bne.n	800969a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	4413      	add	r3, r2
 8009662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	0151      	lsls	r1, r2, #5
 800966c:	69fa      	ldr	r2, [r7, #28]
 800966e:	440a      	add	r2, r1
 8009670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009674:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009678:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	015a      	lsls	r2, r3, #5
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	4413      	add	r3, r2
 8009682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	69ba      	ldr	r2, [r7, #24]
 800968a:	0151      	lsls	r1, r2, #5
 800968c:	69fa      	ldr	r2, [r7, #28]
 800968e:	440a      	add	r2, r1
 8009690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009694:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009698:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800969a:	79fb      	ldrb	r3, [r7, #7]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d14b      	bne.n	8009738 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	695b      	ldr	r3, [r3, #20]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d009      	beq.n	80096bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	015a      	lsls	r2, r3, #5
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	4413      	add	r3, r2
 80096b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b4:	461a      	mov	r2, r3
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	791b      	ldrb	r3, [r3, #4]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d128      	bne.n	8009716 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d110      	bne.n	80096f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	0151      	lsls	r1, r2, #5
 80096e6:	69fa      	ldr	r2, [r7, #28]
 80096e8:	440a      	add	r2, r1
 80096ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	e00f      	b.n	8009716 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	69ba      	ldr	r2, [r7, #24]
 8009706:	0151      	lsls	r1, r2, #5
 8009708:	69fa      	ldr	r2, [r7, #28]
 800970a:	440a      	add	r2, r1
 800970c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009714:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	0151      	lsls	r1, r2, #5
 8009728:	69fa      	ldr	r2, [r7, #28]
 800972a:	440a      	add	r2, r1
 800972c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009730:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	e133      	b.n	80099a0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	69ba      	ldr	r2, [r7, #24]
 8009748:	0151      	lsls	r1, r2, #5
 800974a:	69fa      	ldr	r2, [r7, #28]
 800974c:	440a      	add	r2, r1
 800974e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009752:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009756:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	791b      	ldrb	r3, [r3, #4]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d015      	beq.n	800978c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 811b 	beq.w	80099a0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f003 030f 	and.w	r3, r3, #15
 800977a:	2101      	movs	r1, #1
 800977c:	fa01 f303 	lsl.w	r3, r1, r3
 8009780:	69f9      	ldr	r1, [r7, #28]
 8009782:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009786:	4313      	orrs	r3, r2
 8009788:	634b      	str	r3, [r1, #52]	; 0x34
 800978a:	e109      	b.n	80099a0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009798:	2b00      	cmp	r3, #0
 800979a:	d110      	bne.n	80097be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69ba      	ldr	r2, [r7, #24]
 80097ac:	0151      	lsls	r1, r2, #5
 80097ae:	69fa      	ldr	r2, [r7, #28]
 80097b0:	440a      	add	r2, r1
 80097b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	e00f      	b.n	80097de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	69ba      	ldr	r2, [r7, #24]
 80097ce:	0151      	lsls	r1, r2, #5
 80097d0:	69fa      	ldr	r2, [r7, #28]
 80097d2:	440a      	add	r2, r1
 80097d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	6919      	ldr	r1, [r3, #16]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	781a      	ldrb	r2, [r3, #0]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	b298      	uxth	r0, r3
 80097ec:	79fb      	ldrb	r3, [r7, #7]
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	4603      	mov	r3, r0
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 fade 	bl	8009db4 <USB_WritePacket>
 80097f8:	e0d2      	b.n	80099a0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	69ba      	ldr	r2, [r7, #24]
 800980a:	0151      	lsls	r1, r2, #5
 800980c:	69fa      	ldr	r2, [r7, #28]
 800980e:	440a      	add	r2, r1
 8009810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009814:	0cdb      	lsrs	r3, r3, #19
 8009816:	04db      	lsls	r3, r3, #19
 8009818:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	4413      	add	r3, r2
 8009822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	69ba      	ldr	r2, [r7, #24]
 800982a:	0151      	lsls	r1, r2, #5
 800982c:	69fa      	ldr	r2, [r7, #28]
 800982e:	440a      	add	r2, r1
 8009830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009834:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009838:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800983c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d126      	bne.n	8009894 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	4413      	add	r3, r2
 800984e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009852:	691a      	ldr	r2, [r3, #16]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800985c:	69b9      	ldr	r1, [r7, #24]
 800985e:	0148      	lsls	r0, r1, #5
 8009860:	69f9      	ldr	r1, [r7, #28]
 8009862:	4401      	add	r1, r0
 8009864:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009868:	4313      	orrs	r3, r2
 800986a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	69ba      	ldr	r2, [r7, #24]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	69fa      	ldr	r2, [r7, #28]
 8009880:	440a      	add	r2, r1
 8009882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800988a:	6113      	str	r3, [r2, #16]
 800988c:	e03a      	b.n	8009904 <USB_EPStartXfer+0x3e4>
 800988e:	bf00      	nop
 8009890:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	699a      	ldr	r2, [r3, #24]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	4413      	add	r3, r2
 800989e:	1e5a      	subs	r2, r3, #1
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	8afa      	ldrh	r2, [r7, #22]
 80098b0:	fb03 f202 	mul.w	r2, r3, r2
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c4:	691a      	ldr	r2, [r3, #16]
 80098c6:	8afb      	ldrh	r3, [r7, #22]
 80098c8:	04d9      	lsls	r1, r3, #19
 80098ca:	4b38      	ldr	r3, [pc, #224]	; (80099ac <USB_EPStartXfer+0x48c>)
 80098cc:	400b      	ands	r3, r1
 80098ce:	69b9      	ldr	r1, [r7, #24]
 80098d0:	0148      	lsls	r0, r1, #5
 80098d2:	69f9      	ldr	r1, [r7, #28]
 80098d4:	4401      	add	r1, r0
 80098d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80098da:	4313      	orrs	r3, r2
 80098dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ea:	691a      	ldr	r2, [r3, #16]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098f4:	69b9      	ldr	r1, [r7, #24]
 80098f6:	0148      	lsls	r0, r1, #5
 80098f8:	69f9      	ldr	r1, [r7, #28]
 80098fa:	4401      	add	r1, r0
 80098fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009900:	4313      	orrs	r3, r2
 8009902:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d10d      	bne.n	8009926 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d009      	beq.n	8009926 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	6919      	ldr	r1, [r3, #16]
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	4413      	add	r3, r2
 800991e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009922:	460a      	mov	r2, r1
 8009924:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	791b      	ldrb	r3, [r3, #4]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d128      	bne.n	8009980 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800993a:	2b00      	cmp	r3, #0
 800993c:	d110      	bne.n	8009960 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	0151      	lsls	r1, r2, #5
 8009950:	69fa      	ldr	r2, [r7, #28]
 8009952:	440a      	add	r2, r1
 8009954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009958:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	e00f      	b.n	8009980 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	015a      	lsls	r2, r3, #5
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	4413      	add	r3, r2
 8009968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	0151      	lsls	r1, r2, #5
 8009972:	69fa      	ldr	r2, [r7, #28]
 8009974:	440a      	add	r2, r1
 8009976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800997a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800997e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69ba      	ldr	r2, [r7, #24]
 8009990:	0151      	lsls	r1, r2, #5
 8009992:	69fa      	ldr	r2, [r7, #28]
 8009994:	440a      	add	r2, r1
 8009996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800999a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800999e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3720      	adds	r7, #32
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	1ff80000 	.word	0x1ff80000

080099b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	4613      	mov	r3, r2
 80099bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	785b      	ldrb	r3, [r3, #1]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	f040 80ce 	bne.w	8009b6e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d132      	bne.n	8009a40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	0151      	lsls	r1, r2, #5
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	440a      	add	r2, r1
 80099f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	0151      	lsls	r1, r2, #5
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	440a      	add	r2, r1
 8009a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	0151      	lsls	r1, r2, #5
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	440a      	add	r2, r1
 8009a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a38:	0cdb      	lsrs	r3, r3, #19
 8009a3a:	04db      	lsls	r3, r3, #19
 8009a3c:	6113      	str	r3, [r2, #16]
 8009a3e:	e04e      	b.n	8009ade <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a5a:	0cdb      	lsrs	r3, r3, #19
 8009a5c:	04db      	lsls	r3, r3, #19
 8009a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	699a      	ldr	r2, [r3, #24]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d903      	bls.n	8009a98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	68da      	ldr	r2, [r3, #12]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	015a      	lsls	r2, r3, #5
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	0151      	lsls	r1, r2, #5
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	440a      	add	r2, r1
 8009aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ab6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	015a      	lsls	r2, r3, #5
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac4:	691a      	ldr	r2, [r3, #16]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ace:	6939      	ldr	r1, [r7, #16]
 8009ad0:	0148      	lsls	r0, r1, #5
 8009ad2:	6979      	ldr	r1, [r7, #20]
 8009ad4:	4401      	add	r1, r0
 8009ad6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ada:	4313      	orrs	r3, r2
 8009adc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ade:	79fb      	ldrb	r3, [r7, #7]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d11e      	bne.n	8009b22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d009      	beq.n	8009b00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	015a      	lsls	r2, r3, #5
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af8:	461a      	mov	r2, r3
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	695b      	ldr	r3, [r3, #20]
 8009afe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	015a      	lsls	r2, r3, #5
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	0151      	lsls	r1, r2, #5
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	440a      	add	r2, r1
 8009b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b1e:	6013      	str	r3, [r2, #0]
 8009b20:	e097      	b.n	8009c52 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	0151      	lsls	r1, r2, #5
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	440a      	add	r2, r1
 8009b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 8083 	beq.w	8009c52 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	f003 030f 	and.w	r3, r3, #15
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b62:	6979      	ldr	r1, [r7, #20]
 8009b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	634b      	str	r3, [r1, #52]	; 0x34
 8009b6c:	e071      	b.n	8009c52 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	0151      	lsls	r1, r2, #5
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	440a      	add	r2, r1
 8009b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b88:	0cdb      	lsrs	r3, r3, #19
 8009b8a:	04db      	lsls	r3, r3, #19
 8009b8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	0151      	lsls	r1, r2, #5
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	440a      	add	r2, r1
 8009ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ba8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009bb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d003      	beq.n	8009bc2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	68da      	ldr	r2, [r3, #12]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	68da      	ldr	r2, [r3, #12]
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	0151      	lsls	r1, r2, #5
 8009bdc:	697a      	ldr	r2, [r7, #20]
 8009bde:	440a      	add	r2, r1
 8009be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009be4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009be8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf6:	691a      	ldr	r2, [r3, #16]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c00:	6939      	ldr	r1, [r7, #16]
 8009c02:	0148      	lsls	r0, r1, #5
 8009c04:	6979      	ldr	r1, [r7, #20]
 8009c06:	4401      	add	r1, r0
 8009c08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009c10:	79fb      	ldrb	r3, [r7, #7]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d10d      	bne.n	8009c32 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d009      	beq.n	8009c32 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	6919      	ldr	r1, [r3, #16]
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2e:	460a      	mov	r2, r1
 8009c30:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	015a      	lsls	r2, r3, #5
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	0151      	lsls	r1, r2, #5
 8009c44:	697a      	ldr	r2, [r7, #20]
 8009c46:	440a      	add	r2, r1
 8009c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	371c      	adds	r7, #28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	785b      	ldrb	r3, [r3, #1]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d14a      	bne.n	8009d14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c96:	f040 8086 	bne.w	8009da6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	015a      	lsls	r2, r3, #5
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	7812      	ldrb	r2, [r2, #0]
 8009cae:	0151      	lsls	r1, r2, #5
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	440a      	add	r2, r1
 8009cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009cbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	7812      	ldrb	r2, [r2, #0]
 8009cd2:	0151      	lsls	r1, r2, #5
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	440a      	add	r2, r1
 8009cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ce0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f242 7210 	movw	r2, #10000	; 0x2710
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d902      	bls.n	8009cf8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8009cf6:	e056      	b.n	8009da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d10:	d0e7      	beq.n	8009ce2 <USB_EPStopXfer+0x82>
 8009d12:	e048      	b.n	8009da6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d2c:	d13b      	bne.n	8009da6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	7812      	ldrb	r2, [r2, #0]
 8009d42:	0151      	lsls	r1, r2, #5
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	440a      	add	r2, r1
 8009d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	015a      	lsls	r2, r3, #5
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	7812      	ldrb	r2, [r2, #0]
 8009d66:	0151      	lsls	r1, r2, #5
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	440a      	add	r2, r1
 8009d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d902      	bls.n	8009d8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	75fb      	strb	r3, [r7, #23]
          break;
 8009d8a:	e00c      	b.n	8009da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009da4:	d0e7      	beq.n	8009d76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	371c      	adds	r7, #28
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b089      	sub	sp, #36	; 0x24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	71fb      	strb	r3, [r7, #7]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009dd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d123      	bne.n	8009e22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009dda:	88bb      	ldrh	r3, [r7, #4]
 8009ddc:	3303      	adds	r3, #3
 8009dde:	089b      	lsrs	r3, r3, #2
 8009de0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009de2:	2300      	movs	r3, #0
 8009de4:	61bb      	str	r3, [r7, #24]
 8009de6:	e018      	b.n	8009e1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009de8:	79fb      	ldrb	r3, [r7, #7]
 8009dea:	031a      	lsls	r2, r3, #12
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009df4:	461a      	mov	r2, r3
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	3301      	adds	r3, #1
 8009e06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	3301      	adds	r3, #1
 8009e12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	3301      	adds	r3, #1
 8009e18:	61bb      	str	r3, [r7, #24]
 8009e1a:	69ba      	ldr	r2, [r7, #24]
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d3e2      	bcc.n	8009de8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3724      	adds	r7, #36	; 0x24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b08b      	sub	sp, #44	; 0x2c
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009e46:	88fb      	ldrh	r3, [r7, #6]
 8009e48:	089b      	lsrs	r3, r3, #2
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009e4e:	88fb      	ldrh	r3, [r7, #6]
 8009e50:	f003 0303 	and.w	r3, r3, #3
 8009e54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009e56:	2300      	movs	r3, #0
 8009e58:	623b      	str	r3, [r7, #32]
 8009e5a:	e014      	b.n	8009e86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	601a      	str	r2, [r3, #0]
    pDest++;
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	3301      	adds	r3, #1
 8009e72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	3301      	adds	r3, #1
 8009e78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	3301      	adds	r3, #1
 8009e84:	623b      	str	r3, [r7, #32]
 8009e86:	6a3a      	ldr	r2, [r7, #32]
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d3e6      	bcc.n	8009e5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009e8e:	8bfb      	ldrh	r3, [r7, #30]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01e      	beq.n	8009ed2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	f107 0310 	add.w	r3, r7, #16
 8009ea4:	6812      	ldr	r2, [r2, #0]
 8009ea6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	701a      	strb	r2, [r3, #0]
      i++;
 8009eba:	6a3b      	ldr	r3, [r7, #32]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	623b      	str	r3, [r7, #32]
      pDest++;
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009ec6:	8bfb      	ldrh	r3, [r7, #30]
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009ecc:	8bfb      	ldrh	r3, [r7, #30]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1ea      	bne.n	8009ea8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	372c      	adds	r7, #44	; 0x2c
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	785b      	ldrb	r3, [r3, #1]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d12c      	bne.n	8009f56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	015a      	lsls	r2, r3, #5
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4413      	add	r3, r2
 8009f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	db12      	blt.n	8009f34 <USB_EPSetStall+0x54>
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00f      	beq.n	8009f34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	0151      	lsls	r1, r2, #5
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	440a      	add	r2, r1
 8009f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	0151      	lsls	r1, r2, #5
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	440a      	add	r2, r1
 8009f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	e02b      	b.n	8009fae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	015a      	lsls	r2, r3, #5
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	db12      	blt.n	8009f8e <USB_EPSetStall+0xae>
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00f      	beq.n	8009f8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	015a      	lsls	r2, r3, #5
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	4413      	add	r3, r2
 8009f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	0151      	lsls	r1, r2, #5
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	440a      	add	r2, r1
 8009f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	0151      	lsls	r1, r2, #5
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	440a      	add	r2, r1
 8009fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	785b      	ldrb	r3, [r3, #1]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d128      	bne.n	800a02a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	015a      	lsls	r2, r3, #5
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	4413      	add	r3, r2
 8009fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	0151      	lsls	r1, r2, #5
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	440a      	add	r2, r1
 8009fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ff2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ff6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	791b      	ldrb	r3, [r3, #4]
 8009ffc:	2b03      	cmp	r3, #3
 8009ffe:	d003      	beq.n	800a008 <USB_EPClearStall+0x4c>
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	791b      	ldrb	r3, [r3, #4]
 800a004:	2b02      	cmp	r3, #2
 800a006:	d138      	bne.n	800a07a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	0151      	lsls	r1, r2, #5
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	440a      	add	r2, r1
 800a01e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a026:	6013      	str	r3, [r2, #0]
 800a028:	e027      	b.n	800a07a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	4413      	add	r3, r2
 800a032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	0151      	lsls	r1, r2, #5
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	440a      	add	r2, r1
 800a040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a044:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a048:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	791b      	ldrb	r3, [r3, #4]
 800a04e:	2b03      	cmp	r3, #3
 800a050:	d003      	beq.n	800a05a <USB_EPClearStall+0x9e>
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	791b      	ldrb	r3, [r3, #4]
 800a056:	2b02      	cmp	r3, #2
 800a058:	d10f      	bne.n	800a07a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	015a      	lsls	r2, r3, #5
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	4413      	add	r3, r2
 800a062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	0151      	lsls	r1, r2, #5
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	440a      	add	r2, r1
 800a070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a078:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	460b      	mov	r3, r1
 800a092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a0aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	78fb      	ldrb	r3, [r7, #3]
 800a0b6:	011b      	lsls	r3, r3, #4
 800a0b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a0bc:	68f9      	ldr	r1, [r7, #12]
 800a0be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0ee:	f023 0303 	bic.w	r3, r3, #3
 800a0f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a102:	f023 0302 	bic.w	r3, r3, #2
 800a106:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a116:	b480      	push	{r7}
 800a118:	b085      	sub	sp, #20
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a130:	f023 0303 	bic.w	r3, r3, #3
 800a134:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a144:	f043 0302 	orr.w	r3, r3, #2
 800a148:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3714      	adds	r7, #20
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	695b      	ldr	r3, [r3, #20]
 800a164:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	4013      	ands	r3, r2
 800a16e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a170:	68fb      	ldr	r3, [r7, #12]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a17e:	b480      	push	{r7}
 800a180:	b085      	sub	sp, #20
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a19a:	69db      	ldr	r3, [r3, #28]
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	4013      	ands	r3, r2
 800a1a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	0c1b      	lsrs	r3, r3, #16
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr

0800a1b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1b2:	b480      	push	{r7}
 800a1b4:	b085      	sub	sp, #20
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ce:	69db      	ldr	r3, [r3, #28]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	b29b      	uxth	r3, r3
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b085      	sub	sp, #20
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a1f6:	78fb      	ldrb	r3, [r7, #3]
 800a1f8:	015a      	lsls	r2, r3, #5
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	4013      	ands	r3, r2
 800a212:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a214:	68bb      	ldr	r3, [r7, #8]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3714      	adds	r7, #20
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a222:	b480      	push	{r7}
 800a224:	b087      	sub	sp, #28
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	460b      	mov	r3, r1
 800a22c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a244:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a246:	78fb      	ldrb	r3, [r7, #3]
 800a248:	f003 030f 	and.w	r3, r3, #15
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	fa22 f303 	lsr.w	r3, r2, r3
 800a252:	01db      	lsls	r3, r3, #7
 800a254:	b2db      	uxtb	r3, r3
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	4313      	orrs	r3, r2
 800a25a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a25c:	78fb      	ldrb	r3, [r7, #3]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	4013      	ands	r3, r2
 800a26e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a270:	68bb      	ldr	r3, [r7, #8]
}
 800a272:	4618      	mov	r0, r3
 800a274:	371c      	adds	r7, #28
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a27e:	b480      	push	{r7}
 800a280:	b083      	sub	sp, #12
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	f003 0301 	and.w	r3, r3, #1
}
 800a28e:	4618      	mov	r0, r3
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b085      	sub	sp, #20
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a2b8:	f023 0307 	bic.w	r3, r3, #7
 800a2bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	607a      	str	r2, [r7, #4]
 800a2ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	333c      	adds	r3, #60	; 0x3c
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	4a26      	ldr	r2, [pc, #152]	; (800a398 <USB_EP0_OutStart+0xb8>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d90a      	bls.n	800a31a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a314:	d101      	bne.n	800a31a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	e037      	b.n	800a38a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a320:	461a      	mov	r2, r3
 800a322:	2300      	movs	r3, #0
 800a324:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a338:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a348:	f043 0318 	orr.w	r3, r3, #24
 800a34c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a35c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a360:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a362:	7afb      	ldrb	r3, [r7, #11]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d10f      	bne.n	800a388 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36e:	461a      	mov	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a382:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	371c      	adds	r7, #28
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	4f54300a 	.word	0x4f54300a

0800a39c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	4a13      	ldr	r2, [pc, #76]	; (800a400 <USB_CoreReset+0x64>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d901      	bls.n	800a3ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	e01b      	b.n	800a3f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	daf2      	bge.n	800a3a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	f043 0201 	orr.w	r2, r3, #1
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	4a09      	ldr	r2, [pc, #36]	; (800a400 <USB_CoreReset+0x64>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d901      	bls.n	800a3e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e006      	b.n	800a3f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d0f0      	beq.n	800a3d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	00030d40 	.word	0x00030d40

0800a404 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	460b      	mov	r3, r1
 800a40e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a410:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a414:	f002 fc8a 	bl	800cd2c <USBD_static_malloc>
 800a418:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d109      	bne.n	800a434 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	32b0      	adds	r2, #176	; 0xb0
 800a42a:	2100      	movs	r1, #0
 800a42c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a430:	2302      	movs	r3, #2
 800a432:	e0d4      	b.n	800a5de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a434:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a438:	2100      	movs	r1, #0
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f002 fce4 	bl	800ce08 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	32b0      	adds	r2, #176	; 0xb0
 800a44a:	68f9      	ldr	r1, [r7, #12]
 800a44c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	32b0      	adds	r2, #176	; 0xb0
 800a45a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	7c1b      	ldrb	r3, [r3, #16]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d138      	bne.n	800a4de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a46c:	4b5e      	ldr	r3, [pc, #376]	; (800a5e8 <USBD_CDC_Init+0x1e4>)
 800a46e:	7819      	ldrb	r1, [r3, #0]
 800a470:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a474:	2202      	movs	r2, #2
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f002 fb35 	bl	800cae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a47c:	4b5a      	ldr	r3, [pc, #360]	; (800a5e8 <USBD_CDC_Init+0x1e4>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	f003 020f 	and.w	r2, r3, #15
 800a484:	6879      	ldr	r1, [r7, #4]
 800a486:	4613      	mov	r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	4413      	add	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	440b      	add	r3, r1
 800a490:	3324      	adds	r3, #36	; 0x24
 800a492:	2201      	movs	r2, #1
 800a494:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a496:	4b55      	ldr	r3, [pc, #340]	; (800a5ec <USBD_CDC_Init+0x1e8>)
 800a498:	7819      	ldrb	r1, [r3, #0]
 800a49a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a49e:	2202      	movs	r2, #2
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f002 fb20 	bl	800cae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a4a6:	4b51      	ldr	r3, [pc, #324]	; (800a5ec <USBD_CDC_Init+0x1e8>)
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	f003 020f 	and.w	r2, r3, #15
 800a4ae:	6879      	ldr	r1, [r7, #4]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	440b      	add	r3, r1
 800a4ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a4be:	2201      	movs	r2, #1
 800a4c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a4c2:	4b4b      	ldr	r3, [pc, #300]	; (800a5f0 <USBD_CDC_Init+0x1ec>)
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	f003 020f 	and.w	r2, r3, #15
 800a4ca:	6879      	ldr	r1, [r7, #4]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	440b      	add	r3, r1
 800a4d6:	3326      	adds	r3, #38	; 0x26
 800a4d8:	2210      	movs	r2, #16
 800a4da:	801a      	strh	r2, [r3, #0]
 800a4dc:	e035      	b.n	800a54a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a4de:	4b42      	ldr	r3, [pc, #264]	; (800a5e8 <USBD_CDC_Init+0x1e4>)
 800a4e0:	7819      	ldrb	r1, [r3, #0]
 800a4e2:	2340      	movs	r3, #64	; 0x40
 800a4e4:	2202      	movs	r2, #2
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f002 fafd 	bl	800cae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a4ec:	4b3e      	ldr	r3, [pc, #248]	; (800a5e8 <USBD_CDC_Init+0x1e4>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	f003 020f 	and.w	r2, r3, #15
 800a4f4:	6879      	ldr	r1, [r7, #4]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	440b      	add	r3, r1
 800a500:	3324      	adds	r3, #36	; 0x24
 800a502:	2201      	movs	r2, #1
 800a504:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a506:	4b39      	ldr	r3, [pc, #228]	; (800a5ec <USBD_CDC_Init+0x1e8>)
 800a508:	7819      	ldrb	r1, [r3, #0]
 800a50a:	2340      	movs	r3, #64	; 0x40
 800a50c:	2202      	movs	r2, #2
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f002 fae9 	bl	800cae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a514:	4b35      	ldr	r3, [pc, #212]	; (800a5ec <USBD_CDC_Init+0x1e8>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	f003 020f 	and.w	r2, r3, #15
 800a51c:	6879      	ldr	r1, [r7, #4]
 800a51e:	4613      	mov	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	4413      	add	r3, r2
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	440b      	add	r3, r1
 800a528:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a52c:	2201      	movs	r2, #1
 800a52e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a530:	4b2f      	ldr	r3, [pc, #188]	; (800a5f0 <USBD_CDC_Init+0x1ec>)
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	f003 020f 	and.w	r2, r3, #15
 800a538:	6879      	ldr	r1, [r7, #4]
 800a53a:	4613      	mov	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	440b      	add	r3, r1
 800a544:	3326      	adds	r3, #38	; 0x26
 800a546:	2210      	movs	r2, #16
 800a548:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a54a:	4b29      	ldr	r3, [pc, #164]	; (800a5f0 <USBD_CDC_Init+0x1ec>)
 800a54c:	7819      	ldrb	r1, [r3, #0]
 800a54e:	2308      	movs	r3, #8
 800a550:	2203      	movs	r2, #3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f002 fac7 	bl	800cae6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a558:	4b25      	ldr	r3, [pc, #148]	; (800a5f0 <USBD_CDC_Init+0x1ec>)
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	f003 020f 	and.w	r2, r3, #15
 800a560:	6879      	ldr	r1, [r7, #4]
 800a562:	4613      	mov	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	440b      	add	r3, r1
 800a56c:	3324      	adds	r3, #36	; 0x24
 800a56e:	2201      	movs	r2, #1
 800a570:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	33b0      	adds	r3, #176	; 0xb0
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4413      	add	r3, r2
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d101      	bne.n	800a5ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	e018      	b.n	800a5de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	7c1b      	ldrb	r3, [r3, #16]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10a      	bne.n	800a5ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5b4:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <USBD_CDC_Init+0x1e8>)
 800a5b6:	7819      	ldrb	r1, [r3, #0]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f002 fb7e 	bl	800ccc4 <USBD_LL_PrepareReceive>
 800a5c8:	e008      	b.n	800a5dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5ca:	4b08      	ldr	r3, [pc, #32]	; (800a5ec <USBD_CDC_Init+0x1e8>)
 800a5cc:	7819      	ldrb	r1, [r3, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5d4:	2340      	movs	r3, #64	; 0x40
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f002 fb74 	bl	800ccc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	200000c3 	.word	0x200000c3
 800a5ec:	200000c4 	.word	0x200000c4
 800a5f0:	200000c5 	.word	0x200000c5

0800a5f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a600:	4b3a      	ldr	r3, [pc, #232]	; (800a6ec <USBD_CDC_DeInit+0xf8>)
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	4619      	mov	r1, r3
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f002 fa93 	bl	800cb32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a60c:	4b37      	ldr	r3, [pc, #220]	; (800a6ec <USBD_CDC_DeInit+0xf8>)
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	f003 020f 	and.w	r2, r3, #15
 800a614:	6879      	ldr	r1, [r7, #4]
 800a616:	4613      	mov	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	440b      	add	r3, r1
 800a620:	3324      	adds	r3, #36	; 0x24
 800a622:	2200      	movs	r2, #0
 800a624:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a626:	4b32      	ldr	r3, [pc, #200]	; (800a6f0 <USBD_CDC_DeInit+0xfc>)
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	4619      	mov	r1, r3
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f002 fa80 	bl	800cb32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a632:	4b2f      	ldr	r3, [pc, #188]	; (800a6f0 <USBD_CDC_DeInit+0xfc>)
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	f003 020f 	and.w	r2, r3, #15
 800a63a:	6879      	ldr	r1, [r7, #4]
 800a63c:	4613      	mov	r3, r2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	440b      	add	r3, r1
 800a646:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a64a:	2200      	movs	r2, #0
 800a64c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a64e:	4b29      	ldr	r3, [pc, #164]	; (800a6f4 <USBD_CDC_DeInit+0x100>)
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f002 fa6c 	bl	800cb32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a65a:	4b26      	ldr	r3, [pc, #152]	; (800a6f4 <USBD_CDC_DeInit+0x100>)
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	f003 020f 	and.w	r2, r3, #15
 800a662:	6879      	ldr	r1, [r7, #4]
 800a664:	4613      	mov	r3, r2
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4413      	add	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	440b      	add	r3, r1
 800a66e:	3324      	adds	r3, #36	; 0x24
 800a670:	2200      	movs	r2, #0
 800a672:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a674:	4b1f      	ldr	r3, [pc, #124]	; (800a6f4 <USBD_CDC_DeInit+0x100>)
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	f003 020f 	and.w	r2, r3, #15
 800a67c:	6879      	ldr	r1, [r7, #4]
 800a67e:	4613      	mov	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	440b      	add	r3, r1
 800a688:	3326      	adds	r3, #38	; 0x26
 800a68a:	2200      	movs	r2, #0
 800a68c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	32b0      	adds	r2, #176	; 0xb0
 800a698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d01f      	beq.n	800a6e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	33b0      	adds	r3, #176	; 0xb0
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	32b0      	adds	r2, #176	; 0xb0
 800a6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f002 fb40 	bl	800cd48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	32b0      	adds	r2, #176	; 0xb0
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	200000c3 	.word	0x200000c3
 800a6f0:	200000c4 	.word	0x200000c4
 800a6f4:	200000c5 	.word	0x200000c5

0800a6f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	32b0      	adds	r2, #176	; 0xb0
 800a70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a710:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a712:	2300      	movs	r3, #0
 800a714:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a716:	2300      	movs	r3, #0
 800a718:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d101      	bne.n	800a728 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a724:	2303      	movs	r3, #3
 800a726:	e0bf      	b.n	800a8a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a730:	2b00      	cmp	r3, #0
 800a732:	d050      	beq.n	800a7d6 <USBD_CDC_Setup+0xde>
 800a734:	2b20      	cmp	r3, #32
 800a736:	f040 80af 	bne.w	800a898 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	88db      	ldrh	r3, [r3, #6]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d03a      	beq.n	800a7b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	b25b      	sxtb	r3, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	da1b      	bge.n	800a784 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	33b0      	adds	r3, #176	; 0xb0
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a762:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	88d2      	ldrh	r2, [r2, #6]
 800a768:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	88db      	ldrh	r3, [r3, #6]
 800a76e:	2b07      	cmp	r3, #7
 800a770:	bf28      	it	cs
 800a772:	2307      	movcs	r3, #7
 800a774:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	89fa      	ldrh	r2, [r7, #14]
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f001 fd89 	bl	800c294 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a782:	e090      	b.n	800a8a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	785a      	ldrb	r2, [r3, #1]
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	88db      	ldrh	r3, [r3, #6]
 800a792:	2b3f      	cmp	r3, #63	; 0x3f
 800a794:	d803      	bhi.n	800a79e <USBD_CDC_Setup+0xa6>
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	88db      	ldrh	r3, [r3, #6]
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	e000      	b.n	800a7a0 <USBD_CDC_Setup+0xa8>
 800a79e:	2240      	movs	r2, #64	; 0x40
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a7a6:	6939      	ldr	r1, [r7, #16]
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f001 fd9b 	bl	800c2ec <USBD_CtlPrepareRx>
      break;
 800a7b6:	e076      	b.n	800a8a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	33b0      	adds	r3, #176	; 0xb0
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4413      	add	r3, r2
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	7850      	ldrb	r0, [r2, #1]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	6839      	ldr	r1, [r7, #0]
 800a7d2:	4798      	blx	r3
      break;
 800a7d4:	e067      	b.n	800a8a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	785b      	ldrb	r3, [r3, #1]
 800a7da:	2b0b      	cmp	r3, #11
 800a7dc:	d851      	bhi.n	800a882 <USBD_CDC_Setup+0x18a>
 800a7de:	a201      	add	r2, pc, #4	; (adr r2, 800a7e4 <USBD_CDC_Setup+0xec>)
 800a7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e4:	0800a815 	.word	0x0800a815
 800a7e8:	0800a891 	.word	0x0800a891
 800a7ec:	0800a883 	.word	0x0800a883
 800a7f0:	0800a883 	.word	0x0800a883
 800a7f4:	0800a883 	.word	0x0800a883
 800a7f8:	0800a883 	.word	0x0800a883
 800a7fc:	0800a883 	.word	0x0800a883
 800a800:	0800a883 	.word	0x0800a883
 800a804:	0800a883 	.word	0x0800a883
 800a808:	0800a883 	.word	0x0800a883
 800a80c:	0800a83f 	.word	0x0800a83f
 800a810:	0800a869 	.word	0x0800a869
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b03      	cmp	r3, #3
 800a81e:	d107      	bne.n	800a830 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a820:	f107 030a 	add.w	r3, r7, #10
 800a824:	2202      	movs	r2, #2
 800a826:	4619      	mov	r1, r3
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f001 fd33 	bl	800c294 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a82e:	e032      	b.n	800a896 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a830:	6839      	ldr	r1, [r7, #0]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f001 fcbd 	bl	800c1b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a838:	2303      	movs	r3, #3
 800a83a:	75fb      	strb	r3, [r7, #23]
          break;
 800a83c:	e02b      	b.n	800a896 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b03      	cmp	r3, #3
 800a848:	d107      	bne.n	800a85a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a84a:	f107 030d 	add.w	r3, r7, #13
 800a84e:	2201      	movs	r2, #1
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f001 fd1e 	bl	800c294 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a858:	e01d      	b.n	800a896 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f001 fca8 	bl	800c1b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a862:	2303      	movs	r3, #3
 800a864:	75fb      	strb	r3, [r7, #23]
          break;
 800a866:	e016      	b.n	800a896 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	2b03      	cmp	r3, #3
 800a872:	d00f      	beq.n	800a894 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f001 fc9b 	bl	800c1b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a87c:	2303      	movs	r3, #3
 800a87e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a880:	e008      	b.n	800a894 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f001 fc94 	bl	800c1b2 <USBD_CtlError>
          ret = USBD_FAIL;
 800a88a:	2303      	movs	r3, #3
 800a88c:	75fb      	strb	r3, [r7, #23]
          break;
 800a88e:	e002      	b.n	800a896 <USBD_CDC_Setup+0x19e>
          break;
 800a890:	bf00      	nop
 800a892:	e008      	b.n	800a8a6 <USBD_CDC_Setup+0x1ae>
          break;
 800a894:	bf00      	nop
      }
      break;
 800a896:	e006      	b.n	800a8a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f001 fc89 	bl	800c1b2 <USBD_CtlError>
      ret = USBD_FAIL;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a8a4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a8a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	32b0      	adds	r2, #176	; 0xb0
 800a8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e065      	b.n	800a9a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	32b0      	adds	r2, #176	; 0xb0
 800a8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a8ea:	78fb      	ldrb	r3, [r7, #3]
 800a8ec:	f003 020f 	and.w	r2, r3, #15
 800a8f0:	6879      	ldr	r1, [r7, #4]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	440b      	add	r3, r1
 800a8fc:	3318      	adds	r3, #24
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d02f      	beq.n	800a964 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a904:	78fb      	ldrb	r3, [r7, #3]
 800a906:	f003 020f 	and.w	r2, r3, #15
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	4613      	mov	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	440b      	add	r3, r1
 800a916:	3318      	adds	r3, #24
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	78fb      	ldrb	r3, [r7, #3]
 800a91c:	f003 010f 	and.w	r1, r3, #15
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	460b      	mov	r3, r1
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	440b      	add	r3, r1
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4403      	add	r3, r0
 800a92c:	3348      	adds	r3, #72	; 0x48
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	fbb2 f1f3 	udiv	r1, r2, r3
 800a934:	fb01 f303 	mul.w	r3, r1, r3
 800a938:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d112      	bne.n	800a964 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a93e:	78fb      	ldrb	r3, [r7, #3]
 800a940:	f003 020f 	and.w	r2, r3, #15
 800a944:	6879      	ldr	r1, [r7, #4]
 800a946:	4613      	mov	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4413      	add	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	440b      	add	r3, r1
 800a950:	3318      	adds	r3, #24
 800a952:	2200      	movs	r2, #0
 800a954:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a956:	78f9      	ldrb	r1, [r7, #3]
 800a958:	2300      	movs	r3, #0
 800a95a:	2200      	movs	r2, #0
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f002 f990 	bl	800cc82 <USBD_LL_Transmit>
 800a962:	e01f      	b.n	800a9a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2200      	movs	r2, #0
 800a968:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	33b0      	adds	r3, #176	; 0xb0
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d010      	beq.n	800a9a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	33b0      	adds	r3, #176	; 0xb0
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a9a0:	78fa      	ldrb	r2, [r7, #3]
 800a9a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	32b0      	adds	r2, #176	; 0xb0
 800a9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	32b0      	adds	r2, #176	; 0xb0
 800a9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d101      	bne.n	800a9e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	e01a      	b.n	800aa16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a9e0:	78fb      	ldrb	r3, [r7, #3]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f002 f98e 	bl	800cd06 <USBD_LL_GetRxDataSize>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	33b0      	adds	r3, #176	; 0xb0
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aa10:	4611      	mov	r1, r2
 800aa12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	32b0      	adds	r2, #176	; 0xb0
 800aa30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e025      	b.n	800aa8c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	33b0      	adds	r3, #176	; 0xb0
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	4413      	add	r3, r2
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d01a      	beq.n	800aa8a <USBD_CDC_EP0_RxReady+0x6c>
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aa5a:	2bff      	cmp	r3, #255	; 0xff
 800aa5c:	d015      	beq.n	800aa8a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	33b0      	adds	r3, #176	; 0xb0
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800aa76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aa7e:	b292      	uxth	r2, r2
 800aa80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	22ff      	movs	r2, #255	; 0xff
 800aa86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aa9c:	2182      	movs	r1, #130	; 0x82
 800aa9e:	4818      	ldr	r0, [pc, #96]	; (800ab00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aaa0:	f000 fd4f 	bl	800b542 <USBD_GetEpDesc>
 800aaa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	4815      	ldr	r0, [pc, #84]	; (800ab00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aaaa:	f000 fd4a 	bl	800b542 <USBD_GetEpDesc>
 800aaae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aab0:	2181      	movs	r1, #129	; 0x81
 800aab2:	4813      	ldr	r0, [pc, #76]	; (800ab00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aab4:	f000 fd45 	bl	800b542 <USBD_GetEpDesc>
 800aab8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d002      	beq.n	800aac6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2210      	movs	r2, #16
 800aac4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d006      	beq.n	800aada <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	2200      	movs	r2, #0
 800aad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aad4:	711a      	strb	r2, [r3, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d006      	beq.n	800aaee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aae8:	711a      	strb	r2, [r3, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2243      	movs	r2, #67	; 0x43
 800aaf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aaf4:	4b02      	ldr	r3, [pc, #8]	; (800ab00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3718      	adds	r7, #24
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	20000080 	.word	0x20000080

0800ab04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab0c:	2182      	movs	r1, #130	; 0x82
 800ab0e:	4818      	ldr	r0, [pc, #96]	; (800ab70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab10:	f000 fd17 	bl	800b542 <USBD_GetEpDesc>
 800ab14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab16:	2101      	movs	r1, #1
 800ab18:	4815      	ldr	r0, [pc, #84]	; (800ab70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab1a:	f000 fd12 	bl	800b542 <USBD_GetEpDesc>
 800ab1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab20:	2181      	movs	r1, #129	; 0x81
 800ab22:	4813      	ldr	r0, [pc, #76]	; (800ab70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab24:	f000 fd0d 	bl	800b542 <USBD_GetEpDesc>
 800ab28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	2210      	movs	r2, #16
 800ab34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d006      	beq.n	800ab4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	711a      	strb	r2, [r3, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f042 0202 	orr.w	r2, r2, #2
 800ab48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d006      	beq.n	800ab5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2200      	movs	r2, #0
 800ab54:	711a      	strb	r2, [r3, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f042 0202 	orr.w	r2, r2, #2
 800ab5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2243      	movs	r2, #67	; 0x43
 800ab62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ab64:	4b02      	ldr	r3, [pc, #8]	; (800ab70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	20000080 	.word	0x20000080

0800ab74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b086      	sub	sp, #24
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab7c:	2182      	movs	r1, #130	; 0x82
 800ab7e:	4818      	ldr	r0, [pc, #96]	; (800abe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ab80:	f000 fcdf 	bl	800b542 <USBD_GetEpDesc>
 800ab84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab86:	2101      	movs	r1, #1
 800ab88:	4815      	ldr	r0, [pc, #84]	; (800abe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ab8a:	f000 fcda 	bl	800b542 <USBD_GetEpDesc>
 800ab8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab90:	2181      	movs	r1, #129	; 0x81
 800ab92:	4813      	ldr	r0, [pc, #76]	; (800abe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ab94:	f000 fcd5 	bl	800b542 <USBD_GetEpDesc>
 800ab98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d002      	beq.n	800aba6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2210      	movs	r2, #16
 800aba4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d006      	beq.n	800abba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	2200      	movs	r2, #0
 800abb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abb4:	711a      	strb	r2, [r3, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d006      	beq.n	800abce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abc8:	711a      	strb	r2, [r3, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2243      	movs	r2, #67	; 0x43
 800abd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800abd4:	4b02      	ldr	r3, [pc, #8]	; (800abe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3718      	adds	r7, #24
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	20000080 	.word	0x20000080

0800abe4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	220a      	movs	r2, #10
 800abf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800abf2:	4b03      	ldr	r3, [pc, #12]	; (800ac00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	2000003c 	.word	0x2000003c

0800ac04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e009      	b.n	800ac2c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	33b0      	adds	r3, #176	; 0xb0
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4413      	add	r3, r2
 800ac26:	683a      	ldr	r2, [r7, #0]
 800ac28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	32b0      	adds	r2, #176	; 0xb0
 800ac4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac52:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d101      	bne.n	800ac5e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	e008      	b.n	800ac70 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	371c      	adds	r7, #28
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	32b0      	adds	r2, #176	; 0xb0
 800ac90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e004      	b.n	800acaa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
	...

0800acb8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	32b0      	adds	r2, #176	; 0xb0
 800acca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800acd0:	2301      	movs	r3, #1
 800acd2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	32b0      	adds	r2, #176	; 0xb0
 800acde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ace6:	2303      	movs	r3, #3
 800ace8:	e025      	b.n	800ad36 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d11f      	bne.n	800ad34 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800acfc:	4b10      	ldr	r3, [pc, #64]	; (800ad40 <USBD_CDC_TransmitPacket+0x88>)
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	f003 020f 	and.w	r2, r3, #15
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4403      	add	r3, r0
 800ad16:	3318      	adds	r3, #24
 800ad18:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ad1a:	4b09      	ldr	r3, [pc, #36]	; (800ad40 <USBD_CDC_TransmitPacket+0x88>)
 800ad1c:	7819      	ldrb	r1, [r3, #0]
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 ffa9 	bl	800cc82 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	200000c3 	.word	0x200000c3

0800ad44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	32b0      	adds	r2, #176	; 0xb0
 800ad56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad5a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	32b0      	adds	r2, #176	; 0xb0
 800ad66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	e018      	b.n	800ada4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	7c1b      	ldrb	r3, [r3, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10a      	bne.n	800ad90 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad7a:	4b0c      	ldr	r3, [pc, #48]	; (800adac <USBD_CDC_ReceivePacket+0x68>)
 800ad7c:	7819      	ldrb	r1, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f001 ff9b 	bl	800ccc4 <USBD_LL_PrepareReceive>
 800ad8e:	e008      	b.n	800ada2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad90:	4b06      	ldr	r3, [pc, #24]	; (800adac <USBD_CDC_ReceivePacket+0x68>)
 800ad92:	7819      	ldrb	r1, [r3, #0]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad9a:	2340      	movs	r3, #64	; 0x40
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f001 ff91 	bl	800ccc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	200000c4 	.word	0x200000c4

0800adb0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	4613      	mov	r3, r2
 800adbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d101      	bne.n	800adc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e01f      	b.n	800ae08 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d003      	beq.n	800adee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	68ba      	ldr	r2, [r7, #8]
 800adea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	79fa      	ldrb	r2, [r7, #7]
 800adfa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f001 fe0b 	bl	800ca18 <USBD_LL_Init>
 800ae02:	4603      	mov	r3, r0
 800ae04:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ae06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3718      	adds	r7, #24
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae24:	2303      	movs	r3, #3
 800ae26:	e025      	b.n	800ae74 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	32ae      	adds	r2, #174	; 0xae
 800ae3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00f      	beq.n	800ae64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	32ae      	adds	r2, #174	; 0xae
 800ae4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae54:	f107 020e 	add.w	r2, r7, #14
 800ae58:	4610      	mov	r0, r2
 800ae5a:	4798      	blx	r3
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ae6a:	1c5a      	adds	r2, r3, #1
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 fe13 	bl	800cab0 <USBD_LL_Start>
 800ae8a:	4603      	mov	r3, r0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b084      	sub	sp, #16
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d009      	beq.n	800aed8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	78fa      	ldrb	r2, [r7, #3]
 800aece:	4611      	mov	r1, r2
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	4798      	blx	r3
 800aed4:	4603      	mov	r3, r0
 800aed6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aed8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b084      	sub	sp, #16
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	460b      	mov	r3, r1
 800aeec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	78fa      	ldrb	r2, [r7, #3]
 800aefc:	4611      	mov	r1, r2
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	4798      	blx	r3
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800af08:	2303      	movs	r3, #3
 800af0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	4618      	mov	r0, r3
 800af2a:	f001 f908 	bl	800c13e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2201      	movs	r2, #1
 800af32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800af3c:	461a      	mov	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af4a:	f003 031f 	and.w	r3, r3, #31
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d01a      	beq.n	800af88 <USBD_LL_SetupStage+0x72>
 800af52:	2b02      	cmp	r3, #2
 800af54:	d822      	bhi.n	800af9c <USBD_LL_SetupStage+0x86>
 800af56:	2b00      	cmp	r3, #0
 800af58:	d002      	beq.n	800af60 <USBD_LL_SetupStage+0x4a>
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d00a      	beq.n	800af74 <USBD_LL_SetupStage+0x5e>
 800af5e:	e01d      	b.n	800af9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af66:	4619      	mov	r1, r3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fb5f 	bl	800b62c <USBD_StdDevReq>
 800af6e:	4603      	mov	r3, r0
 800af70:	73fb      	strb	r3, [r7, #15]
      break;
 800af72:	e020      	b.n	800afb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af7a:	4619      	mov	r1, r3
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 fbc7 	bl	800b710 <USBD_StdItfReq>
 800af82:	4603      	mov	r3, r0
 800af84:	73fb      	strb	r3, [r7, #15]
      break;
 800af86:	e016      	b.n	800afb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fc29 	bl	800b7e8 <USBD_StdEPReq>
 800af96:	4603      	mov	r3, r0
 800af98:	73fb      	strb	r3, [r7, #15]
      break;
 800af9a:	e00c      	b.n	800afb6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800afa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f001 fde0 	bl	800cb70 <USBD_LL_StallEP>
 800afb0:	4603      	mov	r3, r0
 800afb2:	73fb      	strb	r3, [r7, #15]
      break;
 800afb4:	bf00      	nop
  }

  return ret;
 800afb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	460b      	mov	r3, r1
 800afca:	607a      	str	r2, [r7, #4]
 800afcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800afd2:	7afb      	ldrb	r3, [r7, #11]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d16e      	bne.n	800b0b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800afde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	f040 8098 	bne.w	800b11c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	689a      	ldr	r2, [r3, #8]
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d913      	bls.n	800b020 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	689a      	ldr	r2, [r3, #8]
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	1ad2      	subs	r2, r2, r3
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	68da      	ldr	r2, [r3, #12]
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	4293      	cmp	r3, r2
 800b010:	bf28      	it	cs
 800b012:	4613      	movcs	r3, r2
 800b014:	461a      	mov	r2, r3
 800b016:	6879      	ldr	r1, [r7, #4]
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f001 f984 	bl	800c326 <USBD_CtlContinueRx>
 800b01e:	e07d      	b.n	800b11c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b026:	f003 031f 	and.w	r3, r3, #31
 800b02a:	2b02      	cmp	r3, #2
 800b02c:	d014      	beq.n	800b058 <USBD_LL_DataOutStage+0x98>
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d81d      	bhi.n	800b06e <USBD_LL_DataOutStage+0xae>
 800b032:	2b00      	cmp	r3, #0
 800b034:	d002      	beq.n	800b03c <USBD_LL_DataOutStage+0x7c>
 800b036:	2b01      	cmp	r3, #1
 800b038:	d003      	beq.n	800b042 <USBD_LL_DataOutStage+0x82>
 800b03a:	e018      	b.n	800b06e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b03c:	2300      	movs	r3, #0
 800b03e:	75bb      	strb	r3, [r7, #22]
            break;
 800b040:	e018      	b.n	800b074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	4619      	mov	r1, r3
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f000 fa5e 	bl	800b50e <USBD_CoreFindIF>
 800b052:	4603      	mov	r3, r0
 800b054:	75bb      	strb	r3, [r7, #22]
            break;
 800b056:	e00d      	b.n	800b074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	4619      	mov	r1, r3
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f000 fa60 	bl	800b528 <USBD_CoreFindEP>
 800b068:	4603      	mov	r3, r0
 800b06a:	75bb      	strb	r3, [r7, #22]
            break;
 800b06c:	e002      	b.n	800b074 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b06e:	2300      	movs	r3, #0
 800b070:	75bb      	strb	r3, [r7, #22]
            break;
 800b072:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b074:	7dbb      	ldrb	r3, [r7, #22]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d119      	bne.n	800b0ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b03      	cmp	r3, #3
 800b084:	d113      	bne.n	800b0ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b086:	7dba      	ldrb	r2, [r7, #22]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	32ae      	adds	r2, #174	; 0xae
 800b08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00b      	beq.n	800b0ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b096:	7dba      	ldrb	r2, [r7, #22]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b09e:	7dba      	ldrb	r2, [r7, #22]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	32ae      	adds	r2, #174	; 0xae
 800b0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f001 f94a 	bl	800c348 <USBD_CtlSendStatus>
 800b0b4:	e032      	b.n	800b11c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b0b6:	7afb      	ldrb	r3, [r7, #11]
 800b0b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	4619      	mov	r1, r3
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f000 fa31 	bl	800b528 <USBD_CoreFindEP>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0ca:	7dbb      	ldrb	r3, [r7, #22]
 800b0cc:	2bff      	cmp	r3, #255	; 0xff
 800b0ce:	d025      	beq.n	800b11c <USBD_LL_DataOutStage+0x15c>
 800b0d0:	7dbb      	ldrb	r3, [r7, #22]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d122      	bne.n	800b11c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	2b03      	cmp	r3, #3
 800b0e0:	d117      	bne.n	800b112 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b0e2:	7dba      	ldrb	r2, [r7, #22]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	32ae      	adds	r2, #174	; 0xae
 800b0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00f      	beq.n	800b112 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b0f2:	7dba      	ldrb	r2, [r7, #22]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b0fa:	7dba      	ldrb	r2, [r7, #22]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	32ae      	adds	r2, #174	; 0xae
 800b100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b104:	699b      	ldr	r3, [r3, #24]
 800b106:	7afa      	ldrb	r2, [r7, #11]
 800b108:	4611      	mov	r1, r2
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	4798      	blx	r3
 800b10e:	4603      	mov	r3, r0
 800b110:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b112:	7dfb      	ldrb	r3, [r7, #23]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b118:	7dfb      	ldrb	r3, [r7, #23]
 800b11a:	e000      	b.n	800b11e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b086      	sub	sp, #24
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	60f8      	str	r0, [r7, #12]
 800b12e:	460b      	mov	r3, r1
 800b130:	607a      	str	r2, [r7, #4]
 800b132:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b134:	7afb      	ldrb	r3, [r7, #11]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d16f      	bne.n	800b21a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	3314      	adds	r3, #20
 800b13e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b146:	2b02      	cmp	r3, #2
 800b148:	d15a      	bne.n	800b200 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	689a      	ldr	r2, [r3, #8]
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	429a      	cmp	r2, r3
 800b154:	d914      	bls.n	800b180 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	689a      	ldr	r2, [r3, #8]
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	1ad2      	subs	r2, r2, r3
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	461a      	mov	r2, r3
 800b16a:	6879      	ldr	r1, [r7, #4]
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f001 f8ac 	bl	800c2ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b172:	2300      	movs	r3, #0
 800b174:	2200      	movs	r2, #0
 800b176:	2100      	movs	r1, #0
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f001 fda3 	bl	800ccc4 <USBD_LL_PrepareReceive>
 800b17e:	e03f      	b.n	800b200 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	68da      	ldr	r2, [r3, #12]
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d11c      	bne.n	800b1c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	685a      	ldr	r2, [r3, #4]
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b194:	429a      	cmp	r2, r3
 800b196:	d316      	bcc.n	800b1c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	685a      	ldr	r2, [r3, #4]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d20f      	bcs.n	800b1c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f001 f88d 	bl	800c2ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	2100      	movs	r1, #0
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f001 fd80 	bl	800ccc4 <USBD_LL_PrepareReceive>
 800b1c4:	e01c      	b.n	800b200 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b03      	cmp	r3, #3
 800b1d0:	d10f      	bne.n	800b1f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d009      	beq.n	800b1f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1f2:	2180      	movs	r1, #128	; 0x80
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f001 fcbb 	bl	800cb70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f001 f8b7 	bl	800c36e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d03a      	beq.n	800b280 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f7ff fe42 	bl	800ae94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b218:	e032      	b.n	800b280 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b21a:	7afb      	ldrb	r3, [r7, #11]
 800b21c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b220:	b2db      	uxtb	r3, r3
 800b222:	4619      	mov	r1, r3
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f000 f97f 	bl	800b528 <USBD_CoreFindEP>
 800b22a:	4603      	mov	r3, r0
 800b22c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b22e:	7dfb      	ldrb	r3, [r7, #23]
 800b230:	2bff      	cmp	r3, #255	; 0xff
 800b232:	d025      	beq.n	800b280 <USBD_LL_DataInStage+0x15a>
 800b234:	7dfb      	ldrb	r3, [r7, #23]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d122      	bne.n	800b280 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b240:	b2db      	uxtb	r3, r3
 800b242:	2b03      	cmp	r3, #3
 800b244:	d11c      	bne.n	800b280 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b246:	7dfa      	ldrb	r2, [r7, #23]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	32ae      	adds	r2, #174	; 0xae
 800b24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d014      	beq.n	800b280 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b256:	7dfa      	ldrb	r2, [r7, #23]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b25e:	7dfa      	ldrb	r2, [r7, #23]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	32ae      	adds	r2, #174	; 0xae
 800b264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b268:	695b      	ldr	r3, [r3, #20]
 800b26a:	7afa      	ldrb	r2, [r7, #11]
 800b26c:	4611      	mov	r1, r2
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	4798      	blx	r3
 800b272:	4603      	mov	r3, r0
 800b274:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b276:	7dbb      	ldrb	r3, [r7, #22]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d001      	beq.n	800b280 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b27c:	7dbb      	ldrb	r3, [r7, #22]
 800b27e:	e000      	b.n	800b282 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b084      	sub	sp, #16
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2201      	movs	r2, #1
 800b29a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d014      	beq.n	800b2f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00e      	beq.n	800b2f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	6852      	ldr	r2, [r2, #4]
 800b2de:	b2d2      	uxtb	r2, r2
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	4798      	blx	r3
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b2ec:	2303      	movs	r3, #3
 800b2ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b2f0:	2340      	movs	r3, #64	; 0x40
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f001 fbf5 	bl	800cae6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2201      	movs	r2, #1
 800b300:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2240      	movs	r2, #64	; 0x40
 800b308:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b30c:	2340      	movs	r3, #64	; 0x40
 800b30e:	2200      	movs	r2, #0
 800b310:	2180      	movs	r1, #128	; 0x80
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f001 fbe7 	bl	800cae6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2240      	movs	r2, #64	; 0x40
 800b322:	621a      	str	r2, [r3, #32]

  return ret;
 800b324:	7bfb      	ldrb	r3, [r7, #15]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b32e:	b480      	push	{r7}
 800b330:	b083      	sub	sp, #12
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
 800b336:	460b      	mov	r3, r1
 800b338:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	78fa      	ldrb	r2, [r7, #3]
 800b33e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b34e:	b480      	push	{r7}
 800b350:	b083      	sub	sp, #12
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b35c:	b2da      	uxtb	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2204      	movs	r2, #4
 800b368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b083      	sub	sp, #12
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b04      	cmp	r3, #4
 800b38c:	d106      	bne.n	800b39c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b394:	b2da      	uxtb	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	370c      	adds	r7, #12
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b082      	sub	sp, #8
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b03      	cmp	r3, #3
 800b3bc:	d110      	bne.n	800b3e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00b      	beq.n	800b3e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d005      	beq.n	800b3e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3da:	69db      	ldr	r3, [r3, #28]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b082      	sub	sp, #8
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	32ae      	adds	r2, #174	; 0xae
 800b400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b408:	2303      	movs	r3, #3
 800b40a:	e01c      	b.n	800b446 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b03      	cmp	r3, #3
 800b416:	d115      	bne.n	800b444 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	32ae      	adds	r2, #174	; 0xae
 800b422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b426:	6a1b      	ldr	r3, [r3, #32]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00b      	beq.n	800b444 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	32ae      	adds	r2, #174	; 0xae
 800b436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b43a:	6a1b      	ldr	r3, [r3, #32]
 800b43c:	78fa      	ldrb	r2, [r7, #3]
 800b43e:	4611      	mov	r1, r2
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b082      	sub	sp, #8
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	460b      	mov	r3, r1
 800b458:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	32ae      	adds	r2, #174	; 0xae
 800b464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d101      	bne.n	800b470 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b46c:	2303      	movs	r3, #3
 800b46e:	e01c      	b.n	800b4aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b476:	b2db      	uxtb	r3, r3
 800b478:	2b03      	cmp	r3, #3
 800b47a:	d115      	bne.n	800b4a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	32ae      	adds	r2, #174	; 0xae
 800b486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00b      	beq.n	800b4a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	32ae      	adds	r2, #174	; 0xae
 800b49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a0:	78fa      	ldrb	r2, [r7, #3]
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b4b2:	b480      	push	{r7}
 800b4b4:	b083      	sub	sp, #12
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00e      	beq.n	800b504 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	6852      	ldr	r2, [r2, #4]
 800b4f2:	b2d2      	uxtb	r2, r2
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	4798      	blx	r3
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d001      	beq.n	800b504 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b500:	2303      	movs	r3, #3
 800b502:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b504:	7bfb      	ldrb	r3, [r7, #15]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b50e:	b480      	push	{r7}
 800b510:	b083      	sub	sp, #12
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	460b      	mov	r3, r1
 800b518:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b51a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	460b      	mov	r3, r1
 800b532:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b534:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b536:	4618      	mov	r0, r3
 800b538:	370c      	adds	r7, #12
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b086      	sub	sp, #24
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
 800b54a:	460b      	mov	r3, r1
 800b54c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b556:	2300      	movs	r3, #0
 800b558:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	885b      	ldrh	r3, [r3, #2]
 800b55e:	b29a      	uxth	r2, r3
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	b29b      	uxth	r3, r3
 800b566:	429a      	cmp	r2, r3
 800b568:	d920      	bls.n	800b5ac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	b29b      	uxth	r3, r3
 800b570:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b572:	e013      	b.n	800b59c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b574:	f107 030a 	add.w	r3, r7, #10
 800b578:	4619      	mov	r1, r3
 800b57a:	6978      	ldr	r0, [r7, #20]
 800b57c:	f000 f81b 	bl	800b5b6 <USBD_GetNextDesc>
 800b580:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	785b      	ldrb	r3, [r3, #1]
 800b586:	2b05      	cmp	r3, #5
 800b588:	d108      	bne.n	800b59c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	789b      	ldrb	r3, [r3, #2]
 800b592:	78fa      	ldrb	r2, [r7, #3]
 800b594:	429a      	cmp	r2, r3
 800b596:	d008      	beq.n	800b5aa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b598:	2300      	movs	r3, #0
 800b59a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	885b      	ldrh	r3, [r3, #2]
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	897b      	ldrh	r3, [r7, #10]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d8e5      	bhi.n	800b574 <USBD_GetEpDesc+0x32>
 800b5a8:	e000      	b.n	800b5ac <USBD_GetEpDesc+0x6a>
          break;
 800b5aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b5ac:	693b      	ldr	r3, [r7, #16]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3718      	adds	r7, #24
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b085      	sub	sp, #20
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	881a      	ldrh	r2, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	4413      	add	r3, r2
 800b5d0:	b29a      	uxth	r2, r3
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4413      	add	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b087      	sub	sp, #28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	3301      	adds	r3, #1
 800b606:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b60e:	8a3b      	ldrh	r3, [r7, #16]
 800b610:	021b      	lsls	r3, r3, #8
 800b612:	b21a      	sxth	r2, r3
 800b614:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b618:	4313      	orrs	r3, r2
 800b61a:	b21b      	sxth	r3, r3
 800b61c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b61e:	89fb      	ldrh	r3, [r7, #14]
}
 800b620:	4618      	mov	r0, r3
 800b622:	371c      	adds	r7, #28
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b642:	2b40      	cmp	r3, #64	; 0x40
 800b644:	d005      	beq.n	800b652 <USBD_StdDevReq+0x26>
 800b646:	2b40      	cmp	r3, #64	; 0x40
 800b648:	d857      	bhi.n	800b6fa <USBD_StdDevReq+0xce>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00f      	beq.n	800b66e <USBD_StdDevReq+0x42>
 800b64e:	2b20      	cmp	r3, #32
 800b650:	d153      	bne.n	800b6fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	32ae      	adds	r2, #174	; 0xae
 800b65c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	4798      	blx	r3
 800b668:	4603      	mov	r3, r0
 800b66a:	73fb      	strb	r3, [r7, #15]
      break;
 800b66c:	e04a      	b.n	800b704 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	785b      	ldrb	r3, [r3, #1]
 800b672:	2b09      	cmp	r3, #9
 800b674:	d83b      	bhi.n	800b6ee <USBD_StdDevReq+0xc2>
 800b676:	a201      	add	r2, pc, #4	; (adr r2, 800b67c <USBD_StdDevReq+0x50>)
 800b678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67c:	0800b6d1 	.word	0x0800b6d1
 800b680:	0800b6e5 	.word	0x0800b6e5
 800b684:	0800b6ef 	.word	0x0800b6ef
 800b688:	0800b6db 	.word	0x0800b6db
 800b68c:	0800b6ef 	.word	0x0800b6ef
 800b690:	0800b6af 	.word	0x0800b6af
 800b694:	0800b6a5 	.word	0x0800b6a5
 800b698:	0800b6ef 	.word	0x0800b6ef
 800b69c:	0800b6c7 	.word	0x0800b6c7
 800b6a0:	0800b6b9 	.word	0x0800b6b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b6a4:	6839      	ldr	r1, [r7, #0]
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fa3c 	bl	800bb24 <USBD_GetDescriptor>
          break;
 800b6ac:	e024      	b.n	800b6f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 fba1 	bl	800bdf8 <USBD_SetAddress>
          break;
 800b6b6:	e01f      	b.n	800b6f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b6b8:	6839      	ldr	r1, [r7, #0]
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 fbe0 	bl	800be80 <USBD_SetConfig>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	73fb      	strb	r3, [r7, #15]
          break;
 800b6c4:	e018      	b.n	800b6f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fc83 	bl	800bfd4 <USBD_GetConfig>
          break;
 800b6ce:	e013      	b.n	800b6f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fcb4 	bl	800c040 <USBD_GetStatus>
          break;
 800b6d8:	e00e      	b.n	800b6f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fce3 	bl	800c0a8 <USBD_SetFeature>
          break;
 800b6e2:	e009      	b.n	800b6f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fd07 	bl	800c0fa <USBD_ClrFeature>
          break;
 800b6ec:	e004      	b.n	800b6f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fd5e 	bl	800c1b2 <USBD_CtlError>
          break;
 800b6f6:	bf00      	nop
      }
      break;
 800b6f8:	e004      	b.n	800b704 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b6fa:	6839      	ldr	r1, [r7, #0]
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 fd58 	bl	800c1b2 <USBD_CtlError>
      break;
 800b702:	bf00      	nop
  }

  return ret;
 800b704:	7bfb      	ldrb	r3, [r7, #15]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop

0800b710 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b71a:	2300      	movs	r3, #0
 800b71c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b726:	2b40      	cmp	r3, #64	; 0x40
 800b728:	d005      	beq.n	800b736 <USBD_StdItfReq+0x26>
 800b72a:	2b40      	cmp	r3, #64	; 0x40
 800b72c:	d852      	bhi.n	800b7d4 <USBD_StdItfReq+0xc4>
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d001      	beq.n	800b736 <USBD_StdItfReq+0x26>
 800b732:	2b20      	cmp	r3, #32
 800b734:	d14e      	bne.n	800b7d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	3b01      	subs	r3, #1
 800b740:	2b02      	cmp	r3, #2
 800b742:	d840      	bhi.n	800b7c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	889b      	ldrh	r3, [r3, #4]
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d836      	bhi.n	800b7bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	889b      	ldrh	r3, [r3, #4]
 800b752:	b2db      	uxtb	r3, r3
 800b754:	4619      	mov	r1, r3
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7ff fed9 	bl	800b50e <USBD_CoreFindIF>
 800b75c:	4603      	mov	r3, r0
 800b75e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b760:	7bbb      	ldrb	r3, [r7, #14]
 800b762:	2bff      	cmp	r3, #255	; 0xff
 800b764:	d01d      	beq.n	800b7a2 <USBD_StdItfReq+0x92>
 800b766:	7bbb      	ldrb	r3, [r7, #14]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d11a      	bne.n	800b7a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b76c:	7bba      	ldrb	r2, [r7, #14]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	32ae      	adds	r2, #174	; 0xae
 800b772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00f      	beq.n	800b79c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b77c:	7bba      	ldrb	r2, [r7, #14]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b784:	7bba      	ldrb	r2, [r7, #14]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	32ae      	adds	r2, #174	; 0xae
 800b78a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	6839      	ldr	r1, [r7, #0]
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	4798      	blx	r3
 800b796:	4603      	mov	r3, r0
 800b798:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b79a:	e004      	b.n	800b7a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b79c:	2303      	movs	r3, #3
 800b79e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b7a0:	e001      	b.n	800b7a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b7a2:	2303      	movs	r3, #3
 800b7a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	88db      	ldrh	r3, [r3, #6]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d110      	bne.n	800b7d0 <USBD_StdItfReq+0xc0>
 800b7ae:	7bfb      	ldrb	r3, [r7, #15]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10d      	bne.n	800b7d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fdc7 	bl	800c348 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b7ba:	e009      	b.n	800b7d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fcf7 	bl	800c1b2 <USBD_CtlError>
          break;
 800b7c4:	e004      	b.n	800b7d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b7c6:	6839      	ldr	r1, [r7, #0]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fcf2 	bl	800c1b2 <USBD_CtlError>
          break;
 800b7ce:	e000      	b.n	800b7d2 <USBD_StdItfReq+0xc2>
          break;
 800b7d0:	bf00      	nop
      }
      break;
 800b7d2:	e004      	b.n	800b7de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fceb 	bl	800c1b2 <USBD_CtlError>
      break;
 800b7dc:	bf00      	nop
  }

  return ret;
 800b7de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	889b      	ldrh	r3, [r3, #4]
 800b7fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b804:	2b40      	cmp	r3, #64	; 0x40
 800b806:	d007      	beq.n	800b818 <USBD_StdEPReq+0x30>
 800b808:	2b40      	cmp	r3, #64	; 0x40
 800b80a:	f200 817f 	bhi.w	800bb0c <USBD_StdEPReq+0x324>
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d02a      	beq.n	800b868 <USBD_StdEPReq+0x80>
 800b812:	2b20      	cmp	r3, #32
 800b814:	f040 817a 	bne.w	800bb0c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b818:	7bbb      	ldrb	r3, [r7, #14]
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7ff fe83 	bl	800b528 <USBD_CoreFindEP>
 800b822:	4603      	mov	r3, r0
 800b824:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b826:	7b7b      	ldrb	r3, [r7, #13]
 800b828:	2bff      	cmp	r3, #255	; 0xff
 800b82a:	f000 8174 	beq.w	800bb16 <USBD_StdEPReq+0x32e>
 800b82e:	7b7b      	ldrb	r3, [r7, #13]
 800b830:	2b00      	cmp	r3, #0
 800b832:	f040 8170 	bne.w	800bb16 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b836:	7b7a      	ldrb	r2, [r7, #13]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b83e:	7b7a      	ldrb	r2, [r7, #13]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	32ae      	adds	r2, #174	; 0xae
 800b844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f000 8163 	beq.w	800bb16 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b850:	7b7a      	ldrb	r2, [r7, #13]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	32ae      	adds	r2, #174	; 0xae
 800b856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	4798      	blx	r3
 800b862:	4603      	mov	r3, r0
 800b864:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b866:	e156      	b.n	800bb16 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	785b      	ldrb	r3, [r3, #1]
 800b86c:	2b03      	cmp	r3, #3
 800b86e:	d008      	beq.n	800b882 <USBD_StdEPReq+0x9a>
 800b870:	2b03      	cmp	r3, #3
 800b872:	f300 8145 	bgt.w	800bb00 <USBD_StdEPReq+0x318>
 800b876:	2b00      	cmp	r3, #0
 800b878:	f000 809b 	beq.w	800b9b2 <USBD_StdEPReq+0x1ca>
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d03c      	beq.n	800b8fa <USBD_StdEPReq+0x112>
 800b880:	e13e      	b.n	800bb00 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	d002      	beq.n	800b894 <USBD_StdEPReq+0xac>
 800b88e:	2b03      	cmp	r3, #3
 800b890:	d016      	beq.n	800b8c0 <USBD_StdEPReq+0xd8>
 800b892:	e02c      	b.n	800b8ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b894:	7bbb      	ldrb	r3, [r7, #14]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00d      	beq.n	800b8b6 <USBD_StdEPReq+0xce>
 800b89a:	7bbb      	ldrb	r3, [r7, #14]
 800b89c:	2b80      	cmp	r3, #128	; 0x80
 800b89e:	d00a      	beq.n	800b8b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8a0:	7bbb      	ldrb	r3, [r7, #14]
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f001 f963 	bl	800cb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8aa:	2180      	movs	r1, #128	; 0x80
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f001 f95f 	bl	800cb70 <USBD_LL_StallEP>
 800b8b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8b4:	e020      	b.n	800b8f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fc7a 	bl	800c1b2 <USBD_CtlError>
              break;
 800b8be:	e01b      	b.n	800b8f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	885b      	ldrh	r3, [r3, #2]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d10e      	bne.n	800b8e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8c8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00b      	beq.n	800b8e6 <USBD_StdEPReq+0xfe>
 800b8ce:	7bbb      	ldrb	r3, [r7, #14]
 800b8d0:	2b80      	cmp	r3, #128	; 0x80
 800b8d2:	d008      	beq.n	800b8e6 <USBD_StdEPReq+0xfe>
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	88db      	ldrh	r3, [r3, #6]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d104      	bne.n	800b8e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8dc:	7bbb      	ldrb	r3, [r7, #14]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f001 f945 	bl	800cb70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fd2e 	bl	800c348 <USBD_CtlSendStatus>

              break;
 800b8ec:	e004      	b.n	800b8f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fc5e 	bl	800c1b2 <USBD_CtlError>
              break;
 800b8f6:	bf00      	nop
          }
          break;
 800b8f8:	e107      	b.n	800bb0a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b900:	b2db      	uxtb	r3, r3
 800b902:	2b02      	cmp	r3, #2
 800b904:	d002      	beq.n	800b90c <USBD_StdEPReq+0x124>
 800b906:	2b03      	cmp	r3, #3
 800b908:	d016      	beq.n	800b938 <USBD_StdEPReq+0x150>
 800b90a:	e04b      	b.n	800b9a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b90c:	7bbb      	ldrb	r3, [r7, #14]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00d      	beq.n	800b92e <USBD_StdEPReq+0x146>
 800b912:	7bbb      	ldrb	r3, [r7, #14]
 800b914:	2b80      	cmp	r3, #128	; 0x80
 800b916:	d00a      	beq.n	800b92e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b918:	7bbb      	ldrb	r3, [r7, #14]
 800b91a:	4619      	mov	r1, r3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f001 f927 	bl	800cb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b922:	2180      	movs	r1, #128	; 0x80
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f001 f923 	bl	800cb70 <USBD_LL_StallEP>
 800b92a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b92c:	e040      	b.n	800b9b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b92e:	6839      	ldr	r1, [r7, #0]
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fc3e 	bl	800c1b2 <USBD_CtlError>
              break;
 800b936:	e03b      	b.n	800b9b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	885b      	ldrh	r3, [r3, #2]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d136      	bne.n	800b9ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b940:	7bbb      	ldrb	r3, [r7, #14]
 800b942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b946:	2b00      	cmp	r3, #0
 800b948:	d004      	beq.n	800b954 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b94a:	7bbb      	ldrb	r3, [r7, #14]
 800b94c:	4619      	mov	r1, r3
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f001 f92d 	bl	800cbae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fcf7 	bl	800c348 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b95a:	7bbb      	ldrb	r3, [r7, #14]
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff fde2 	bl	800b528 <USBD_CoreFindEP>
 800b964:	4603      	mov	r3, r0
 800b966:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b968:	7b7b      	ldrb	r3, [r7, #13]
 800b96a:	2bff      	cmp	r3, #255	; 0xff
 800b96c:	d01f      	beq.n	800b9ae <USBD_StdEPReq+0x1c6>
 800b96e:	7b7b      	ldrb	r3, [r7, #13]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d11c      	bne.n	800b9ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b974:	7b7a      	ldrb	r2, [r7, #13]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b97c:	7b7a      	ldrb	r2, [r7, #13]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	32ae      	adds	r2, #174	; 0xae
 800b982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d010      	beq.n	800b9ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b98c:	7b7a      	ldrb	r2, [r7, #13]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	32ae      	adds	r2, #174	; 0xae
 800b992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	4798      	blx	r3
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b9a2:	e004      	b.n	800b9ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b9a4:	6839      	ldr	r1, [r7, #0]
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fc03 	bl	800c1b2 <USBD_CtlError>
              break;
 800b9ac:	e000      	b.n	800b9b0 <USBD_StdEPReq+0x1c8>
              break;
 800b9ae:	bf00      	nop
          }
          break;
 800b9b0:	e0ab      	b.n	800bb0a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d002      	beq.n	800b9c4 <USBD_StdEPReq+0x1dc>
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	d032      	beq.n	800ba28 <USBD_StdEPReq+0x240>
 800b9c2:	e097      	b.n	800baf4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9c4:	7bbb      	ldrb	r3, [r7, #14]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d007      	beq.n	800b9da <USBD_StdEPReq+0x1f2>
 800b9ca:	7bbb      	ldrb	r3, [r7, #14]
 800b9cc:	2b80      	cmp	r3, #128	; 0x80
 800b9ce:	d004      	beq.n	800b9da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b9d0:	6839      	ldr	r1, [r7, #0]
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fbed 	bl	800c1b2 <USBD_CtlError>
                break;
 800b9d8:	e091      	b.n	800bafe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	da0b      	bge.n	800b9fa <USBD_StdEPReq+0x212>
 800b9e2:	7bbb      	ldrb	r3, [r7, #14]
 800b9e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	4413      	add	r3, r2
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	3310      	adds	r3, #16
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	3304      	adds	r3, #4
 800b9f8:	e00b      	b.n	800ba12 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9fa:	7bbb      	ldrb	r3, [r7, #14]
 800b9fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba00:	4613      	mov	r3, r2
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	4413      	add	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	4413      	add	r3, r2
 800ba10:	3304      	adds	r3, #4
 800ba12:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	2200      	movs	r2, #0
 800ba18:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fc37 	bl	800c294 <USBD_CtlSendData>
              break;
 800ba26:	e06a      	b.n	800bafe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	da11      	bge.n	800ba54 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba30:	7bbb      	ldrb	r3, [r7, #14]
 800ba32:	f003 020f 	and.w	r2, r3, #15
 800ba36:	6879      	ldr	r1, [r7, #4]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	440b      	add	r3, r1
 800ba42:	3324      	adds	r3, #36	; 0x24
 800ba44:	881b      	ldrh	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d117      	bne.n	800ba7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba4a:	6839      	ldr	r1, [r7, #0]
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 fbb0 	bl	800c1b2 <USBD_CtlError>
                  break;
 800ba52:	e054      	b.n	800bafe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba54:	7bbb      	ldrb	r3, [r7, #14]
 800ba56:	f003 020f 	and.w	r2, r3, #15
 800ba5a:	6879      	ldr	r1, [r7, #4]
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4413      	add	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	440b      	add	r3, r1
 800ba66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d104      	bne.n	800ba7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fb9d 	bl	800c1b2 <USBD_CtlError>
                  break;
 800ba78:	e041      	b.n	800bafe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	da0b      	bge.n	800ba9a <USBD_StdEPReq+0x2b2>
 800ba82:	7bbb      	ldrb	r3, [r7, #14]
 800ba84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba88:	4613      	mov	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	3310      	adds	r3, #16
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	4413      	add	r3, r2
 800ba96:	3304      	adds	r3, #4
 800ba98:	e00b      	b.n	800bab2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba9a:	7bbb      	ldrb	r3, [r7, #14]
 800ba9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baa0:	4613      	mov	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	4413      	add	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	4413      	add	r3, r2
 800bab0:	3304      	adds	r3, #4
 800bab2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bab4:	7bbb      	ldrb	r3, [r7, #14]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d002      	beq.n	800bac0 <USBD_StdEPReq+0x2d8>
 800baba:	7bbb      	ldrb	r3, [r7, #14]
 800babc:	2b80      	cmp	r3, #128	; 0x80
 800babe:	d103      	bne.n	800bac8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]
 800bac6:	e00e      	b.n	800bae6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bac8:	7bbb      	ldrb	r3, [r7, #14]
 800baca:	4619      	mov	r1, r3
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f001 f88d 	bl	800cbec <USBD_LL_IsStallEP>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d003      	beq.n	800bae0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2201      	movs	r2, #1
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	e002      	b.n	800bae6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	2200      	movs	r2, #0
 800bae4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	2202      	movs	r2, #2
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fbd1 	bl	800c294 <USBD_CtlSendData>
              break;
 800baf2:	e004      	b.n	800bafe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800baf4:	6839      	ldr	r1, [r7, #0]
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 fb5b 	bl	800c1b2 <USBD_CtlError>
              break;
 800bafc:	bf00      	nop
          }
          break;
 800bafe:	e004      	b.n	800bb0a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fb55 	bl	800c1b2 <USBD_CtlError>
          break;
 800bb08:	bf00      	nop
      }
      break;
 800bb0a:	e005      	b.n	800bb18 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fb4f 	bl	800c1b2 <USBD_CtlError>
      break;
 800bb14:	e000      	b.n	800bb18 <USBD_StdEPReq+0x330>
      break;
 800bb16:	bf00      	nop
  }

  return ret;
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
	...

0800bb24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb32:	2300      	movs	r3, #0
 800bb34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb36:	2300      	movs	r3, #0
 800bb38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	885b      	ldrh	r3, [r3, #2]
 800bb3e:	0a1b      	lsrs	r3, r3, #8
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	3b01      	subs	r3, #1
 800bb44:	2b06      	cmp	r3, #6
 800bb46:	f200 8128 	bhi.w	800bd9a <USBD_GetDescriptor+0x276>
 800bb4a:	a201      	add	r2, pc, #4	; (adr r2, 800bb50 <USBD_GetDescriptor+0x2c>)
 800bb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb50:	0800bb6d 	.word	0x0800bb6d
 800bb54:	0800bb85 	.word	0x0800bb85
 800bb58:	0800bbc5 	.word	0x0800bbc5
 800bb5c:	0800bd9b 	.word	0x0800bd9b
 800bb60:	0800bd9b 	.word	0x0800bd9b
 800bb64:	0800bd3b 	.word	0x0800bd3b
 800bb68:	0800bd67 	.word	0x0800bd67
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	7c12      	ldrb	r2, [r2, #16]
 800bb78:	f107 0108 	add.w	r1, r7, #8
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	4798      	blx	r3
 800bb80:	60f8      	str	r0, [r7, #12]
      break;
 800bb82:	e112      	b.n	800bdaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	7c1b      	ldrb	r3, [r3, #16]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10d      	bne.n	800bba8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb94:	f107 0208 	add.w	r2, r7, #8
 800bb98:	4610      	mov	r0, r2
 800bb9a:	4798      	blx	r3
 800bb9c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3301      	adds	r3, #1
 800bba2:	2202      	movs	r2, #2
 800bba4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bba6:	e100      	b.n	800bdaa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb0:	f107 0208 	add.w	r2, r7, #8
 800bbb4:	4610      	mov	r0, r2
 800bbb6:	4798      	blx	r3
 800bbb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	701a      	strb	r2, [r3, #0]
      break;
 800bbc2:	e0f2      	b.n	800bdaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	885b      	ldrh	r3, [r3, #2]
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	2b05      	cmp	r3, #5
 800bbcc:	f200 80ac 	bhi.w	800bd28 <USBD_GetDescriptor+0x204>
 800bbd0:	a201      	add	r2, pc, #4	; (adr r2, 800bbd8 <USBD_GetDescriptor+0xb4>)
 800bbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd6:	bf00      	nop
 800bbd8:	0800bbf1 	.word	0x0800bbf1
 800bbdc:	0800bc25 	.word	0x0800bc25
 800bbe0:	0800bc59 	.word	0x0800bc59
 800bbe4:	0800bc8d 	.word	0x0800bc8d
 800bbe8:	0800bcc1 	.word	0x0800bcc1
 800bbec:	0800bcf5 	.word	0x0800bcf5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00b      	beq.n	800bc14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	7c12      	ldrb	r2, [r2, #16]
 800bc08:	f107 0108 	add.w	r1, r7, #8
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	4798      	blx	r3
 800bc10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc12:	e091      	b.n	800bd38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 facb 	bl	800c1b2 <USBD_CtlError>
            err++;
 800bc1c:	7afb      	ldrb	r3, [r7, #11]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	72fb      	strb	r3, [r7, #11]
          break;
 800bc22:	e089      	b.n	800bd38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00b      	beq.n	800bc48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	7c12      	ldrb	r2, [r2, #16]
 800bc3c:	f107 0108 	add.w	r1, r7, #8
 800bc40:	4610      	mov	r0, r2
 800bc42:	4798      	blx	r3
 800bc44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc46:	e077      	b.n	800bd38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fab1 	bl	800c1b2 <USBD_CtlError>
            err++;
 800bc50:	7afb      	ldrb	r3, [r7, #11]
 800bc52:	3301      	adds	r3, #1
 800bc54:	72fb      	strb	r3, [r7, #11]
          break;
 800bc56:	e06f      	b.n	800bd38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00b      	beq.n	800bc7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	7c12      	ldrb	r2, [r2, #16]
 800bc70:	f107 0108 	add.w	r1, r7, #8
 800bc74:	4610      	mov	r0, r2
 800bc76:	4798      	blx	r3
 800bc78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc7a:	e05d      	b.n	800bd38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fa97 	bl	800c1b2 <USBD_CtlError>
            err++;
 800bc84:	7afb      	ldrb	r3, [r7, #11]
 800bc86:	3301      	adds	r3, #1
 800bc88:	72fb      	strb	r3, [r7, #11]
          break;
 800bc8a:	e055      	b.n	800bd38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00b      	beq.n	800bcb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	7c12      	ldrb	r2, [r2, #16]
 800bca4:	f107 0108 	add.w	r1, r7, #8
 800bca8:	4610      	mov	r0, r2
 800bcaa:	4798      	blx	r3
 800bcac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcae:	e043      	b.n	800bd38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fa7d 	bl	800c1b2 <USBD_CtlError>
            err++;
 800bcb8:	7afb      	ldrb	r3, [r7, #11]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	72fb      	strb	r3, [r7, #11]
          break;
 800bcbe:	e03b      	b.n	800bd38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcc6:	695b      	ldr	r3, [r3, #20]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00b      	beq.n	800bce4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcd2:	695b      	ldr	r3, [r3, #20]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	7c12      	ldrb	r2, [r2, #16]
 800bcd8:	f107 0108 	add.w	r1, r7, #8
 800bcdc:	4610      	mov	r0, r2
 800bcde:	4798      	blx	r3
 800bce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bce2:	e029      	b.n	800bd38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fa63 	bl	800c1b2 <USBD_CtlError>
            err++;
 800bcec:	7afb      	ldrb	r3, [r7, #11]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcf2:	e021      	b.n	800bd38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00b      	beq.n	800bd18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd06:	699b      	ldr	r3, [r3, #24]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	7c12      	ldrb	r2, [r2, #16]
 800bd0c:	f107 0108 	add.w	r1, r7, #8
 800bd10:	4610      	mov	r0, r2
 800bd12:	4798      	blx	r3
 800bd14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd16:	e00f      	b.n	800bd38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fa49 	bl	800c1b2 <USBD_CtlError>
            err++;
 800bd20:	7afb      	ldrb	r3, [r7, #11]
 800bd22:	3301      	adds	r3, #1
 800bd24:	72fb      	strb	r3, [r7, #11]
          break;
 800bd26:	e007      	b.n	800bd38 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bd28:	6839      	ldr	r1, [r7, #0]
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fa41 	bl	800c1b2 <USBD_CtlError>
          err++;
 800bd30:	7afb      	ldrb	r3, [r7, #11]
 800bd32:	3301      	adds	r3, #1
 800bd34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bd36:	bf00      	nop
      }
      break;
 800bd38:	e037      	b.n	800bdaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	7c1b      	ldrb	r3, [r3, #16]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d109      	bne.n	800bd56 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd4a:	f107 0208 	add.w	r2, r7, #8
 800bd4e:	4610      	mov	r0, r2
 800bd50:	4798      	blx	r3
 800bd52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd54:	e029      	b.n	800bdaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd56:	6839      	ldr	r1, [r7, #0]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 fa2a 	bl	800c1b2 <USBD_CtlError>
        err++;
 800bd5e:	7afb      	ldrb	r3, [r7, #11]
 800bd60:	3301      	adds	r3, #1
 800bd62:	72fb      	strb	r3, [r7, #11]
      break;
 800bd64:	e021      	b.n	800bdaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	7c1b      	ldrb	r3, [r3, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10d      	bne.n	800bd8a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd76:	f107 0208 	add.w	r2, r7, #8
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	4798      	blx	r3
 800bd7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	3301      	adds	r3, #1
 800bd84:	2207      	movs	r2, #7
 800bd86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd88:	e00f      	b.n	800bdaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd8a:	6839      	ldr	r1, [r7, #0]
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fa10 	bl	800c1b2 <USBD_CtlError>
        err++;
 800bd92:	7afb      	ldrb	r3, [r7, #11]
 800bd94:	3301      	adds	r3, #1
 800bd96:	72fb      	strb	r3, [r7, #11]
      break;
 800bd98:	e007      	b.n	800bdaa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bd9a:	6839      	ldr	r1, [r7, #0]
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fa08 	bl	800c1b2 <USBD_CtlError>
      err++;
 800bda2:	7afb      	ldrb	r3, [r7, #11]
 800bda4:	3301      	adds	r3, #1
 800bda6:	72fb      	strb	r3, [r7, #11]
      break;
 800bda8:	bf00      	nop
  }

  if (err != 0U)
 800bdaa:	7afb      	ldrb	r3, [r7, #11]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d11e      	bne.n	800bdee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	88db      	ldrh	r3, [r3, #6]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d016      	beq.n	800bde6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bdb8:	893b      	ldrh	r3, [r7, #8]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00e      	beq.n	800bddc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	88da      	ldrh	r2, [r3, #6]
 800bdc2:	893b      	ldrh	r3, [r7, #8]
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	bf28      	it	cs
 800bdc8:	4613      	movcs	r3, r2
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bdce:	893b      	ldrh	r3, [r7, #8]
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	68f9      	ldr	r1, [r7, #12]
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 fa5d 	bl	800c294 <USBD_CtlSendData>
 800bdda:	e009      	b.n	800bdf0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f9e7 	bl	800c1b2 <USBD_CtlError>
 800bde4:	e004      	b.n	800bdf0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 faae 	bl	800c348 <USBD_CtlSendStatus>
 800bdec:	e000      	b.n	800bdf0 <USBD_GetDescriptor+0x2cc>
    return;
 800bdee:	bf00      	nop
  }
}
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop

0800bdf8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	889b      	ldrh	r3, [r3, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d131      	bne.n	800be6e <USBD_SetAddress+0x76>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	88db      	ldrh	r3, [r3, #6]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d12d      	bne.n	800be6e <USBD_SetAddress+0x76>
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	885b      	ldrh	r3, [r3, #2]
 800be16:	2b7f      	cmp	r3, #127	; 0x7f
 800be18:	d829      	bhi.n	800be6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	885b      	ldrh	r3, [r3, #2]
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b03      	cmp	r3, #3
 800be30:	d104      	bne.n	800be3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 f9bc 	bl	800c1b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be3a:	e01d      	b.n	800be78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	7bfa      	ldrb	r2, [r7, #15]
 800be40:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be44:	7bfb      	ldrb	r3, [r7, #15]
 800be46:	4619      	mov	r1, r3
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fefb 	bl	800cc44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fa7a 	bl	800c348 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be54:	7bfb      	ldrb	r3, [r7, #15]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d004      	beq.n	800be64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2202      	movs	r2, #2
 800be5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be62:	e009      	b.n	800be78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be6c:	e004      	b.n	800be78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be6e:	6839      	ldr	r1, [r7, #0]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 f99e 	bl	800c1b2 <USBD_CtlError>
  }
}
 800be76:	bf00      	nop
 800be78:	bf00      	nop
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be8a:	2300      	movs	r3, #0
 800be8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	885b      	ldrh	r3, [r3, #2]
 800be92:	b2da      	uxtb	r2, r3
 800be94:	4b4e      	ldr	r3, [pc, #312]	; (800bfd0 <USBD_SetConfig+0x150>)
 800be96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be98:	4b4d      	ldr	r3, [pc, #308]	; (800bfd0 <USBD_SetConfig+0x150>)
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d905      	bls.n	800beac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bea0:	6839      	ldr	r1, [r7, #0]
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f985 	bl	800c1b2 <USBD_CtlError>
    return USBD_FAIL;
 800bea8:	2303      	movs	r3, #3
 800beaa:	e08c      	b.n	800bfc6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d002      	beq.n	800bebe <USBD_SetConfig+0x3e>
 800beb8:	2b03      	cmp	r3, #3
 800beba:	d029      	beq.n	800bf10 <USBD_SetConfig+0x90>
 800bebc:	e075      	b.n	800bfaa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bebe:	4b44      	ldr	r3, [pc, #272]	; (800bfd0 <USBD_SetConfig+0x150>)
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d020      	beq.n	800bf08 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bec6:	4b42      	ldr	r3, [pc, #264]	; (800bfd0 <USBD_SetConfig+0x150>)
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bed0:	4b3f      	ldr	r3, [pc, #252]	; (800bfd0 <USBD_SetConfig+0x150>)
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7fe ffe7 	bl	800aeaa <USBD_SetClassConfig>
 800bedc:	4603      	mov	r3, r0
 800bede:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d008      	beq.n	800bef8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f962 	bl	800c1b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2202      	movs	r2, #2
 800bef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bef6:	e065      	b.n	800bfc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fa25 	bl	800c348 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2203      	movs	r2, #3
 800bf02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf06:	e05d      	b.n	800bfc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 fa1d 	bl	800c348 <USBD_CtlSendStatus>
      break;
 800bf0e:	e059      	b.n	800bfc4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bf10:	4b2f      	ldr	r3, [pc, #188]	; (800bfd0 <USBD_SetConfig+0x150>)
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d112      	bne.n	800bf3e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2202      	movs	r2, #2
 800bf1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bf20:	4b2b      	ldr	r3, [pc, #172]	; (800bfd0 <USBD_SetConfig+0x150>)
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	461a      	mov	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf2a:	4b29      	ldr	r3, [pc, #164]	; (800bfd0 <USBD_SetConfig+0x150>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	4619      	mov	r1, r3
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f7fe ffd6 	bl	800aee2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 fa06 	bl	800c348 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf3c:	e042      	b.n	800bfc4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bf3e:	4b24      	ldr	r3, [pc, #144]	; (800bfd0 <USBD_SetConfig+0x150>)
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	461a      	mov	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d02a      	beq.n	800bfa2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	4619      	mov	r1, r3
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7fe ffc4 	bl	800aee2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf5a:	4b1d      	ldr	r3, [pc, #116]	; (800bfd0 <USBD_SetConfig+0x150>)
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	461a      	mov	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf64:	4b1a      	ldr	r3, [pc, #104]	; (800bfd0 <USBD_SetConfig+0x150>)
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	4619      	mov	r1, r3
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7fe ff9d 	bl	800aeaa <USBD_SetClassConfig>
 800bf70:	4603      	mov	r3, r0
 800bf72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00f      	beq.n	800bf9a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bf7a:	6839      	ldr	r1, [r7, #0]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 f918 	bl	800c1b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	4619      	mov	r1, r3
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7fe ffa9 	bl	800aee2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2202      	movs	r2, #2
 800bf94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf98:	e014      	b.n	800bfc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f9d4 	bl	800c348 <USBD_CtlSendStatus>
      break;
 800bfa0:	e010      	b.n	800bfc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f9d0 	bl	800c348 <USBD_CtlSendStatus>
      break;
 800bfa8:	e00c      	b.n	800bfc4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f900 	bl	800c1b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bfb2:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <USBD_SetConfig+0x150>)
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7fe ff92 	bl	800aee2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	73fb      	strb	r3, [r7, #15]
      break;
 800bfc2:	bf00      	nop
  }

  return ret;
 800bfc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	20000658 	.word	0x20000658

0800bfd4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	88db      	ldrh	r3, [r3, #6]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d004      	beq.n	800bff0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bfe6:	6839      	ldr	r1, [r7, #0]
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 f8e2 	bl	800c1b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bfee:	e023      	b.n	800c038 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	dc02      	bgt.n	800c002 <USBD_GetConfig+0x2e>
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	dc03      	bgt.n	800c008 <USBD_GetConfig+0x34>
 800c000:	e015      	b.n	800c02e <USBD_GetConfig+0x5a>
 800c002:	2b03      	cmp	r3, #3
 800c004:	d00b      	beq.n	800c01e <USBD_GetConfig+0x4a>
 800c006:	e012      	b.n	800c02e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3308      	adds	r3, #8
 800c012:	2201      	movs	r2, #1
 800c014:	4619      	mov	r1, r3
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 f93c 	bl	800c294 <USBD_CtlSendData>
        break;
 800c01c:	e00c      	b.n	800c038 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	3304      	adds	r3, #4
 800c022:	2201      	movs	r2, #1
 800c024:	4619      	mov	r1, r3
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f934 	bl	800c294 <USBD_CtlSendData>
        break;
 800c02c:	e004      	b.n	800c038 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c02e:	6839      	ldr	r1, [r7, #0]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f8be 	bl	800c1b2 <USBD_CtlError>
        break;
 800c036:	bf00      	nop
}
 800c038:	bf00      	nop
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c050:	b2db      	uxtb	r3, r3
 800c052:	3b01      	subs	r3, #1
 800c054:	2b02      	cmp	r3, #2
 800c056:	d81e      	bhi.n	800c096 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	88db      	ldrh	r3, [r3, #6]
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d004      	beq.n	800c06a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c060:	6839      	ldr	r1, [r7, #0]
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 f8a5 	bl	800c1b2 <USBD_CtlError>
        break;
 800c068:	e01a      	b.n	800c0a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2201      	movs	r2, #1
 800c06e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c076:	2b00      	cmp	r3, #0
 800c078:	d005      	beq.n	800c086 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	f043 0202 	orr.w	r2, r3, #2
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	330c      	adds	r3, #12
 800c08a:	2202      	movs	r2, #2
 800c08c:	4619      	mov	r1, r3
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f900 	bl	800c294 <USBD_CtlSendData>
      break;
 800c094:	e004      	b.n	800c0a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f88a 	bl	800c1b2 <USBD_CtlError>
      break;
 800c09e:	bf00      	nop
  }
}
 800c0a0:	bf00      	nop
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	885b      	ldrh	r3, [r3, #2]
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d107      	bne.n	800c0ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 f940 	bl	800c348 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c0c8:	e013      	b.n	800c0f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	885b      	ldrh	r3, [r3, #2]
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	d10b      	bne.n	800c0ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	889b      	ldrh	r3, [r3, #4]
 800c0d6:	0a1b      	lsrs	r3, r3, #8
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	b2da      	uxtb	r2, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f930 	bl	800c348 <USBD_CtlSendStatus>
}
 800c0e8:	e003      	b.n	800c0f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f860 	bl	800c1b2 <USBD_CtlError>
}
 800c0f2:	bf00      	nop
 800c0f4:	3708      	adds	r7, #8
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b082      	sub	sp, #8
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	3b01      	subs	r3, #1
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d80b      	bhi.n	800c12a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	885b      	ldrh	r3, [r3, #2]
 800c116:	2b01      	cmp	r3, #1
 800c118:	d10c      	bne.n	800c134 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f910 	bl	800c348 <USBD_CtlSendStatus>
      }
      break;
 800c128:	e004      	b.n	800c134 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c12a:	6839      	ldr	r1, [r7, #0]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 f840 	bl	800c1b2 <USBD_CtlError>
      break;
 800c132:	e000      	b.n	800c136 <USBD_ClrFeature+0x3c>
      break;
 800c134:	bf00      	nop
  }
}
 800c136:	bf00      	nop
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b084      	sub	sp, #16
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
 800c146:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	781a      	ldrb	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	3301      	adds	r3, #1
 800c158:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	781a      	ldrb	r2, [r3, #0]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3301      	adds	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f7ff fa41 	bl	800b5f0 <SWAPBYTE>
 800c16e:	4603      	mov	r3, r0
 800c170:	461a      	mov	r2, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	3301      	adds	r3, #1
 800c17a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	3301      	adds	r3, #1
 800c180:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f7ff fa34 	bl	800b5f0 <SWAPBYTE>
 800c188:	4603      	mov	r3, r0
 800c18a:	461a      	mov	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	3301      	adds	r3, #1
 800c194:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3301      	adds	r3, #1
 800c19a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	f7ff fa27 	bl	800b5f0 <SWAPBYTE>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	80da      	strh	r2, [r3, #6]
}
 800c1aa:	bf00      	nop
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b082      	sub	sp, #8
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1bc:	2180      	movs	r1, #128	; 0x80
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fcd6 	bl	800cb70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fcd2 	bl	800cb70 <USBD_LL_StallEP>
}
 800c1cc:	bf00      	nop
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b086      	sub	sp, #24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d036      	beq.n	800c258 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c1ee:	6938      	ldr	r0, [r7, #16]
 800c1f0:	f000 f836 	bl	800c260 <USBD_GetLen>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	005b      	lsls	r3, r3, #1
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c202:	7dfb      	ldrb	r3, [r7, #23]
 800c204:	68ba      	ldr	r2, [r7, #8]
 800c206:	4413      	add	r3, r2
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	7812      	ldrb	r2, [r2, #0]
 800c20c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c20e:	7dfb      	ldrb	r3, [r7, #23]
 800c210:	3301      	adds	r3, #1
 800c212:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c214:	7dfb      	ldrb	r3, [r7, #23]
 800c216:	68ba      	ldr	r2, [r7, #8]
 800c218:	4413      	add	r3, r2
 800c21a:	2203      	movs	r2, #3
 800c21c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
 800c220:	3301      	adds	r3, #1
 800c222:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c224:	e013      	b.n	800c24e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c226:	7dfb      	ldrb	r3, [r7, #23]
 800c228:	68ba      	ldr	r2, [r7, #8]
 800c22a:	4413      	add	r3, r2
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	7812      	ldrb	r2, [r2, #0]
 800c230:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	3301      	adds	r3, #1
 800c236:	613b      	str	r3, [r7, #16]
    idx++;
 800c238:	7dfb      	ldrb	r3, [r7, #23]
 800c23a:	3301      	adds	r3, #1
 800c23c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c23e:	7dfb      	ldrb	r3, [r7, #23]
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	4413      	add	r3, r2
 800c244:	2200      	movs	r2, #0
 800c246:	701a      	strb	r2, [r3, #0]
    idx++;
 800c248:	7dfb      	ldrb	r3, [r7, #23]
 800c24a:	3301      	adds	r3, #1
 800c24c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1e7      	bne.n	800c226 <USBD_GetString+0x52>
 800c256:	e000      	b.n	800c25a <USBD_GetString+0x86>
    return;
 800c258:	bf00      	nop
  }
}
 800c25a:	3718      	adds	r7, #24
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c260:	b480      	push	{r7}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c268:	2300      	movs	r3, #0
 800c26a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c270:	e005      	b.n	800c27e <USBD_GetLen+0x1e>
  {
    len++;
 800c272:	7bfb      	ldrb	r3, [r7, #15]
 800c274:	3301      	adds	r3, #1
 800c276:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	3301      	adds	r3, #1
 800c27c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1f5      	bne.n	800c272 <USBD_GetLen+0x12>
  }

  return len;
 800c286:	7bfb      	ldrb	r3, [r7, #15]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3714      	adds	r7, #20
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2202      	movs	r2, #2
 800c2a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	68ba      	ldr	r2, [r7, #8]
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f000 fce1 	bl	800cc82 <USBD_LL_Transmit>

  return USBD_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	60f8      	str	r0, [r7, #12]
 800c2d2:	60b9      	str	r1, [r7, #8]
 800c2d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	2100      	movs	r1, #0
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f000 fcd0 	bl	800cc82 <USBD_LL_Transmit>

  return USBD_OK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2203      	movs	r2, #3
 800c2fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	2100      	movs	r1, #0
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f000 fcd4 	bl	800ccc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c31c:	2300      	movs	r3, #0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b084      	sub	sp, #16
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	60f8      	str	r0, [r7, #12]
 800c32e:	60b9      	str	r1, [r7, #8]
 800c330:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	2100      	movs	r1, #0
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f000 fcc3 	bl	800ccc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2204      	movs	r2, #4
 800c354:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c358:	2300      	movs	r3, #0
 800c35a:	2200      	movs	r2, #0
 800c35c:	2100      	movs	r1, #0
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fc8f 	bl	800cc82 <USBD_LL_Transmit>

  return USBD_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3708      	adds	r7, #8
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b082      	sub	sp, #8
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2205      	movs	r2, #5
 800c37a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c37e:	2300      	movs	r3, #0
 800c380:	2200      	movs	r2, #0
 800c382:	2100      	movs	r1, #0
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 fc9d 	bl	800ccc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c398:	2200      	movs	r2, #0
 800c39a:	4912      	ldr	r1, [pc, #72]	; (800c3e4 <MX_USB_DEVICE_Init+0x50>)
 800c39c:	4812      	ldr	r0, [pc, #72]	; (800c3e8 <MX_USB_DEVICE_Init+0x54>)
 800c39e:	f7fe fd07 	bl	800adb0 <USBD_Init>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d001      	beq.n	800c3ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c3a8:	f7f5 fce0 	bl	8001d6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c3ac:	490f      	ldr	r1, [pc, #60]	; (800c3ec <MX_USB_DEVICE_Init+0x58>)
 800c3ae:	480e      	ldr	r0, [pc, #56]	; (800c3e8 <MX_USB_DEVICE_Init+0x54>)
 800c3b0:	f7fe fd2e 	bl	800ae10 <USBD_RegisterClass>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d001      	beq.n	800c3be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c3ba:	f7f5 fcd7 	bl	8001d6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c3be:	490c      	ldr	r1, [pc, #48]	; (800c3f0 <MX_USB_DEVICE_Init+0x5c>)
 800c3c0:	4809      	ldr	r0, [pc, #36]	; (800c3e8 <MX_USB_DEVICE_Init+0x54>)
 800c3c2:	f7fe fc1f 	bl	800ac04 <USBD_CDC_RegisterInterface>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d001      	beq.n	800c3d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c3cc:	f7f5 fcce 	bl	8001d6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c3d0:	4805      	ldr	r0, [pc, #20]	; (800c3e8 <MX_USB_DEVICE_Init+0x54>)
 800c3d2:	f7fe fd53 	bl	800ae7c <USBD_Start>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c3dc:	f7f5 fcc6 	bl	8001d6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3e0:	bf00      	nop
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	200000dc 	.word	0x200000dc
 800c3e8:	2000065c 	.word	0x2000065c
 800c3ec:	20000048 	.word	0x20000048
 800c3f0:	200000c8 	.word	0x200000c8

0800c3f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	4905      	ldr	r1, [pc, #20]	; (800c410 <CDC_Init_FS+0x1c>)
 800c3fc:	4805      	ldr	r0, [pc, #20]	; (800c414 <CDC_Init_FS+0x20>)
 800c3fe:	f7fe fc1b 	bl	800ac38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c402:	4905      	ldr	r1, [pc, #20]	; (800c418 <CDC_Init_FS+0x24>)
 800c404:	4803      	ldr	r0, [pc, #12]	; (800c414 <CDC_Init_FS+0x20>)
 800c406:	f7fe fc39 	bl	800ac7c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c40a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	20001138 	.word	0x20001138
 800c414:	2000065c 	.word	0x2000065c
 800c418:	20000938 	.word	0x20000938

0800c41c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c41c:	b480      	push	{r7}
 800c41e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c420:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c422:	4618      	mov	r0, r3
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	4603      	mov	r3, r0
 800c434:	6039      	str	r1, [r7, #0]
 800c436:	71fb      	strb	r3, [r7, #7]
 800c438:	4613      	mov	r3, r2
 800c43a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c43c:	79fb      	ldrb	r3, [r7, #7]
 800c43e:	2b23      	cmp	r3, #35	; 0x23
 800c440:	d84a      	bhi.n	800c4d8 <CDC_Control_FS+0xac>
 800c442:	a201      	add	r2, pc, #4	; (adr r2, 800c448 <CDC_Control_FS+0x1c>)
 800c444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c448:	0800c4d9 	.word	0x0800c4d9
 800c44c:	0800c4d9 	.word	0x0800c4d9
 800c450:	0800c4d9 	.word	0x0800c4d9
 800c454:	0800c4d9 	.word	0x0800c4d9
 800c458:	0800c4d9 	.word	0x0800c4d9
 800c45c:	0800c4d9 	.word	0x0800c4d9
 800c460:	0800c4d9 	.word	0x0800c4d9
 800c464:	0800c4d9 	.word	0x0800c4d9
 800c468:	0800c4d9 	.word	0x0800c4d9
 800c46c:	0800c4d9 	.word	0x0800c4d9
 800c470:	0800c4d9 	.word	0x0800c4d9
 800c474:	0800c4d9 	.word	0x0800c4d9
 800c478:	0800c4d9 	.word	0x0800c4d9
 800c47c:	0800c4d9 	.word	0x0800c4d9
 800c480:	0800c4d9 	.word	0x0800c4d9
 800c484:	0800c4d9 	.word	0x0800c4d9
 800c488:	0800c4d9 	.word	0x0800c4d9
 800c48c:	0800c4d9 	.word	0x0800c4d9
 800c490:	0800c4d9 	.word	0x0800c4d9
 800c494:	0800c4d9 	.word	0x0800c4d9
 800c498:	0800c4d9 	.word	0x0800c4d9
 800c49c:	0800c4d9 	.word	0x0800c4d9
 800c4a0:	0800c4d9 	.word	0x0800c4d9
 800c4a4:	0800c4d9 	.word	0x0800c4d9
 800c4a8:	0800c4d9 	.word	0x0800c4d9
 800c4ac:	0800c4d9 	.word	0x0800c4d9
 800c4b0:	0800c4d9 	.word	0x0800c4d9
 800c4b4:	0800c4d9 	.word	0x0800c4d9
 800c4b8:	0800c4d9 	.word	0x0800c4d9
 800c4bc:	0800c4d9 	.word	0x0800c4d9
 800c4c0:	0800c4d9 	.word	0x0800c4d9
 800c4c4:	0800c4d9 	.word	0x0800c4d9
 800c4c8:	0800c4d9 	.word	0x0800c4d9
 800c4cc:	0800c4d9 	.word	0x0800c4d9
 800c4d0:	0800c4d9 	.word	0x0800c4d9
 800c4d4:	0800c4d9 	.word	0x0800c4d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c4d8:	bf00      	nop
  }

  return (USBD_OK);
 800c4da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c4f2:	6879      	ldr	r1, [r7, #4]
 800c4f4:	4805      	ldr	r0, [pc, #20]	; (800c50c <CDC_Receive_FS+0x24>)
 800c4f6:	f7fe fbc1 	bl	800ac7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c4fa:	4804      	ldr	r0, [pc, #16]	; (800c50c <CDC_Receive_FS+0x24>)
 800c4fc:	f7fe fc22 	bl	800ad44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c500:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c502:	4618      	mov	r0, r3
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	2000065c 	.word	0x2000065c

0800c510 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	460b      	mov	r3, r1
 800c51a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c51c:	2300      	movs	r3, #0
 800c51e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c520:	4b0d      	ldr	r3, [pc, #52]	; (800c558 <CDC_Transmit_FS+0x48>)
 800c522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c526:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d001      	beq.n	800c536 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c532:	2301      	movs	r3, #1
 800c534:	e00b      	b.n	800c54e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c536:	887b      	ldrh	r3, [r7, #2]
 800c538:	461a      	mov	r2, r3
 800c53a:	6879      	ldr	r1, [r7, #4]
 800c53c:	4806      	ldr	r0, [pc, #24]	; (800c558 <CDC_Transmit_FS+0x48>)
 800c53e:	f7fe fb7b 	bl	800ac38 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c542:	4805      	ldr	r0, [pc, #20]	; (800c558 <CDC_Transmit_FS+0x48>)
 800c544:	f7fe fbb8 	bl	800acb8 <USBD_CDC_TransmitPacket>
 800c548:	4603      	mov	r3, r0
 800c54a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	2000065c 	.word	0x2000065c

0800c55c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b087      	sub	sp, #28
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	4613      	mov	r3, r2
 800c568:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c56a:	2300      	movs	r3, #0
 800c56c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c56e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c572:	4618      	mov	r0, r3
 800c574:	371c      	adds	r7, #28
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
	...

0800c580 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	4603      	mov	r3, r0
 800c588:	6039      	str	r1, [r7, #0]
 800c58a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	2212      	movs	r2, #18
 800c590:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c592:	4b03      	ldr	r3, [pc, #12]	; (800c5a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c594:	4618      	mov	r0, r3
 800c596:	370c      	adds	r7, #12
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr
 800c5a0:	200000f8 	.word	0x200000f8

0800c5a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	6039      	str	r1, [r7, #0]
 800c5ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	2204      	movs	r2, #4
 800c5b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c5b6:	4b03      	ldr	r3, [pc, #12]	; (800c5c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	2000010c 	.word	0x2000010c

0800c5c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	6039      	str	r1, [r7, #0]
 800c5d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5d4:	79fb      	ldrb	r3, [r7, #7]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d105      	bne.n	800c5e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	4907      	ldr	r1, [pc, #28]	; (800c5fc <USBD_FS_ProductStrDescriptor+0x34>)
 800c5de:	4808      	ldr	r0, [pc, #32]	; (800c600 <USBD_FS_ProductStrDescriptor+0x38>)
 800c5e0:	f7ff fdf8 	bl	800c1d4 <USBD_GetString>
 800c5e4:	e004      	b.n	800c5f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c5e6:	683a      	ldr	r2, [r7, #0]
 800c5e8:	4904      	ldr	r1, [pc, #16]	; (800c5fc <USBD_FS_ProductStrDescriptor+0x34>)
 800c5ea:	4805      	ldr	r0, [pc, #20]	; (800c600 <USBD_FS_ProductStrDescriptor+0x38>)
 800c5ec:	f7ff fdf2 	bl	800c1d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5f0:	4b02      	ldr	r3, [pc, #8]	; (800c5fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20001938 	.word	0x20001938
 800c600:	080101c8 	.word	0x080101c8

0800c604 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	4603      	mov	r3, r0
 800c60c:	6039      	str	r1, [r7, #0]
 800c60e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c610:	683a      	ldr	r2, [r7, #0]
 800c612:	4904      	ldr	r1, [pc, #16]	; (800c624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c614:	4804      	ldr	r0, [pc, #16]	; (800c628 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c616:	f7ff fddd 	bl	800c1d4 <USBD_GetString>
  return USBD_StrDesc;
 800c61a:	4b02      	ldr	r3, [pc, #8]	; (800c624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	20001938 	.word	0x20001938
 800c628:	080101e0 	.word	0x080101e0

0800c62c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	4603      	mov	r3, r0
 800c634:	6039      	str	r1, [r7, #0]
 800c636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	221a      	movs	r2, #26
 800c63c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c63e:	f000 f843 	bl	800c6c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c642:	4b02      	ldr	r3, [pc, #8]	; (800c64c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c644:	4618      	mov	r0, r3
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	20000110 	.word	0x20000110

0800c650 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	4603      	mov	r3, r0
 800c658:	6039      	str	r1, [r7, #0]
 800c65a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c65c:	79fb      	ldrb	r3, [r7, #7]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d105      	bne.n	800c66e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	4907      	ldr	r1, [pc, #28]	; (800c684 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c666:	4808      	ldr	r0, [pc, #32]	; (800c688 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c668:	f7ff fdb4 	bl	800c1d4 <USBD_GetString>
 800c66c:	e004      	b.n	800c678 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	4904      	ldr	r1, [pc, #16]	; (800c684 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c672:	4805      	ldr	r0, [pc, #20]	; (800c688 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c674:	f7ff fdae 	bl	800c1d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c678:	4b02      	ldr	r3, [pc, #8]	; (800c684 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	20001938 	.word	0x20001938
 800c688:	080101f4 	.word	0x080101f4

0800c68c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	4603      	mov	r3, r0
 800c694:	6039      	str	r1, [r7, #0]
 800c696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c698:	79fb      	ldrb	r3, [r7, #7]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d105      	bne.n	800c6aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	4907      	ldr	r1, [pc, #28]	; (800c6c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c6a2:	4808      	ldr	r0, [pc, #32]	; (800c6c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c6a4:	f7ff fd96 	bl	800c1d4 <USBD_GetString>
 800c6a8:	e004      	b.n	800c6b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c6aa:	683a      	ldr	r2, [r7, #0]
 800c6ac:	4904      	ldr	r1, [pc, #16]	; (800c6c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c6ae:	4805      	ldr	r0, [pc, #20]	; (800c6c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c6b0:	f7ff fd90 	bl	800c1d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6b4:	4b02      	ldr	r3, [pc, #8]	; (800c6c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3708      	adds	r7, #8
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	20001938 	.word	0x20001938
 800c6c4:	08010200 	.word	0x08010200

0800c6c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c6ce:	4b0f      	ldr	r3, [pc, #60]	; (800c70c <Get_SerialNum+0x44>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c6d4:	4b0e      	ldr	r3, [pc, #56]	; (800c710 <Get_SerialNum+0x48>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c6da:	4b0e      	ldr	r3, [pc, #56]	; (800c714 <Get_SerialNum+0x4c>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d009      	beq.n	800c702 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c6ee:	2208      	movs	r2, #8
 800c6f0:	4909      	ldr	r1, [pc, #36]	; (800c718 <Get_SerialNum+0x50>)
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f000 f814 	bl	800c720 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c6f8:	2204      	movs	r2, #4
 800c6fa:	4908      	ldr	r1, [pc, #32]	; (800c71c <Get_SerialNum+0x54>)
 800c6fc:	68b8      	ldr	r0, [r7, #8]
 800c6fe:	f000 f80f 	bl	800c720 <IntToUnicode>
  }
}
 800c702:	bf00      	nop
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	1fff7a10 	.word	0x1fff7a10
 800c710:	1fff7a14 	.word	0x1fff7a14
 800c714:	1fff7a18 	.word	0x1fff7a18
 800c718:	20000112 	.word	0x20000112
 800c71c:	20000122 	.word	0x20000122

0800c720 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c720:	b480      	push	{r7}
 800c722:	b087      	sub	sp, #28
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	4613      	mov	r3, r2
 800c72c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c732:	2300      	movs	r3, #0
 800c734:	75fb      	strb	r3, [r7, #23]
 800c736:	e027      	b.n	800c788 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	0f1b      	lsrs	r3, r3, #28
 800c73c:	2b09      	cmp	r3, #9
 800c73e:	d80b      	bhi.n	800c758 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	0f1b      	lsrs	r3, r3, #28
 800c744:	b2da      	uxtb	r2, r3
 800c746:	7dfb      	ldrb	r3, [r7, #23]
 800c748:	005b      	lsls	r3, r3, #1
 800c74a:	4619      	mov	r1, r3
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	440b      	add	r3, r1
 800c750:	3230      	adds	r2, #48	; 0x30
 800c752:	b2d2      	uxtb	r2, r2
 800c754:	701a      	strb	r2, [r3, #0]
 800c756:	e00a      	b.n	800c76e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	0f1b      	lsrs	r3, r3, #28
 800c75c:	b2da      	uxtb	r2, r3
 800c75e:	7dfb      	ldrb	r3, [r7, #23]
 800c760:	005b      	lsls	r3, r3, #1
 800c762:	4619      	mov	r1, r3
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	440b      	add	r3, r1
 800c768:	3237      	adds	r2, #55	; 0x37
 800c76a:	b2d2      	uxtb	r2, r2
 800c76c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	011b      	lsls	r3, r3, #4
 800c772:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c774:	7dfb      	ldrb	r3, [r7, #23]
 800c776:	005b      	lsls	r3, r3, #1
 800c778:	3301      	adds	r3, #1
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	4413      	add	r3, r2
 800c77e:	2200      	movs	r2, #0
 800c780:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c782:	7dfb      	ldrb	r3, [r7, #23]
 800c784:	3301      	adds	r3, #1
 800c786:	75fb      	strb	r3, [r7, #23]
 800c788:	7dfa      	ldrb	r2, [r7, #23]
 800c78a:	79fb      	ldrb	r3, [r7, #7]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d3d3      	bcc.n	800c738 <IntToUnicode+0x18>
  }
}
 800c790:	bf00      	nop
 800c792:	bf00      	nop
 800c794:	371c      	adds	r7, #28
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
	...

0800c7a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b08a      	sub	sp, #40	; 0x28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7a8:	f107 0314 	add.w	r3, r7, #20
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	601a      	str	r2, [r3, #0]
 800c7b0:	605a      	str	r2, [r3, #4]
 800c7b2:	609a      	str	r2, [r3, #8]
 800c7b4:	60da      	str	r2, [r3, #12]
 800c7b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7c0:	d13a      	bne.n	800c838 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	613b      	str	r3, [r7, #16]
 800c7c6:	4b1e      	ldr	r3, [pc, #120]	; (800c840 <HAL_PCD_MspInit+0xa0>)
 800c7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ca:	4a1d      	ldr	r2, [pc, #116]	; (800c840 <HAL_PCD_MspInit+0xa0>)
 800c7cc:	f043 0301 	orr.w	r3, r3, #1
 800c7d0:	6313      	str	r3, [r2, #48]	; 0x30
 800c7d2:	4b1b      	ldr	r3, [pc, #108]	; (800c840 <HAL_PCD_MspInit+0xa0>)
 800c7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d6:	f003 0301 	and.w	r3, r3, #1
 800c7da:	613b      	str	r3, [r7, #16]
 800c7dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c7de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c7e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7e4:	2302      	movs	r3, #2
 800c7e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7ec:	2303      	movs	r3, #3
 800c7ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c7f0:	230a      	movs	r3, #10
 800c7f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7f4:	f107 0314 	add.w	r3, r7, #20
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	4812      	ldr	r0, [pc, #72]	; (800c844 <HAL_PCD_MspInit+0xa4>)
 800c7fc:	f7f6 ff4a 	bl	8003694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c800:	4b0f      	ldr	r3, [pc, #60]	; (800c840 <HAL_PCD_MspInit+0xa0>)
 800c802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c804:	4a0e      	ldr	r2, [pc, #56]	; (800c840 <HAL_PCD_MspInit+0xa0>)
 800c806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c80a:	6353      	str	r3, [r2, #52]	; 0x34
 800c80c:	2300      	movs	r3, #0
 800c80e:	60fb      	str	r3, [r7, #12]
 800c810:	4b0b      	ldr	r3, [pc, #44]	; (800c840 <HAL_PCD_MspInit+0xa0>)
 800c812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c814:	4a0a      	ldr	r2, [pc, #40]	; (800c840 <HAL_PCD_MspInit+0xa0>)
 800c816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c81a:	6453      	str	r3, [r2, #68]	; 0x44
 800c81c:	4b08      	ldr	r3, [pc, #32]	; (800c840 <HAL_PCD_MspInit+0xa0>)
 800c81e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c824:	60fb      	str	r3, [r7, #12]
 800c826:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c828:	2200      	movs	r2, #0
 800c82a:	2100      	movs	r1, #0
 800c82c:	2043      	movs	r0, #67	; 0x43
 800c82e:	f7f6 fb4e 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c832:	2043      	movs	r0, #67	; 0x43
 800c834:	f7f6 fb67 	bl	8002f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c838:	bf00      	nop
 800c83a:	3728      	adds	r7, #40	; 0x28
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	40023800 	.word	0x40023800
 800c844:	40020000 	.word	0x40020000

0800c848 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c85c:	4619      	mov	r1, r3
 800c85e:	4610      	mov	r0, r2
 800c860:	f7fe fb59 	bl	800af16 <USBD_LL_SetupStage>
}
 800c864:	bf00      	nop
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	460b      	mov	r3, r1
 800c876:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c87e:	78fa      	ldrb	r2, [r7, #3]
 800c880:	6879      	ldr	r1, [r7, #4]
 800c882:	4613      	mov	r3, r2
 800c884:	00db      	lsls	r3, r3, #3
 800c886:	4413      	add	r3, r2
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	440b      	add	r3, r1
 800c88c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	78fb      	ldrb	r3, [r7, #3]
 800c894:	4619      	mov	r1, r3
 800c896:	f7fe fb93 	bl	800afc0 <USBD_LL_DataOutStage>
}
 800c89a:	bf00      	nop
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b082      	sub	sp, #8
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c8b4:	78fa      	ldrb	r2, [r7, #3]
 800c8b6:	6879      	ldr	r1, [r7, #4]
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	00db      	lsls	r3, r3, #3
 800c8bc:	4413      	add	r3, r2
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	440b      	add	r3, r1
 800c8c2:	334c      	adds	r3, #76	; 0x4c
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	78fb      	ldrb	r3, [r7, #3]
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	f7fe fc2c 	bl	800b126 <USBD_LL_DataInStage>
}
 800c8ce:	bf00      	nop
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b082      	sub	sp, #8
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fe fd60 	bl	800b3aa <USBD_LL_SOF>
}
 800c8ea:	bf00      	nop
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b084      	sub	sp, #16
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	2b02      	cmp	r3, #2
 800c904:	d001      	beq.n	800c90a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c906:	f7f5 fa31 	bl	8001d6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c910:	7bfa      	ldrb	r2, [r7, #15]
 800c912:	4611      	mov	r1, r2
 800c914:	4618      	mov	r0, r3
 800c916:	f7fe fd0a 	bl	800b32e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c920:	4618      	mov	r0, r3
 800c922:	f7fe fcb2 	bl	800b28a <USBD_LL_Reset>
}
 800c926:	bf00      	nop
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
	...

0800c930 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fe fd05 	bl	800b34e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	6812      	ldr	r2, [r2, #0]
 800c952:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c956:	f043 0301 	orr.w	r3, r3, #1
 800c95a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d005      	beq.n	800c970 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c964:	4b04      	ldr	r3, [pc, #16]	; (800c978 <HAL_PCD_SuspendCallback+0x48>)
 800c966:	691b      	ldr	r3, [r3, #16]
 800c968:	4a03      	ldr	r2, [pc, #12]	; (800c978 <HAL_PCD_SuspendCallback+0x48>)
 800c96a:	f043 0306 	orr.w	r3, r3, #6
 800c96e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c970:	bf00      	nop
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	e000ed00 	.word	0xe000ed00

0800c97c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7fe fcf5 	bl	800b37a <USBD_LL_Resume>
}
 800c990:	bf00      	nop
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9aa:	78fa      	ldrb	r2, [r7, #3]
 800c9ac:	4611      	mov	r1, r2
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fe fd4d 	bl	800b44e <USBD_LL_IsoOUTIncomplete>
}
 800c9b4:	bf00      	nop
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9ce:	78fa      	ldrb	r2, [r7, #3]
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7fe fd09 	bl	800b3ea <USBD_LL_IsoINIncomplete>
}
 800c9d8:	bf00      	nop
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe fd5f 	bl	800b4b2 <USBD_LL_DevConnected>
}
 800c9f4:	bf00      	nop
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fe fd5c 	bl	800b4c8 <USBD_LL_DevDisconnected>
}
 800ca10:	bf00      	nop
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d13c      	bne.n	800caa2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ca28:	4a20      	ldr	r2, [pc, #128]	; (800caac <USBD_LL_Init+0x94>)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4a1e      	ldr	r2, [pc, #120]	; (800caac <USBD_LL_Init+0x94>)
 800ca34:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ca38:	4b1c      	ldr	r3, [pc, #112]	; (800caac <USBD_LL_Init+0x94>)
 800ca3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ca3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ca40:	4b1a      	ldr	r3, [pc, #104]	; (800caac <USBD_LL_Init+0x94>)
 800ca42:	2204      	movs	r2, #4
 800ca44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ca46:	4b19      	ldr	r3, [pc, #100]	; (800caac <USBD_LL_Init+0x94>)
 800ca48:	2202      	movs	r2, #2
 800ca4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ca4c:	4b17      	ldr	r3, [pc, #92]	; (800caac <USBD_LL_Init+0x94>)
 800ca4e:	2200      	movs	r2, #0
 800ca50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca52:	4b16      	ldr	r3, [pc, #88]	; (800caac <USBD_LL_Init+0x94>)
 800ca54:	2202      	movs	r2, #2
 800ca56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ca58:	4b14      	ldr	r3, [pc, #80]	; (800caac <USBD_LL_Init+0x94>)
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ca5e:	4b13      	ldr	r3, [pc, #76]	; (800caac <USBD_LL_Init+0x94>)
 800ca60:	2200      	movs	r2, #0
 800ca62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ca64:	4b11      	ldr	r3, [pc, #68]	; (800caac <USBD_LL_Init+0x94>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ca6a:	4b10      	ldr	r3, [pc, #64]	; (800caac <USBD_LL_Init+0x94>)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ca70:	4b0e      	ldr	r3, [pc, #56]	; (800caac <USBD_LL_Init+0x94>)
 800ca72:	2200      	movs	r2, #0
 800ca74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ca76:	480d      	ldr	r0, [pc, #52]	; (800caac <USBD_LL_Init+0x94>)
 800ca78:	f7f9 fede 	bl	8006838 <HAL_PCD_Init>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d001      	beq.n	800ca86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ca82:	f7f5 f973 	bl	8001d6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ca86:	2180      	movs	r1, #128	; 0x80
 800ca88:	4808      	ldr	r0, [pc, #32]	; (800caac <USBD_LL_Init+0x94>)
 800ca8a:	f7fb f936 	bl	8007cfa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ca8e:	2240      	movs	r2, #64	; 0x40
 800ca90:	2100      	movs	r1, #0
 800ca92:	4806      	ldr	r0, [pc, #24]	; (800caac <USBD_LL_Init+0x94>)
 800ca94:	f7fb f8ea 	bl	8007c6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ca98:	2280      	movs	r2, #128	; 0x80
 800ca9a:	2101      	movs	r1, #1
 800ca9c:	4803      	ldr	r0, [pc, #12]	; (800caac <USBD_LL_Init+0x94>)
 800ca9e:	f7fb f8e5 	bl	8007c6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	20001b38 	.word	0x20001b38

0800cab0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7f9 ffd3 	bl	8006a72 <HAL_PCD_Start>
 800cacc:	4603      	mov	r3, r0
 800cace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cad0:	7bfb      	ldrb	r3, [r7, #15]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 f942 	bl	800cd5c <USBD_Get_USB_Status>
 800cad8:	4603      	mov	r3, r0
 800cada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cadc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	4608      	mov	r0, r1
 800caf0:	4611      	mov	r1, r2
 800caf2:	461a      	mov	r2, r3
 800caf4:	4603      	mov	r3, r0
 800caf6:	70fb      	strb	r3, [r7, #3]
 800caf8:	460b      	mov	r3, r1
 800cafa:	70bb      	strb	r3, [r7, #2]
 800cafc:	4613      	mov	r3, r2
 800cafe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb00:	2300      	movs	r3, #0
 800cb02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cb0e:	78bb      	ldrb	r3, [r7, #2]
 800cb10:	883a      	ldrh	r2, [r7, #0]
 800cb12:	78f9      	ldrb	r1, [r7, #3]
 800cb14:	f7fa fca4 	bl	8007460 <HAL_PCD_EP_Open>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb1c:	7bfb      	ldrb	r3, [r7, #15]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 f91c 	bl	800cd5c <USBD_Get_USB_Status>
 800cb24:	4603      	mov	r3, r0
 800cb26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb28:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb4c:	78fa      	ldrb	r2, [r7, #3]
 800cb4e:	4611      	mov	r1, r2
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7fa fced 	bl	8007530 <HAL_PCD_EP_Close>
 800cb56:	4603      	mov	r3, r0
 800cb58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb5a:	7bfb      	ldrb	r3, [r7, #15]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f000 f8fd 	bl	800cd5c <USBD_Get_USB_Status>
 800cb62:	4603      	mov	r3, r0
 800cb64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb66:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	460b      	mov	r3, r1
 800cb7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb8a:	78fa      	ldrb	r2, [r7, #3]
 800cb8c:	4611      	mov	r1, r2
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fa fdc5 	bl	800771e <HAL_PCD_EP_SetStall>
 800cb94:	4603      	mov	r3, r0
 800cb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f000 f8de 	bl	800cd5c <USBD_Get_USB_Status>
 800cba0:	4603      	mov	r3, r0
 800cba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbc8:	78fa      	ldrb	r2, [r7, #3]
 800cbca:	4611      	mov	r1, r2
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fa fe0a 	bl	80077e6 <HAL_PCD_EP_ClrStall>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbd6:	7bfb      	ldrb	r3, [r7, #15]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 f8bf 	bl	800cd5c <USBD_Get_USB_Status>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	da0b      	bge.n	800cc20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc08:	78fb      	ldrb	r3, [r7, #3]
 800cc0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc0e:	68f9      	ldr	r1, [r7, #12]
 800cc10:	4613      	mov	r3, r2
 800cc12:	00db      	lsls	r3, r3, #3
 800cc14:	4413      	add	r3, r2
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	440b      	add	r3, r1
 800cc1a:	333e      	adds	r3, #62	; 0x3e
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	e00b      	b.n	800cc38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc20:	78fb      	ldrb	r3, [r7, #3]
 800cc22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc26:	68f9      	ldr	r1, [r7, #12]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	00db      	lsls	r3, r3, #3
 800cc2c:	4413      	add	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	440b      	add	r3, r1
 800cc32:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800cc36:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc5e:	78fa      	ldrb	r2, [r7, #3]
 800cc60:	4611      	mov	r1, r2
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fa fbd7 	bl	8007416 <HAL_PCD_SetAddress>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 f874 	bl	800cd5c <USBD_Get_USB_Status>
 800cc74:	4603      	mov	r3, r0
 800cc76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc78:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b086      	sub	sp, #24
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	60f8      	str	r0, [r7, #12]
 800cc8a:	607a      	str	r2, [r7, #4]
 800cc8c:	603b      	str	r3, [r7, #0]
 800cc8e:	460b      	mov	r3, r1
 800cc90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc92:	2300      	movs	r3, #0
 800cc94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc96:	2300      	movs	r3, #0
 800cc98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cca0:	7af9      	ldrb	r1, [r7, #11]
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	f7fa fcf0 	bl	800768a <HAL_PCD_EP_Transmit>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 f853 	bl	800cd5c <USBD_Get_USB_Status>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ccba:	7dbb      	ldrb	r3, [r7, #22]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3718      	adds	r7, #24
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	607a      	str	r2, [r7, #4]
 800ccce:	603b      	str	r3, [r7, #0]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cce2:	7af9      	ldrb	r1, [r7, #11]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	f7fa fc6c 	bl	80075c4 <HAL_PCD_EP_Receive>
 800ccec:	4603      	mov	r3, r0
 800ccee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccf0:	7dfb      	ldrb	r3, [r7, #23]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 f832 	bl	800cd5c <USBD_Get_USB_Status>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ccfc:	7dbb      	ldrb	r3, [r7, #22]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b082      	sub	sp, #8
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	460b      	mov	r3, r1
 800cd10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd18:	78fa      	ldrb	r2, [r7, #3]
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fa fc9c 	bl	800765a <HAL_PCD_EP_GetRxCount>
 800cd22:	4603      	mov	r3, r0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cd34:	4b03      	ldr	r3, [pc, #12]	; (800cd44 <USBD_static_malloc+0x18>)
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	20002044 	.word	0x20002044

0800cd48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]

}
 800cd50:	bf00      	nop
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	4603      	mov	r3, r0
 800cd64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd66:	2300      	movs	r3, #0
 800cd68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cd6a:	79fb      	ldrb	r3, [r7, #7]
 800cd6c:	2b03      	cmp	r3, #3
 800cd6e:	d817      	bhi.n	800cda0 <USBD_Get_USB_Status+0x44>
 800cd70:	a201      	add	r2, pc, #4	; (adr r2, 800cd78 <USBD_Get_USB_Status+0x1c>)
 800cd72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd76:	bf00      	nop
 800cd78:	0800cd89 	.word	0x0800cd89
 800cd7c:	0800cd8f 	.word	0x0800cd8f
 800cd80:	0800cd95 	.word	0x0800cd95
 800cd84:	0800cd9b 	.word	0x0800cd9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd8c:	e00b      	b.n	800cda6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd8e:	2303      	movs	r3, #3
 800cd90:	73fb      	strb	r3, [r7, #15]
    break;
 800cd92:	e008      	b.n	800cda6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd94:	2301      	movs	r3, #1
 800cd96:	73fb      	strb	r3, [r7, #15]
    break;
 800cd98:	e005      	b.n	800cda6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd9e:	e002      	b.n	800cda6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cda0:	2303      	movs	r3, #3
 800cda2:	73fb      	strb	r3, [r7, #15]
    break;
 800cda4:	bf00      	nop
  }
  return usb_status;
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3714      	adds	r7, #20
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <__errno>:
 800cdb4:	4b01      	ldr	r3, [pc, #4]	; (800cdbc <__errno+0x8>)
 800cdb6:	6818      	ldr	r0, [r3, #0]
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	2000012c 	.word	0x2000012c

0800cdc0 <__libc_init_array>:
 800cdc0:	b570      	push	{r4, r5, r6, lr}
 800cdc2:	4d0d      	ldr	r5, [pc, #52]	; (800cdf8 <__libc_init_array+0x38>)
 800cdc4:	4c0d      	ldr	r4, [pc, #52]	; (800cdfc <__libc_init_array+0x3c>)
 800cdc6:	1b64      	subs	r4, r4, r5
 800cdc8:	10a4      	asrs	r4, r4, #2
 800cdca:	2600      	movs	r6, #0
 800cdcc:	42a6      	cmp	r6, r4
 800cdce:	d109      	bne.n	800cde4 <__libc_init_array+0x24>
 800cdd0:	4d0b      	ldr	r5, [pc, #44]	; (800ce00 <__libc_init_array+0x40>)
 800cdd2:	4c0c      	ldr	r4, [pc, #48]	; (800ce04 <__libc_init_array+0x44>)
 800cdd4:	f003 f97e 	bl	80100d4 <_init>
 800cdd8:	1b64      	subs	r4, r4, r5
 800cdda:	10a4      	asrs	r4, r4, #2
 800cddc:	2600      	movs	r6, #0
 800cdde:	42a6      	cmp	r6, r4
 800cde0:	d105      	bne.n	800cdee <__libc_init_array+0x2e>
 800cde2:	bd70      	pop	{r4, r5, r6, pc}
 800cde4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cde8:	4798      	blx	r3
 800cdea:	3601      	adds	r6, #1
 800cdec:	e7ee      	b.n	800cdcc <__libc_init_array+0xc>
 800cdee:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdf2:	4798      	blx	r3
 800cdf4:	3601      	adds	r6, #1
 800cdf6:	e7f2      	b.n	800cdde <__libc_init_array+0x1e>
 800cdf8:	08010688 	.word	0x08010688
 800cdfc:	08010688 	.word	0x08010688
 800ce00:	08010688 	.word	0x08010688
 800ce04:	0801068c 	.word	0x0801068c

0800ce08 <memset>:
 800ce08:	4402      	add	r2, r0
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d100      	bne.n	800ce12 <memset+0xa>
 800ce10:	4770      	bx	lr
 800ce12:	f803 1b01 	strb.w	r1, [r3], #1
 800ce16:	e7f9      	b.n	800ce0c <memset+0x4>

0800ce18 <__cvt>:
 800ce18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce1c:	ec55 4b10 	vmov	r4, r5, d0
 800ce20:	2d00      	cmp	r5, #0
 800ce22:	460e      	mov	r6, r1
 800ce24:	4619      	mov	r1, r3
 800ce26:	462b      	mov	r3, r5
 800ce28:	bfbb      	ittet	lt
 800ce2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ce2e:	461d      	movlt	r5, r3
 800ce30:	2300      	movge	r3, #0
 800ce32:	232d      	movlt	r3, #45	; 0x2d
 800ce34:	700b      	strb	r3, [r1, #0]
 800ce36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ce3c:	4691      	mov	r9, r2
 800ce3e:	f023 0820 	bic.w	r8, r3, #32
 800ce42:	bfbc      	itt	lt
 800ce44:	4622      	movlt	r2, r4
 800ce46:	4614      	movlt	r4, r2
 800ce48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce4c:	d005      	beq.n	800ce5a <__cvt+0x42>
 800ce4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ce52:	d100      	bne.n	800ce56 <__cvt+0x3e>
 800ce54:	3601      	adds	r6, #1
 800ce56:	2102      	movs	r1, #2
 800ce58:	e000      	b.n	800ce5c <__cvt+0x44>
 800ce5a:	2103      	movs	r1, #3
 800ce5c:	ab03      	add	r3, sp, #12
 800ce5e:	9301      	str	r3, [sp, #4]
 800ce60:	ab02      	add	r3, sp, #8
 800ce62:	9300      	str	r3, [sp, #0]
 800ce64:	ec45 4b10 	vmov	d0, r4, r5
 800ce68:	4653      	mov	r3, sl
 800ce6a:	4632      	mov	r2, r6
 800ce6c:	f000 fcec 	bl	800d848 <_dtoa_r>
 800ce70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ce74:	4607      	mov	r7, r0
 800ce76:	d102      	bne.n	800ce7e <__cvt+0x66>
 800ce78:	f019 0f01 	tst.w	r9, #1
 800ce7c:	d022      	beq.n	800cec4 <__cvt+0xac>
 800ce7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce82:	eb07 0906 	add.w	r9, r7, r6
 800ce86:	d110      	bne.n	800ceaa <__cvt+0x92>
 800ce88:	783b      	ldrb	r3, [r7, #0]
 800ce8a:	2b30      	cmp	r3, #48	; 0x30
 800ce8c:	d10a      	bne.n	800cea4 <__cvt+0x8c>
 800ce8e:	2200      	movs	r2, #0
 800ce90:	2300      	movs	r3, #0
 800ce92:	4620      	mov	r0, r4
 800ce94:	4629      	mov	r1, r5
 800ce96:	f7f3 fe1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce9a:	b918      	cbnz	r0, 800cea4 <__cvt+0x8c>
 800ce9c:	f1c6 0601 	rsb	r6, r6, #1
 800cea0:	f8ca 6000 	str.w	r6, [sl]
 800cea4:	f8da 3000 	ldr.w	r3, [sl]
 800cea8:	4499      	add	r9, r3
 800ceaa:	2200      	movs	r2, #0
 800ceac:	2300      	movs	r3, #0
 800ceae:	4620      	mov	r0, r4
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	f7f3 fe11 	bl	8000ad8 <__aeabi_dcmpeq>
 800ceb6:	b108      	cbz	r0, 800cebc <__cvt+0xa4>
 800ceb8:	f8cd 900c 	str.w	r9, [sp, #12]
 800cebc:	2230      	movs	r2, #48	; 0x30
 800cebe:	9b03      	ldr	r3, [sp, #12]
 800cec0:	454b      	cmp	r3, r9
 800cec2:	d307      	bcc.n	800ced4 <__cvt+0xbc>
 800cec4:	9b03      	ldr	r3, [sp, #12]
 800cec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cec8:	1bdb      	subs	r3, r3, r7
 800ceca:	4638      	mov	r0, r7
 800cecc:	6013      	str	r3, [r2, #0]
 800cece:	b004      	add	sp, #16
 800ced0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ced4:	1c59      	adds	r1, r3, #1
 800ced6:	9103      	str	r1, [sp, #12]
 800ced8:	701a      	strb	r2, [r3, #0]
 800ceda:	e7f0      	b.n	800cebe <__cvt+0xa6>

0800cedc <__exponent>:
 800cedc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cede:	4603      	mov	r3, r0
 800cee0:	2900      	cmp	r1, #0
 800cee2:	bfb8      	it	lt
 800cee4:	4249      	neglt	r1, r1
 800cee6:	f803 2b02 	strb.w	r2, [r3], #2
 800ceea:	bfb4      	ite	lt
 800ceec:	222d      	movlt	r2, #45	; 0x2d
 800ceee:	222b      	movge	r2, #43	; 0x2b
 800cef0:	2909      	cmp	r1, #9
 800cef2:	7042      	strb	r2, [r0, #1]
 800cef4:	dd2a      	ble.n	800cf4c <__exponent+0x70>
 800cef6:	f10d 0407 	add.w	r4, sp, #7
 800cefa:	46a4      	mov	ip, r4
 800cefc:	270a      	movs	r7, #10
 800cefe:	46a6      	mov	lr, r4
 800cf00:	460a      	mov	r2, r1
 800cf02:	fb91 f6f7 	sdiv	r6, r1, r7
 800cf06:	fb07 1516 	mls	r5, r7, r6, r1
 800cf0a:	3530      	adds	r5, #48	; 0x30
 800cf0c:	2a63      	cmp	r2, #99	; 0x63
 800cf0e:	f104 34ff 	add.w	r4, r4, #4294967295
 800cf12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cf16:	4631      	mov	r1, r6
 800cf18:	dcf1      	bgt.n	800cefe <__exponent+0x22>
 800cf1a:	3130      	adds	r1, #48	; 0x30
 800cf1c:	f1ae 0502 	sub.w	r5, lr, #2
 800cf20:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cf24:	1c44      	adds	r4, r0, #1
 800cf26:	4629      	mov	r1, r5
 800cf28:	4561      	cmp	r1, ip
 800cf2a:	d30a      	bcc.n	800cf42 <__exponent+0x66>
 800cf2c:	f10d 0209 	add.w	r2, sp, #9
 800cf30:	eba2 020e 	sub.w	r2, r2, lr
 800cf34:	4565      	cmp	r5, ip
 800cf36:	bf88      	it	hi
 800cf38:	2200      	movhi	r2, #0
 800cf3a:	4413      	add	r3, r2
 800cf3c:	1a18      	subs	r0, r3, r0
 800cf3e:	b003      	add	sp, #12
 800cf40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf46:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cf4a:	e7ed      	b.n	800cf28 <__exponent+0x4c>
 800cf4c:	2330      	movs	r3, #48	; 0x30
 800cf4e:	3130      	adds	r1, #48	; 0x30
 800cf50:	7083      	strb	r3, [r0, #2]
 800cf52:	70c1      	strb	r1, [r0, #3]
 800cf54:	1d03      	adds	r3, r0, #4
 800cf56:	e7f1      	b.n	800cf3c <__exponent+0x60>

0800cf58 <_printf_float>:
 800cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	ed2d 8b02 	vpush	{d8}
 800cf60:	b08d      	sub	sp, #52	; 0x34
 800cf62:	460c      	mov	r4, r1
 800cf64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cf68:	4616      	mov	r6, r2
 800cf6a:	461f      	mov	r7, r3
 800cf6c:	4605      	mov	r5, r0
 800cf6e:	f001 fa59 	bl	800e424 <_localeconv_r>
 800cf72:	f8d0 a000 	ldr.w	sl, [r0]
 800cf76:	4650      	mov	r0, sl
 800cf78:	f7f3 f932 	bl	80001e0 <strlen>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	930a      	str	r3, [sp, #40]	; 0x28
 800cf80:	6823      	ldr	r3, [r4, #0]
 800cf82:	9305      	str	r3, [sp, #20]
 800cf84:	f8d8 3000 	ldr.w	r3, [r8]
 800cf88:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cf8c:	3307      	adds	r3, #7
 800cf8e:	f023 0307 	bic.w	r3, r3, #7
 800cf92:	f103 0208 	add.w	r2, r3, #8
 800cf96:	f8c8 2000 	str.w	r2, [r8]
 800cf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cfa2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cfa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cfaa:	9307      	str	r3, [sp, #28]
 800cfac:	f8cd 8018 	str.w	r8, [sp, #24]
 800cfb0:	ee08 0a10 	vmov	s16, r0
 800cfb4:	4b9f      	ldr	r3, [pc, #636]	; (800d234 <_printf_float+0x2dc>)
 800cfb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfba:	f04f 32ff 	mov.w	r2, #4294967295
 800cfbe:	f7f3 fdbd 	bl	8000b3c <__aeabi_dcmpun>
 800cfc2:	bb88      	cbnz	r0, 800d028 <_printf_float+0xd0>
 800cfc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfc8:	4b9a      	ldr	r3, [pc, #616]	; (800d234 <_printf_float+0x2dc>)
 800cfca:	f04f 32ff 	mov.w	r2, #4294967295
 800cfce:	f7f3 fd97 	bl	8000b00 <__aeabi_dcmple>
 800cfd2:	bb48      	cbnz	r0, 800d028 <_printf_float+0xd0>
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	4640      	mov	r0, r8
 800cfda:	4649      	mov	r1, r9
 800cfdc:	f7f3 fd86 	bl	8000aec <__aeabi_dcmplt>
 800cfe0:	b110      	cbz	r0, 800cfe8 <_printf_float+0x90>
 800cfe2:	232d      	movs	r3, #45	; 0x2d
 800cfe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfe8:	4b93      	ldr	r3, [pc, #588]	; (800d238 <_printf_float+0x2e0>)
 800cfea:	4894      	ldr	r0, [pc, #592]	; (800d23c <_printf_float+0x2e4>)
 800cfec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cff0:	bf94      	ite	ls
 800cff2:	4698      	movls	r8, r3
 800cff4:	4680      	movhi	r8, r0
 800cff6:	2303      	movs	r3, #3
 800cff8:	6123      	str	r3, [r4, #16]
 800cffa:	9b05      	ldr	r3, [sp, #20]
 800cffc:	f023 0204 	bic.w	r2, r3, #4
 800d000:	6022      	str	r2, [r4, #0]
 800d002:	f04f 0900 	mov.w	r9, #0
 800d006:	9700      	str	r7, [sp, #0]
 800d008:	4633      	mov	r3, r6
 800d00a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d00c:	4621      	mov	r1, r4
 800d00e:	4628      	mov	r0, r5
 800d010:	f000 f9d8 	bl	800d3c4 <_printf_common>
 800d014:	3001      	adds	r0, #1
 800d016:	f040 8090 	bne.w	800d13a <_printf_float+0x1e2>
 800d01a:	f04f 30ff 	mov.w	r0, #4294967295
 800d01e:	b00d      	add	sp, #52	; 0x34
 800d020:	ecbd 8b02 	vpop	{d8}
 800d024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d028:	4642      	mov	r2, r8
 800d02a:	464b      	mov	r3, r9
 800d02c:	4640      	mov	r0, r8
 800d02e:	4649      	mov	r1, r9
 800d030:	f7f3 fd84 	bl	8000b3c <__aeabi_dcmpun>
 800d034:	b140      	cbz	r0, 800d048 <_printf_float+0xf0>
 800d036:	464b      	mov	r3, r9
 800d038:	2b00      	cmp	r3, #0
 800d03a:	bfbc      	itt	lt
 800d03c:	232d      	movlt	r3, #45	; 0x2d
 800d03e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d042:	487f      	ldr	r0, [pc, #508]	; (800d240 <_printf_float+0x2e8>)
 800d044:	4b7f      	ldr	r3, [pc, #508]	; (800d244 <_printf_float+0x2ec>)
 800d046:	e7d1      	b.n	800cfec <_printf_float+0x94>
 800d048:	6863      	ldr	r3, [r4, #4]
 800d04a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d04e:	9206      	str	r2, [sp, #24]
 800d050:	1c5a      	adds	r2, r3, #1
 800d052:	d13f      	bne.n	800d0d4 <_printf_float+0x17c>
 800d054:	2306      	movs	r3, #6
 800d056:	6063      	str	r3, [r4, #4]
 800d058:	9b05      	ldr	r3, [sp, #20]
 800d05a:	6861      	ldr	r1, [r4, #4]
 800d05c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d060:	2300      	movs	r3, #0
 800d062:	9303      	str	r3, [sp, #12]
 800d064:	ab0a      	add	r3, sp, #40	; 0x28
 800d066:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d06a:	ab09      	add	r3, sp, #36	; 0x24
 800d06c:	ec49 8b10 	vmov	d0, r8, r9
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	6022      	str	r2, [r4, #0]
 800d074:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d078:	4628      	mov	r0, r5
 800d07a:	f7ff fecd 	bl	800ce18 <__cvt>
 800d07e:	9b06      	ldr	r3, [sp, #24]
 800d080:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d082:	2b47      	cmp	r3, #71	; 0x47
 800d084:	4680      	mov	r8, r0
 800d086:	d108      	bne.n	800d09a <_printf_float+0x142>
 800d088:	1cc8      	adds	r0, r1, #3
 800d08a:	db02      	blt.n	800d092 <_printf_float+0x13a>
 800d08c:	6863      	ldr	r3, [r4, #4]
 800d08e:	4299      	cmp	r1, r3
 800d090:	dd41      	ble.n	800d116 <_printf_float+0x1be>
 800d092:	f1ab 0b02 	sub.w	fp, fp, #2
 800d096:	fa5f fb8b 	uxtb.w	fp, fp
 800d09a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d09e:	d820      	bhi.n	800d0e2 <_printf_float+0x18a>
 800d0a0:	3901      	subs	r1, #1
 800d0a2:	465a      	mov	r2, fp
 800d0a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d0a8:	9109      	str	r1, [sp, #36]	; 0x24
 800d0aa:	f7ff ff17 	bl	800cedc <__exponent>
 800d0ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0b0:	1813      	adds	r3, r2, r0
 800d0b2:	2a01      	cmp	r2, #1
 800d0b4:	4681      	mov	r9, r0
 800d0b6:	6123      	str	r3, [r4, #16]
 800d0b8:	dc02      	bgt.n	800d0c0 <_printf_float+0x168>
 800d0ba:	6822      	ldr	r2, [r4, #0]
 800d0bc:	07d2      	lsls	r2, r2, #31
 800d0be:	d501      	bpl.n	800d0c4 <_printf_float+0x16c>
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	6123      	str	r3, [r4, #16]
 800d0c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d09c      	beq.n	800d006 <_printf_float+0xae>
 800d0cc:	232d      	movs	r3, #45	; 0x2d
 800d0ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0d2:	e798      	b.n	800d006 <_printf_float+0xae>
 800d0d4:	9a06      	ldr	r2, [sp, #24]
 800d0d6:	2a47      	cmp	r2, #71	; 0x47
 800d0d8:	d1be      	bne.n	800d058 <_printf_float+0x100>
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d1bc      	bne.n	800d058 <_printf_float+0x100>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e7b9      	b.n	800d056 <_printf_float+0xfe>
 800d0e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d0e6:	d118      	bne.n	800d11a <_printf_float+0x1c2>
 800d0e8:	2900      	cmp	r1, #0
 800d0ea:	6863      	ldr	r3, [r4, #4]
 800d0ec:	dd0b      	ble.n	800d106 <_printf_float+0x1ae>
 800d0ee:	6121      	str	r1, [r4, #16]
 800d0f0:	b913      	cbnz	r3, 800d0f8 <_printf_float+0x1a0>
 800d0f2:	6822      	ldr	r2, [r4, #0]
 800d0f4:	07d0      	lsls	r0, r2, #31
 800d0f6:	d502      	bpl.n	800d0fe <_printf_float+0x1a6>
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	440b      	add	r3, r1
 800d0fc:	6123      	str	r3, [r4, #16]
 800d0fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800d100:	f04f 0900 	mov.w	r9, #0
 800d104:	e7de      	b.n	800d0c4 <_printf_float+0x16c>
 800d106:	b913      	cbnz	r3, 800d10e <_printf_float+0x1b6>
 800d108:	6822      	ldr	r2, [r4, #0]
 800d10a:	07d2      	lsls	r2, r2, #31
 800d10c:	d501      	bpl.n	800d112 <_printf_float+0x1ba>
 800d10e:	3302      	adds	r3, #2
 800d110:	e7f4      	b.n	800d0fc <_printf_float+0x1a4>
 800d112:	2301      	movs	r3, #1
 800d114:	e7f2      	b.n	800d0fc <_printf_float+0x1a4>
 800d116:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d11a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d11c:	4299      	cmp	r1, r3
 800d11e:	db05      	blt.n	800d12c <_printf_float+0x1d4>
 800d120:	6823      	ldr	r3, [r4, #0]
 800d122:	6121      	str	r1, [r4, #16]
 800d124:	07d8      	lsls	r0, r3, #31
 800d126:	d5ea      	bpl.n	800d0fe <_printf_float+0x1a6>
 800d128:	1c4b      	adds	r3, r1, #1
 800d12a:	e7e7      	b.n	800d0fc <_printf_float+0x1a4>
 800d12c:	2900      	cmp	r1, #0
 800d12e:	bfd4      	ite	le
 800d130:	f1c1 0202 	rsble	r2, r1, #2
 800d134:	2201      	movgt	r2, #1
 800d136:	4413      	add	r3, r2
 800d138:	e7e0      	b.n	800d0fc <_printf_float+0x1a4>
 800d13a:	6823      	ldr	r3, [r4, #0]
 800d13c:	055a      	lsls	r2, r3, #21
 800d13e:	d407      	bmi.n	800d150 <_printf_float+0x1f8>
 800d140:	6923      	ldr	r3, [r4, #16]
 800d142:	4642      	mov	r2, r8
 800d144:	4631      	mov	r1, r6
 800d146:	4628      	mov	r0, r5
 800d148:	47b8      	blx	r7
 800d14a:	3001      	adds	r0, #1
 800d14c:	d12c      	bne.n	800d1a8 <_printf_float+0x250>
 800d14e:	e764      	b.n	800d01a <_printf_float+0xc2>
 800d150:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d154:	f240 80e0 	bls.w	800d318 <_printf_float+0x3c0>
 800d158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d15c:	2200      	movs	r2, #0
 800d15e:	2300      	movs	r3, #0
 800d160:	f7f3 fcba 	bl	8000ad8 <__aeabi_dcmpeq>
 800d164:	2800      	cmp	r0, #0
 800d166:	d034      	beq.n	800d1d2 <_printf_float+0x27a>
 800d168:	4a37      	ldr	r2, [pc, #220]	; (800d248 <_printf_float+0x2f0>)
 800d16a:	2301      	movs	r3, #1
 800d16c:	4631      	mov	r1, r6
 800d16e:	4628      	mov	r0, r5
 800d170:	47b8      	blx	r7
 800d172:	3001      	adds	r0, #1
 800d174:	f43f af51 	beq.w	800d01a <_printf_float+0xc2>
 800d178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d17c:	429a      	cmp	r2, r3
 800d17e:	db02      	blt.n	800d186 <_printf_float+0x22e>
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	07d8      	lsls	r0, r3, #31
 800d184:	d510      	bpl.n	800d1a8 <_printf_float+0x250>
 800d186:	ee18 3a10 	vmov	r3, s16
 800d18a:	4652      	mov	r2, sl
 800d18c:	4631      	mov	r1, r6
 800d18e:	4628      	mov	r0, r5
 800d190:	47b8      	blx	r7
 800d192:	3001      	adds	r0, #1
 800d194:	f43f af41 	beq.w	800d01a <_printf_float+0xc2>
 800d198:	f04f 0800 	mov.w	r8, #0
 800d19c:	f104 091a 	add.w	r9, r4, #26
 800d1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	4543      	cmp	r3, r8
 800d1a6:	dc09      	bgt.n	800d1bc <_printf_float+0x264>
 800d1a8:	6823      	ldr	r3, [r4, #0]
 800d1aa:	079b      	lsls	r3, r3, #30
 800d1ac:	f100 8105 	bmi.w	800d3ba <_printf_float+0x462>
 800d1b0:	68e0      	ldr	r0, [r4, #12]
 800d1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1b4:	4298      	cmp	r0, r3
 800d1b6:	bfb8      	it	lt
 800d1b8:	4618      	movlt	r0, r3
 800d1ba:	e730      	b.n	800d01e <_printf_float+0xc6>
 800d1bc:	2301      	movs	r3, #1
 800d1be:	464a      	mov	r2, r9
 800d1c0:	4631      	mov	r1, r6
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	47b8      	blx	r7
 800d1c6:	3001      	adds	r0, #1
 800d1c8:	f43f af27 	beq.w	800d01a <_printf_float+0xc2>
 800d1cc:	f108 0801 	add.w	r8, r8, #1
 800d1d0:	e7e6      	b.n	800d1a0 <_printf_float+0x248>
 800d1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	dc39      	bgt.n	800d24c <_printf_float+0x2f4>
 800d1d8:	4a1b      	ldr	r2, [pc, #108]	; (800d248 <_printf_float+0x2f0>)
 800d1da:	2301      	movs	r3, #1
 800d1dc:	4631      	mov	r1, r6
 800d1de:	4628      	mov	r0, r5
 800d1e0:	47b8      	blx	r7
 800d1e2:	3001      	adds	r0, #1
 800d1e4:	f43f af19 	beq.w	800d01a <_printf_float+0xc2>
 800d1e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	d102      	bne.n	800d1f6 <_printf_float+0x29e>
 800d1f0:	6823      	ldr	r3, [r4, #0]
 800d1f2:	07d9      	lsls	r1, r3, #31
 800d1f4:	d5d8      	bpl.n	800d1a8 <_printf_float+0x250>
 800d1f6:	ee18 3a10 	vmov	r3, s16
 800d1fa:	4652      	mov	r2, sl
 800d1fc:	4631      	mov	r1, r6
 800d1fe:	4628      	mov	r0, r5
 800d200:	47b8      	blx	r7
 800d202:	3001      	adds	r0, #1
 800d204:	f43f af09 	beq.w	800d01a <_printf_float+0xc2>
 800d208:	f04f 0900 	mov.w	r9, #0
 800d20c:	f104 0a1a 	add.w	sl, r4, #26
 800d210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d212:	425b      	negs	r3, r3
 800d214:	454b      	cmp	r3, r9
 800d216:	dc01      	bgt.n	800d21c <_printf_float+0x2c4>
 800d218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d21a:	e792      	b.n	800d142 <_printf_float+0x1ea>
 800d21c:	2301      	movs	r3, #1
 800d21e:	4652      	mov	r2, sl
 800d220:	4631      	mov	r1, r6
 800d222:	4628      	mov	r0, r5
 800d224:	47b8      	blx	r7
 800d226:	3001      	adds	r0, #1
 800d228:	f43f aef7 	beq.w	800d01a <_printf_float+0xc2>
 800d22c:	f109 0901 	add.w	r9, r9, #1
 800d230:	e7ee      	b.n	800d210 <_printf_float+0x2b8>
 800d232:	bf00      	nop
 800d234:	7fefffff 	.word	0x7fefffff
 800d238:	08010234 	.word	0x08010234
 800d23c:	08010238 	.word	0x08010238
 800d240:	08010240 	.word	0x08010240
 800d244:	0801023c 	.word	0x0801023c
 800d248:	08010244 	.word	0x08010244
 800d24c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d24e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d250:	429a      	cmp	r2, r3
 800d252:	bfa8      	it	ge
 800d254:	461a      	movge	r2, r3
 800d256:	2a00      	cmp	r2, #0
 800d258:	4691      	mov	r9, r2
 800d25a:	dc37      	bgt.n	800d2cc <_printf_float+0x374>
 800d25c:	f04f 0b00 	mov.w	fp, #0
 800d260:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d264:	f104 021a 	add.w	r2, r4, #26
 800d268:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d26a:	9305      	str	r3, [sp, #20]
 800d26c:	eba3 0309 	sub.w	r3, r3, r9
 800d270:	455b      	cmp	r3, fp
 800d272:	dc33      	bgt.n	800d2dc <_printf_float+0x384>
 800d274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d278:	429a      	cmp	r2, r3
 800d27a:	db3b      	blt.n	800d2f4 <_printf_float+0x39c>
 800d27c:	6823      	ldr	r3, [r4, #0]
 800d27e:	07da      	lsls	r2, r3, #31
 800d280:	d438      	bmi.n	800d2f4 <_printf_float+0x39c>
 800d282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d284:	9a05      	ldr	r2, [sp, #20]
 800d286:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d288:	1a9a      	subs	r2, r3, r2
 800d28a:	eba3 0901 	sub.w	r9, r3, r1
 800d28e:	4591      	cmp	r9, r2
 800d290:	bfa8      	it	ge
 800d292:	4691      	movge	r9, r2
 800d294:	f1b9 0f00 	cmp.w	r9, #0
 800d298:	dc35      	bgt.n	800d306 <_printf_float+0x3ae>
 800d29a:	f04f 0800 	mov.w	r8, #0
 800d29e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2a2:	f104 0a1a 	add.w	sl, r4, #26
 800d2a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2aa:	1a9b      	subs	r3, r3, r2
 800d2ac:	eba3 0309 	sub.w	r3, r3, r9
 800d2b0:	4543      	cmp	r3, r8
 800d2b2:	f77f af79 	ble.w	800d1a8 <_printf_float+0x250>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	4652      	mov	r2, sl
 800d2ba:	4631      	mov	r1, r6
 800d2bc:	4628      	mov	r0, r5
 800d2be:	47b8      	blx	r7
 800d2c0:	3001      	adds	r0, #1
 800d2c2:	f43f aeaa 	beq.w	800d01a <_printf_float+0xc2>
 800d2c6:	f108 0801 	add.w	r8, r8, #1
 800d2ca:	e7ec      	b.n	800d2a6 <_printf_float+0x34e>
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	4642      	mov	r2, r8
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	47b8      	blx	r7
 800d2d6:	3001      	adds	r0, #1
 800d2d8:	d1c0      	bne.n	800d25c <_printf_float+0x304>
 800d2da:	e69e      	b.n	800d01a <_printf_float+0xc2>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	4631      	mov	r1, r6
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	9205      	str	r2, [sp, #20]
 800d2e4:	47b8      	blx	r7
 800d2e6:	3001      	adds	r0, #1
 800d2e8:	f43f ae97 	beq.w	800d01a <_printf_float+0xc2>
 800d2ec:	9a05      	ldr	r2, [sp, #20]
 800d2ee:	f10b 0b01 	add.w	fp, fp, #1
 800d2f2:	e7b9      	b.n	800d268 <_printf_float+0x310>
 800d2f4:	ee18 3a10 	vmov	r3, s16
 800d2f8:	4652      	mov	r2, sl
 800d2fa:	4631      	mov	r1, r6
 800d2fc:	4628      	mov	r0, r5
 800d2fe:	47b8      	blx	r7
 800d300:	3001      	adds	r0, #1
 800d302:	d1be      	bne.n	800d282 <_printf_float+0x32a>
 800d304:	e689      	b.n	800d01a <_printf_float+0xc2>
 800d306:	9a05      	ldr	r2, [sp, #20]
 800d308:	464b      	mov	r3, r9
 800d30a:	4442      	add	r2, r8
 800d30c:	4631      	mov	r1, r6
 800d30e:	4628      	mov	r0, r5
 800d310:	47b8      	blx	r7
 800d312:	3001      	adds	r0, #1
 800d314:	d1c1      	bne.n	800d29a <_printf_float+0x342>
 800d316:	e680      	b.n	800d01a <_printf_float+0xc2>
 800d318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d31a:	2a01      	cmp	r2, #1
 800d31c:	dc01      	bgt.n	800d322 <_printf_float+0x3ca>
 800d31e:	07db      	lsls	r3, r3, #31
 800d320:	d538      	bpl.n	800d394 <_printf_float+0x43c>
 800d322:	2301      	movs	r3, #1
 800d324:	4642      	mov	r2, r8
 800d326:	4631      	mov	r1, r6
 800d328:	4628      	mov	r0, r5
 800d32a:	47b8      	blx	r7
 800d32c:	3001      	adds	r0, #1
 800d32e:	f43f ae74 	beq.w	800d01a <_printf_float+0xc2>
 800d332:	ee18 3a10 	vmov	r3, s16
 800d336:	4652      	mov	r2, sl
 800d338:	4631      	mov	r1, r6
 800d33a:	4628      	mov	r0, r5
 800d33c:	47b8      	blx	r7
 800d33e:	3001      	adds	r0, #1
 800d340:	f43f ae6b 	beq.w	800d01a <_printf_float+0xc2>
 800d344:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d348:	2200      	movs	r2, #0
 800d34a:	2300      	movs	r3, #0
 800d34c:	f7f3 fbc4 	bl	8000ad8 <__aeabi_dcmpeq>
 800d350:	b9d8      	cbnz	r0, 800d38a <_printf_float+0x432>
 800d352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d354:	f108 0201 	add.w	r2, r8, #1
 800d358:	3b01      	subs	r3, #1
 800d35a:	4631      	mov	r1, r6
 800d35c:	4628      	mov	r0, r5
 800d35e:	47b8      	blx	r7
 800d360:	3001      	adds	r0, #1
 800d362:	d10e      	bne.n	800d382 <_printf_float+0x42a>
 800d364:	e659      	b.n	800d01a <_printf_float+0xc2>
 800d366:	2301      	movs	r3, #1
 800d368:	4652      	mov	r2, sl
 800d36a:	4631      	mov	r1, r6
 800d36c:	4628      	mov	r0, r5
 800d36e:	47b8      	blx	r7
 800d370:	3001      	adds	r0, #1
 800d372:	f43f ae52 	beq.w	800d01a <_printf_float+0xc2>
 800d376:	f108 0801 	add.w	r8, r8, #1
 800d37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d37c:	3b01      	subs	r3, #1
 800d37e:	4543      	cmp	r3, r8
 800d380:	dcf1      	bgt.n	800d366 <_printf_float+0x40e>
 800d382:	464b      	mov	r3, r9
 800d384:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d388:	e6dc      	b.n	800d144 <_printf_float+0x1ec>
 800d38a:	f04f 0800 	mov.w	r8, #0
 800d38e:	f104 0a1a 	add.w	sl, r4, #26
 800d392:	e7f2      	b.n	800d37a <_printf_float+0x422>
 800d394:	2301      	movs	r3, #1
 800d396:	4642      	mov	r2, r8
 800d398:	e7df      	b.n	800d35a <_printf_float+0x402>
 800d39a:	2301      	movs	r3, #1
 800d39c:	464a      	mov	r2, r9
 800d39e:	4631      	mov	r1, r6
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	47b8      	blx	r7
 800d3a4:	3001      	adds	r0, #1
 800d3a6:	f43f ae38 	beq.w	800d01a <_printf_float+0xc2>
 800d3aa:	f108 0801 	add.w	r8, r8, #1
 800d3ae:	68e3      	ldr	r3, [r4, #12]
 800d3b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3b2:	1a5b      	subs	r3, r3, r1
 800d3b4:	4543      	cmp	r3, r8
 800d3b6:	dcf0      	bgt.n	800d39a <_printf_float+0x442>
 800d3b8:	e6fa      	b.n	800d1b0 <_printf_float+0x258>
 800d3ba:	f04f 0800 	mov.w	r8, #0
 800d3be:	f104 0919 	add.w	r9, r4, #25
 800d3c2:	e7f4      	b.n	800d3ae <_printf_float+0x456>

0800d3c4 <_printf_common>:
 800d3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3c8:	4616      	mov	r6, r2
 800d3ca:	4699      	mov	r9, r3
 800d3cc:	688a      	ldr	r2, [r1, #8]
 800d3ce:	690b      	ldr	r3, [r1, #16]
 800d3d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	bfb8      	it	lt
 800d3d8:	4613      	movlt	r3, r2
 800d3da:	6033      	str	r3, [r6, #0]
 800d3dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d3e0:	4607      	mov	r7, r0
 800d3e2:	460c      	mov	r4, r1
 800d3e4:	b10a      	cbz	r2, 800d3ea <_printf_common+0x26>
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	6033      	str	r3, [r6, #0]
 800d3ea:	6823      	ldr	r3, [r4, #0]
 800d3ec:	0699      	lsls	r1, r3, #26
 800d3ee:	bf42      	ittt	mi
 800d3f0:	6833      	ldrmi	r3, [r6, #0]
 800d3f2:	3302      	addmi	r3, #2
 800d3f4:	6033      	strmi	r3, [r6, #0]
 800d3f6:	6825      	ldr	r5, [r4, #0]
 800d3f8:	f015 0506 	ands.w	r5, r5, #6
 800d3fc:	d106      	bne.n	800d40c <_printf_common+0x48>
 800d3fe:	f104 0a19 	add.w	sl, r4, #25
 800d402:	68e3      	ldr	r3, [r4, #12]
 800d404:	6832      	ldr	r2, [r6, #0]
 800d406:	1a9b      	subs	r3, r3, r2
 800d408:	42ab      	cmp	r3, r5
 800d40a:	dc26      	bgt.n	800d45a <_printf_common+0x96>
 800d40c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d410:	1e13      	subs	r3, r2, #0
 800d412:	6822      	ldr	r2, [r4, #0]
 800d414:	bf18      	it	ne
 800d416:	2301      	movne	r3, #1
 800d418:	0692      	lsls	r2, r2, #26
 800d41a:	d42b      	bmi.n	800d474 <_printf_common+0xb0>
 800d41c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d420:	4649      	mov	r1, r9
 800d422:	4638      	mov	r0, r7
 800d424:	47c0      	blx	r8
 800d426:	3001      	adds	r0, #1
 800d428:	d01e      	beq.n	800d468 <_printf_common+0xa4>
 800d42a:	6823      	ldr	r3, [r4, #0]
 800d42c:	68e5      	ldr	r5, [r4, #12]
 800d42e:	6832      	ldr	r2, [r6, #0]
 800d430:	f003 0306 	and.w	r3, r3, #6
 800d434:	2b04      	cmp	r3, #4
 800d436:	bf08      	it	eq
 800d438:	1aad      	subeq	r5, r5, r2
 800d43a:	68a3      	ldr	r3, [r4, #8]
 800d43c:	6922      	ldr	r2, [r4, #16]
 800d43e:	bf0c      	ite	eq
 800d440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d444:	2500      	movne	r5, #0
 800d446:	4293      	cmp	r3, r2
 800d448:	bfc4      	itt	gt
 800d44a:	1a9b      	subgt	r3, r3, r2
 800d44c:	18ed      	addgt	r5, r5, r3
 800d44e:	2600      	movs	r6, #0
 800d450:	341a      	adds	r4, #26
 800d452:	42b5      	cmp	r5, r6
 800d454:	d11a      	bne.n	800d48c <_printf_common+0xc8>
 800d456:	2000      	movs	r0, #0
 800d458:	e008      	b.n	800d46c <_printf_common+0xa8>
 800d45a:	2301      	movs	r3, #1
 800d45c:	4652      	mov	r2, sl
 800d45e:	4649      	mov	r1, r9
 800d460:	4638      	mov	r0, r7
 800d462:	47c0      	blx	r8
 800d464:	3001      	adds	r0, #1
 800d466:	d103      	bne.n	800d470 <_printf_common+0xac>
 800d468:	f04f 30ff 	mov.w	r0, #4294967295
 800d46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d470:	3501      	adds	r5, #1
 800d472:	e7c6      	b.n	800d402 <_printf_common+0x3e>
 800d474:	18e1      	adds	r1, r4, r3
 800d476:	1c5a      	adds	r2, r3, #1
 800d478:	2030      	movs	r0, #48	; 0x30
 800d47a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d47e:	4422      	add	r2, r4
 800d480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d488:	3302      	adds	r3, #2
 800d48a:	e7c7      	b.n	800d41c <_printf_common+0x58>
 800d48c:	2301      	movs	r3, #1
 800d48e:	4622      	mov	r2, r4
 800d490:	4649      	mov	r1, r9
 800d492:	4638      	mov	r0, r7
 800d494:	47c0      	blx	r8
 800d496:	3001      	adds	r0, #1
 800d498:	d0e6      	beq.n	800d468 <_printf_common+0xa4>
 800d49a:	3601      	adds	r6, #1
 800d49c:	e7d9      	b.n	800d452 <_printf_common+0x8e>
	...

0800d4a0 <_printf_i>:
 800d4a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4a4:	7e0f      	ldrb	r7, [r1, #24]
 800d4a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d4a8:	2f78      	cmp	r7, #120	; 0x78
 800d4aa:	4691      	mov	r9, r2
 800d4ac:	4680      	mov	r8, r0
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	469a      	mov	sl, r3
 800d4b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d4b6:	d807      	bhi.n	800d4c8 <_printf_i+0x28>
 800d4b8:	2f62      	cmp	r7, #98	; 0x62
 800d4ba:	d80a      	bhi.n	800d4d2 <_printf_i+0x32>
 800d4bc:	2f00      	cmp	r7, #0
 800d4be:	f000 80d8 	beq.w	800d672 <_printf_i+0x1d2>
 800d4c2:	2f58      	cmp	r7, #88	; 0x58
 800d4c4:	f000 80a3 	beq.w	800d60e <_printf_i+0x16e>
 800d4c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d4d0:	e03a      	b.n	800d548 <_printf_i+0xa8>
 800d4d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d4d6:	2b15      	cmp	r3, #21
 800d4d8:	d8f6      	bhi.n	800d4c8 <_printf_i+0x28>
 800d4da:	a101      	add	r1, pc, #4	; (adr r1, 800d4e0 <_printf_i+0x40>)
 800d4dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4e0:	0800d539 	.word	0x0800d539
 800d4e4:	0800d54d 	.word	0x0800d54d
 800d4e8:	0800d4c9 	.word	0x0800d4c9
 800d4ec:	0800d4c9 	.word	0x0800d4c9
 800d4f0:	0800d4c9 	.word	0x0800d4c9
 800d4f4:	0800d4c9 	.word	0x0800d4c9
 800d4f8:	0800d54d 	.word	0x0800d54d
 800d4fc:	0800d4c9 	.word	0x0800d4c9
 800d500:	0800d4c9 	.word	0x0800d4c9
 800d504:	0800d4c9 	.word	0x0800d4c9
 800d508:	0800d4c9 	.word	0x0800d4c9
 800d50c:	0800d659 	.word	0x0800d659
 800d510:	0800d57d 	.word	0x0800d57d
 800d514:	0800d63b 	.word	0x0800d63b
 800d518:	0800d4c9 	.word	0x0800d4c9
 800d51c:	0800d4c9 	.word	0x0800d4c9
 800d520:	0800d67b 	.word	0x0800d67b
 800d524:	0800d4c9 	.word	0x0800d4c9
 800d528:	0800d57d 	.word	0x0800d57d
 800d52c:	0800d4c9 	.word	0x0800d4c9
 800d530:	0800d4c9 	.word	0x0800d4c9
 800d534:	0800d643 	.word	0x0800d643
 800d538:	682b      	ldr	r3, [r5, #0]
 800d53a:	1d1a      	adds	r2, r3, #4
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	602a      	str	r2, [r5, #0]
 800d540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d548:	2301      	movs	r3, #1
 800d54a:	e0a3      	b.n	800d694 <_printf_i+0x1f4>
 800d54c:	6820      	ldr	r0, [r4, #0]
 800d54e:	6829      	ldr	r1, [r5, #0]
 800d550:	0606      	lsls	r6, r0, #24
 800d552:	f101 0304 	add.w	r3, r1, #4
 800d556:	d50a      	bpl.n	800d56e <_printf_i+0xce>
 800d558:	680e      	ldr	r6, [r1, #0]
 800d55a:	602b      	str	r3, [r5, #0]
 800d55c:	2e00      	cmp	r6, #0
 800d55e:	da03      	bge.n	800d568 <_printf_i+0xc8>
 800d560:	232d      	movs	r3, #45	; 0x2d
 800d562:	4276      	negs	r6, r6
 800d564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d568:	485e      	ldr	r0, [pc, #376]	; (800d6e4 <_printf_i+0x244>)
 800d56a:	230a      	movs	r3, #10
 800d56c:	e019      	b.n	800d5a2 <_printf_i+0x102>
 800d56e:	680e      	ldr	r6, [r1, #0]
 800d570:	602b      	str	r3, [r5, #0]
 800d572:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d576:	bf18      	it	ne
 800d578:	b236      	sxthne	r6, r6
 800d57a:	e7ef      	b.n	800d55c <_printf_i+0xbc>
 800d57c:	682b      	ldr	r3, [r5, #0]
 800d57e:	6820      	ldr	r0, [r4, #0]
 800d580:	1d19      	adds	r1, r3, #4
 800d582:	6029      	str	r1, [r5, #0]
 800d584:	0601      	lsls	r1, r0, #24
 800d586:	d501      	bpl.n	800d58c <_printf_i+0xec>
 800d588:	681e      	ldr	r6, [r3, #0]
 800d58a:	e002      	b.n	800d592 <_printf_i+0xf2>
 800d58c:	0646      	lsls	r6, r0, #25
 800d58e:	d5fb      	bpl.n	800d588 <_printf_i+0xe8>
 800d590:	881e      	ldrh	r6, [r3, #0]
 800d592:	4854      	ldr	r0, [pc, #336]	; (800d6e4 <_printf_i+0x244>)
 800d594:	2f6f      	cmp	r7, #111	; 0x6f
 800d596:	bf0c      	ite	eq
 800d598:	2308      	moveq	r3, #8
 800d59a:	230a      	movne	r3, #10
 800d59c:	2100      	movs	r1, #0
 800d59e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d5a2:	6865      	ldr	r5, [r4, #4]
 800d5a4:	60a5      	str	r5, [r4, #8]
 800d5a6:	2d00      	cmp	r5, #0
 800d5a8:	bfa2      	ittt	ge
 800d5aa:	6821      	ldrge	r1, [r4, #0]
 800d5ac:	f021 0104 	bicge.w	r1, r1, #4
 800d5b0:	6021      	strge	r1, [r4, #0]
 800d5b2:	b90e      	cbnz	r6, 800d5b8 <_printf_i+0x118>
 800d5b4:	2d00      	cmp	r5, #0
 800d5b6:	d04d      	beq.n	800d654 <_printf_i+0x1b4>
 800d5b8:	4615      	mov	r5, r2
 800d5ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800d5be:	fb03 6711 	mls	r7, r3, r1, r6
 800d5c2:	5dc7      	ldrb	r7, [r0, r7]
 800d5c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d5c8:	4637      	mov	r7, r6
 800d5ca:	42bb      	cmp	r3, r7
 800d5cc:	460e      	mov	r6, r1
 800d5ce:	d9f4      	bls.n	800d5ba <_printf_i+0x11a>
 800d5d0:	2b08      	cmp	r3, #8
 800d5d2:	d10b      	bne.n	800d5ec <_printf_i+0x14c>
 800d5d4:	6823      	ldr	r3, [r4, #0]
 800d5d6:	07de      	lsls	r6, r3, #31
 800d5d8:	d508      	bpl.n	800d5ec <_printf_i+0x14c>
 800d5da:	6923      	ldr	r3, [r4, #16]
 800d5dc:	6861      	ldr	r1, [r4, #4]
 800d5de:	4299      	cmp	r1, r3
 800d5e0:	bfde      	ittt	le
 800d5e2:	2330      	movle	r3, #48	; 0x30
 800d5e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d5e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d5ec:	1b52      	subs	r2, r2, r5
 800d5ee:	6122      	str	r2, [r4, #16]
 800d5f0:	f8cd a000 	str.w	sl, [sp]
 800d5f4:	464b      	mov	r3, r9
 800d5f6:	aa03      	add	r2, sp, #12
 800d5f8:	4621      	mov	r1, r4
 800d5fa:	4640      	mov	r0, r8
 800d5fc:	f7ff fee2 	bl	800d3c4 <_printf_common>
 800d600:	3001      	adds	r0, #1
 800d602:	d14c      	bne.n	800d69e <_printf_i+0x1fe>
 800d604:	f04f 30ff 	mov.w	r0, #4294967295
 800d608:	b004      	add	sp, #16
 800d60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d60e:	4835      	ldr	r0, [pc, #212]	; (800d6e4 <_printf_i+0x244>)
 800d610:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d614:	6829      	ldr	r1, [r5, #0]
 800d616:	6823      	ldr	r3, [r4, #0]
 800d618:	f851 6b04 	ldr.w	r6, [r1], #4
 800d61c:	6029      	str	r1, [r5, #0]
 800d61e:	061d      	lsls	r5, r3, #24
 800d620:	d514      	bpl.n	800d64c <_printf_i+0x1ac>
 800d622:	07df      	lsls	r7, r3, #31
 800d624:	bf44      	itt	mi
 800d626:	f043 0320 	orrmi.w	r3, r3, #32
 800d62a:	6023      	strmi	r3, [r4, #0]
 800d62c:	b91e      	cbnz	r6, 800d636 <_printf_i+0x196>
 800d62e:	6823      	ldr	r3, [r4, #0]
 800d630:	f023 0320 	bic.w	r3, r3, #32
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	2310      	movs	r3, #16
 800d638:	e7b0      	b.n	800d59c <_printf_i+0xfc>
 800d63a:	6823      	ldr	r3, [r4, #0]
 800d63c:	f043 0320 	orr.w	r3, r3, #32
 800d640:	6023      	str	r3, [r4, #0]
 800d642:	2378      	movs	r3, #120	; 0x78
 800d644:	4828      	ldr	r0, [pc, #160]	; (800d6e8 <_printf_i+0x248>)
 800d646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d64a:	e7e3      	b.n	800d614 <_printf_i+0x174>
 800d64c:	0659      	lsls	r1, r3, #25
 800d64e:	bf48      	it	mi
 800d650:	b2b6      	uxthmi	r6, r6
 800d652:	e7e6      	b.n	800d622 <_printf_i+0x182>
 800d654:	4615      	mov	r5, r2
 800d656:	e7bb      	b.n	800d5d0 <_printf_i+0x130>
 800d658:	682b      	ldr	r3, [r5, #0]
 800d65a:	6826      	ldr	r6, [r4, #0]
 800d65c:	6961      	ldr	r1, [r4, #20]
 800d65e:	1d18      	adds	r0, r3, #4
 800d660:	6028      	str	r0, [r5, #0]
 800d662:	0635      	lsls	r5, r6, #24
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	d501      	bpl.n	800d66c <_printf_i+0x1cc>
 800d668:	6019      	str	r1, [r3, #0]
 800d66a:	e002      	b.n	800d672 <_printf_i+0x1d2>
 800d66c:	0670      	lsls	r0, r6, #25
 800d66e:	d5fb      	bpl.n	800d668 <_printf_i+0x1c8>
 800d670:	8019      	strh	r1, [r3, #0]
 800d672:	2300      	movs	r3, #0
 800d674:	6123      	str	r3, [r4, #16]
 800d676:	4615      	mov	r5, r2
 800d678:	e7ba      	b.n	800d5f0 <_printf_i+0x150>
 800d67a:	682b      	ldr	r3, [r5, #0]
 800d67c:	1d1a      	adds	r2, r3, #4
 800d67e:	602a      	str	r2, [r5, #0]
 800d680:	681d      	ldr	r5, [r3, #0]
 800d682:	6862      	ldr	r2, [r4, #4]
 800d684:	2100      	movs	r1, #0
 800d686:	4628      	mov	r0, r5
 800d688:	f7f2 fdb2 	bl	80001f0 <memchr>
 800d68c:	b108      	cbz	r0, 800d692 <_printf_i+0x1f2>
 800d68e:	1b40      	subs	r0, r0, r5
 800d690:	6060      	str	r0, [r4, #4]
 800d692:	6863      	ldr	r3, [r4, #4]
 800d694:	6123      	str	r3, [r4, #16]
 800d696:	2300      	movs	r3, #0
 800d698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d69c:	e7a8      	b.n	800d5f0 <_printf_i+0x150>
 800d69e:	6923      	ldr	r3, [r4, #16]
 800d6a0:	462a      	mov	r2, r5
 800d6a2:	4649      	mov	r1, r9
 800d6a4:	4640      	mov	r0, r8
 800d6a6:	47d0      	blx	sl
 800d6a8:	3001      	adds	r0, #1
 800d6aa:	d0ab      	beq.n	800d604 <_printf_i+0x164>
 800d6ac:	6823      	ldr	r3, [r4, #0]
 800d6ae:	079b      	lsls	r3, r3, #30
 800d6b0:	d413      	bmi.n	800d6da <_printf_i+0x23a>
 800d6b2:	68e0      	ldr	r0, [r4, #12]
 800d6b4:	9b03      	ldr	r3, [sp, #12]
 800d6b6:	4298      	cmp	r0, r3
 800d6b8:	bfb8      	it	lt
 800d6ba:	4618      	movlt	r0, r3
 800d6bc:	e7a4      	b.n	800d608 <_printf_i+0x168>
 800d6be:	2301      	movs	r3, #1
 800d6c0:	4632      	mov	r2, r6
 800d6c2:	4649      	mov	r1, r9
 800d6c4:	4640      	mov	r0, r8
 800d6c6:	47d0      	blx	sl
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	d09b      	beq.n	800d604 <_printf_i+0x164>
 800d6cc:	3501      	adds	r5, #1
 800d6ce:	68e3      	ldr	r3, [r4, #12]
 800d6d0:	9903      	ldr	r1, [sp, #12]
 800d6d2:	1a5b      	subs	r3, r3, r1
 800d6d4:	42ab      	cmp	r3, r5
 800d6d6:	dcf2      	bgt.n	800d6be <_printf_i+0x21e>
 800d6d8:	e7eb      	b.n	800d6b2 <_printf_i+0x212>
 800d6da:	2500      	movs	r5, #0
 800d6dc:	f104 0619 	add.w	r6, r4, #25
 800d6e0:	e7f5      	b.n	800d6ce <_printf_i+0x22e>
 800d6e2:	bf00      	nop
 800d6e4:	08010246 	.word	0x08010246
 800d6e8:	08010257 	.word	0x08010257

0800d6ec <siprintf>:
 800d6ec:	b40e      	push	{r1, r2, r3}
 800d6ee:	b500      	push	{lr}
 800d6f0:	b09c      	sub	sp, #112	; 0x70
 800d6f2:	ab1d      	add	r3, sp, #116	; 0x74
 800d6f4:	9002      	str	r0, [sp, #8]
 800d6f6:	9006      	str	r0, [sp, #24]
 800d6f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d6fc:	4809      	ldr	r0, [pc, #36]	; (800d724 <siprintf+0x38>)
 800d6fe:	9107      	str	r1, [sp, #28]
 800d700:	9104      	str	r1, [sp, #16]
 800d702:	4909      	ldr	r1, [pc, #36]	; (800d728 <siprintf+0x3c>)
 800d704:	f853 2b04 	ldr.w	r2, [r3], #4
 800d708:	9105      	str	r1, [sp, #20]
 800d70a:	6800      	ldr	r0, [r0, #0]
 800d70c:	9301      	str	r3, [sp, #4]
 800d70e:	a902      	add	r1, sp, #8
 800d710:	f001 fb78 	bl	800ee04 <_svfiprintf_r>
 800d714:	9b02      	ldr	r3, [sp, #8]
 800d716:	2200      	movs	r2, #0
 800d718:	701a      	strb	r2, [r3, #0]
 800d71a:	b01c      	add	sp, #112	; 0x70
 800d71c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d720:	b003      	add	sp, #12
 800d722:	4770      	bx	lr
 800d724:	2000012c 	.word	0x2000012c
 800d728:	ffff0208 	.word	0xffff0208

0800d72c <quorem>:
 800d72c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d730:	6903      	ldr	r3, [r0, #16]
 800d732:	690c      	ldr	r4, [r1, #16]
 800d734:	42a3      	cmp	r3, r4
 800d736:	4607      	mov	r7, r0
 800d738:	f2c0 8081 	blt.w	800d83e <quorem+0x112>
 800d73c:	3c01      	subs	r4, #1
 800d73e:	f101 0814 	add.w	r8, r1, #20
 800d742:	f100 0514 	add.w	r5, r0, #20
 800d746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d74a:	9301      	str	r3, [sp, #4]
 800d74c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d750:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d754:	3301      	adds	r3, #1
 800d756:	429a      	cmp	r2, r3
 800d758:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d75c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d760:	fbb2 f6f3 	udiv	r6, r2, r3
 800d764:	d331      	bcc.n	800d7ca <quorem+0x9e>
 800d766:	f04f 0e00 	mov.w	lr, #0
 800d76a:	4640      	mov	r0, r8
 800d76c:	46ac      	mov	ip, r5
 800d76e:	46f2      	mov	sl, lr
 800d770:	f850 2b04 	ldr.w	r2, [r0], #4
 800d774:	b293      	uxth	r3, r2
 800d776:	fb06 e303 	mla	r3, r6, r3, lr
 800d77a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d77e:	b29b      	uxth	r3, r3
 800d780:	ebaa 0303 	sub.w	r3, sl, r3
 800d784:	f8dc a000 	ldr.w	sl, [ip]
 800d788:	0c12      	lsrs	r2, r2, #16
 800d78a:	fa13 f38a 	uxtah	r3, r3, sl
 800d78e:	fb06 e202 	mla	r2, r6, r2, lr
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	9b00      	ldr	r3, [sp, #0]
 800d796:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d79a:	b292      	uxth	r2, r2
 800d79c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d7a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7a4:	f8bd 3000 	ldrh.w	r3, [sp]
 800d7a8:	4581      	cmp	r9, r0
 800d7aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7ae:	f84c 3b04 	str.w	r3, [ip], #4
 800d7b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d7b6:	d2db      	bcs.n	800d770 <quorem+0x44>
 800d7b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d7bc:	b92b      	cbnz	r3, 800d7ca <quorem+0x9e>
 800d7be:	9b01      	ldr	r3, [sp, #4]
 800d7c0:	3b04      	subs	r3, #4
 800d7c2:	429d      	cmp	r5, r3
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	d32e      	bcc.n	800d826 <quorem+0xfa>
 800d7c8:	613c      	str	r4, [r7, #16]
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	f001 f8c6 	bl	800e95c <__mcmp>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	db24      	blt.n	800d81e <quorem+0xf2>
 800d7d4:	3601      	adds	r6, #1
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	f04f 0c00 	mov.w	ip, #0
 800d7dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800d7e0:	f8d0 e000 	ldr.w	lr, [r0]
 800d7e4:	b293      	uxth	r3, r2
 800d7e6:	ebac 0303 	sub.w	r3, ip, r3
 800d7ea:	0c12      	lsrs	r2, r2, #16
 800d7ec:	fa13 f38e 	uxtah	r3, r3, lr
 800d7f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d7f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7fe:	45c1      	cmp	r9, r8
 800d800:	f840 3b04 	str.w	r3, [r0], #4
 800d804:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d808:	d2e8      	bcs.n	800d7dc <quorem+0xb0>
 800d80a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d80e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d812:	b922      	cbnz	r2, 800d81e <quorem+0xf2>
 800d814:	3b04      	subs	r3, #4
 800d816:	429d      	cmp	r5, r3
 800d818:	461a      	mov	r2, r3
 800d81a:	d30a      	bcc.n	800d832 <quorem+0x106>
 800d81c:	613c      	str	r4, [r7, #16]
 800d81e:	4630      	mov	r0, r6
 800d820:	b003      	add	sp, #12
 800d822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d826:	6812      	ldr	r2, [r2, #0]
 800d828:	3b04      	subs	r3, #4
 800d82a:	2a00      	cmp	r2, #0
 800d82c:	d1cc      	bne.n	800d7c8 <quorem+0x9c>
 800d82e:	3c01      	subs	r4, #1
 800d830:	e7c7      	b.n	800d7c2 <quorem+0x96>
 800d832:	6812      	ldr	r2, [r2, #0]
 800d834:	3b04      	subs	r3, #4
 800d836:	2a00      	cmp	r2, #0
 800d838:	d1f0      	bne.n	800d81c <quorem+0xf0>
 800d83a:	3c01      	subs	r4, #1
 800d83c:	e7eb      	b.n	800d816 <quorem+0xea>
 800d83e:	2000      	movs	r0, #0
 800d840:	e7ee      	b.n	800d820 <quorem+0xf4>
 800d842:	0000      	movs	r0, r0
 800d844:	0000      	movs	r0, r0
	...

0800d848 <_dtoa_r>:
 800d848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84c:	ed2d 8b04 	vpush	{d8-d9}
 800d850:	ec57 6b10 	vmov	r6, r7, d0
 800d854:	b093      	sub	sp, #76	; 0x4c
 800d856:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d858:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d85c:	9106      	str	r1, [sp, #24]
 800d85e:	ee10 aa10 	vmov	sl, s0
 800d862:	4604      	mov	r4, r0
 800d864:	9209      	str	r2, [sp, #36]	; 0x24
 800d866:	930c      	str	r3, [sp, #48]	; 0x30
 800d868:	46bb      	mov	fp, r7
 800d86a:	b975      	cbnz	r5, 800d88a <_dtoa_r+0x42>
 800d86c:	2010      	movs	r0, #16
 800d86e:	f000 fddd 	bl	800e42c <malloc>
 800d872:	4602      	mov	r2, r0
 800d874:	6260      	str	r0, [r4, #36]	; 0x24
 800d876:	b920      	cbnz	r0, 800d882 <_dtoa_r+0x3a>
 800d878:	4ba7      	ldr	r3, [pc, #668]	; (800db18 <_dtoa_r+0x2d0>)
 800d87a:	21ea      	movs	r1, #234	; 0xea
 800d87c:	48a7      	ldr	r0, [pc, #668]	; (800db1c <_dtoa_r+0x2d4>)
 800d87e:	f001 fbd1 	bl	800f024 <__assert_func>
 800d882:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d886:	6005      	str	r5, [r0, #0]
 800d888:	60c5      	str	r5, [r0, #12]
 800d88a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d88c:	6819      	ldr	r1, [r3, #0]
 800d88e:	b151      	cbz	r1, 800d8a6 <_dtoa_r+0x5e>
 800d890:	685a      	ldr	r2, [r3, #4]
 800d892:	604a      	str	r2, [r1, #4]
 800d894:	2301      	movs	r3, #1
 800d896:	4093      	lsls	r3, r2
 800d898:	608b      	str	r3, [r1, #8]
 800d89a:	4620      	mov	r0, r4
 800d89c:	f000 fe1c 	bl	800e4d8 <_Bfree>
 800d8a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	601a      	str	r2, [r3, #0]
 800d8a6:	1e3b      	subs	r3, r7, #0
 800d8a8:	bfaa      	itet	ge
 800d8aa:	2300      	movge	r3, #0
 800d8ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d8b0:	f8c8 3000 	strge.w	r3, [r8]
 800d8b4:	4b9a      	ldr	r3, [pc, #616]	; (800db20 <_dtoa_r+0x2d8>)
 800d8b6:	bfbc      	itt	lt
 800d8b8:	2201      	movlt	r2, #1
 800d8ba:	f8c8 2000 	strlt.w	r2, [r8]
 800d8be:	ea33 030b 	bics.w	r3, r3, fp
 800d8c2:	d11b      	bne.n	800d8fc <_dtoa_r+0xb4>
 800d8c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d8c6:	f242 730f 	movw	r3, #9999	; 0x270f
 800d8ca:	6013      	str	r3, [r2, #0]
 800d8cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8d0:	4333      	orrs	r3, r6
 800d8d2:	f000 8592 	beq.w	800e3fa <_dtoa_r+0xbb2>
 800d8d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8d8:	b963      	cbnz	r3, 800d8f4 <_dtoa_r+0xac>
 800d8da:	4b92      	ldr	r3, [pc, #584]	; (800db24 <_dtoa_r+0x2dc>)
 800d8dc:	e022      	b.n	800d924 <_dtoa_r+0xdc>
 800d8de:	4b92      	ldr	r3, [pc, #584]	; (800db28 <_dtoa_r+0x2e0>)
 800d8e0:	9301      	str	r3, [sp, #4]
 800d8e2:	3308      	adds	r3, #8
 800d8e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d8e6:	6013      	str	r3, [r2, #0]
 800d8e8:	9801      	ldr	r0, [sp, #4]
 800d8ea:	b013      	add	sp, #76	; 0x4c
 800d8ec:	ecbd 8b04 	vpop	{d8-d9}
 800d8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f4:	4b8b      	ldr	r3, [pc, #556]	; (800db24 <_dtoa_r+0x2dc>)
 800d8f6:	9301      	str	r3, [sp, #4]
 800d8f8:	3303      	adds	r3, #3
 800d8fa:	e7f3      	b.n	800d8e4 <_dtoa_r+0x9c>
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	2300      	movs	r3, #0
 800d900:	4650      	mov	r0, sl
 800d902:	4659      	mov	r1, fp
 800d904:	f7f3 f8e8 	bl	8000ad8 <__aeabi_dcmpeq>
 800d908:	ec4b ab19 	vmov	d9, sl, fp
 800d90c:	4680      	mov	r8, r0
 800d90e:	b158      	cbz	r0, 800d928 <_dtoa_r+0xe0>
 800d910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d912:	2301      	movs	r3, #1
 800d914:	6013      	str	r3, [r2, #0]
 800d916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f000 856b 	beq.w	800e3f4 <_dtoa_r+0xbac>
 800d91e:	4883      	ldr	r0, [pc, #524]	; (800db2c <_dtoa_r+0x2e4>)
 800d920:	6018      	str	r0, [r3, #0]
 800d922:	1e43      	subs	r3, r0, #1
 800d924:	9301      	str	r3, [sp, #4]
 800d926:	e7df      	b.n	800d8e8 <_dtoa_r+0xa0>
 800d928:	ec4b ab10 	vmov	d0, sl, fp
 800d92c:	aa10      	add	r2, sp, #64	; 0x40
 800d92e:	a911      	add	r1, sp, #68	; 0x44
 800d930:	4620      	mov	r0, r4
 800d932:	f001 f8b9 	bl	800eaa8 <__d2b>
 800d936:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d93a:	ee08 0a10 	vmov	s16, r0
 800d93e:	2d00      	cmp	r5, #0
 800d940:	f000 8084 	beq.w	800da4c <_dtoa_r+0x204>
 800d944:	ee19 3a90 	vmov	r3, s19
 800d948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d94c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d950:	4656      	mov	r6, sl
 800d952:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d956:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d95a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d95e:	4b74      	ldr	r3, [pc, #464]	; (800db30 <_dtoa_r+0x2e8>)
 800d960:	2200      	movs	r2, #0
 800d962:	4630      	mov	r0, r6
 800d964:	4639      	mov	r1, r7
 800d966:	f7f2 fc97 	bl	8000298 <__aeabi_dsub>
 800d96a:	a365      	add	r3, pc, #404	; (adr r3, 800db00 <_dtoa_r+0x2b8>)
 800d96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d970:	f7f2 fe4a 	bl	8000608 <__aeabi_dmul>
 800d974:	a364      	add	r3, pc, #400	; (adr r3, 800db08 <_dtoa_r+0x2c0>)
 800d976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97a:	f7f2 fc8f 	bl	800029c <__adddf3>
 800d97e:	4606      	mov	r6, r0
 800d980:	4628      	mov	r0, r5
 800d982:	460f      	mov	r7, r1
 800d984:	f7f2 fdd6 	bl	8000534 <__aeabi_i2d>
 800d988:	a361      	add	r3, pc, #388	; (adr r3, 800db10 <_dtoa_r+0x2c8>)
 800d98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98e:	f7f2 fe3b 	bl	8000608 <__aeabi_dmul>
 800d992:	4602      	mov	r2, r0
 800d994:	460b      	mov	r3, r1
 800d996:	4630      	mov	r0, r6
 800d998:	4639      	mov	r1, r7
 800d99a:	f7f2 fc7f 	bl	800029c <__adddf3>
 800d99e:	4606      	mov	r6, r0
 800d9a0:	460f      	mov	r7, r1
 800d9a2:	f7f3 f8e1 	bl	8000b68 <__aeabi_d2iz>
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	9000      	str	r0, [sp, #0]
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	4639      	mov	r1, r7
 800d9b0:	f7f3 f89c 	bl	8000aec <__aeabi_dcmplt>
 800d9b4:	b150      	cbz	r0, 800d9cc <_dtoa_r+0x184>
 800d9b6:	9800      	ldr	r0, [sp, #0]
 800d9b8:	f7f2 fdbc 	bl	8000534 <__aeabi_i2d>
 800d9bc:	4632      	mov	r2, r6
 800d9be:	463b      	mov	r3, r7
 800d9c0:	f7f3 f88a 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9c4:	b910      	cbnz	r0, 800d9cc <_dtoa_r+0x184>
 800d9c6:	9b00      	ldr	r3, [sp, #0]
 800d9c8:	3b01      	subs	r3, #1
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	9b00      	ldr	r3, [sp, #0]
 800d9ce:	2b16      	cmp	r3, #22
 800d9d0:	d85a      	bhi.n	800da88 <_dtoa_r+0x240>
 800d9d2:	9a00      	ldr	r2, [sp, #0]
 800d9d4:	4b57      	ldr	r3, [pc, #348]	; (800db34 <_dtoa_r+0x2ec>)
 800d9d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9de:	ec51 0b19 	vmov	r0, r1, d9
 800d9e2:	f7f3 f883 	bl	8000aec <__aeabi_dcmplt>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d050      	beq.n	800da8c <_dtoa_r+0x244>
 800d9ea:	9b00      	ldr	r3, [sp, #0]
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9f6:	1b5d      	subs	r5, r3, r5
 800d9f8:	1e6b      	subs	r3, r5, #1
 800d9fa:	9305      	str	r3, [sp, #20]
 800d9fc:	bf45      	ittet	mi
 800d9fe:	f1c5 0301 	rsbmi	r3, r5, #1
 800da02:	9304      	strmi	r3, [sp, #16]
 800da04:	2300      	movpl	r3, #0
 800da06:	2300      	movmi	r3, #0
 800da08:	bf4c      	ite	mi
 800da0a:	9305      	strmi	r3, [sp, #20]
 800da0c:	9304      	strpl	r3, [sp, #16]
 800da0e:	9b00      	ldr	r3, [sp, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	db3d      	blt.n	800da90 <_dtoa_r+0x248>
 800da14:	9b05      	ldr	r3, [sp, #20]
 800da16:	9a00      	ldr	r2, [sp, #0]
 800da18:	920a      	str	r2, [sp, #40]	; 0x28
 800da1a:	4413      	add	r3, r2
 800da1c:	9305      	str	r3, [sp, #20]
 800da1e:	2300      	movs	r3, #0
 800da20:	9307      	str	r3, [sp, #28]
 800da22:	9b06      	ldr	r3, [sp, #24]
 800da24:	2b09      	cmp	r3, #9
 800da26:	f200 8089 	bhi.w	800db3c <_dtoa_r+0x2f4>
 800da2a:	2b05      	cmp	r3, #5
 800da2c:	bfc4      	itt	gt
 800da2e:	3b04      	subgt	r3, #4
 800da30:	9306      	strgt	r3, [sp, #24]
 800da32:	9b06      	ldr	r3, [sp, #24]
 800da34:	f1a3 0302 	sub.w	r3, r3, #2
 800da38:	bfcc      	ite	gt
 800da3a:	2500      	movgt	r5, #0
 800da3c:	2501      	movle	r5, #1
 800da3e:	2b03      	cmp	r3, #3
 800da40:	f200 8087 	bhi.w	800db52 <_dtoa_r+0x30a>
 800da44:	e8df f003 	tbb	[pc, r3]
 800da48:	59383a2d 	.word	0x59383a2d
 800da4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800da50:	441d      	add	r5, r3
 800da52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800da56:	2b20      	cmp	r3, #32
 800da58:	bfc1      	itttt	gt
 800da5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800da5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800da62:	fa0b f303 	lslgt.w	r3, fp, r3
 800da66:	fa26 f000 	lsrgt.w	r0, r6, r0
 800da6a:	bfda      	itte	le
 800da6c:	f1c3 0320 	rsble	r3, r3, #32
 800da70:	fa06 f003 	lslle.w	r0, r6, r3
 800da74:	4318      	orrgt	r0, r3
 800da76:	f7f2 fd4d 	bl	8000514 <__aeabi_ui2d>
 800da7a:	2301      	movs	r3, #1
 800da7c:	4606      	mov	r6, r0
 800da7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800da82:	3d01      	subs	r5, #1
 800da84:	930e      	str	r3, [sp, #56]	; 0x38
 800da86:	e76a      	b.n	800d95e <_dtoa_r+0x116>
 800da88:	2301      	movs	r3, #1
 800da8a:	e7b2      	b.n	800d9f2 <_dtoa_r+0x1aa>
 800da8c:	900b      	str	r0, [sp, #44]	; 0x2c
 800da8e:	e7b1      	b.n	800d9f4 <_dtoa_r+0x1ac>
 800da90:	9b04      	ldr	r3, [sp, #16]
 800da92:	9a00      	ldr	r2, [sp, #0]
 800da94:	1a9b      	subs	r3, r3, r2
 800da96:	9304      	str	r3, [sp, #16]
 800da98:	4253      	negs	r3, r2
 800da9a:	9307      	str	r3, [sp, #28]
 800da9c:	2300      	movs	r3, #0
 800da9e:	930a      	str	r3, [sp, #40]	; 0x28
 800daa0:	e7bf      	b.n	800da22 <_dtoa_r+0x1da>
 800daa2:	2300      	movs	r3, #0
 800daa4:	9308      	str	r3, [sp, #32]
 800daa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	dc55      	bgt.n	800db58 <_dtoa_r+0x310>
 800daac:	2301      	movs	r3, #1
 800daae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dab2:	461a      	mov	r2, r3
 800dab4:	9209      	str	r2, [sp, #36]	; 0x24
 800dab6:	e00c      	b.n	800dad2 <_dtoa_r+0x28a>
 800dab8:	2301      	movs	r3, #1
 800daba:	e7f3      	b.n	800daa4 <_dtoa_r+0x25c>
 800dabc:	2300      	movs	r3, #0
 800dabe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dac0:	9308      	str	r3, [sp, #32]
 800dac2:	9b00      	ldr	r3, [sp, #0]
 800dac4:	4413      	add	r3, r2
 800dac6:	9302      	str	r3, [sp, #8]
 800dac8:	3301      	adds	r3, #1
 800daca:	2b01      	cmp	r3, #1
 800dacc:	9303      	str	r3, [sp, #12]
 800dace:	bfb8      	it	lt
 800dad0:	2301      	movlt	r3, #1
 800dad2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dad4:	2200      	movs	r2, #0
 800dad6:	6042      	str	r2, [r0, #4]
 800dad8:	2204      	movs	r2, #4
 800dada:	f102 0614 	add.w	r6, r2, #20
 800dade:	429e      	cmp	r6, r3
 800dae0:	6841      	ldr	r1, [r0, #4]
 800dae2:	d93d      	bls.n	800db60 <_dtoa_r+0x318>
 800dae4:	4620      	mov	r0, r4
 800dae6:	f000 fcb7 	bl	800e458 <_Balloc>
 800daea:	9001      	str	r0, [sp, #4]
 800daec:	2800      	cmp	r0, #0
 800daee:	d13b      	bne.n	800db68 <_dtoa_r+0x320>
 800daf0:	4b11      	ldr	r3, [pc, #68]	; (800db38 <_dtoa_r+0x2f0>)
 800daf2:	4602      	mov	r2, r0
 800daf4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800daf8:	e6c0      	b.n	800d87c <_dtoa_r+0x34>
 800dafa:	2301      	movs	r3, #1
 800dafc:	e7df      	b.n	800dabe <_dtoa_r+0x276>
 800dafe:	bf00      	nop
 800db00:	636f4361 	.word	0x636f4361
 800db04:	3fd287a7 	.word	0x3fd287a7
 800db08:	8b60c8b3 	.word	0x8b60c8b3
 800db0c:	3fc68a28 	.word	0x3fc68a28
 800db10:	509f79fb 	.word	0x509f79fb
 800db14:	3fd34413 	.word	0x3fd34413
 800db18:	08010275 	.word	0x08010275
 800db1c:	0801028c 	.word	0x0801028c
 800db20:	7ff00000 	.word	0x7ff00000
 800db24:	08010271 	.word	0x08010271
 800db28:	08010268 	.word	0x08010268
 800db2c:	08010245 	.word	0x08010245
 800db30:	3ff80000 	.word	0x3ff80000
 800db34:	08010380 	.word	0x08010380
 800db38:	080102e7 	.word	0x080102e7
 800db3c:	2501      	movs	r5, #1
 800db3e:	2300      	movs	r3, #0
 800db40:	9306      	str	r3, [sp, #24]
 800db42:	9508      	str	r5, [sp, #32]
 800db44:	f04f 33ff 	mov.w	r3, #4294967295
 800db48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800db4c:	2200      	movs	r2, #0
 800db4e:	2312      	movs	r3, #18
 800db50:	e7b0      	b.n	800dab4 <_dtoa_r+0x26c>
 800db52:	2301      	movs	r3, #1
 800db54:	9308      	str	r3, [sp, #32]
 800db56:	e7f5      	b.n	800db44 <_dtoa_r+0x2fc>
 800db58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800db5e:	e7b8      	b.n	800dad2 <_dtoa_r+0x28a>
 800db60:	3101      	adds	r1, #1
 800db62:	6041      	str	r1, [r0, #4]
 800db64:	0052      	lsls	r2, r2, #1
 800db66:	e7b8      	b.n	800dada <_dtoa_r+0x292>
 800db68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db6a:	9a01      	ldr	r2, [sp, #4]
 800db6c:	601a      	str	r2, [r3, #0]
 800db6e:	9b03      	ldr	r3, [sp, #12]
 800db70:	2b0e      	cmp	r3, #14
 800db72:	f200 809d 	bhi.w	800dcb0 <_dtoa_r+0x468>
 800db76:	2d00      	cmp	r5, #0
 800db78:	f000 809a 	beq.w	800dcb0 <_dtoa_r+0x468>
 800db7c:	9b00      	ldr	r3, [sp, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	dd32      	ble.n	800dbe8 <_dtoa_r+0x3a0>
 800db82:	4ab7      	ldr	r2, [pc, #732]	; (800de60 <_dtoa_r+0x618>)
 800db84:	f003 030f 	and.w	r3, r3, #15
 800db88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800db8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db90:	9b00      	ldr	r3, [sp, #0]
 800db92:	05d8      	lsls	r0, r3, #23
 800db94:	ea4f 1723 	mov.w	r7, r3, asr #4
 800db98:	d516      	bpl.n	800dbc8 <_dtoa_r+0x380>
 800db9a:	4bb2      	ldr	r3, [pc, #712]	; (800de64 <_dtoa_r+0x61c>)
 800db9c:	ec51 0b19 	vmov	r0, r1, d9
 800dba0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dba4:	f7f2 fe5a 	bl	800085c <__aeabi_ddiv>
 800dba8:	f007 070f 	and.w	r7, r7, #15
 800dbac:	4682      	mov	sl, r0
 800dbae:	468b      	mov	fp, r1
 800dbb0:	2503      	movs	r5, #3
 800dbb2:	4eac      	ldr	r6, [pc, #688]	; (800de64 <_dtoa_r+0x61c>)
 800dbb4:	b957      	cbnz	r7, 800dbcc <_dtoa_r+0x384>
 800dbb6:	4642      	mov	r2, r8
 800dbb8:	464b      	mov	r3, r9
 800dbba:	4650      	mov	r0, sl
 800dbbc:	4659      	mov	r1, fp
 800dbbe:	f7f2 fe4d 	bl	800085c <__aeabi_ddiv>
 800dbc2:	4682      	mov	sl, r0
 800dbc4:	468b      	mov	fp, r1
 800dbc6:	e028      	b.n	800dc1a <_dtoa_r+0x3d2>
 800dbc8:	2502      	movs	r5, #2
 800dbca:	e7f2      	b.n	800dbb2 <_dtoa_r+0x36a>
 800dbcc:	07f9      	lsls	r1, r7, #31
 800dbce:	d508      	bpl.n	800dbe2 <_dtoa_r+0x39a>
 800dbd0:	4640      	mov	r0, r8
 800dbd2:	4649      	mov	r1, r9
 800dbd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dbd8:	f7f2 fd16 	bl	8000608 <__aeabi_dmul>
 800dbdc:	3501      	adds	r5, #1
 800dbde:	4680      	mov	r8, r0
 800dbe0:	4689      	mov	r9, r1
 800dbe2:	107f      	asrs	r7, r7, #1
 800dbe4:	3608      	adds	r6, #8
 800dbe6:	e7e5      	b.n	800dbb4 <_dtoa_r+0x36c>
 800dbe8:	f000 809b 	beq.w	800dd22 <_dtoa_r+0x4da>
 800dbec:	9b00      	ldr	r3, [sp, #0]
 800dbee:	4f9d      	ldr	r7, [pc, #628]	; (800de64 <_dtoa_r+0x61c>)
 800dbf0:	425e      	negs	r6, r3
 800dbf2:	4b9b      	ldr	r3, [pc, #620]	; (800de60 <_dtoa_r+0x618>)
 800dbf4:	f006 020f 	and.w	r2, r6, #15
 800dbf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc00:	ec51 0b19 	vmov	r0, r1, d9
 800dc04:	f7f2 fd00 	bl	8000608 <__aeabi_dmul>
 800dc08:	1136      	asrs	r6, r6, #4
 800dc0a:	4682      	mov	sl, r0
 800dc0c:	468b      	mov	fp, r1
 800dc0e:	2300      	movs	r3, #0
 800dc10:	2502      	movs	r5, #2
 800dc12:	2e00      	cmp	r6, #0
 800dc14:	d17a      	bne.n	800dd0c <_dtoa_r+0x4c4>
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d1d3      	bne.n	800dbc2 <_dtoa_r+0x37a>
 800dc1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f000 8082 	beq.w	800dd26 <_dtoa_r+0x4de>
 800dc22:	4b91      	ldr	r3, [pc, #580]	; (800de68 <_dtoa_r+0x620>)
 800dc24:	2200      	movs	r2, #0
 800dc26:	4650      	mov	r0, sl
 800dc28:	4659      	mov	r1, fp
 800dc2a:	f7f2 ff5f 	bl	8000aec <__aeabi_dcmplt>
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d079      	beq.n	800dd26 <_dtoa_r+0x4de>
 800dc32:	9b03      	ldr	r3, [sp, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d076      	beq.n	800dd26 <_dtoa_r+0x4de>
 800dc38:	9b02      	ldr	r3, [sp, #8]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	dd36      	ble.n	800dcac <_dtoa_r+0x464>
 800dc3e:	9b00      	ldr	r3, [sp, #0]
 800dc40:	4650      	mov	r0, sl
 800dc42:	4659      	mov	r1, fp
 800dc44:	1e5f      	subs	r7, r3, #1
 800dc46:	2200      	movs	r2, #0
 800dc48:	4b88      	ldr	r3, [pc, #544]	; (800de6c <_dtoa_r+0x624>)
 800dc4a:	f7f2 fcdd 	bl	8000608 <__aeabi_dmul>
 800dc4e:	9e02      	ldr	r6, [sp, #8]
 800dc50:	4682      	mov	sl, r0
 800dc52:	468b      	mov	fp, r1
 800dc54:	3501      	adds	r5, #1
 800dc56:	4628      	mov	r0, r5
 800dc58:	f7f2 fc6c 	bl	8000534 <__aeabi_i2d>
 800dc5c:	4652      	mov	r2, sl
 800dc5e:	465b      	mov	r3, fp
 800dc60:	f7f2 fcd2 	bl	8000608 <__aeabi_dmul>
 800dc64:	4b82      	ldr	r3, [pc, #520]	; (800de70 <_dtoa_r+0x628>)
 800dc66:	2200      	movs	r2, #0
 800dc68:	f7f2 fb18 	bl	800029c <__adddf3>
 800dc6c:	46d0      	mov	r8, sl
 800dc6e:	46d9      	mov	r9, fp
 800dc70:	4682      	mov	sl, r0
 800dc72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800dc76:	2e00      	cmp	r6, #0
 800dc78:	d158      	bne.n	800dd2c <_dtoa_r+0x4e4>
 800dc7a:	4b7e      	ldr	r3, [pc, #504]	; (800de74 <_dtoa_r+0x62c>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	4640      	mov	r0, r8
 800dc80:	4649      	mov	r1, r9
 800dc82:	f7f2 fb09 	bl	8000298 <__aeabi_dsub>
 800dc86:	4652      	mov	r2, sl
 800dc88:	465b      	mov	r3, fp
 800dc8a:	4680      	mov	r8, r0
 800dc8c:	4689      	mov	r9, r1
 800dc8e:	f7f2 ff4b 	bl	8000b28 <__aeabi_dcmpgt>
 800dc92:	2800      	cmp	r0, #0
 800dc94:	f040 8295 	bne.w	800e1c2 <_dtoa_r+0x97a>
 800dc98:	4652      	mov	r2, sl
 800dc9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dc9e:	4640      	mov	r0, r8
 800dca0:	4649      	mov	r1, r9
 800dca2:	f7f2 ff23 	bl	8000aec <__aeabi_dcmplt>
 800dca6:	2800      	cmp	r0, #0
 800dca8:	f040 8289 	bne.w	800e1be <_dtoa_r+0x976>
 800dcac:	ec5b ab19 	vmov	sl, fp, d9
 800dcb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f2c0 8148 	blt.w	800df48 <_dtoa_r+0x700>
 800dcb8:	9a00      	ldr	r2, [sp, #0]
 800dcba:	2a0e      	cmp	r2, #14
 800dcbc:	f300 8144 	bgt.w	800df48 <_dtoa_r+0x700>
 800dcc0:	4b67      	ldr	r3, [pc, #412]	; (800de60 <_dtoa_r+0x618>)
 800dcc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dcca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	f280 80d5 	bge.w	800de7c <_dtoa_r+0x634>
 800dcd2:	9b03      	ldr	r3, [sp, #12]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f300 80d1 	bgt.w	800de7c <_dtoa_r+0x634>
 800dcda:	f040 826f 	bne.w	800e1bc <_dtoa_r+0x974>
 800dcde:	4b65      	ldr	r3, [pc, #404]	; (800de74 <_dtoa_r+0x62c>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	4640      	mov	r0, r8
 800dce4:	4649      	mov	r1, r9
 800dce6:	f7f2 fc8f 	bl	8000608 <__aeabi_dmul>
 800dcea:	4652      	mov	r2, sl
 800dcec:	465b      	mov	r3, fp
 800dcee:	f7f2 ff11 	bl	8000b14 <__aeabi_dcmpge>
 800dcf2:	9e03      	ldr	r6, [sp, #12]
 800dcf4:	4637      	mov	r7, r6
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	f040 8245 	bne.w	800e186 <_dtoa_r+0x93e>
 800dcfc:	9d01      	ldr	r5, [sp, #4]
 800dcfe:	2331      	movs	r3, #49	; 0x31
 800dd00:	f805 3b01 	strb.w	r3, [r5], #1
 800dd04:	9b00      	ldr	r3, [sp, #0]
 800dd06:	3301      	adds	r3, #1
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	e240      	b.n	800e18e <_dtoa_r+0x946>
 800dd0c:	07f2      	lsls	r2, r6, #31
 800dd0e:	d505      	bpl.n	800dd1c <_dtoa_r+0x4d4>
 800dd10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd14:	f7f2 fc78 	bl	8000608 <__aeabi_dmul>
 800dd18:	3501      	adds	r5, #1
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	1076      	asrs	r6, r6, #1
 800dd1e:	3708      	adds	r7, #8
 800dd20:	e777      	b.n	800dc12 <_dtoa_r+0x3ca>
 800dd22:	2502      	movs	r5, #2
 800dd24:	e779      	b.n	800dc1a <_dtoa_r+0x3d2>
 800dd26:	9f00      	ldr	r7, [sp, #0]
 800dd28:	9e03      	ldr	r6, [sp, #12]
 800dd2a:	e794      	b.n	800dc56 <_dtoa_r+0x40e>
 800dd2c:	9901      	ldr	r1, [sp, #4]
 800dd2e:	4b4c      	ldr	r3, [pc, #304]	; (800de60 <_dtoa_r+0x618>)
 800dd30:	4431      	add	r1, r6
 800dd32:	910d      	str	r1, [sp, #52]	; 0x34
 800dd34:	9908      	ldr	r1, [sp, #32]
 800dd36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dd3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dd3e:	2900      	cmp	r1, #0
 800dd40:	d043      	beq.n	800ddca <_dtoa_r+0x582>
 800dd42:	494d      	ldr	r1, [pc, #308]	; (800de78 <_dtoa_r+0x630>)
 800dd44:	2000      	movs	r0, #0
 800dd46:	f7f2 fd89 	bl	800085c <__aeabi_ddiv>
 800dd4a:	4652      	mov	r2, sl
 800dd4c:	465b      	mov	r3, fp
 800dd4e:	f7f2 faa3 	bl	8000298 <__aeabi_dsub>
 800dd52:	9d01      	ldr	r5, [sp, #4]
 800dd54:	4682      	mov	sl, r0
 800dd56:	468b      	mov	fp, r1
 800dd58:	4649      	mov	r1, r9
 800dd5a:	4640      	mov	r0, r8
 800dd5c:	f7f2 ff04 	bl	8000b68 <__aeabi_d2iz>
 800dd60:	4606      	mov	r6, r0
 800dd62:	f7f2 fbe7 	bl	8000534 <__aeabi_i2d>
 800dd66:	4602      	mov	r2, r0
 800dd68:	460b      	mov	r3, r1
 800dd6a:	4640      	mov	r0, r8
 800dd6c:	4649      	mov	r1, r9
 800dd6e:	f7f2 fa93 	bl	8000298 <__aeabi_dsub>
 800dd72:	3630      	adds	r6, #48	; 0x30
 800dd74:	f805 6b01 	strb.w	r6, [r5], #1
 800dd78:	4652      	mov	r2, sl
 800dd7a:	465b      	mov	r3, fp
 800dd7c:	4680      	mov	r8, r0
 800dd7e:	4689      	mov	r9, r1
 800dd80:	f7f2 feb4 	bl	8000aec <__aeabi_dcmplt>
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d163      	bne.n	800de50 <_dtoa_r+0x608>
 800dd88:	4642      	mov	r2, r8
 800dd8a:	464b      	mov	r3, r9
 800dd8c:	4936      	ldr	r1, [pc, #216]	; (800de68 <_dtoa_r+0x620>)
 800dd8e:	2000      	movs	r0, #0
 800dd90:	f7f2 fa82 	bl	8000298 <__aeabi_dsub>
 800dd94:	4652      	mov	r2, sl
 800dd96:	465b      	mov	r3, fp
 800dd98:	f7f2 fea8 	bl	8000aec <__aeabi_dcmplt>
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	f040 80b5 	bne.w	800df0c <_dtoa_r+0x6c4>
 800dda2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dda4:	429d      	cmp	r5, r3
 800dda6:	d081      	beq.n	800dcac <_dtoa_r+0x464>
 800dda8:	4b30      	ldr	r3, [pc, #192]	; (800de6c <_dtoa_r+0x624>)
 800ddaa:	2200      	movs	r2, #0
 800ddac:	4650      	mov	r0, sl
 800ddae:	4659      	mov	r1, fp
 800ddb0:	f7f2 fc2a 	bl	8000608 <__aeabi_dmul>
 800ddb4:	4b2d      	ldr	r3, [pc, #180]	; (800de6c <_dtoa_r+0x624>)
 800ddb6:	4682      	mov	sl, r0
 800ddb8:	468b      	mov	fp, r1
 800ddba:	4640      	mov	r0, r8
 800ddbc:	4649      	mov	r1, r9
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f7f2 fc22 	bl	8000608 <__aeabi_dmul>
 800ddc4:	4680      	mov	r8, r0
 800ddc6:	4689      	mov	r9, r1
 800ddc8:	e7c6      	b.n	800dd58 <_dtoa_r+0x510>
 800ddca:	4650      	mov	r0, sl
 800ddcc:	4659      	mov	r1, fp
 800ddce:	f7f2 fc1b 	bl	8000608 <__aeabi_dmul>
 800ddd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddd4:	9d01      	ldr	r5, [sp, #4]
 800ddd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ddd8:	4682      	mov	sl, r0
 800ddda:	468b      	mov	fp, r1
 800dddc:	4649      	mov	r1, r9
 800ddde:	4640      	mov	r0, r8
 800dde0:	f7f2 fec2 	bl	8000b68 <__aeabi_d2iz>
 800dde4:	4606      	mov	r6, r0
 800dde6:	f7f2 fba5 	bl	8000534 <__aeabi_i2d>
 800ddea:	3630      	adds	r6, #48	; 0x30
 800ddec:	4602      	mov	r2, r0
 800ddee:	460b      	mov	r3, r1
 800ddf0:	4640      	mov	r0, r8
 800ddf2:	4649      	mov	r1, r9
 800ddf4:	f7f2 fa50 	bl	8000298 <__aeabi_dsub>
 800ddf8:	f805 6b01 	strb.w	r6, [r5], #1
 800ddfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddfe:	429d      	cmp	r5, r3
 800de00:	4680      	mov	r8, r0
 800de02:	4689      	mov	r9, r1
 800de04:	f04f 0200 	mov.w	r2, #0
 800de08:	d124      	bne.n	800de54 <_dtoa_r+0x60c>
 800de0a:	4b1b      	ldr	r3, [pc, #108]	; (800de78 <_dtoa_r+0x630>)
 800de0c:	4650      	mov	r0, sl
 800de0e:	4659      	mov	r1, fp
 800de10:	f7f2 fa44 	bl	800029c <__adddf3>
 800de14:	4602      	mov	r2, r0
 800de16:	460b      	mov	r3, r1
 800de18:	4640      	mov	r0, r8
 800de1a:	4649      	mov	r1, r9
 800de1c:	f7f2 fe84 	bl	8000b28 <__aeabi_dcmpgt>
 800de20:	2800      	cmp	r0, #0
 800de22:	d173      	bne.n	800df0c <_dtoa_r+0x6c4>
 800de24:	4652      	mov	r2, sl
 800de26:	465b      	mov	r3, fp
 800de28:	4913      	ldr	r1, [pc, #76]	; (800de78 <_dtoa_r+0x630>)
 800de2a:	2000      	movs	r0, #0
 800de2c:	f7f2 fa34 	bl	8000298 <__aeabi_dsub>
 800de30:	4602      	mov	r2, r0
 800de32:	460b      	mov	r3, r1
 800de34:	4640      	mov	r0, r8
 800de36:	4649      	mov	r1, r9
 800de38:	f7f2 fe58 	bl	8000aec <__aeabi_dcmplt>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	f43f af35 	beq.w	800dcac <_dtoa_r+0x464>
 800de42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800de44:	1e6b      	subs	r3, r5, #1
 800de46:	930f      	str	r3, [sp, #60]	; 0x3c
 800de48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de4c:	2b30      	cmp	r3, #48	; 0x30
 800de4e:	d0f8      	beq.n	800de42 <_dtoa_r+0x5fa>
 800de50:	9700      	str	r7, [sp, #0]
 800de52:	e049      	b.n	800dee8 <_dtoa_r+0x6a0>
 800de54:	4b05      	ldr	r3, [pc, #20]	; (800de6c <_dtoa_r+0x624>)
 800de56:	f7f2 fbd7 	bl	8000608 <__aeabi_dmul>
 800de5a:	4680      	mov	r8, r0
 800de5c:	4689      	mov	r9, r1
 800de5e:	e7bd      	b.n	800dddc <_dtoa_r+0x594>
 800de60:	08010380 	.word	0x08010380
 800de64:	08010358 	.word	0x08010358
 800de68:	3ff00000 	.word	0x3ff00000
 800de6c:	40240000 	.word	0x40240000
 800de70:	401c0000 	.word	0x401c0000
 800de74:	40140000 	.word	0x40140000
 800de78:	3fe00000 	.word	0x3fe00000
 800de7c:	9d01      	ldr	r5, [sp, #4]
 800de7e:	4656      	mov	r6, sl
 800de80:	465f      	mov	r7, fp
 800de82:	4642      	mov	r2, r8
 800de84:	464b      	mov	r3, r9
 800de86:	4630      	mov	r0, r6
 800de88:	4639      	mov	r1, r7
 800de8a:	f7f2 fce7 	bl	800085c <__aeabi_ddiv>
 800de8e:	f7f2 fe6b 	bl	8000b68 <__aeabi_d2iz>
 800de92:	4682      	mov	sl, r0
 800de94:	f7f2 fb4e 	bl	8000534 <__aeabi_i2d>
 800de98:	4642      	mov	r2, r8
 800de9a:	464b      	mov	r3, r9
 800de9c:	f7f2 fbb4 	bl	8000608 <__aeabi_dmul>
 800dea0:	4602      	mov	r2, r0
 800dea2:	460b      	mov	r3, r1
 800dea4:	4630      	mov	r0, r6
 800dea6:	4639      	mov	r1, r7
 800dea8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800deac:	f7f2 f9f4 	bl	8000298 <__aeabi_dsub>
 800deb0:	f805 6b01 	strb.w	r6, [r5], #1
 800deb4:	9e01      	ldr	r6, [sp, #4]
 800deb6:	9f03      	ldr	r7, [sp, #12]
 800deb8:	1bae      	subs	r6, r5, r6
 800deba:	42b7      	cmp	r7, r6
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	d135      	bne.n	800df2e <_dtoa_r+0x6e6>
 800dec2:	f7f2 f9eb 	bl	800029c <__adddf3>
 800dec6:	4642      	mov	r2, r8
 800dec8:	464b      	mov	r3, r9
 800deca:	4606      	mov	r6, r0
 800decc:	460f      	mov	r7, r1
 800dece:	f7f2 fe2b 	bl	8000b28 <__aeabi_dcmpgt>
 800ded2:	b9d0      	cbnz	r0, 800df0a <_dtoa_r+0x6c2>
 800ded4:	4642      	mov	r2, r8
 800ded6:	464b      	mov	r3, r9
 800ded8:	4630      	mov	r0, r6
 800deda:	4639      	mov	r1, r7
 800dedc:	f7f2 fdfc 	bl	8000ad8 <__aeabi_dcmpeq>
 800dee0:	b110      	cbz	r0, 800dee8 <_dtoa_r+0x6a0>
 800dee2:	f01a 0f01 	tst.w	sl, #1
 800dee6:	d110      	bne.n	800df0a <_dtoa_r+0x6c2>
 800dee8:	4620      	mov	r0, r4
 800deea:	ee18 1a10 	vmov	r1, s16
 800deee:	f000 faf3 	bl	800e4d8 <_Bfree>
 800def2:	2300      	movs	r3, #0
 800def4:	9800      	ldr	r0, [sp, #0]
 800def6:	702b      	strb	r3, [r5, #0]
 800def8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800defa:	3001      	adds	r0, #1
 800defc:	6018      	str	r0, [r3, #0]
 800defe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df00:	2b00      	cmp	r3, #0
 800df02:	f43f acf1 	beq.w	800d8e8 <_dtoa_r+0xa0>
 800df06:	601d      	str	r5, [r3, #0]
 800df08:	e4ee      	b.n	800d8e8 <_dtoa_r+0xa0>
 800df0a:	9f00      	ldr	r7, [sp, #0]
 800df0c:	462b      	mov	r3, r5
 800df0e:	461d      	mov	r5, r3
 800df10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df14:	2a39      	cmp	r2, #57	; 0x39
 800df16:	d106      	bne.n	800df26 <_dtoa_r+0x6de>
 800df18:	9a01      	ldr	r2, [sp, #4]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d1f7      	bne.n	800df0e <_dtoa_r+0x6c6>
 800df1e:	9901      	ldr	r1, [sp, #4]
 800df20:	2230      	movs	r2, #48	; 0x30
 800df22:	3701      	adds	r7, #1
 800df24:	700a      	strb	r2, [r1, #0]
 800df26:	781a      	ldrb	r2, [r3, #0]
 800df28:	3201      	adds	r2, #1
 800df2a:	701a      	strb	r2, [r3, #0]
 800df2c:	e790      	b.n	800de50 <_dtoa_r+0x608>
 800df2e:	4ba6      	ldr	r3, [pc, #664]	; (800e1c8 <_dtoa_r+0x980>)
 800df30:	2200      	movs	r2, #0
 800df32:	f7f2 fb69 	bl	8000608 <__aeabi_dmul>
 800df36:	2200      	movs	r2, #0
 800df38:	2300      	movs	r3, #0
 800df3a:	4606      	mov	r6, r0
 800df3c:	460f      	mov	r7, r1
 800df3e:	f7f2 fdcb 	bl	8000ad8 <__aeabi_dcmpeq>
 800df42:	2800      	cmp	r0, #0
 800df44:	d09d      	beq.n	800de82 <_dtoa_r+0x63a>
 800df46:	e7cf      	b.n	800dee8 <_dtoa_r+0x6a0>
 800df48:	9a08      	ldr	r2, [sp, #32]
 800df4a:	2a00      	cmp	r2, #0
 800df4c:	f000 80d7 	beq.w	800e0fe <_dtoa_r+0x8b6>
 800df50:	9a06      	ldr	r2, [sp, #24]
 800df52:	2a01      	cmp	r2, #1
 800df54:	f300 80ba 	bgt.w	800e0cc <_dtoa_r+0x884>
 800df58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df5a:	2a00      	cmp	r2, #0
 800df5c:	f000 80b2 	beq.w	800e0c4 <_dtoa_r+0x87c>
 800df60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800df64:	9e07      	ldr	r6, [sp, #28]
 800df66:	9d04      	ldr	r5, [sp, #16]
 800df68:	9a04      	ldr	r2, [sp, #16]
 800df6a:	441a      	add	r2, r3
 800df6c:	9204      	str	r2, [sp, #16]
 800df6e:	9a05      	ldr	r2, [sp, #20]
 800df70:	2101      	movs	r1, #1
 800df72:	441a      	add	r2, r3
 800df74:	4620      	mov	r0, r4
 800df76:	9205      	str	r2, [sp, #20]
 800df78:	f000 fb66 	bl	800e648 <__i2b>
 800df7c:	4607      	mov	r7, r0
 800df7e:	2d00      	cmp	r5, #0
 800df80:	dd0c      	ble.n	800df9c <_dtoa_r+0x754>
 800df82:	9b05      	ldr	r3, [sp, #20]
 800df84:	2b00      	cmp	r3, #0
 800df86:	dd09      	ble.n	800df9c <_dtoa_r+0x754>
 800df88:	42ab      	cmp	r3, r5
 800df8a:	9a04      	ldr	r2, [sp, #16]
 800df8c:	bfa8      	it	ge
 800df8e:	462b      	movge	r3, r5
 800df90:	1ad2      	subs	r2, r2, r3
 800df92:	9204      	str	r2, [sp, #16]
 800df94:	9a05      	ldr	r2, [sp, #20]
 800df96:	1aed      	subs	r5, r5, r3
 800df98:	1ad3      	subs	r3, r2, r3
 800df9a:	9305      	str	r3, [sp, #20]
 800df9c:	9b07      	ldr	r3, [sp, #28]
 800df9e:	b31b      	cbz	r3, 800dfe8 <_dtoa_r+0x7a0>
 800dfa0:	9b08      	ldr	r3, [sp, #32]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	f000 80af 	beq.w	800e106 <_dtoa_r+0x8be>
 800dfa8:	2e00      	cmp	r6, #0
 800dfaa:	dd13      	ble.n	800dfd4 <_dtoa_r+0x78c>
 800dfac:	4639      	mov	r1, r7
 800dfae:	4632      	mov	r2, r6
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f000 fc09 	bl	800e7c8 <__pow5mult>
 800dfb6:	ee18 2a10 	vmov	r2, s16
 800dfba:	4601      	mov	r1, r0
 800dfbc:	4607      	mov	r7, r0
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f000 fb58 	bl	800e674 <__multiply>
 800dfc4:	ee18 1a10 	vmov	r1, s16
 800dfc8:	4680      	mov	r8, r0
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f000 fa84 	bl	800e4d8 <_Bfree>
 800dfd0:	ee08 8a10 	vmov	s16, r8
 800dfd4:	9b07      	ldr	r3, [sp, #28]
 800dfd6:	1b9a      	subs	r2, r3, r6
 800dfd8:	d006      	beq.n	800dfe8 <_dtoa_r+0x7a0>
 800dfda:	ee18 1a10 	vmov	r1, s16
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f000 fbf2 	bl	800e7c8 <__pow5mult>
 800dfe4:	ee08 0a10 	vmov	s16, r0
 800dfe8:	2101      	movs	r1, #1
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 fb2c 	bl	800e648 <__i2b>
 800dff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	4606      	mov	r6, r0
 800dff6:	f340 8088 	ble.w	800e10a <_dtoa_r+0x8c2>
 800dffa:	461a      	mov	r2, r3
 800dffc:	4601      	mov	r1, r0
 800dffe:	4620      	mov	r0, r4
 800e000:	f000 fbe2 	bl	800e7c8 <__pow5mult>
 800e004:	9b06      	ldr	r3, [sp, #24]
 800e006:	2b01      	cmp	r3, #1
 800e008:	4606      	mov	r6, r0
 800e00a:	f340 8081 	ble.w	800e110 <_dtoa_r+0x8c8>
 800e00e:	f04f 0800 	mov.w	r8, #0
 800e012:	6933      	ldr	r3, [r6, #16]
 800e014:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e018:	6918      	ldr	r0, [r3, #16]
 800e01a:	f000 fac5 	bl	800e5a8 <__hi0bits>
 800e01e:	f1c0 0020 	rsb	r0, r0, #32
 800e022:	9b05      	ldr	r3, [sp, #20]
 800e024:	4418      	add	r0, r3
 800e026:	f010 001f 	ands.w	r0, r0, #31
 800e02a:	f000 8092 	beq.w	800e152 <_dtoa_r+0x90a>
 800e02e:	f1c0 0320 	rsb	r3, r0, #32
 800e032:	2b04      	cmp	r3, #4
 800e034:	f340 808a 	ble.w	800e14c <_dtoa_r+0x904>
 800e038:	f1c0 001c 	rsb	r0, r0, #28
 800e03c:	9b04      	ldr	r3, [sp, #16]
 800e03e:	4403      	add	r3, r0
 800e040:	9304      	str	r3, [sp, #16]
 800e042:	9b05      	ldr	r3, [sp, #20]
 800e044:	4403      	add	r3, r0
 800e046:	4405      	add	r5, r0
 800e048:	9305      	str	r3, [sp, #20]
 800e04a:	9b04      	ldr	r3, [sp, #16]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	dd07      	ble.n	800e060 <_dtoa_r+0x818>
 800e050:	ee18 1a10 	vmov	r1, s16
 800e054:	461a      	mov	r2, r3
 800e056:	4620      	mov	r0, r4
 800e058:	f000 fc10 	bl	800e87c <__lshift>
 800e05c:	ee08 0a10 	vmov	s16, r0
 800e060:	9b05      	ldr	r3, [sp, #20]
 800e062:	2b00      	cmp	r3, #0
 800e064:	dd05      	ble.n	800e072 <_dtoa_r+0x82a>
 800e066:	4631      	mov	r1, r6
 800e068:	461a      	mov	r2, r3
 800e06a:	4620      	mov	r0, r4
 800e06c:	f000 fc06 	bl	800e87c <__lshift>
 800e070:	4606      	mov	r6, r0
 800e072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e074:	2b00      	cmp	r3, #0
 800e076:	d06e      	beq.n	800e156 <_dtoa_r+0x90e>
 800e078:	ee18 0a10 	vmov	r0, s16
 800e07c:	4631      	mov	r1, r6
 800e07e:	f000 fc6d 	bl	800e95c <__mcmp>
 800e082:	2800      	cmp	r0, #0
 800e084:	da67      	bge.n	800e156 <_dtoa_r+0x90e>
 800e086:	9b00      	ldr	r3, [sp, #0]
 800e088:	3b01      	subs	r3, #1
 800e08a:	ee18 1a10 	vmov	r1, s16
 800e08e:	9300      	str	r3, [sp, #0]
 800e090:	220a      	movs	r2, #10
 800e092:	2300      	movs	r3, #0
 800e094:	4620      	mov	r0, r4
 800e096:	f000 fa41 	bl	800e51c <__multadd>
 800e09a:	9b08      	ldr	r3, [sp, #32]
 800e09c:	ee08 0a10 	vmov	s16, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	f000 81b1 	beq.w	800e408 <_dtoa_r+0xbc0>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	4639      	mov	r1, r7
 800e0aa:	220a      	movs	r2, #10
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f000 fa35 	bl	800e51c <__multadd>
 800e0b2:	9b02      	ldr	r3, [sp, #8]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	4607      	mov	r7, r0
 800e0b8:	f300 808e 	bgt.w	800e1d8 <_dtoa_r+0x990>
 800e0bc:	9b06      	ldr	r3, [sp, #24]
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	dc51      	bgt.n	800e166 <_dtoa_r+0x91e>
 800e0c2:	e089      	b.n	800e1d8 <_dtoa_r+0x990>
 800e0c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e0ca:	e74b      	b.n	800df64 <_dtoa_r+0x71c>
 800e0cc:	9b03      	ldr	r3, [sp, #12]
 800e0ce:	1e5e      	subs	r6, r3, #1
 800e0d0:	9b07      	ldr	r3, [sp, #28]
 800e0d2:	42b3      	cmp	r3, r6
 800e0d4:	bfbf      	itttt	lt
 800e0d6:	9b07      	ldrlt	r3, [sp, #28]
 800e0d8:	9607      	strlt	r6, [sp, #28]
 800e0da:	1af2      	sublt	r2, r6, r3
 800e0dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e0de:	bfb6      	itet	lt
 800e0e0:	189b      	addlt	r3, r3, r2
 800e0e2:	1b9e      	subge	r6, r3, r6
 800e0e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e0e6:	9b03      	ldr	r3, [sp, #12]
 800e0e8:	bfb8      	it	lt
 800e0ea:	2600      	movlt	r6, #0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	bfb7      	itett	lt
 800e0f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e0f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e0f8:	1a9d      	sublt	r5, r3, r2
 800e0fa:	2300      	movlt	r3, #0
 800e0fc:	e734      	b.n	800df68 <_dtoa_r+0x720>
 800e0fe:	9e07      	ldr	r6, [sp, #28]
 800e100:	9d04      	ldr	r5, [sp, #16]
 800e102:	9f08      	ldr	r7, [sp, #32]
 800e104:	e73b      	b.n	800df7e <_dtoa_r+0x736>
 800e106:	9a07      	ldr	r2, [sp, #28]
 800e108:	e767      	b.n	800dfda <_dtoa_r+0x792>
 800e10a:	9b06      	ldr	r3, [sp, #24]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	dc18      	bgt.n	800e142 <_dtoa_r+0x8fa>
 800e110:	f1ba 0f00 	cmp.w	sl, #0
 800e114:	d115      	bne.n	800e142 <_dtoa_r+0x8fa>
 800e116:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e11a:	b993      	cbnz	r3, 800e142 <_dtoa_r+0x8fa>
 800e11c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e120:	0d1b      	lsrs	r3, r3, #20
 800e122:	051b      	lsls	r3, r3, #20
 800e124:	b183      	cbz	r3, 800e148 <_dtoa_r+0x900>
 800e126:	9b04      	ldr	r3, [sp, #16]
 800e128:	3301      	adds	r3, #1
 800e12a:	9304      	str	r3, [sp, #16]
 800e12c:	9b05      	ldr	r3, [sp, #20]
 800e12e:	3301      	adds	r3, #1
 800e130:	9305      	str	r3, [sp, #20]
 800e132:	f04f 0801 	mov.w	r8, #1
 800e136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f47f af6a 	bne.w	800e012 <_dtoa_r+0x7ca>
 800e13e:	2001      	movs	r0, #1
 800e140:	e76f      	b.n	800e022 <_dtoa_r+0x7da>
 800e142:	f04f 0800 	mov.w	r8, #0
 800e146:	e7f6      	b.n	800e136 <_dtoa_r+0x8ee>
 800e148:	4698      	mov	r8, r3
 800e14a:	e7f4      	b.n	800e136 <_dtoa_r+0x8ee>
 800e14c:	f43f af7d 	beq.w	800e04a <_dtoa_r+0x802>
 800e150:	4618      	mov	r0, r3
 800e152:	301c      	adds	r0, #28
 800e154:	e772      	b.n	800e03c <_dtoa_r+0x7f4>
 800e156:	9b03      	ldr	r3, [sp, #12]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	dc37      	bgt.n	800e1cc <_dtoa_r+0x984>
 800e15c:	9b06      	ldr	r3, [sp, #24]
 800e15e:	2b02      	cmp	r3, #2
 800e160:	dd34      	ble.n	800e1cc <_dtoa_r+0x984>
 800e162:	9b03      	ldr	r3, [sp, #12]
 800e164:	9302      	str	r3, [sp, #8]
 800e166:	9b02      	ldr	r3, [sp, #8]
 800e168:	b96b      	cbnz	r3, 800e186 <_dtoa_r+0x93e>
 800e16a:	4631      	mov	r1, r6
 800e16c:	2205      	movs	r2, #5
 800e16e:	4620      	mov	r0, r4
 800e170:	f000 f9d4 	bl	800e51c <__multadd>
 800e174:	4601      	mov	r1, r0
 800e176:	4606      	mov	r6, r0
 800e178:	ee18 0a10 	vmov	r0, s16
 800e17c:	f000 fbee 	bl	800e95c <__mcmp>
 800e180:	2800      	cmp	r0, #0
 800e182:	f73f adbb 	bgt.w	800dcfc <_dtoa_r+0x4b4>
 800e186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e188:	9d01      	ldr	r5, [sp, #4]
 800e18a:	43db      	mvns	r3, r3
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	f04f 0800 	mov.w	r8, #0
 800e192:	4631      	mov	r1, r6
 800e194:	4620      	mov	r0, r4
 800e196:	f000 f99f 	bl	800e4d8 <_Bfree>
 800e19a:	2f00      	cmp	r7, #0
 800e19c:	f43f aea4 	beq.w	800dee8 <_dtoa_r+0x6a0>
 800e1a0:	f1b8 0f00 	cmp.w	r8, #0
 800e1a4:	d005      	beq.n	800e1b2 <_dtoa_r+0x96a>
 800e1a6:	45b8      	cmp	r8, r7
 800e1a8:	d003      	beq.n	800e1b2 <_dtoa_r+0x96a>
 800e1aa:	4641      	mov	r1, r8
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	f000 f993 	bl	800e4d8 <_Bfree>
 800e1b2:	4639      	mov	r1, r7
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	f000 f98f 	bl	800e4d8 <_Bfree>
 800e1ba:	e695      	b.n	800dee8 <_dtoa_r+0x6a0>
 800e1bc:	2600      	movs	r6, #0
 800e1be:	4637      	mov	r7, r6
 800e1c0:	e7e1      	b.n	800e186 <_dtoa_r+0x93e>
 800e1c2:	9700      	str	r7, [sp, #0]
 800e1c4:	4637      	mov	r7, r6
 800e1c6:	e599      	b.n	800dcfc <_dtoa_r+0x4b4>
 800e1c8:	40240000 	.word	0x40240000
 800e1cc:	9b08      	ldr	r3, [sp, #32]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	f000 80ca 	beq.w	800e368 <_dtoa_r+0xb20>
 800e1d4:	9b03      	ldr	r3, [sp, #12]
 800e1d6:	9302      	str	r3, [sp, #8]
 800e1d8:	2d00      	cmp	r5, #0
 800e1da:	dd05      	ble.n	800e1e8 <_dtoa_r+0x9a0>
 800e1dc:	4639      	mov	r1, r7
 800e1de:	462a      	mov	r2, r5
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	f000 fb4b 	bl	800e87c <__lshift>
 800e1e6:	4607      	mov	r7, r0
 800e1e8:	f1b8 0f00 	cmp.w	r8, #0
 800e1ec:	d05b      	beq.n	800e2a6 <_dtoa_r+0xa5e>
 800e1ee:	6879      	ldr	r1, [r7, #4]
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	f000 f931 	bl	800e458 <_Balloc>
 800e1f6:	4605      	mov	r5, r0
 800e1f8:	b928      	cbnz	r0, 800e206 <_dtoa_r+0x9be>
 800e1fa:	4b87      	ldr	r3, [pc, #540]	; (800e418 <_dtoa_r+0xbd0>)
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e202:	f7ff bb3b 	b.w	800d87c <_dtoa_r+0x34>
 800e206:	693a      	ldr	r2, [r7, #16]
 800e208:	3202      	adds	r2, #2
 800e20a:	0092      	lsls	r2, r2, #2
 800e20c:	f107 010c 	add.w	r1, r7, #12
 800e210:	300c      	adds	r0, #12
 800e212:	f000 f913 	bl	800e43c <memcpy>
 800e216:	2201      	movs	r2, #1
 800e218:	4629      	mov	r1, r5
 800e21a:	4620      	mov	r0, r4
 800e21c:	f000 fb2e 	bl	800e87c <__lshift>
 800e220:	9b01      	ldr	r3, [sp, #4]
 800e222:	f103 0901 	add.w	r9, r3, #1
 800e226:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e22a:	4413      	add	r3, r2
 800e22c:	9305      	str	r3, [sp, #20]
 800e22e:	f00a 0301 	and.w	r3, sl, #1
 800e232:	46b8      	mov	r8, r7
 800e234:	9304      	str	r3, [sp, #16]
 800e236:	4607      	mov	r7, r0
 800e238:	4631      	mov	r1, r6
 800e23a:	ee18 0a10 	vmov	r0, s16
 800e23e:	f7ff fa75 	bl	800d72c <quorem>
 800e242:	4641      	mov	r1, r8
 800e244:	9002      	str	r0, [sp, #8]
 800e246:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e24a:	ee18 0a10 	vmov	r0, s16
 800e24e:	f000 fb85 	bl	800e95c <__mcmp>
 800e252:	463a      	mov	r2, r7
 800e254:	9003      	str	r0, [sp, #12]
 800e256:	4631      	mov	r1, r6
 800e258:	4620      	mov	r0, r4
 800e25a:	f000 fb9b 	bl	800e994 <__mdiff>
 800e25e:	68c2      	ldr	r2, [r0, #12]
 800e260:	f109 3bff 	add.w	fp, r9, #4294967295
 800e264:	4605      	mov	r5, r0
 800e266:	bb02      	cbnz	r2, 800e2aa <_dtoa_r+0xa62>
 800e268:	4601      	mov	r1, r0
 800e26a:	ee18 0a10 	vmov	r0, s16
 800e26e:	f000 fb75 	bl	800e95c <__mcmp>
 800e272:	4602      	mov	r2, r0
 800e274:	4629      	mov	r1, r5
 800e276:	4620      	mov	r0, r4
 800e278:	9207      	str	r2, [sp, #28]
 800e27a:	f000 f92d 	bl	800e4d8 <_Bfree>
 800e27e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e282:	ea43 0102 	orr.w	r1, r3, r2
 800e286:	9b04      	ldr	r3, [sp, #16]
 800e288:	430b      	orrs	r3, r1
 800e28a:	464d      	mov	r5, r9
 800e28c:	d10f      	bne.n	800e2ae <_dtoa_r+0xa66>
 800e28e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e292:	d02a      	beq.n	800e2ea <_dtoa_r+0xaa2>
 800e294:	9b03      	ldr	r3, [sp, #12]
 800e296:	2b00      	cmp	r3, #0
 800e298:	dd02      	ble.n	800e2a0 <_dtoa_r+0xa58>
 800e29a:	9b02      	ldr	r3, [sp, #8]
 800e29c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e2a0:	f88b a000 	strb.w	sl, [fp]
 800e2a4:	e775      	b.n	800e192 <_dtoa_r+0x94a>
 800e2a6:	4638      	mov	r0, r7
 800e2a8:	e7ba      	b.n	800e220 <_dtoa_r+0x9d8>
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	e7e2      	b.n	800e274 <_dtoa_r+0xa2c>
 800e2ae:	9b03      	ldr	r3, [sp, #12]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	db04      	blt.n	800e2be <_dtoa_r+0xa76>
 800e2b4:	9906      	ldr	r1, [sp, #24]
 800e2b6:	430b      	orrs	r3, r1
 800e2b8:	9904      	ldr	r1, [sp, #16]
 800e2ba:	430b      	orrs	r3, r1
 800e2bc:	d122      	bne.n	800e304 <_dtoa_r+0xabc>
 800e2be:	2a00      	cmp	r2, #0
 800e2c0:	ddee      	ble.n	800e2a0 <_dtoa_r+0xa58>
 800e2c2:	ee18 1a10 	vmov	r1, s16
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f000 fad7 	bl	800e87c <__lshift>
 800e2ce:	4631      	mov	r1, r6
 800e2d0:	ee08 0a10 	vmov	s16, r0
 800e2d4:	f000 fb42 	bl	800e95c <__mcmp>
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	dc03      	bgt.n	800e2e4 <_dtoa_r+0xa9c>
 800e2dc:	d1e0      	bne.n	800e2a0 <_dtoa_r+0xa58>
 800e2de:	f01a 0f01 	tst.w	sl, #1
 800e2e2:	d0dd      	beq.n	800e2a0 <_dtoa_r+0xa58>
 800e2e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e2e8:	d1d7      	bne.n	800e29a <_dtoa_r+0xa52>
 800e2ea:	2339      	movs	r3, #57	; 0x39
 800e2ec:	f88b 3000 	strb.w	r3, [fp]
 800e2f0:	462b      	mov	r3, r5
 800e2f2:	461d      	mov	r5, r3
 800e2f4:	3b01      	subs	r3, #1
 800e2f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e2fa:	2a39      	cmp	r2, #57	; 0x39
 800e2fc:	d071      	beq.n	800e3e2 <_dtoa_r+0xb9a>
 800e2fe:	3201      	adds	r2, #1
 800e300:	701a      	strb	r2, [r3, #0]
 800e302:	e746      	b.n	800e192 <_dtoa_r+0x94a>
 800e304:	2a00      	cmp	r2, #0
 800e306:	dd07      	ble.n	800e318 <_dtoa_r+0xad0>
 800e308:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e30c:	d0ed      	beq.n	800e2ea <_dtoa_r+0xaa2>
 800e30e:	f10a 0301 	add.w	r3, sl, #1
 800e312:	f88b 3000 	strb.w	r3, [fp]
 800e316:	e73c      	b.n	800e192 <_dtoa_r+0x94a>
 800e318:	9b05      	ldr	r3, [sp, #20]
 800e31a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e31e:	4599      	cmp	r9, r3
 800e320:	d047      	beq.n	800e3b2 <_dtoa_r+0xb6a>
 800e322:	ee18 1a10 	vmov	r1, s16
 800e326:	2300      	movs	r3, #0
 800e328:	220a      	movs	r2, #10
 800e32a:	4620      	mov	r0, r4
 800e32c:	f000 f8f6 	bl	800e51c <__multadd>
 800e330:	45b8      	cmp	r8, r7
 800e332:	ee08 0a10 	vmov	s16, r0
 800e336:	f04f 0300 	mov.w	r3, #0
 800e33a:	f04f 020a 	mov.w	r2, #10
 800e33e:	4641      	mov	r1, r8
 800e340:	4620      	mov	r0, r4
 800e342:	d106      	bne.n	800e352 <_dtoa_r+0xb0a>
 800e344:	f000 f8ea 	bl	800e51c <__multadd>
 800e348:	4680      	mov	r8, r0
 800e34a:	4607      	mov	r7, r0
 800e34c:	f109 0901 	add.w	r9, r9, #1
 800e350:	e772      	b.n	800e238 <_dtoa_r+0x9f0>
 800e352:	f000 f8e3 	bl	800e51c <__multadd>
 800e356:	4639      	mov	r1, r7
 800e358:	4680      	mov	r8, r0
 800e35a:	2300      	movs	r3, #0
 800e35c:	220a      	movs	r2, #10
 800e35e:	4620      	mov	r0, r4
 800e360:	f000 f8dc 	bl	800e51c <__multadd>
 800e364:	4607      	mov	r7, r0
 800e366:	e7f1      	b.n	800e34c <_dtoa_r+0xb04>
 800e368:	9b03      	ldr	r3, [sp, #12]
 800e36a:	9302      	str	r3, [sp, #8]
 800e36c:	9d01      	ldr	r5, [sp, #4]
 800e36e:	ee18 0a10 	vmov	r0, s16
 800e372:	4631      	mov	r1, r6
 800e374:	f7ff f9da 	bl	800d72c <quorem>
 800e378:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e37c:	9b01      	ldr	r3, [sp, #4]
 800e37e:	f805 ab01 	strb.w	sl, [r5], #1
 800e382:	1aea      	subs	r2, r5, r3
 800e384:	9b02      	ldr	r3, [sp, #8]
 800e386:	4293      	cmp	r3, r2
 800e388:	dd09      	ble.n	800e39e <_dtoa_r+0xb56>
 800e38a:	ee18 1a10 	vmov	r1, s16
 800e38e:	2300      	movs	r3, #0
 800e390:	220a      	movs	r2, #10
 800e392:	4620      	mov	r0, r4
 800e394:	f000 f8c2 	bl	800e51c <__multadd>
 800e398:	ee08 0a10 	vmov	s16, r0
 800e39c:	e7e7      	b.n	800e36e <_dtoa_r+0xb26>
 800e39e:	9b02      	ldr	r3, [sp, #8]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	bfc8      	it	gt
 800e3a4:	461d      	movgt	r5, r3
 800e3a6:	9b01      	ldr	r3, [sp, #4]
 800e3a8:	bfd8      	it	le
 800e3aa:	2501      	movle	r5, #1
 800e3ac:	441d      	add	r5, r3
 800e3ae:	f04f 0800 	mov.w	r8, #0
 800e3b2:	ee18 1a10 	vmov	r1, s16
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	f000 fa5f 	bl	800e87c <__lshift>
 800e3be:	4631      	mov	r1, r6
 800e3c0:	ee08 0a10 	vmov	s16, r0
 800e3c4:	f000 faca 	bl	800e95c <__mcmp>
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	dc91      	bgt.n	800e2f0 <_dtoa_r+0xaa8>
 800e3cc:	d102      	bne.n	800e3d4 <_dtoa_r+0xb8c>
 800e3ce:	f01a 0f01 	tst.w	sl, #1
 800e3d2:	d18d      	bne.n	800e2f0 <_dtoa_r+0xaa8>
 800e3d4:	462b      	mov	r3, r5
 800e3d6:	461d      	mov	r5, r3
 800e3d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3dc:	2a30      	cmp	r2, #48	; 0x30
 800e3de:	d0fa      	beq.n	800e3d6 <_dtoa_r+0xb8e>
 800e3e0:	e6d7      	b.n	800e192 <_dtoa_r+0x94a>
 800e3e2:	9a01      	ldr	r2, [sp, #4]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d184      	bne.n	800e2f2 <_dtoa_r+0xaaa>
 800e3e8:	9b00      	ldr	r3, [sp, #0]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	9300      	str	r3, [sp, #0]
 800e3ee:	2331      	movs	r3, #49	; 0x31
 800e3f0:	7013      	strb	r3, [r2, #0]
 800e3f2:	e6ce      	b.n	800e192 <_dtoa_r+0x94a>
 800e3f4:	4b09      	ldr	r3, [pc, #36]	; (800e41c <_dtoa_r+0xbd4>)
 800e3f6:	f7ff ba95 	b.w	800d924 <_dtoa_r+0xdc>
 800e3fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f47f aa6e 	bne.w	800d8de <_dtoa_r+0x96>
 800e402:	4b07      	ldr	r3, [pc, #28]	; (800e420 <_dtoa_r+0xbd8>)
 800e404:	f7ff ba8e 	b.w	800d924 <_dtoa_r+0xdc>
 800e408:	9b02      	ldr	r3, [sp, #8]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	dcae      	bgt.n	800e36c <_dtoa_r+0xb24>
 800e40e:	9b06      	ldr	r3, [sp, #24]
 800e410:	2b02      	cmp	r3, #2
 800e412:	f73f aea8 	bgt.w	800e166 <_dtoa_r+0x91e>
 800e416:	e7a9      	b.n	800e36c <_dtoa_r+0xb24>
 800e418:	080102e7 	.word	0x080102e7
 800e41c:	08010244 	.word	0x08010244
 800e420:	08010268 	.word	0x08010268

0800e424 <_localeconv_r>:
 800e424:	4800      	ldr	r0, [pc, #0]	; (800e428 <_localeconv_r+0x4>)
 800e426:	4770      	bx	lr
 800e428:	20000280 	.word	0x20000280

0800e42c <malloc>:
 800e42c:	4b02      	ldr	r3, [pc, #8]	; (800e438 <malloc+0xc>)
 800e42e:	4601      	mov	r1, r0
 800e430:	6818      	ldr	r0, [r3, #0]
 800e432:	f000 bc17 	b.w	800ec64 <_malloc_r>
 800e436:	bf00      	nop
 800e438:	2000012c 	.word	0x2000012c

0800e43c <memcpy>:
 800e43c:	440a      	add	r2, r1
 800e43e:	4291      	cmp	r1, r2
 800e440:	f100 33ff 	add.w	r3, r0, #4294967295
 800e444:	d100      	bne.n	800e448 <memcpy+0xc>
 800e446:	4770      	bx	lr
 800e448:	b510      	push	{r4, lr}
 800e44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e44e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e452:	4291      	cmp	r1, r2
 800e454:	d1f9      	bne.n	800e44a <memcpy+0xe>
 800e456:	bd10      	pop	{r4, pc}

0800e458 <_Balloc>:
 800e458:	b570      	push	{r4, r5, r6, lr}
 800e45a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e45c:	4604      	mov	r4, r0
 800e45e:	460d      	mov	r5, r1
 800e460:	b976      	cbnz	r6, 800e480 <_Balloc+0x28>
 800e462:	2010      	movs	r0, #16
 800e464:	f7ff ffe2 	bl	800e42c <malloc>
 800e468:	4602      	mov	r2, r0
 800e46a:	6260      	str	r0, [r4, #36]	; 0x24
 800e46c:	b920      	cbnz	r0, 800e478 <_Balloc+0x20>
 800e46e:	4b18      	ldr	r3, [pc, #96]	; (800e4d0 <_Balloc+0x78>)
 800e470:	4818      	ldr	r0, [pc, #96]	; (800e4d4 <_Balloc+0x7c>)
 800e472:	2166      	movs	r1, #102	; 0x66
 800e474:	f000 fdd6 	bl	800f024 <__assert_func>
 800e478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e47c:	6006      	str	r6, [r0, #0]
 800e47e:	60c6      	str	r6, [r0, #12]
 800e480:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e482:	68f3      	ldr	r3, [r6, #12]
 800e484:	b183      	cbz	r3, 800e4a8 <_Balloc+0x50>
 800e486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e48e:	b9b8      	cbnz	r0, 800e4c0 <_Balloc+0x68>
 800e490:	2101      	movs	r1, #1
 800e492:	fa01 f605 	lsl.w	r6, r1, r5
 800e496:	1d72      	adds	r2, r6, #5
 800e498:	0092      	lsls	r2, r2, #2
 800e49a:	4620      	mov	r0, r4
 800e49c:	f000 fb60 	bl	800eb60 <_calloc_r>
 800e4a0:	b160      	cbz	r0, 800e4bc <_Balloc+0x64>
 800e4a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e4a6:	e00e      	b.n	800e4c6 <_Balloc+0x6e>
 800e4a8:	2221      	movs	r2, #33	; 0x21
 800e4aa:	2104      	movs	r1, #4
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	f000 fb57 	bl	800eb60 <_calloc_r>
 800e4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4b4:	60f0      	str	r0, [r6, #12]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1e4      	bne.n	800e486 <_Balloc+0x2e>
 800e4bc:	2000      	movs	r0, #0
 800e4be:	bd70      	pop	{r4, r5, r6, pc}
 800e4c0:	6802      	ldr	r2, [r0, #0]
 800e4c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4cc:	e7f7      	b.n	800e4be <_Balloc+0x66>
 800e4ce:	bf00      	nop
 800e4d0:	08010275 	.word	0x08010275
 800e4d4:	080102f8 	.word	0x080102f8

0800e4d8 <_Bfree>:
 800e4d8:	b570      	push	{r4, r5, r6, lr}
 800e4da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4dc:	4605      	mov	r5, r0
 800e4de:	460c      	mov	r4, r1
 800e4e0:	b976      	cbnz	r6, 800e500 <_Bfree+0x28>
 800e4e2:	2010      	movs	r0, #16
 800e4e4:	f7ff ffa2 	bl	800e42c <malloc>
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	6268      	str	r0, [r5, #36]	; 0x24
 800e4ec:	b920      	cbnz	r0, 800e4f8 <_Bfree+0x20>
 800e4ee:	4b09      	ldr	r3, [pc, #36]	; (800e514 <_Bfree+0x3c>)
 800e4f0:	4809      	ldr	r0, [pc, #36]	; (800e518 <_Bfree+0x40>)
 800e4f2:	218a      	movs	r1, #138	; 0x8a
 800e4f4:	f000 fd96 	bl	800f024 <__assert_func>
 800e4f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4fc:	6006      	str	r6, [r0, #0]
 800e4fe:	60c6      	str	r6, [r0, #12]
 800e500:	b13c      	cbz	r4, 800e512 <_Bfree+0x3a>
 800e502:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e504:	6862      	ldr	r2, [r4, #4]
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e50c:	6021      	str	r1, [r4, #0]
 800e50e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e512:	bd70      	pop	{r4, r5, r6, pc}
 800e514:	08010275 	.word	0x08010275
 800e518:	080102f8 	.word	0x080102f8

0800e51c <__multadd>:
 800e51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e520:	690d      	ldr	r5, [r1, #16]
 800e522:	4607      	mov	r7, r0
 800e524:	460c      	mov	r4, r1
 800e526:	461e      	mov	r6, r3
 800e528:	f101 0c14 	add.w	ip, r1, #20
 800e52c:	2000      	movs	r0, #0
 800e52e:	f8dc 3000 	ldr.w	r3, [ip]
 800e532:	b299      	uxth	r1, r3
 800e534:	fb02 6101 	mla	r1, r2, r1, r6
 800e538:	0c1e      	lsrs	r6, r3, #16
 800e53a:	0c0b      	lsrs	r3, r1, #16
 800e53c:	fb02 3306 	mla	r3, r2, r6, r3
 800e540:	b289      	uxth	r1, r1
 800e542:	3001      	adds	r0, #1
 800e544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e548:	4285      	cmp	r5, r0
 800e54a:	f84c 1b04 	str.w	r1, [ip], #4
 800e54e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e552:	dcec      	bgt.n	800e52e <__multadd+0x12>
 800e554:	b30e      	cbz	r6, 800e59a <__multadd+0x7e>
 800e556:	68a3      	ldr	r3, [r4, #8]
 800e558:	42ab      	cmp	r3, r5
 800e55a:	dc19      	bgt.n	800e590 <__multadd+0x74>
 800e55c:	6861      	ldr	r1, [r4, #4]
 800e55e:	4638      	mov	r0, r7
 800e560:	3101      	adds	r1, #1
 800e562:	f7ff ff79 	bl	800e458 <_Balloc>
 800e566:	4680      	mov	r8, r0
 800e568:	b928      	cbnz	r0, 800e576 <__multadd+0x5a>
 800e56a:	4602      	mov	r2, r0
 800e56c:	4b0c      	ldr	r3, [pc, #48]	; (800e5a0 <__multadd+0x84>)
 800e56e:	480d      	ldr	r0, [pc, #52]	; (800e5a4 <__multadd+0x88>)
 800e570:	21b5      	movs	r1, #181	; 0xb5
 800e572:	f000 fd57 	bl	800f024 <__assert_func>
 800e576:	6922      	ldr	r2, [r4, #16]
 800e578:	3202      	adds	r2, #2
 800e57a:	f104 010c 	add.w	r1, r4, #12
 800e57e:	0092      	lsls	r2, r2, #2
 800e580:	300c      	adds	r0, #12
 800e582:	f7ff ff5b 	bl	800e43c <memcpy>
 800e586:	4621      	mov	r1, r4
 800e588:	4638      	mov	r0, r7
 800e58a:	f7ff ffa5 	bl	800e4d8 <_Bfree>
 800e58e:	4644      	mov	r4, r8
 800e590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e594:	3501      	adds	r5, #1
 800e596:	615e      	str	r6, [r3, #20]
 800e598:	6125      	str	r5, [r4, #16]
 800e59a:	4620      	mov	r0, r4
 800e59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a0:	080102e7 	.word	0x080102e7
 800e5a4:	080102f8 	.word	0x080102f8

0800e5a8 <__hi0bits>:
 800e5a8:	0c03      	lsrs	r3, r0, #16
 800e5aa:	041b      	lsls	r3, r3, #16
 800e5ac:	b9d3      	cbnz	r3, 800e5e4 <__hi0bits+0x3c>
 800e5ae:	0400      	lsls	r0, r0, #16
 800e5b0:	2310      	movs	r3, #16
 800e5b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e5b6:	bf04      	itt	eq
 800e5b8:	0200      	lsleq	r0, r0, #8
 800e5ba:	3308      	addeq	r3, #8
 800e5bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e5c0:	bf04      	itt	eq
 800e5c2:	0100      	lsleq	r0, r0, #4
 800e5c4:	3304      	addeq	r3, #4
 800e5c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e5ca:	bf04      	itt	eq
 800e5cc:	0080      	lsleq	r0, r0, #2
 800e5ce:	3302      	addeq	r3, #2
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	db05      	blt.n	800e5e0 <__hi0bits+0x38>
 800e5d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e5d8:	f103 0301 	add.w	r3, r3, #1
 800e5dc:	bf08      	it	eq
 800e5de:	2320      	moveq	r3, #32
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	4770      	bx	lr
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	e7e4      	b.n	800e5b2 <__hi0bits+0xa>

0800e5e8 <__lo0bits>:
 800e5e8:	6803      	ldr	r3, [r0, #0]
 800e5ea:	f013 0207 	ands.w	r2, r3, #7
 800e5ee:	4601      	mov	r1, r0
 800e5f0:	d00b      	beq.n	800e60a <__lo0bits+0x22>
 800e5f2:	07da      	lsls	r2, r3, #31
 800e5f4:	d423      	bmi.n	800e63e <__lo0bits+0x56>
 800e5f6:	0798      	lsls	r0, r3, #30
 800e5f8:	bf49      	itett	mi
 800e5fa:	085b      	lsrmi	r3, r3, #1
 800e5fc:	089b      	lsrpl	r3, r3, #2
 800e5fe:	2001      	movmi	r0, #1
 800e600:	600b      	strmi	r3, [r1, #0]
 800e602:	bf5c      	itt	pl
 800e604:	600b      	strpl	r3, [r1, #0]
 800e606:	2002      	movpl	r0, #2
 800e608:	4770      	bx	lr
 800e60a:	b298      	uxth	r0, r3
 800e60c:	b9a8      	cbnz	r0, 800e63a <__lo0bits+0x52>
 800e60e:	0c1b      	lsrs	r3, r3, #16
 800e610:	2010      	movs	r0, #16
 800e612:	b2da      	uxtb	r2, r3
 800e614:	b90a      	cbnz	r2, 800e61a <__lo0bits+0x32>
 800e616:	3008      	adds	r0, #8
 800e618:	0a1b      	lsrs	r3, r3, #8
 800e61a:	071a      	lsls	r2, r3, #28
 800e61c:	bf04      	itt	eq
 800e61e:	091b      	lsreq	r3, r3, #4
 800e620:	3004      	addeq	r0, #4
 800e622:	079a      	lsls	r2, r3, #30
 800e624:	bf04      	itt	eq
 800e626:	089b      	lsreq	r3, r3, #2
 800e628:	3002      	addeq	r0, #2
 800e62a:	07da      	lsls	r2, r3, #31
 800e62c:	d403      	bmi.n	800e636 <__lo0bits+0x4e>
 800e62e:	085b      	lsrs	r3, r3, #1
 800e630:	f100 0001 	add.w	r0, r0, #1
 800e634:	d005      	beq.n	800e642 <__lo0bits+0x5a>
 800e636:	600b      	str	r3, [r1, #0]
 800e638:	4770      	bx	lr
 800e63a:	4610      	mov	r0, r2
 800e63c:	e7e9      	b.n	800e612 <__lo0bits+0x2a>
 800e63e:	2000      	movs	r0, #0
 800e640:	4770      	bx	lr
 800e642:	2020      	movs	r0, #32
 800e644:	4770      	bx	lr
	...

0800e648 <__i2b>:
 800e648:	b510      	push	{r4, lr}
 800e64a:	460c      	mov	r4, r1
 800e64c:	2101      	movs	r1, #1
 800e64e:	f7ff ff03 	bl	800e458 <_Balloc>
 800e652:	4602      	mov	r2, r0
 800e654:	b928      	cbnz	r0, 800e662 <__i2b+0x1a>
 800e656:	4b05      	ldr	r3, [pc, #20]	; (800e66c <__i2b+0x24>)
 800e658:	4805      	ldr	r0, [pc, #20]	; (800e670 <__i2b+0x28>)
 800e65a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e65e:	f000 fce1 	bl	800f024 <__assert_func>
 800e662:	2301      	movs	r3, #1
 800e664:	6144      	str	r4, [r0, #20]
 800e666:	6103      	str	r3, [r0, #16]
 800e668:	bd10      	pop	{r4, pc}
 800e66a:	bf00      	nop
 800e66c:	080102e7 	.word	0x080102e7
 800e670:	080102f8 	.word	0x080102f8

0800e674 <__multiply>:
 800e674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e678:	4691      	mov	r9, r2
 800e67a:	690a      	ldr	r2, [r1, #16]
 800e67c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e680:	429a      	cmp	r2, r3
 800e682:	bfb8      	it	lt
 800e684:	460b      	movlt	r3, r1
 800e686:	460c      	mov	r4, r1
 800e688:	bfbc      	itt	lt
 800e68a:	464c      	movlt	r4, r9
 800e68c:	4699      	movlt	r9, r3
 800e68e:	6927      	ldr	r7, [r4, #16]
 800e690:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e694:	68a3      	ldr	r3, [r4, #8]
 800e696:	6861      	ldr	r1, [r4, #4]
 800e698:	eb07 060a 	add.w	r6, r7, sl
 800e69c:	42b3      	cmp	r3, r6
 800e69e:	b085      	sub	sp, #20
 800e6a0:	bfb8      	it	lt
 800e6a2:	3101      	addlt	r1, #1
 800e6a4:	f7ff fed8 	bl	800e458 <_Balloc>
 800e6a8:	b930      	cbnz	r0, 800e6b8 <__multiply+0x44>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	4b44      	ldr	r3, [pc, #272]	; (800e7c0 <__multiply+0x14c>)
 800e6ae:	4845      	ldr	r0, [pc, #276]	; (800e7c4 <__multiply+0x150>)
 800e6b0:	f240 115d 	movw	r1, #349	; 0x15d
 800e6b4:	f000 fcb6 	bl	800f024 <__assert_func>
 800e6b8:	f100 0514 	add.w	r5, r0, #20
 800e6bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e6c0:	462b      	mov	r3, r5
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	4543      	cmp	r3, r8
 800e6c6:	d321      	bcc.n	800e70c <__multiply+0x98>
 800e6c8:	f104 0314 	add.w	r3, r4, #20
 800e6cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e6d0:	f109 0314 	add.w	r3, r9, #20
 800e6d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e6d8:	9202      	str	r2, [sp, #8]
 800e6da:	1b3a      	subs	r2, r7, r4
 800e6dc:	3a15      	subs	r2, #21
 800e6de:	f022 0203 	bic.w	r2, r2, #3
 800e6e2:	3204      	adds	r2, #4
 800e6e4:	f104 0115 	add.w	r1, r4, #21
 800e6e8:	428f      	cmp	r7, r1
 800e6ea:	bf38      	it	cc
 800e6ec:	2204      	movcc	r2, #4
 800e6ee:	9201      	str	r2, [sp, #4]
 800e6f0:	9a02      	ldr	r2, [sp, #8]
 800e6f2:	9303      	str	r3, [sp, #12]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d80c      	bhi.n	800e712 <__multiply+0x9e>
 800e6f8:	2e00      	cmp	r6, #0
 800e6fa:	dd03      	ble.n	800e704 <__multiply+0x90>
 800e6fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e700:	2b00      	cmp	r3, #0
 800e702:	d05a      	beq.n	800e7ba <__multiply+0x146>
 800e704:	6106      	str	r6, [r0, #16]
 800e706:	b005      	add	sp, #20
 800e708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e70c:	f843 2b04 	str.w	r2, [r3], #4
 800e710:	e7d8      	b.n	800e6c4 <__multiply+0x50>
 800e712:	f8b3 a000 	ldrh.w	sl, [r3]
 800e716:	f1ba 0f00 	cmp.w	sl, #0
 800e71a:	d024      	beq.n	800e766 <__multiply+0xf2>
 800e71c:	f104 0e14 	add.w	lr, r4, #20
 800e720:	46a9      	mov	r9, r5
 800e722:	f04f 0c00 	mov.w	ip, #0
 800e726:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e72a:	f8d9 1000 	ldr.w	r1, [r9]
 800e72e:	fa1f fb82 	uxth.w	fp, r2
 800e732:	b289      	uxth	r1, r1
 800e734:	fb0a 110b 	mla	r1, sl, fp, r1
 800e738:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e73c:	f8d9 2000 	ldr.w	r2, [r9]
 800e740:	4461      	add	r1, ip
 800e742:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e746:	fb0a c20b 	mla	r2, sl, fp, ip
 800e74a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e74e:	b289      	uxth	r1, r1
 800e750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e754:	4577      	cmp	r7, lr
 800e756:	f849 1b04 	str.w	r1, [r9], #4
 800e75a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e75e:	d8e2      	bhi.n	800e726 <__multiply+0xb2>
 800e760:	9a01      	ldr	r2, [sp, #4]
 800e762:	f845 c002 	str.w	ip, [r5, r2]
 800e766:	9a03      	ldr	r2, [sp, #12]
 800e768:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e76c:	3304      	adds	r3, #4
 800e76e:	f1b9 0f00 	cmp.w	r9, #0
 800e772:	d020      	beq.n	800e7b6 <__multiply+0x142>
 800e774:	6829      	ldr	r1, [r5, #0]
 800e776:	f104 0c14 	add.w	ip, r4, #20
 800e77a:	46ae      	mov	lr, r5
 800e77c:	f04f 0a00 	mov.w	sl, #0
 800e780:	f8bc b000 	ldrh.w	fp, [ip]
 800e784:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e788:	fb09 220b 	mla	r2, r9, fp, r2
 800e78c:	4492      	add	sl, r2
 800e78e:	b289      	uxth	r1, r1
 800e790:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e794:	f84e 1b04 	str.w	r1, [lr], #4
 800e798:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e79c:	f8be 1000 	ldrh.w	r1, [lr]
 800e7a0:	0c12      	lsrs	r2, r2, #16
 800e7a2:	fb09 1102 	mla	r1, r9, r2, r1
 800e7a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e7aa:	4567      	cmp	r7, ip
 800e7ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e7b0:	d8e6      	bhi.n	800e780 <__multiply+0x10c>
 800e7b2:	9a01      	ldr	r2, [sp, #4]
 800e7b4:	50a9      	str	r1, [r5, r2]
 800e7b6:	3504      	adds	r5, #4
 800e7b8:	e79a      	b.n	800e6f0 <__multiply+0x7c>
 800e7ba:	3e01      	subs	r6, #1
 800e7bc:	e79c      	b.n	800e6f8 <__multiply+0x84>
 800e7be:	bf00      	nop
 800e7c0:	080102e7 	.word	0x080102e7
 800e7c4:	080102f8 	.word	0x080102f8

0800e7c8 <__pow5mult>:
 800e7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7cc:	4615      	mov	r5, r2
 800e7ce:	f012 0203 	ands.w	r2, r2, #3
 800e7d2:	4606      	mov	r6, r0
 800e7d4:	460f      	mov	r7, r1
 800e7d6:	d007      	beq.n	800e7e8 <__pow5mult+0x20>
 800e7d8:	4c25      	ldr	r4, [pc, #148]	; (800e870 <__pow5mult+0xa8>)
 800e7da:	3a01      	subs	r2, #1
 800e7dc:	2300      	movs	r3, #0
 800e7de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7e2:	f7ff fe9b 	bl	800e51c <__multadd>
 800e7e6:	4607      	mov	r7, r0
 800e7e8:	10ad      	asrs	r5, r5, #2
 800e7ea:	d03d      	beq.n	800e868 <__pow5mult+0xa0>
 800e7ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e7ee:	b97c      	cbnz	r4, 800e810 <__pow5mult+0x48>
 800e7f0:	2010      	movs	r0, #16
 800e7f2:	f7ff fe1b 	bl	800e42c <malloc>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	6270      	str	r0, [r6, #36]	; 0x24
 800e7fa:	b928      	cbnz	r0, 800e808 <__pow5mult+0x40>
 800e7fc:	4b1d      	ldr	r3, [pc, #116]	; (800e874 <__pow5mult+0xac>)
 800e7fe:	481e      	ldr	r0, [pc, #120]	; (800e878 <__pow5mult+0xb0>)
 800e800:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e804:	f000 fc0e 	bl	800f024 <__assert_func>
 800e808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e80c:	6004      	str	r4, [r0, #0]
 800e80e:	60c4      	str	r4, [r0, #12]
 800e810:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e818:	b94c      	cbnz	r4, 800e82e <__pow5mult+0x66>
 800e81a:	f240 2171 	movw	r1, #625	; 0x271
 800e81e:	4630      	mov	r0, r6
 800e820:	f7ff ff12 	bl	800e648 <__i2b>
 800e824:	2300      	movs	r3, #0
 800e826:	f8c8 0008 	str.w	r0, [r8, #8]
 800e82a:	4604      	mov	r4, r0
 800e82c:	6003      	str	r3, [r0, #0]
 800e82e:	f04f 0900 	mov.w	r9, #0
 800e832:	07eb      	lsls	r3, r5, #31
 800e834:	d50a      	bpl.n	800e84c <__pow5mult+0x84>
 800e836:	4639      	mov	r1, r7
 800e838:	4622      	mov	r2, r4
 800e83a:	4630      	mov	r0, r6
 800e83c:	f7ff ff1a 	bl	800e674 <__multiply>
 800e840:	4639      	mov	r1, r7
 800e842:	4680      	mov	r8, r0
 800e844:	4630      	mov	r0, r6
 800e846:	f7ff fe47 	bl	800e4d8 <_Bfree>
 800e84a:	4647      	mov	r7, r8
 800e84c:	106d      	asrs	r5, r5, #1
 800e84e:	d00b      	beq.n	800e868 <__pow5mult+0xa0>
 800e850:	6820      	ldr	r0, [r4, #0]
 800e852:	b938      	cbnz	r0, 800e864 <__pow5mult+0x9c>
 800e854:	4622      	mov	r2, r4
 800e856:	4621      	mov	r1, r4
 800e858:	4630      	mov	r0, r6
 800e85a:	f7ff ff0b 	bl	800e674 <__multiply>
 800e85e:	6020      	str	r0, [r4, #0]
 800e860:	f8c0 9000 	str.w	r9, [r0]
 800e864:	4604      	mov	r4, r0
 800e866:	e7e4      	b.n	800e832 <__pow5mult+0x6a>
 800e868:	4638      	mov	r0, r7
 800e86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e86e:	bf00      	nop
 800e870:	08010448 	.word	0x08010448
 800e874:	08010275 	.word	0x08010275
 800e878:	080102f8 	.word	0x080102f8

0800e87c <__lshift>:
 800e87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e880:	460c      	mov	r4, r1
 800e882:	6849      	ldr	r1, [r1, #4]
 800e884:	6923      	ldr	r3, [r4, #16]
 800e886:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e88a:	68a3      	ldr	r3, [r4, #8]
 800e88c:	4607      	mov	r7, r0
 800e88e:	4691      	mov	r9, r2
 800e890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e894:	f108 0601 	add.w	r6, r8, #1
 800e898:	42b3      	cmp	r3, r6
 800e89a:	db0b      	blt.n	800e8b4 <__lshift+0x38>
 800e89c:	4638      	mov	r0, r7
 800e89e:	f7ff fddb 	bl	800e458 <_Balloc>
 800e8a2:	4605      	mov	r5, r0
 800e8a4:	b948      	cbnz	r0, 800e8ba <__lshift+0x3e>
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	4b2a      	ldr	r3, [pc, #168]	; (800e954 <__lshift+0xd8>)
 800e8aa:	482b      	ldr	r0, [pc, #172]	; (800e958 <__lshift+0xdc>)
 800e8ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e8b0:	f000 fbb8 	bl	800f024 <__assert_func>
 800e8b4:	3101      	adds	r1, #1
 800e8b6:	005b      	lsls	r3, r3, #1
 800e8b8:	e7ee      	b.n	800e898 <__lshift+0x1c>
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	f100 0114 	add.w	r1, r0, #20
 800e8c0:	f100 0210 	add.w	r2, r0, #16
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	4553      	cmp	r3, sl
 800e8c8:	db37      	blt.n	800e93a <__lshift+0xbe>
 800e8ca:	6920      	ldr	r0, [r4, #16]
 800e8cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8d0:	f104 0314 	add.w	r3, r4, #20
 800e8d4:	f019 091f 	ands.w	r9, r9, #31
 800e8d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e8e0:	d02f      	beq.n	800e942 <__lshift+0xc6>
 800e8e2:	f1c9 0e20 	rsb	lr, r9, #32
 800e8e6:	468a      	mov	sl, r1
 800e8e8:	f04f 0c00 	mov.w	ip, #0
 800e8ec:	681a      	ldr	r2, [r3, #0]
 800e8ee:	fa02 f209 	lsl.w	r2, r2, r9
 800e8f2:	ea42 020c 	orr.w	r2, r2, ip
 800e8f6:	f84a 2b04 	str.w	r2, [sl], #4
 800e8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8fe:	4298      	cmp	r0, r3
 800e900:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e904:	d8f2      	bhi.n	800e8ec <__lshift+0x70>
 800e906:	1b03      	subs	r3, r0, r4
 800e908:	3b15      	subs	r3, #21
 800e90a:	f023 0303 	bic.w	r3, r3, #3
 800e90e:	3304      	adds	r3, #4
 800e910:	f104 0215 	add.w	r2, r4, #21
 800e914:	4290      	cmp	r0, r2
 800e916:	bf38      	it	cc
 800e918:	2304      	movcc	r3, #4
 800e91a:	f841 c003 	str.w	ip, [r1, r3]
 800e91e:	f1bc 0f00 	cmp.w	ip, #0
 800e922:	d001      	beq.n	800e928 <__lshift+0xac>
 800e924:	f108 0602 	add.w	r6, r8, #2
 800e928:	3e01      	subs	r6, #1
 800e92a:	4638      	mov	r0, r7
 800e92c:	612e      	str	r6, [r5, #16]
 800e92e:	4621      	mov	r1, r4
 800e930:	f7ff fdd2 	bl	800e4d8 <_Bfree>
 800e934:	4628      	mov	r0, r5
 800e936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e93a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e93e:	3301      	adds	r3, #1
 800e940:	e7c1      	b.n	800e8c6 <__lshift+0x4a>
 800e942:	3904      	subs	r1, #4
 800e944:	f853 2b04 	ldr.w	r2, [r3], #4
 800e948:	f841 2f04 	str.w	r2, [r1, #4]!
 800e94c:	4298      	cmp	r0, r3
 800e94e:	d8f9      	bhi.n	800e944 <__lshift+0xc8>
 800e950:	e7ea      	b.n	800e928 <__lshift+0xac>
 800e952:	bf00      	nop
 800e954:	080102e7 	.word	0x080102e7
 800e958:	080102f8 	.word	0x080102f8

0800e95c <__mcmp>:
 800e95c:	b530      	push	{r4, r5, lr}
 800e95e:	6902      	ldr	r2, [r0, #16]
 800e960:	690c      	ldr	r4, [r1, #16]
 800e962:	1b12      	subs	r2, r2, r4
 800e964:	d10e      	bne.n	800e984 <__mcmp+0x28>
 800e966:	f100 0314 	add.w	r3, r0, #20
 800e96a:	3114      	adds	r1, #20
 800e96c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e970:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e974:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e978:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e97c:	42a5      	cmp	r5, r4
 800e97e:	d003      	beq.n	800e988 <__mcmp+0x2c>
 800e980:	d305      	bcc.n	800e98e <__mcmp+0x32>
 800e982:	2201      	movs	r2, #1
 800e984:	4610      	mov	r0, r2
 800e986:	bd30      	pop	{r4, r5, pc}
 800e988:	4283      	cmp	r3, r0
 800e98a:	d3f3      	bcc.n	800e974 <__mcmp+0x18>
 800e98c:	e7fa      	b.n	800e984 <__mcmp+0x28>
 800e98e:	f04f 32ff 	mov.w	r2, #4294967295
 800e992:	e7f7      	b.n	800e984 <__mcmp+0x28>

0800e994 <__mdiff>:
 800e994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e998:	460c      	mov	r4, r1
 800e99a:	4606      	mov	r6, r0
 800e99c:	4611      	mov	r1, r2
 800e99e:	4620      	mov	r0, r4
 800e9a0:	4690      	mov	r8, r2
 800e9a2:	f7ff ffdb 	bl	800e95c <__mcmp>
 800e9a6:	1e05      	subs	r5, r0, #0
 800e9a8:	d110      	bne.n	800e9cc <__mdiff+0x38>
 800e9aa:	4629      	mov	r1, r5
 800e9ac:	4630      	mov	r0, r6
 800e9ae:	f7ff fd53 	bl	800e458 <_Balloc>
 800e9b2:	b930      	cbnz	r0, 800e9c2 <__mdiff+0x2e>
 800e9b4:	4b3a      	ldr	r3, [pc, #232]	; (800eaa0 <__mdiff+0x10c>)
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	f240 2132 	movw	r1, #562	; 0x232
 800e9bc:	4839      	ldr	r0, [pc, #228]	; (800eaa4 <__mdiff+0x110>)
 800e9be:	f000 fb31 	bl	800f024 <__assert_func>
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9cc:	bfa4      	itt	ge
 800e9ce:	4643      	movge	r3, r8
 800e9d0:	46a0      	movge	r8, r4
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e9d8:	bfa6      	itte	ge
 800e9da:	461c      	movge	r4, r3
 800e9dc:	2500      	movge	r5, #0
 800e9de:	2501      	movlt	r5, #1
 800e9e0:	f7ff fd3a 	bl	800e458 <_Balloc>
 800e9e4:	b920      	cbnz	r0, 800e9f0 <__mdiff+0x5c>
 800e9e6:	4b2e      	ldr	r3, [pc, #184]	; (800eaa0 <__mdiff+0x10c>)
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e9ee:	e7e5      	b.n	800e9bc <__mdiff+0x28>
 800e9f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e9f4:	6926      	ldr	r6, [r4, #16]
 800e9f6:	60c5      	str	r5, [r0, #12]
 800e9f8:	f104 0914 	add.w	r9, r4, #20
 800e9fc:	f108 0514 	add.w	r5, r8, #20
 800ea00:	f100 0e14 	add.w	lr, r0, #20
 800ea04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ea08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ea0c:	f108 0210 	add.w	r2, r8, #16
 800ea10:	46f2      	mov	sl, lr
 800ea12:	2100      	movs	r1, #0
 800ea14:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ea1c:	fa1f f883 	uxth.w	r8, r3
 800ea20:	fa11 f18b 	uxtah	r1, r1, fp
 800ea24:	0c1b      	lsrs	r3, r3, #16
 800ea26:	eba1 0808 	sub.w	r8, r1, r8
 800ea2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ea2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ea32:	fa1f f888 	uxth.w	r8, r8
 800ea36:	1419      	asrs	r1, r3, #16
 800ea38:	454e      	cmp	r6, r9
 800ea3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea3e:	f84a 3b04 	str.w	r3, [sl], #4
 800ea42:	d8e7      	bhi.n	800ea14 <__mdiff+0x80>
 800ea44:	1b33      	subs	r3, r6, r4
 800ea46:	3b15      	subs	r3, #21
 800ea48:	f023 0303 	bic.w	r3, r3, #3
 800ea4c:	3304      	adds	r3, #4
 800ea4e:	3415      	adds	r4, #21
 800ea50:	42a6      	cmp	r6, r4
 800ea52:	bf38      	it	cc
 800ea54:	2304      	movcc	r3, #4
 800ea56:	441d      	add	r5, r3
 800ea58:	4473      	add	r3, lr
 800ea5a:	469e      	mov	lr, r3
 800ea5c:	462e      	mov	r6, r5
 800ea5e:	4566      	cmp	r6, ip
 800ea60:	d30e      	bcc.n	800ea80 <__mdiff+0xec>
 800ea62:	f10c 0203 	add.w	r2, ip, #3
 800ea66:	1b52      	subs	r2, r2, r5
 800ea68:	f022 0203 	bic.w	r2, r2, #3
 800ea6c:	3d03      	subs	r5, #3
 800ea6e:	45ac      	cmp	ip, r5
 800ea70:	bf38      	it	cc
 800ea72:	2200      	movcc	r2, #0
 800ea74:	441a      	add	r2, r3
 800ea76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ea7a:	b17b      	cbz	r3, 800ea9c <__mdiff+0x108>
 800ea7c:	6107      	str	r7, [r0, #16]
 800ea7e:	e7a3      	b.n	800e9c8 <__mdiff+0x34>
 800ea80:	f856 8b04 	ldr.w	r8, [r6], #4
 800ea84:	fa11 f288 	uxtah	r2, r1, r8
 800ea88:	1414      	asrs	r4, r2, #16
 800ea8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ea8e:	b292      	uxth	r2, r2
 800ea90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ea94:	f84e 2b04 	str.w	r2, [lr], #4
 800ea98:	1421      	asrs	r1, r4, #16
 800ea9a:	e7e0      	b.n	800ea5e <__mdiff+0xca>
 800ea9c:	3f01      	subs	r7, #1
 800ea9e:	e7ea      	b.n	800ea76 <__mdiff+0xe2>
 800eaa0:	080102e7 	.word	0x080102e7
 800eaa4:	080102f8 	.word	0x080102f8

0800eaa8 <__d2b>:
 800eaa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eaac:	4689      	mov	r9, r1
 800eaae:	2101      	movs	r1, #1
 800eab0:	ec57 6b10 	vmov	r6, r7, d0
 800eab4:	4690      	mov	r8, r2
 800eab6:	f7ff fccf 	bl	800e458 <_Balloc>
 800eaba:	4604      	mov	r4, r0
 800eabc:	b930      	cbnz	r0, 800eacc <__d2b+0x24>
 800eabe:	4602      	mov	r2, r0
 800eac0:	4b25      	ldr	r3, [pc, #148]	; (800eb58 <__d2b+0xb0>)
 800eac2:	4826      	ldr	r0, [pc, #152]	; (800eb5c <__d2b+0xb4>)
 800eac4:	f240 310a 	movw	r1, #778	; 0x30a
 800eac8:	f000 faac 	bl	800f024 <__assert_func>
 800eacc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ead0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ead4:	bb35      	cbnz	r5, 800eb24 <__d2b+0x7c>
 800ead6:	2e00      	cmp	r6, #0
 800ead8:	9301      	str	r3, [sp, #4]
 800eada:	d028      	beq.n	800eb2e <__d2b+0x86>
 800eadc:	4668      	mov	r0, sp
 800eade:	9600      	str	r6, [sp, #0]
 800eae0:	f7ff fd82 	bl	800e5e8 <__lo0bits>
 800eae4:	9900      	ldr	r1, [sp, #0]
 800eae6:	b300      	cbz	r0, 800eb2a <__d2b+0x82>
 800eae8:	9a01      	ldr	r2, [sp, #4]
 800eaea:	f1c0 0320 	rsb	r3, r0, #32
 800eaee:	fa02 f303 	lsl.w	r3, r2, r3
 800eaf2:	430b      	orrs	r3, r1
 800eaf4:	40c2      	lsrs	r2, r0
 800eaf6:	6163      	str	r3, [r4, #20]
 800eaf8:	9201      	str	r2, [sp, #4]
 800eafa:	9b01      	ldr	r3, [sp, #4]
 800eafc:	61a3      	str	r3, [r4, #24]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	bf14      	ite	ne
 800eb02:	2202      	movne	r2, #2
 800eb04:	2201      	moveq	r2, #1
 800eb06:	6122      	str	r2, [r4, #16]
 800eb08:	b1d5      	cbz	r5, 800eb40 <__d2b+0x98>
 800eb0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eb0e:	4405      	add	r5, r0
 800eb10:	f8c9 5000 	str.w	r5, [r9]
 800eb14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eb18:	f8c8 0000 	str.w	r0, [r8]
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	b003      	add	sp, #12
 800eb20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb28:	e7d5      	b.n	800ead6 <__d2b+0x2e>
 800eb2a:	6161      	str	r1, [r4, #20]
 800eb2c:	e7e5      	b.n	800eafa <__d2b+0x52>
 800eb2e:	a801      	add	r0, sp, #4
 800eb30:	f7ff fd5a 	bl	800e5e8 <__lo0bits>
 800eb34:	9b01      	ldr	r3, [sp, #4]
 800eb36:	6163      	str	r3, [r4, #20]
 800eb38:	2201      	movs	r2, #1
 800eb3a:	6122      	str	r2, [r4, #16]
 800eb3c:	3020      	adds	r0, #32
 800eb3e:	e7e3      	b.n	800eb08 <__d2b+0x60>
 800eb40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb48:	f8c9 0000 	str.w	r0, [r9]
 800eb4c:	6918      	ldr	r0, [r3, #16]
 800eb4e:	f7ff fd2b 	bl	800e5a8 <__hi0bits>
 800eb52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb56:	e7df      	b.n	800eb18 <__d2b+0x70>
 800eb58:	080102e7 	.word	0x080102e7
 800eb5c:	080102f8 	.word	0x080102f8

0800eb60 <_calloc_r>:
 800eb60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb62:	fba1 2402 	umull	r2, r4, r1, r2
 800eb66:	b94c      	cbnz	r4, 800eb7c <_calloc_r+0x1c>
 800eb68:	4611      	mov	r1, r2
 800eb6a:	9201      	str	r2, [sp, #4]
 800eb6c:	f000 f87a 	bl	800ec64 <_malloc_r>
 800eb70:	9a01      	ldr	r2, [sp, #4]
 800eb72:	4605      	mov	r5, r0
 800eb74:	b930      	cbnz	r0, 800eb84 <_calloc_r+0x24>
 800eb76:	4628      	mov	r0, r5
 800eb78:	b003      	add	sp, #12
 800eb7a:	bd30      	pop	{r4, r5, pc}
 800eb7c:	220c      	movs	r2, #12
 800eb7e:	6002      	str	r2, [r0, #0]
 800eb80:	2500      	movs	r5, #0
 800eb82:	e7f8      	b.n	800eb76 <_calloc_r+0x16>
 800eb84:	4621      	mov	r1, r4
 800eb86:	f7fe f93f 	bl	800ce08 <memset>
 800eb8a:	e7f4      	b.n	800eb76 <_calloc_r+0x16>

0800eb8c <_free_r>:
 800eb8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb8e:	2900      	cmp	r1, #0
 800eb90:	d044      	beq.n	800ec1c <_free_r+0x90>
 800eb92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb96:	9001      	str	r0, [sp, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f1a1 0404 	sub.w	r4, r1, #4
 800eb9e:	bfb8      	it	lt
 800eba0:	18e4      	addlt	r4, r4, r3
 800eba2:	f000 fa9b 	bl	800f0dc <__malloc_lock>
 800eba6:	4a1e      	ldr	r2, [pc, #120]	; (800ec20 <_free_r+0x94>)
 800eba8:	9801      	ldr	r0, [sp, #4]
 800ebaa:	6813      	ldr	r3, [r2, #0]
 800ebac:	b933      	cbnz	r3, 800ebbc <_free_r+0x30>
 800ebae:	6063      	str	r3, [r4, #4]
 800ebb0:	6014      	str	r4, [r2, #0]
 800ebb2:	b003      	add	sp, #12
 800ebb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebb8:	f000 ba96 	b.w	800f0e8 <__malloc_unlock>
 800ebbc:	42a3      	cmp	r3, r4
 800ebbe:	d908      	bls.n	800ebd2 <_free_r+0x46>
 800ebc0:	6825      	ldr	r5, [r4, #0]
 800ebc2:	1961      	adds	r1, r4, r5
 800ebc4:	428b      	cmp	r3, r1
 800ebc6:	bf01      	itttt	eq
 800ebc8:	6819      	ldreq	r1, [r3, #0]
 800ebca:	685b      	ldreq	r3, [r3, #4]
 800ebcc:	1949      	addeq	r1, r1, r5
 800ebce:	6021      	streq	r1, [r4, #0]
 800ebd0:	e7ed      	b.n	800ebae <_free_r+0x22>
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	b10b      	cbz	r3, 800ebdc <_free_r+0x50>
 800ebd8:	42a3      	cmp	r3, r4
 800ebda:	d9fa      	bls.n	800ebd2 <_free_r+0x46>
 800ebdc:	6811      	ldr	r1, [r2, #0]
 800ebde:	1855      	adds	r5, r2, r1
 800ebe0:	42a5      	cmp	r5, r4
 800ebe2:	d10b      	bne.n	800ebfc <_free_r+0x70>
 800ebe4:	6824      	ldr	r4, [r4, #0]
 800ebe6:	4421      	add	r1, r4
 800ebe8:	1854      	adds	r4, r2, r1
 800ebea:	42a3      	cmp	r3, r4
 800ebec:	6011      	str	r1, [r2, #0]
 800ebee:	d1e0      	bne.n	800ebb2 <_free_r+0x26>
 800ebf0:	681c      	ldr	r4, [r3, #0]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	6053      	str	r3, [r2, #4]
 800ebf6:	4421      	add	r1, r4
 800ebf8:	6011      	str	r1, [r2, #0]
 800ebfa:	e7da      	b.n	800ebb2 <_free_r+0x26>
 800ebfc:	d902      	bls.n	800ec04 <_free_r+0x78>
 800ebfe:	230c      	movs	r3, #12
 800ec00:	6003      	str	r3, [r0, #0]
 800ec02:	e7d6      	b.n	800ebb2 <_free_r+0x26>
 800ec04:	6825      	ldr	r5, [r4, #0]
 800ec06:	1961      	adds	r1, r4, r5
 800ec08:	428b      	cmp	r3, r1
 800ec0a:	bf04      	itt	eq
 800ec0c:	6819      	ldreq	r1, [r3, #0]
 800ec0e:	685b      	ldreq	r3, [r3, #4]
 800ec10:	6063      	str	r3, [r4, #4]
 800ec12:	bf04      	itt	eq
 800ec14:	1949      	addeq	r1, r1, r5
 800ec16:	6021      	streq	r1, [r4, #0]
 800ec18:	6054      	str	r4, [r2, #4]
 800ec1a:	e7ca      	b.n	800ebb2 <_free_r+0x26>
 800ec1c:	b003      	add	sp, #12
 800ec1e:	bd30      	pop	{r4, r5, pc}
 800ec20:	20002264 	.word	0x20002264

0800ec24 <sbrk_aligned>:
 800ec24:	b570      	push	{r4, r5, r6, lr}
 800ec26:	4e0e      	ldr	r6, [pc, #56]	; (800ec60 <sbrk_aligned+0x3c>)
 800ec28:	460c      	mov	r4, r1
 800ec2a:	6831      	ldr	r1, [r6, #0]
 800ec2c:	4605      	mov	r5, r0
 800ec2e:	b911      	cbnz	r1, 800ec36 <sbrk_aligned+0x12>
 800ec30:	f000 f9e8 	bl	800f004 <_sbrk_r>
 800ec34:	6030      	str	r0, [r6, #0]
 800ec36:	4621      	mov	r1, r4
 800ec38:	4628      	mov	r0, r5
 800ec3a:	f000 f9e3 	bl	800f004 <_sbrk_r>
 800ec3e:	1c43      	adds	r3, r0, #1
 800ec40:	d00a      	beq.n	800ec58 <sbrk_aligned+0x34>
 800ec42:	1cc4      	adds	r4, r0, #3
 800ec44:	f024 0403 	bic.w	r4, r4, #3
 800ec48:	42a0      	cmp	r0, r4
 800ec4a:	d007      	beq.n	800ec5c <sbrk_aligned+0x38>
 800ec4c:	1a21      	subs	r1, r4, r0
 800ec4e:	4628      	mov	r0, r5
 800ec50:	f000 f9d8 	bl	800f004 <_sbrk_r>
 800ec54:	3001      	adds	r0, #1
 800ec56:	d101      	bne.n	800ec5c <sbrk_aligned+0x38>
 800ec58:	f04f 34ff 	mov.w	r4, #4294967295
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	bd70      	pop	{r4, r5, r6, pc}
 800ec60:	20002268 	.word	0x20002268

0800ec64 <_malloc_r>:
 800ec64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec68:	1ccd      	adds	r5, r1, #3
 800ec6a:	f025 0503 	bic.w	r5, r5, #3
 800ec6e:	3508      	adds	r5, #8
 800ec70:	2d0c      	cmp	r5, #12
 800ec72:	bf38      	it	cc
 800ec74:	250c      	movcc	r5, #12
 800ec76:	2d00      	cmp	r5, #0
 800ec78:	4607      	mov	r7, r0
 800ec7a:	db01      	blt.n	800ec80 <_malloc_r+0x1c>
 800ec7c:	42a9      	cmp	r1, r5
 800ec7e:	d905      	bls.n	800ec8c <_malloc_r+0x28>
 800ec80:	230c      	movs	r3, #12
 800ec82:	603b      	str	r3, [r7, #0]
 800ec84:	2600      	movs	r6, #0
 800ec86:	4630      	mov	r0, r6
 800ec88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec8c:	4e2e      	ldr	r6, [pc, #184]	; (800ed48 <_malloc_r+0xe4>)
 800ec8e:	f000 fa25 	bl	800f0dc <__malloc_lock>
 800ec92:	6833      	ldr	r3, [r6, #0]
 800ec94:	461c      	mov	r4, r3
 800ec96:	bb34      	cbnz	r4, 800ece6 <_malloc_r+0x82>
 800ec98:	4629      	mov	r1, r5
 800ec9a:	4638      	mov	r0, r7
 800ec9c:	f7ff ffc2 	bl	800ec24 <sbrk_aligned>
 800eca0:	1c43      	adds	r3, r0, #1
 800eca2:	4604      	mov	r4, r0
 800eca4:	d14d      	bne.n	800ed42 <_malloc_r+0xde>
 800eca6:	6834      	ldr	r4, [r6, #0]
 800eca8:	4626      	mov	r6, r4
 800ecaa:	2e00      	cmp	r6, #0
 800ecac:	d140      	bne.n	800ed30 <_malloc_r+0xcc>
 800ecae:	6823      	ldr	r3, [r4, #0]
 800ecb0:	4631      	mov	r1, r6
 800ecb2:	4638      	mov	r0, r7
 800ecb4:	eb04 0803 	add.w	r8, r4, r3
 800ecb8:	f000 f9a4 	bl	800f004 <_sbrk_r>
 800ecbc:	4580      	cmp	r8, r0
 800ecbe:	d13a      	bne.n	800ed36 <_malloc_r+0xd2>
 800ecc0:	6821      	ldr	r1, [r4, #0]
 800ecc2:	3503      	adds	r5, #3
 800ecc4:	1a6d      	subs	r5, r5, r1
 800ecc6:	f025 0503 	bic.w	r5, r5, #3
 800ecca:	3508      	adds	r5, #8
 800eccc:	2d0c      	cmp	r5, #12
 800ecce:	bf38      	it	cc
 800ecd0:	250c      	movcc	r5, #12
 800ecd2:	4629      	mov	r1, r5
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	f7ff ffa5 	bl	800ec24 <sbrk_aligned>
 800ecda:	3001      	adds	r0, #1
 800ecdc:	d02b      	beq.n	800ed36 <_malloc_r+0xd2>
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	442b      	add	r3, r5
 800ece2:	6023      	str	r3, [r4, #0]
 800ece4:	e00e      	b.n	800ed04 <_malloc_r+0xa0>
 800ece6:	6822      	ldr	r2, [r4, #0]
 800ece8:	1b52      	subs	r2, r2, r5
 800ecea:	d41e      	bmi.n	800ed2a <_malloc_r+0xc6>
 800ecec:	2a0b      	cmp	r2, #11
 800ecee:	d916      	bls.n	800ed1e <_malloc_r+0xba>
 800ecf0:	1961      	adds	r1, r4, r5
 800ecf2:	42a3      	cmp	r3, r4
 800ecf4:	6025      	str	r5, [r4, #0]
 800ecf6:	bf18      	it	ne
 800ecf8:	6059      	strne	r1, [r3, #4]
 800ecfa:	6863      	ldr	r3, [r4, #4]
 800ecfc:	bf08      	it	eq
 800ecfe:	6031      	streq	r1, [r6, #0]
 800ed00:	5162      	str	r2, [r4, r5]
 800ed02:	604b      	str	r3, [r1, #4]
 800ed04:	4638      	mov	r0, r7
 800ed06:	f104 060b 	add.w	r6, r4, #11
 800ed0a:	f000 f9ed 	bl	800f0e8 <__malloc_unlock>
 800ed0e:	f026 0607 	bic.w	r6, r6, #7
 800ed12:	1d23      	adds	r3, r4, #4
 800ed14:	1af2      	subs	r2, r6, r3
 800ed16:	d0b6      	beq.n	800ec86 <_malloc_r+0x22>
 800ed18:	1b9b      	subs	r3, r3, r6
 800ed1a:	50a3      	str	r3, [r4, r2]
 800ed1c:	e7b3      	b.n	800ec86 <_malloc_r+0x22>
 800ed1e:	6862      	ldr	r2, [r4, #4]
 800ed20:	42a3      	cmp	r3, r4
 800ed22:	bf0c      	ite	eq
 800ed24:	6032      	streq	r2, [r6, #0]
 800ed26:	605a      	strne	r2, [r3, #4]
 800ed28:	e7ec      	b.n	800ed04 <_malloc_r+0xa0>
 800ed2a:	4623      	mov	r3, r4
 800ed2c:	6864      	ldr	r4, [r4, #4]
 800ed2e:	e7b2      	b.n	800ec96 <_malloc_r+0x32>
 800ed30:	4634      	mov	r4, r6
 800ed32:	6876      	ldr	r6, [r6, #4]
 800ed34:	e7b9      	b.n	800ecaa <_malloc_r+0x46>
 800ed36:	230c      	movs	r3, #12
 800ed38:	603b      	str	r3, [r7, #0]
 800ed3a:	4638      	mov	r0, r7
 800ed3c:	f000 f9d4 	bl	800f0e8 <__malloc_unlock>
 800ed40:	e7a1      	b.n	800ec86 <_malloc_r+0x22>
 800ed42:	6025      	str	r5, [r4, #0]
 800ed44:	e7de      	b.n	800ed04 <_malloc_r+0xa0>
 800ed46:	bf00      	nop
 800ed48:	20002264 	.word	0x20002264

0800ed4c <__ssputs_r>:
 800ed4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed50:	688e      	ldr	r6, [r1, #8]
 800ed52:	429e      	cmp	r6, r3
 800ed54:	4682      	mov	sl, r0
 800ed56:	460c      	mov	r4, r1
 800ed58:	4690      	mov	r8, r2
 800ed5a:	461f      	mov	r7, r3
 800ed5c:	d838      	bhi.n	800edd0 <__ssputs_r+0x84>
 800ed5e:	898a      	ldrh	r2, [r1, #12]
 800ed60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed64:	d032      	beq.n	800edcc <__ssputs_r+0x80>
 800ed66:	6825      	ldr	r5, [r4, #0]
 800ed68:	6909      	ldr	r1, [r1, #16]
 800ed6a:	eba5 0901 	sub.w	r9, r5, r1
 800ed6e:	6965      	ldr	r5, [r4, #20]
 800ed70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed78:	3301      	adds	r3, #1
 800ed7a:	444b      	add	r3, r9
 800ed7c:	106d      	asrs	r5, r5, #1
 800ed7e:	429d      	cmp	r5, r3
 800ed80:	bf38      	it	cc
 800ed82:	461d      	movcc	r5, r3
 800ed84:	0553      	lsls	r3, r2, #21
 800ed86:	d531      	bpl.n	800edec <__ssputs_r+0xa0>
 800ed88:	4629      	mov	r1, r5
 800ed8a:	f7ff ff6b 	bl	800ec64 <_malloc_r>
 800ed8e:	4606      	mov	r6, r0
 800ed90:	b950      	cbnz	r0, 800eda8 <__ssputs_r+0x5c>
 800ed92:	230c      	movs	r3, #12
 800ed94:	f8ca 3000 	str.w	r3, [sl]
 800ed98:	89a3      	ldrh	r3, [r4, #12]
 800ed9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed9e:	81a3      	strh	r3, [r4, #12]
 800eda0:	f04f 30ff 	mov.w	r0, #4294967295
 800eda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eda8:	6921      	ldr	r1, [r4, #16]
 800edaa:	464a      	mov	r2, r9
 800edac:	f7ff fb46 	bl	800e43c <memcpy>
 800edb0:	89a3      	ldrh	r3, [r4, #12]
 800edb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800edb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edba:	81a3      	strh	r3, [r4, #12]
 800edbc:	6126      	str	r6, [r4, #16]
 800edbe:	6165      	str	r5, [r4, #20]
 800edc0:	444e      	add	r6, r9
 800edc2:	eba5 0509 	sub.w	r5, r5, r9
 800edc6:	6026      	str	r6, [r4, #0]
 800edc8:	60a5      	str	r5, [r4, #8]
 800edca:	463e      	mov	r6, r7
 800edcc:	42be      	cmp	r6, r7
 800edce:	d900      	bls.n	800edd2 <__ssputs_r+0x86>
 800edd0:	463e      	mov	r6, r7
 800edd2:	6820      	ldr	r0, [r4, #0]
 800edd4:	4632      	mov	r2, r6
 800edd6:	4641      	mov	r1, r8
 800edd8:	f000 f966 	bl	800f0a8 <memmove>
 800eddc:	68a3      	ldr	r3, [r4, #8]
 800edde:	1b9b      	subs	r3, r3, r6
 800ede0:	60a3      	str	r3, [r4, #8]
 800ede2:	6823      	ldr	r3, [r4, #0]
 800ede4:	4433      	add	r3, r6
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	2000      	movs	r0, #0
 800edea:	e7db      	b.n	800eda4 <__ssputs_r+0x58>
 800edec:	462a      	mov	r2, r5
 800edee:	f000 f981 	bl	800f0f4 <_realloc_r>
 800edf2:	4606      	mov	r6, r0
 800edf4:	2800      	cmp	r0, #0
 800edf6:	d1e1      	bne.n	800edbc <__ssputs_r+0x70>
 800edf8:	6921      	ldr	r1, [r4, #16]
 800edfa:	4650      	mov	r0, sl
 800edfc:	f7ff fec6 	bl	800eb8c <_free_r>
 800ee00:	e7c7      	b.n	800ed92 <__ssputs_r+0x46>
	...

0800ee04 <_svfiprintf_r>:
 800ee04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee08:	4698      	mov	r8, r3
 800ee0a:	898b      	ldrh	r3, [r1, #12]
 800ee0c:	061b      	lsls	r3, r3, #24
 800ee0e:	b09d      	sub	sp, #116	; 0x74
 800ee10:	4607      	mov	r7, r0
 800ee12:	460d      	mov	r5, r1
 800ee14:	4614      	mov	r4, r2
 800ee16:	d50e      	bpl.n	800ee36 <_svfiprintf_r+0x32>
 800ee18:	690b      	ldr	r3, [r1, #16]
 800ee1a:	b963      	cbnz	r3, 800ee36 <_svfiprintf_r+0x32>
 800ee1c:	2140      	movs	r1, #64	; 0x40
 800ee1e:	f7ff ff21 	bl	800ec64 <_malloc_r>
 800ee22:	6028      	str	r0, [r5, #0]
 800ee24:	6128      	str	r0, [r5, #16]
 800ee26:	b920      	cbnz	r0, 800ee32 <_svfiprintf_r+0x2e>
 800ee28:	230c      	movs	r3, #12
 800ee2a:	603b      	str	r3, [r7, #0]
 800ee2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee30:	e0d1      	b.n	800efd6 <_svfiprintf_r+0x1d2>
 800ee32:	2340      	movs	r3, #64	; 0x40
 800ee34:	616b      	str	r3, [r5, #20]
 800ee36:	2300      	movs	r3, #0
 800ee38:	9309      	str	r3, [sp, #36]	; 0x24
 800ee3a:	2320      	movs	r3, #32
 800ee3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee44:	2330      	movs	r3, #48	; 0x30
 800ee46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eff0 <_svfiprintf_r+0x1ec>
 800ee4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee4e:	f04f 0901 	mov.w	r9, #1
 800ee52:	4623      	mov	r3, r4
 800ee54:	469a      	mov	sl, r3
 800ee56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee5a:	b10a      	cbz	r2, 800ee60 <_svfiprintf_r+0x5c>
 800ee5c:	2a25      	cmp	r2, #37	; 0x25
 800ee5e:	d1f9      	bne.n	800ee54 <_svfiprintf_r+0x50>
 800ee60:	ebba 0b04 	subs.w	fp, sl, r4
 800ee64:	d00b      	beq.n	800ee7e <_svfiprintf_r+0x7a>
 800ee66:	465b      	mov	r3, fp
 800ee68:	4622      	mov	r2, r4
 800ee6a:	4629      	mov	r1, r5
 800ee6c:	4638      	mov	r0, r7
 800ee6e:	f7ff ff6d 	bl	800ed4c <__ssputs_r>
 800ee72:	3001      	adds	r0, #1
 800ee74:	f000 80aa 	beq.w	800efcc <_svfiprintf_r+0x1c8>
 800ee78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee7a:	445a      	add	r2, fp
 800ee7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ee7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	f000 80a2 	beq.w	800efcc <_svfiprintf_r+0x1c8>
 800ee88:	2300      	movs	r3, #0
 800ee8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee92:	f10a 0a01 	add.w	sl, sl, #1
 800ee96:	9304      	str	r3, [sp, #16]
 800ee98:	9307      	str	r3, [sp, #28]
 800ee9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee9e:	931a      	str	r3, [sp, #104]	; 0x68
 800eea0:	4654      	mov	r4, sl
 800eea2:	2205      	movs	r2, #5
 800eea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eea8:	4851      	ldr	r0, [pc, #324]	; (800eff0 <_svfiprintf_r+0x1ec>)
 800eeaa:	f7f1 f9a1 	bl	80001f0 <memchr>
 800eeae:	9a04      	ldr	r2, [sp, #16]
 800eeb0:	b9d8      	cbnz	r0, 800eeea <_svfiprintf_r+0xe6>
 800eeb2:	06d0      	lsls	r0, r2, #27
 800eeb4:	bf44      	itt	mi
 800eeb6:	2320      	movmi	r3, #32
 800eeb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eebc:	0711      	lsls	r1, r2, #28
 800eebe:	bf44      	itt	mi
 800eec0:	232b      	movmi	r3, #43	; 0x2b
 800eec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eec6:	f89a 3000 	ldrb.w	r3, [sl]
 800eeca:	2b2a      	cmp	r3, #42	; 0x2a
 800eecc:	d015      	beq.n	800eefa <_svfiprintf_r+0xf6>
 800eece:	9a07      	ldr	r2, [sp, #28]
 800eed0:	4654      	mov	r4, sl
 800eed2:	2000      	movs	r0, #0
 800eed4:	f04f 0c0a 	mov.w	ip, #10
 800eed8:	4621      	mov	r1, r4
 800eeda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eede:	3b30      	subs	r3, #48	; 0x30
 800eee0:	2b09      	cmp	r3, #9
 800eee2:	d94e      	bls.n	800ef82 <_svfiprintf_r+0x17e>
 800eee4:	b1b0      	cbz	r0, 800ef14 <_svfiprintf_r+0x110>
 800eee6:	9207      	str	r2, [sp, #28]
 800eee8:	e014      	b.n	800ef14 <_svfiprintf_r+0x110>
 800eeea:	eba0 0308 	sub.w	r3, r0, r8
 800eeee:	fa09 f303 	lsl.w	r3, r9, r3
 800eef2:	4313      	orrs	r3, r2
 800eef4:	9304      	str	r3, [sp, #16]
 800eef6:	46a2      	mov	sl, r4
 800eef8:	e7d2      	b.n	800eea0 <_svfiprintf_r+0x9c>
 800eefa:	9b03      	ldr	r3, [sp, #12]
 800eefc:	1d19      	adds	r1, r3, #4
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	9103      	str	r1, [sp, #12]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	bfbb      	ittet	lt
 800ef06:	425b      	neglt	r3, r3
 800ef08:	f042 0202 	orrlt.w	r2, r2, #2
 800ef0c:	9307      	strge	r3, [sp, #28]
 800ef0e:	9307      	strlt	r3, [sp, #28]
 800ef10:	bfb8      	it	lt
 800ef12:	9204      	strlt	r2, [sp, #16]
 800ef14:	7823      	ldrb	r3, [r4, #0]
 800ef16:	2b2e      	cmp	r3, #46	; 0x2e
 800ef18:	d10c      	bne.n	800ef34 <_svfiprintf_r+0x130>
 800ef1a:	7863      	ldrb	r3, [r4, #1]
 800ef1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ef1e:	d135      	bne.n	800ef8c <_svfiprintf_r+0x188>
 800ef20:	9b03      	ldr	r3, [sp, #12]
 800ef22:	1d1a      	adds	r2, r3, #4
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	9203      	str	r2, [sp, #12]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	bfb8      	it	lt
 800ef2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef30:	3402      	adds	r4, #2
 800ef32:	9305      	str	r3, [sp, #20]
 800ef34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f000 <_svfiprintf_r+0x1fc>
 800ef38:	7821      	ldrb	r1, [r4, #0]
 800ef3a:	2203      	movs	r2, #3
 800ef3c:	4650      	mov	r0, sl
 800ef3e:	f7f1 f957 	bl	80001f0 <memchr>
 800ef42:	b140      	cbz	r0, 800ef56 <_svfiprintf_r+0x152>
 800ef44:	2340      	movs	r3, #64	; 0x40
 800ef46:	eba0 000a 	sub.w	r0, r0, sl
 800ef4a:	fa03 f000 	lsl.w	r0, r3, r0
 800ef4e:	9b04      	ldr	r3, [sp, #16]
 800ef50:	4303      	orrs	r3, r0
 800ef52:	3401      	adds	r4, #1
 800ef54:	9304      	str	r3, [sp, #16]
 800ef56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef5a:	4826      	ldr	r0, [pc, #152]	; (800eff4 <_svfiprintf_r+0x1f0>)
 800ef5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef60:	2206      	movs	r2, #6
 800ef62:	f7f1 f945 	bl	80001f0 <memchr>
 800ef66:	2800      	cmp	r0, #0
 800ef68:	d038      	beq.n	800efdc <_svfiprintf_r+0x1d8>
 800ef6a:	4b23      	ldr	r3, [pc, #140]	; (800eff8 <_svfiprintf_r+0x1f4>)
 800ef6c:	bb1b      	cbnz	r3, 800efb6 <_svfiprintf_r+0x1b2>
 800ef6e:	9b03      	ldr	r3, [sp, #12]
 800ef70:	3307      	adds	r3, #7
 800ef72:	f023 0307 	bic.w	r3, r3, #7
 800ef76:	3308      	adds	r3, #8
 800ef78:	9303      	str	r3, [sp, #12]
 800ef7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef7c:	4433      	add	r3, r6
 800ef7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ef80:	e767      	b.n	800ee52 <_svfiprintf_r+0x4e>
 800ef82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef86:	460c      	mov	r4, r1
 800ef88:	2001      	movs	r0, #1
 800ef8a:	e7a5      	b.n	800eed8 <_svfiprintf_r+0xd4>
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	3401      	adds	r4, #1
 800ef90:	9305      	str	r3, [sp, #20]
 800ef92:	4619      	mov	r1, r3
 800ef94:	f04f 0c0a 	mov.w	ip, #10
 800ef98:	4620      	mov	r0, r4
 800ef9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef9e:	3a30      	subs	r2, #48	; 0x30
 800efa0:	2a09      	cmp	r2, #9
 800efa2:	d903      	bls.n	800efac <_svfiprintf_r+0x1a8>
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d0c5      	beq.n	800ef34 <_svfiprintf_r+0x130>
 800efa8:	9105      	str	r1, [sp, #20]
 800efaa:	e7c3      	b.n	800ef34 <_svfiprintf_r+0x130>
 800efac:	fb0c 2101 	mla	r1, ip, r1, r2
 800efb0:	4604      	mov	r4, r0
 800efb2:	2301      	movs	r3, #1
 800efb4:	e7f0      	b.n	800ef98 <_svfiprintf_r+0x194>
 800efb6:	ab03      	add	r3, sp, #12
 800efb8:	9300      	str	r3, [sp, #0]
 800efba:	462a      	mov	r2, r5
 800efbc:	4b0f      	ldr	r3, [pc, #60]	; (800effc <_svfiprintf_r+0x1f8>)
 800efbe:	a904      	add	r1, sp, #16
 800efc0:	4638      	mov	r0, r7
 800efc2:	f7fd ffc9 	bl	800cf58 <_printf_float>
 800efc6:	1c42      	adds	r2, r0, #1
 800efc8:	4606      	mov	r6, r0
 800efca:	d1d6      	bne.n	800ef7a <_svfiprintf_r+0x176>
 800efcc:	89ab      	ldrh	r3, [r5, #12]
 800efce:	065b      	lsls	r3, r3, #25
 800efd0:	f53f af2c 	bmi.w	800ee2c <_svfiprintf_r+0x28>
 800efd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efd6:	b01d      	add	sp, #116	; 0x74
 800efd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efdc:	ab03      	add	r3, sp, #12
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	462a      	mov	r2, r5
 800efe2:	4b06      	ldr	r3, [pc, #24]	; (800effc <_svfiprintf_r+0x1f8>)
 800efe4:	a904      	add	r1, sp, #16
 800efe6:	4638      	mov	r0, r7
 800efe8:	f7fe fa5a 	bl	800d4a0 <_printf_i>
 800efec:	e7eb      	b.n	800efc6 <_svfiprintf_r+0x1c2>
 800efee:	bf00      	nop
 800eff0:	08010454 	.word	0x08010454
 800eff4:	0801045e 	.word	0x0801045e
 800eff8:	0800cf59 	.word	0x0800cf59
 800effc:	0800ed4d 	.word	0x0800ed4d
 800f000:	0801045a 	.word	0x0801045a

0800f004 <_sbrk_r>:
 800f004:	b538      	push	{r3, r4, r5, lr}
 800f006:	4d06      	ldr	r5, [pc, #24]	; (800f020 <_sbrk_r+0x1c>)
 800f008:	2300      	movs	r3, #0
 800f00a:	4604      	mov	r4, r0
 800f00c:	4608      	mov	r0, r1
 800f00e:	602b      	str	r3, [r5, #0]
 800f010:	f7f2 ffe2 	bl	8001fd8 <_sbrk>
 800f014:	1c43      	adds	r3, r0, #1
 800f016:	d102      	bne.n	800f01e <_sbrk_r+0x1a>
 800f018:	682b      	ldr	r3, [r5, #0]
 800f01a:	b103      	cbz	r3, 800f01e <_sbrk_r+0x1a>
 800f01c:	6023      	str	r3, [r4, #0]
 800f01e:	bd38      	pop	{r3, r4, r5, pc}
 800f020:	2000226c 	.word	0x2000226c

0800f024 <__assert_func>:
 800f024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f026:	4614      	mov	r4, r2
 800f028:	461a      	mov	r2, r3
 800f02a:	4b09      	ldr	r3, [pc, #36]	; (800f050 <__assert_func+0x2c>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	4605      	mov	r5, r0
 800f030:	68d8      	ldr	r0, [r3, #12]
 800f032:	b14c      	cbz	r4, 800f048 <__assert_func+0x24>
 800f034:	4b07      	ldr	r3, [pc, #28]	; (800f054 <__assert_func+0x30>)
 800f036:	9100      	str	r1, [sp, #0]
 800f038:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f03c:	4906      	ldr	r1, [pc, #24]	; (800f058 <__assert_func+0x34>)
 800f03e:	462b      	mov	r3, r5
 800f040:	f000 f80e 	bl	800f060 <fiprintf>
 800f044:	f000 faac 	bl	800f5a0 <abort>
 800f048:	4b04      	ldr	r3, [pc, #16]	; (800f05c <__assert_func+0x38>)
 800f04a:	461c      	mov	r4, r3
 800f04c:	e7f3      	b.n	800f036 <__assert_func+0x12>
 800f04e:	bf00      	nop
 800f050:	2000012c 	.word	0x2000012c
 800f054:	08010465 	.word	0x08010465
 800f058:	08010472 	.word	0x08010472
 800f05c:	080104a0 	.word	0x080104a0

0800f060 <fiprintf>:
 800f060:	b40e      	push	{r1, r2, r3}
 800f062:	b503      	push	{r0, r1, lr}
 800f064:	4601      	mov	r1, r0
 800f066:	ab03      	add	r3, sp, #12
 800f068:	4805      	ldr	r0, [pc, #20]	; (800f080 <fiprintf+0x20>)
 800f06a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f06e:	6800      	ldr	r0, [r0, #0]
 800f070:	9301      	str	r3, [sp, #4]
 800f072:	f000 f897 	bl	800f1a4 <_vfiprintf_r>
 800f076:	b002      	add	sp, #8
 800f078:	f85d eb04 	ldr.w	lr, [sp], #4
 800f07c:	b003      	add	sp, #12
 800f07e:	4770      	bx	lr
 800f080:	2000012c 	.word	0x2000012c

0800f084 <__ascii_mbtowc>:
 800f084:	b082      	sub	sp, #8
 800f086:	b901      	cbnz	r1, 800f08a <__ascii_mbtowc+0x6>
 800f088:	a901      	add	r1, sp, #4
 800f08a:	b142      	cbz	r2, 800f09e <__ascii_mbtowc+0x1a>
 800f08c:	b14b      	cbz	r3, 800f0a2 <__ascii_mbtowc+0x1e>
 800f08e:	7813      	ldrb	r3, [r2, #0]
 800f090:	600b      	str	r3, [r1, #0]
 800f092:	7812      	ldrb	r2, [r2, #0]
 800f094:	1e10      	subs	r0, r2, #0
 800f096:	bf18      	it	ne
 800f098:	2001      	movne	r0, #1
 800f09a:	b002      	add	sp, #8
 800f09c:	4770      	bx	lr
 800f09e:	4610      	mov	r0, r2
 800f0a0:	e7fb      	b.n	800f09a <__ascii_mbtowc+0x16>
 800f0a2:	f06f 0001 	mvn.w	r0, #1
 800f0a6:	e7f8      	b.n	800f09a <__ascii_mbtowc+0x16>

0800f0a8 <memmove>:
 800f0a8:	4288      	cmp	r0, r1
 800f0aa:	b510      	push	{r4, lr}
 800f0ac:	eb01 0402 	add.w	r4, r1, r2
 800f0b0:	d902      	bls.n	800f0b8 <memmove+0x10>
 800f0b2:	4284      	cmp	r4, r0
 800f0b4:	4623      	mov	r3, r4
 800f0b6:	d807      	bhi.n	800f0c8 <memmove+0x20>
 800f0b8:	1e43      	subs	r3, r0, #1
 800f0ba:	42a1      	cmp	r1, r4
 800f0bc:	d008      	beq.n	800f0d0 <memmove+0x28>
 800f0be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0c6:	e7f8      	b.n	800f0ba <memmove+0x12>
 800f0c8:	4402      	add	r2, r0
 800f0ca:	4601      	mov	r1, r0
 800f0cc:	428a      	cmp	r2, r1
 800f0ce:	d100      	bne.n	800f0d2 <memmove+0x2a>
 800f0d0:	bd10      	pop	{r4, pc}
 800f0d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f0da:	e7f7      	b.n	800f0cc <memmove+0x24>

0800f0dc <__malloc_lock>:
 800f0dc:	4801      	ldr	r0, [pc, #4]	; (800f0e4 <__malloc_lock+0x8>)
 800f0de:	f000 bc1f 	b.w	800f920 <__retarget_lock_acquire_recursive>
 800f0e2:	bf00      	nop
 800f0e4:	20002270 	.word	0x20002270

0800f0e8 <__malloc_unlock>:
 800f0e8:	4801      	ldr	r0, [pc, #4]	; (800f0f0 <__malloc_unlock+0x8>)
 800f0ea:	f000 bc1a 	b.w	800f922 <__retarget_lock_release_recursive>
 800f0ee:	bf00      	nop
 800f0f0:	20002270 	.word	0x20002270

0800f0f4 <_realloc_r>:
 800f0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f8:	4680      	mov	r8, r0
 800f0fa:	4614      	mov	r4, r2
 800f0fc:	460e      	mov	r6, r1
 800f0fe:	b921      	cbnz	r1, 800f10a <_realloc_r+0x16>
 800f100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f104:	4611      	mov	r1, r2
 800f106:	f7ff bdad 	b.w	800ec64 <_malloc_r>
 800f10a:	b92a      	cbnz	r2, 800f118 <_realloc_r+0x24>
 800f10c:	f7ff fd3e 	bl	800eb8c <_free_r>
 800f110:	4625      	mov	r5, r4
 800f112:	4628      	mov	r0, r5
 800f114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f118:	f000 fc6a 	bl	800f9f0 <_malloc_usable_size_r>
 800f11c:	4284      	cmp	r4, r0
 800f11e:	4607      	mov	r7, r0
 800f120:	d802      	bhi.n	800f128 <_realloc_r+0x34>
 800f122:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f126:	d812      	bhi.n	800f14e <_realloc_r+0x5a>
 800f128:	4621      	mov	r1, r4
 800f12a:	4640      	mov	r0, r8
 800f12c:	f7ff fd9a 	bl	800ec64 <_malloc_r>
 800f130:	4605      	mov	r5, r0
 800f132:	2800      	cmp	r0, #0
 800f134:	d0ed      	beq.n	800f112 <_realloc_r+0x1e>
 800f136:	42bc      	cmp	r4, r7
 800f138:	4622      	mov	r2, r4
 800f13a:	4631      	mov	r1, r6
 800f13c:	bf28      	it	cs
 800f13e:	463a      	movcs	r2, r7
 800f140:	f7ff f97c 	bl	800e43c <memcpy>
 800f144:	4631      	mov	r1, r6
 800f146:	4640      	mov	r0, r8
 800f148:	f7ff fd20 	bl	800eb8c <_free_r>
 800f14c:	e7e1      	b.n	800f112 <_realloc_r+0x1e>
 800f14e:	4635      	mov	r5, r6
 800f150:	e7df      	b.n	800f112 <_realloc_r+0x1e>

0800f152 <__sfputc_r>:
 800f152:	6893      	ldr	r3, [r2, #8]
 800f154:	3b01      	subs	r3, #1
 800f156:	2b00      	cmp	r3, #0
 800f158:	b410      	push	{r4}
 800f15a:	6093      	str	r3, [r2, #8]
 800f15c:	da08      	bge.n	800f170 <__sfputc_r+0x1e>
 800f15e:	6994      	ldr	r4, [r2, #24]
 800f160:	42a3      	cmp	r3, r4
 800f162:	db01      	blt.n	800f168 <__sfputc_r+0x16>
 800f164:	290a      	cmp	r1, #10
 800f166:	d103      	bne.n	800f170 <__sfputc_r+0x1e>
 800f168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f16c:	f000 b94a 	b.w	800f404 <__swbuf_r>
 800f170:	6813      	ldr	r3, [r2, #0]
 800f172:	1c58      	adds	r0, r3, #1
 800f174:	6010      	str	r0, [r2, #0]
 800f176:	7019      	strb	r1, [r3, #0]
 800f178:	4608      	mov	r0, r1
 800f17a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f17e:	4770      	bx	lr

0800f180 <__sfputs_r>:
 800f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f182:	4606      	mov	r6, r0
 800f184:	460f      	mov	r7, r1
 800f186:	4614      	mov	r4, r2
 800f188:	18d5      	adds	r5, r2, r3
 800f18a:	42ac      	cmp	r4, r5
 800f18c:	d101      	bne.n	800f192 <__sfputs_r+0x12>
 800f18e:	2000      	movs	r0, #0
 800f190:	e007      	b.n	800f1a2 <__sfputs_r+0x22>
 800f192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f196:	463a      	mov	r2, r7
 800f198:	4630      	mov	r0, r6
 800f19a:	f7ff ffda 	bl	800f152 <__sfputc_r>
 800f19e:	1c43      	adds	r3, r0, #1
 800f1a0:	d1f3      	bne.n	800f18a <__sfputs_r+0xa>
 800f1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1a4 <_vfiprintf_r>:
 800f1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a8:	460d      	mov	r5, r1
 800f1aa:	b09d      	sub	sp, #116	; 0x74
 800f1ac:	4614      	mov	r4, r2
 800f1ae:	4698      	mov	r8, r3
 800f1b0:	4606      	mov	r6, r0
 800f1b2:	b118      	cbz	r0, 800f1bc <_vfiprintf_r+0x18>
 800f1b4:	6983      	ldr	r3, [r0, #24]
 800f1b6:	b90b      	cbnz	r3, 800f1bc <_vfiprintf_r+0x18>
 800f1b8:	f000 fb14 	bl	800f7e4 <__sinit>
 800f1bc:	4b89      	ldr	r3, [pc, #548]	; (800f3e4 <_vfiprintf_r+0x240>)
 800f1be:	429d      	cmp	r5, r3
 800f1c0:	d11b      	bne.n	800f1fa <_vfiprintf_r+0x56>
 800f1c2:	6875      	ldr	r5, [r6, #4]
 800f1c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1c6:	07d9      	lsls	r1, r3, #31
 800f1c8:	d405      	bmi.n	800f1d6 <_vfiprintf_r+0x32>
 800f1ca:	89ab      	ldrh	r3, [r5, #12]
 800f1cc:	059a      	lsls	r2, r3, #22
 800f1ce:	d402      	bmi.n	800f1d6 <_vfiprintf_r+0x32>
 800f1d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1d2:	f000 fba5 	bl	800f920 <__retarget_lock_acquire_recursive>
 800f1d6:	89ab      	ldrh	r3, [r5, #12]
 800f1d8:	071b      	lsls	r3, r3, #28
 800f1da:	d501      	bpl.n	800f1e0 <_vfiprintf_r+0x3c>
 800f1dc:	692b      	ldr	r3, [r5, #16]
 800f1de:	b9eb      	cbnz	r3, 800f21c <_vfiprintf_r+0x78>
 800f1e0:	4629      	mov	r1, r5
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	f000 f96e 	bl	800f4c4 <__swsetup_r>
 800f1e8:	b1c0      	cbz	r0, 800f21c <_vfiprintf_r+0x78>
 800f1ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1ec:	07dc      	lsls	r4, r3, #31
 800f1ee:	d50e      	bpl.n	800f20e <_vfiprintf_r+0x6a>
 800f1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f4:	b01d      	add	sp, #116	; 0x74
 800f1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1fa:	4b7b      	ldr	r3, [pc, #492]	; (800f3e8 <_vfiprintf_r+0x244>)
 800f1fc:	429d      	cmp	r5, r3
 800f1fe:	d101      	bne.n	800f204 <_vfiprintf_r+0x60>
 800f200:	68b5      	ldr	r5, [r6, #8]
 800f202:	e7df      	b.n	800f1c4 <_vfiprintf_r+0x20>
 800f204:	4b79      	ldr	r3, [pc, #484]	; (800f3ec <_vfiprintf_r+0x248>)
 800f206:	429d      	cmp	r5, r3
 800f208:	bf08      	it	eq
 800f20a:	68f5      	ldreq	r5, [r6, #12]
 800f20c:	e7da      	b.n	800f1c4 <_vfiprintf_r+0x20>
 800f20e:	89ab      	ldrh	r3, [r5, #12]
 800f210:	0598      	lsls	r0, r3, #22
 800f212:	d4ed      	bmi.n	800f1f0 <_vfiprintf_r+0x4c>
 800f214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f216:	f000 fb84 	bl	800f922 <__retarget_lock_release_recursive>
 800f21a:	e7e9      	b.n	800f1f0 <_vfiprintf_r+0x4c>
 800f21c:	2300      	movs	r3, #0
 800f21e:	9309      	str	r3, [sp, #36]	; 0x24
 800f220:	2320      	movs	r3, #32
 800f222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f226:	f8cd 800c 	str.w	r8, [sp, #12]
 800f22a:	2330      	movs	r3, #48	; 0x30
 800f22c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f3f0 <_vfiprintf_r+0x24c>
 800f230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f234:	f04f 0901 	mov.w	r9, #1
 800f238:	4623      	mov	r3, r4
 800f23a:	469a      	mov	sl, r3
 800f23c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f240:	b10a      	cbz	r2, 800f246 <_vfiprintf_r+0xa2>
 800f242:	2a25      	cmp	r2, #37	; 0x25
 800f244:	d1f9      	bne.n	800f23a <_vfiprintf_r+0x96>
 800f246:	ebba 0b04 	subs.w	fp, sl, r4
 800f24a:	d00b      	beq.n	800f264 <_vfiprintf_r+0xc0>
 800f24c:	465b      	mov	r3, fp
 800f24e:	4622      	mov	r2, r4
 800f250:	4629      	mov	r1, r5
 800f252:	4630      	mov	r0, r6
 800f254:	f7ff ff94 	bl	800f180 <__sfputs_r>
 800f258:	3001      	adds	r0, #1
 800f25a:	f000 80aa 	beq.w	800f3b2 <_vfiprintf_r+0x20e>
 800f25e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f260:	445a      	add	r2, fp
 800f262:	9209      	str	r2, [sp, #36]	; 0x24
 800f264:	f89a 3000 	ldrb.w	r3, [sl]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	f000 80a2 	beq.w	800f3b2 <_vfiprintf_r+0x20e>
 800f26e:	2300      	movs	r3, #0
 800f270:	f04f 32ff 	mov.w	r2, #4294967295
 800f274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f278:	f10a 0a01 	add.w	sl, sl, #1
 800f27c:	9304      	str	r3, [sp, #16]
 800f27e:	9307      	str	r3, [sp, #28]
 800f280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f284:	931a      	str	r3, [sp, #104]	; 0x68
 800f286:	4654      	mov	r4, sl
 800f288:	2205      	movs	r2, #5
 800f28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f28e:	4858      	ldr	r0, [pc, #352]	; (800f3f0 <_vfiprintf_r+0x24c>)
 800f290:	f7f0 ffae 	bl	80001f0 <memchr>
 800f294:	9a04      	ldr	r2, [sp, #16]
 800f296:	b9d8      	cbnz	r0, 800f2d0 <_vfiprintf_r+0x12c>
 800f298:	06d1      	lsls	r1, r2, #27
 800f29a:	bf44      	itt	mi
 800f29c:	2320      	movmi	r3, #32
 800f29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2a2:	0713      	lsls	r3, r2, #28
 800f2a4:	bf44      	itt	mi
 800f2a6:	232b      	movmi	r3, #43	; 0x2b
 800f2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2ac:	f89a 3000 	ldrb.w	r3, [sl]
 800f2b0:	2b2a      	cmp	r3, #42	; 0x2a
 800f2b2:	d015      	beq.n	800f2e0 <_vfiprintf_r+0x13c>
 800f2b4:	9a07      	ldr	r2, [sp, #28]
 800f2b6:	4654      	mov	r4, sl
 800f2b8:	2000      	movs	r0, #0
 800f2ba:	f04f 0c0a 	mov.w	ip, #10
 800f2be:	4621      	mov	r1, r4
 800f2c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2c4:	3b30      	subs	r3, #48	; 0x30
 800f2c6:	2b09      	cmp	r3, #9
 800f2c8:	d94e      	bls.n	800f368 <_vfiprintf_r+0x1c4>
 800f2ca:	b1b0      	cbz	r0, 800f2fa <_vfiprintf_r+0x156>
 800f2cc:	9207      	str	r2, [sp, #28]
 800f2ce:	e014      	b.n	800f2fa <_vfiprintf_r+0x156>
 800f2d0:	eba0 0308 	sub.w	r3, r0, r8
 800f2d4:	fa09 f303 	lsl.w	r3, r9, r3
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	9304      	str	r3, [sp, #16]
 800f2dc:	46a2      	mov	sl, r4
 800f2de:	e7d2      	b.n	800f286 <_vfiprintf_r+0xe2>
 800f2e0:	9b03      	ldr	r3, [sp, #12]
 800f2e2:	1d19      	adds	r1, r3, #4
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	9103      	str	r1, [sp, #12]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	bfbb      	ittet	lt
 800f2ec:	425b      	neglt	r3, r3
 800f2ee:	f042 0202 	orrlt.w	r2, r2, #2
 800f2f2:	9307      	strge	r3, [sp, #28]
 800f2f4:	9307      	strlt	r3, [sp, #28]
 800f2f6:	bfb8      	it	lt
 800f2f8:	9204      	strlt	r2, [sp, #16]
 800f2fa:	7823      	ldrb	r3, [r4, #0]
 800f2fc:	2b2e      	cmp	r3, #46	; 0x2e
 800f2fe:	d10c      	bne.n	800f31a <_vfiprintf_r+0x176>
 800f300:	7863      	ldrb	r3, [r4, #1]
 800f302:	2b2a      	cmp	r3, #42	; 0x2a
 800f304:	d135      	bne.n	800f372 <_vfiprintf_r+0x1ce>
 800f306:	9b03      	ldr	r3, [sp, #12]
 800f308:	1d1a      	adds	r2, r3, #4
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	9203      	str	r2, [sp, #12]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	bfb8      	it	lt
 800f312:	f04f 33ff 	movlt.w	r3, #4294967295
 800f316:	3402      	adds	r4, #2
 800f318:	9305      	str	r3, [sp, #20]
 800f31a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f400 <_vfiprintf_r+0x25c>
 800f31e:	7821      	ldrb	r1, [r4, #0]
 800f320:	2203      	movs	r2, #3
 800f322:	4650      	mov	r0, sl
 800f324:	f7f0 ff64 	bl	80001f0 <memchr>
 800f328:	b140      	cbz	r0, 800f33c <_vfiprintf_r+0x198>
 800f32a:	2340      	movs	r3, #64	; 0x40
 800f32c:	eba0 000a 	sub.w	r0, r0, sl
 800f330:	fa03 f000 	lsl.w	r0, r3, r0
 800f334:	9b04      	ldr	r3, [sp, #16]
 800f336:	4303      	orrs	r3, r0
 800f338:	3401      	adds	r4, #1
 800f33a:	9304      	str	r3, [sp, #16]
 800f33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f340:	482c      	ldr	r0, [pc, #176]	; (800f3f4 <_vfiprintf_r+0x250>)
 800f342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f346:	2206      	movs	r2, #6
 800f348:	f7f0 ff52 	bl	80001f0 <memchr>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d03f      	beq.n	800f3d0 <_vfiprintf_r+0x22c>
 800f350:	4b29      	ldr	r3, [pc, #164]	; (800f3f8 <_vfiprintf_r+0x254>)
 800f352:	bb1b      	cbnz	r3, 800f39c <_vfiprintf_r+0x1f8>
 800f354:	9b03      	ldr	r3, [sp, #12]
 800f356:	3307      	adds	r3, #7
 800f358:	f023 0307 	bic.w	r3, r3, #7
 800f35c:	3308      	adds	r3, #8
 800f35e:	9303      	str	r3, [sp, #12]
 800f360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f362:	443b      	add	r3, r7
 800f364:	9309      	str	r3, [sp, #36]	; 0x24
 800f366:	e767      	b.n	800f238 <_vfiprintf_r+0x94>
 800f368:	fb0c 3202 	mla	r2, ip, r2, r3
 800f36c:	460c      	mov	r4, r1
 800f36e:	2001      	movs	r0, #1
 800f370:	e7a5      	b.n	800f2be <_vfiprintf_r+0x11a>
 800f372:	2300      	movs	r3, #0
 800f374:	3401      	adds	r4, #1
 800f376:	9305      	str	r3, [sp, #20]
 800f378:	4619      	mov	r1, r3
 800f37a:	f04f 0c0a 	mov.w	ip, #10
 800f37e:	4620      	mov	r0, r4
 800f380:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f384:	3a30      	subs	r2, #48	; 0x30
 800f386:	2a09      	cmp	r2, #9
 800f388:	d903      	bls.n	800f392 <_vfiprintf_r+0x1ee>
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d0c5      	beq.n	800f31a <_vfiprintf_r+0x176>
 800f38e:	9105      	str	r1, [sp, #20]
 800f390:	e7c3      	b.n	800f31a <_vfiprintf_r+0x176>
 800f392:	fb0c 2101 	mla	r1, ip, r1, r2
 800f396:	4604      	mov	r4, r0
 800f398:	2301      	movs	r3, #1
 800f39a:	e7f0      	b.n	800f37e <_vfiprintf_r+0x1da>
 800f39c:	ab03      	add	r3, sp, #12
 800f39e:	9300      	str	r3, [sp, #0]
 800f3a0:	462a      	mov	r2, r5
 800f3a2:	4b16      	ldr	r3, [pc, #88]	; (800f3fc <_vfiprintf_r+0x258>)
 800f3a4:	a904      	add	r1, sp, #16
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	f7fd fdd6 	bl	800cf58 <_printf_float>
 800f3ac:	4607      	mov	r7, r0
 800f3ae:	1c78      	adds	r0, r7, #1
 800f3b0:	d1d6      	bne.n	800f360 <_vfiprintf_r+0x1bc>
 800f3b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3b4:	07d9      	lsls	r1, r3, #31
 800f3b6:	d405      	bmi.n	800f3c4 <_vfiprintf_r+0x220>
 800f3b8:	89ab      	ldrh	r3, [r5, #12]
 800f3ba:	059a      	lsls	r2, r3, #22
 800f3bc:	d402      	bmi.n	800f3c4 <_vfiprintf_r+0x220>
 800f3be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3c0:	f000 faaf 	bl	800f922 <__retarget_lock_release_recursive>
 800f3c4:	89ab      	ldrh	r3, [r5, #12]
 800f3c6:	065b      	lsls	r3, r3, #25
 800f3c8:	f53f af12 	bmi.w	800f1f0 <_vfiprintf_r+0x4c>
 800f3cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3ce:	e711      	b.n	800f1f4 <_vfiprintf_r+0x50>
 800f3d0:	ab03      	add	r3, sp, #12
 800f3d2:	9300      	str	r3, [sp, #0]
 800f3d4:	462a      	mov	r2, r5
 800f3d6:	4b09      	ldr	r3, [pc, #36]	; (800f3fc <_vfiprintf_r+0x258>)
 800f3d8:	a904      	add	r1, sp, #16
 800f3da:	4630      	mov	r0, r6
 800f3dc:	f7fe f860 	bl	800d4a0 <_printf_i>
 800f3e0:	e7e4      	b.n	800f3ac <_vfiprintf_r+0x208>
 800f3e2:	bf00      	nop
 800f3e4:	080105cc 	.word	0x080105cc
 800f3e8:	080105ec 	.word	0x080105ec
 800f3ec:	080105ac 	.word	0x080105ac
 800f3f0:	08010454 	.word	0x08010454
 800f3f4:	0801045e 	.word	0x0801045e
 800f3f8:	0800cf59 	.word	0x0800cf59
 800f3fc:	0800f181 	.word	0x0800f181
 800f400:	0801045a 	.word	0x0801045a

0800f404 <__swbuf_r>:
 800f404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f406:	460e      	mov	r6, r1
 800f408:	4614      	mov	r4, r2
 800f40a:	4605      	mov	r5, r0
 800f40c:	b118      	cbz	r0, 800f416 <__swbuf_r+0x12>
 800f40e:	6983      	ldr	r3, [r0, #24]
 800f410:	b90b      	cbnz	r3, 800f416 <__swbuf_r+0x12>
 800f412:	f000 f9e7 	bl	800f7e4 <__sinit>
 800f416:	4b21      	ldr	r3, [pc, #132]	; (800f49c <__swbuf_r+0x98>)
 800f418:	429c      	cmp	r4, r3
 800f41a:	d12b      	bne.n	800f474 <__swbuf_r+0x70>
 800f41c:	686c      	ldr	r4, [r5, #4]
 800f41e:	69a3      	ldr	r3, [r4, #24]
 800f420:	60a3      	str	r3, [r4, #8]
 800f422:	89a3      	ldrh	r3, [r4, #12]
 800f424:	071a      	lsls	r2, r3, #28
 800f426:	d52f      	bpl.n	800f488 <__swbuf_r+0x84>
 800f428:	6923      	ldr	r3, [r4, #16]
 800f42a:	b36b      	cbz	r3, 800f488 <__swbuf_r+0x84>
 800f42c:	6923      	ldr	r3, [r4, #16]
 800f42e:	6820      	ldr	r0, [r4, #0]
 800f430:	1ac0      	subs	r0, r0, r3
 800f432:	6963      	ldr	r3, [r4, #20]
 800f434:	b2f6      	uxtb	r6, r6
 800f436:	4283      	cmp	r3, r0
 800f438:	4637      	mov	r7, r6
 800f43a:	dc04      	bgt.n	800f446 <__swbuf_r+0x42>
 800f43c:	4621      	mov	r1, r4
 800f43e:	4628      	mov	r0, r5
 800f440:	f000 f93c 	bl	800f6bc <_fflush_r>
 800f444:	bb30      	cbnz	r0, 800f494 <__swbuf_r+0x90>
 800f446:	68a3      	ldr	r3, [r4, #8]
 800f448:	3b01      	subs	r3, #1
 800f44a:	60a3      	str	r3, [r4, #8]
 800f44c:	6823      	ldr	r3, [r4, #0]
 800f44e:	1c5a      	adds	r2, r3, #1
 800f450:	6022      	str	r2, [r4, #0]
 800f452:	701e      	strb	r6, [r3, #0]
 800f454:	6963      	ldr	r3, [r4, #20]
 800f456:	3001      	adds	r0, #1
 800f458:	4283      	cmp	r3, r0
 800f45a:	d004      	beq.n	800f466 <__swbuf_r+0x62>
 800f45c:	89a3      	ldrh	r3, [r4, #12]
 800f45e:	07db      	lsls	r3, r3, #31
 800f460:	d506      	bpl.n	800f470 <__swbuf_r+0x6c>
 800f462:	2e0a      	cmp	r6, #10
 800f464:	d104      	bne.n	800f470 <__swbuf_r+0x6c>
 800f466:	4621      	mov	r1, r4
 800f468:	4628      	mov	r0, r5
 800f46a:	f000 f927 	bl	800f6bc <_fflush_r>
 800f46e:	b988      	cbnz	r0, 800f494 <__swbuf_r+0x90>
 800f470:	4638      	mov	r0, r7
 800f472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f474:	4b0a      	ldr	r3, [pc, #40]	; (800f4a0 <__swbuf_r+0x9c>)
 800f476:	429c      	cmp	r4, r3
 800f478:	d101      	bne.n	800f47e <__swbuf_r+0x7a>
 800f47a:	68ac      	ldr	r4, [r5, #8]
 800f47c:	e7cf      	b.n	800f41e <__swbuf_r+0x1a>
 800f47e:	4b09      	ldr	r3, [pc, #36]	; (800f4a4 <__swbuf_r+0xa0>)
 800f480:	429c      	cmp	r4, r3
 800f482:	bf08      	it	eq
 800f484:	68ec      	ldreq	r4, [r5, #12]
 800f486:	e7ca      	b.n	800f41e <__swbuf_r+0x1a>
 800f488:	4621      	mov	r1, r4
 800f48a:	4628      	mov	r0, r5
 800f48c:	f000 f81a 	bl	800f4c4 <__swsetup_r>
 800f490:	2800      	cmp	r0, #0
 800f492:	d0cb      	beq.n	800f42c <__swbuf_r+0x28>
 800f494:	f04f 37ff 	mov.w	r7, #4294967295
 800f498:	e7ea      	b.n	800f470 <__swbuf_r+0x6c>
 800f49a:	bf00      	nop
 800f49c:	080105cc 	.word	0x080105cc
 800f4a0:	080105ec 	.word	0x080105ec
 800f4a4:	080105ac 	.word	0x080105ac

0800f4a8 <__ascii_wctomb>:
 800f4a8:	b149      	cbz	r1, 800f4be <__ascii_wctomb+0x16>
 800f4aa:	2aff      	cmp	r2, #255	; 0xff
 800f4ac:	bf85      	ittet	hi
 800f4ae:	238a      	movhi	r3, #138	; 0x8a
 800f4b0:	6003      	strhi	r3, [r0, #0]
 800f4b2:	700a      	strbls	r2, [r1, #0]
 800f4b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f4b8:	bf98      	it	ls
 800f4ba:	2001      	movls	r0, #1
 800f4bc:	4770      	bx	lr
 800f4be:	4608      	mov	r0, r1
 800f4c0:	4770      	bx	lr
	...

0800f4c4 <__swsetup_r>:
 800f4c4:	4b32      	ldr	r3, [pc, #200]	; (800f590 <__swsetup_r+0xcc>)
 800f4c6:	b570      	push	{r4, r5, r6, lr}
 800f4c8:	681d      	ldr	r5, [r3, #0]
 800f4ca:	4606      	mov	r6, r0
 800f4cc:	460c      	mov	r4, r1
 800f4ce:	b125      	cbz	r5, 800f4da <__swsetup_r+0x16>
 800f4d0:	69ab      	ldr	r3, [r5, #24]
 800f4d2:	b913      	cbnz	r3, 800f4da <__swsetup_r+0x16>
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	f000 f985 	bl	800f7e4 <__sinit>
 800f4da:	4b2e      	ldr	r3, [pc, #184]	; (800f594 <__swsetup_r+0xd0>)
 800f4dc:	429c      	cmp	r4, r3
 800f4de:	d10f      	bne.n	800f500 <__swsetup_r+0x3c>
 800f4e0:	686c      	ldr	r4, [r5, #4]
 800f4e2:	89a3      	ldrh	r3, [r4, #12]
 800f4e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4e8:	0719      	lsls	r1, r3, #28
 800f4ea:	d42c      	bmi.n	800f546 <__swsetup_r+0x82>
 800f4ec:	06dd      	lsls	r5, r3, #27
 800f4ee:	d411      	bmi.n	800f514 <__swsetup_r+0x50>
 800f4f0:	2309      	movs	r3, #9
 800f4f2:	6033      	str	r3, [r6, #0]
 800f4f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f4f8:	81a3      	strh	r3, [r4, #12]
 800f4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f4fe:	e03e      	b.n	800f57e <__swsetup_r+0xba>
 800f500:	4b25      	ldr	r3, [pc, #148]	; (800f598 <__swsetup_r+0xd4>)
 800f502:	429c      	cmp	r4, r3
 800f504:	d101      	bne.n	800f50a <__swsetup_r+0x46>
 800f506:	68ac      	ldr	r4, [r5, #8]
 800f508:	e7eb      	b.n	800f4e2 <__swsetup_r+0x1e>
 800f50a:	4b24      	ldr	r3, [pc, #144]	; (800f59c <__swsetup_r+0xd8>)
 800f50c:	429c      	cmp	r4, r3
 800f50e:	bf08      	it	eq
 800f510:	68ec      	ldreq	r4, [r5, #12]
 800f512:	e7e6      	b.n	800f4e2 <__swsetup_r+0x1e>
 800f514:	0758      	lsls	r0, r3, #29
 800f516:	d512      	bpl.n	800f53e <__swsetup_r+0x7a>
 800f518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f51a:	b141      	cbz	r1, 800f52e <__swsetup_r+0x6a>
 800f51c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f520:	4299      	cmp	r1, r3
 800f522:	d002      	beq.n	800f52a <__swsetup_r+0x66>
 800f524:	4630      	mov	r0, r6
 800f526:	f7ff fb31 	bl	800eb8c <_free_r>
 800f52a:	2300      	movs	r3, #0
 800f52c:	6363      	str	r3, [r4, #52]	; 0x34
 800f52e:	89a3      	ldrh	r3, [r4, #12]
 800f530:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f534:	81a3      	strh	r3, [r4, #12]
 800f536:	2300      	movs	r3, #0
 800f538:	6063      	str	r3, [r4, #4]
 800f53a:	6923      	ldr	r3, [r4, #16]
 800f53c:	6023      	str	r3, [r4, #0]
 800f53e:	89a3      	ldrh	r3, [r4, #12]
 800f540:	f043 0308 	orr.w	r3, r3, #8
 800f544:	81a3      	strh	r3, [r4, #12]
 800f546:	6923      	ldr	r3, [r4, #16]
 800f548:	b94b      	cbnz	r3, 800f55e <__swsetup_r+0x9a>
 800f54a:	89a3      	ldrh	r3, [r4, #12]
 800f54c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f554:	d003      	beq.n	800f55e <__swsetup_r+0x9a>
 800f556:	4621      	mov	r1, r4
 800f558:	4630      	mov	r0, r6
 800f55a:	f000 fa09 	bl	800f970 <__smakebuf_r>
 800f55e:	89a0      	ldrh	r0, [r4, #12]
 800f560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f564:	f010 0301 	ands.w	r3, r0, #1
 800f568:	d00a      	beq.n	800f580 <__swsetup_r+0xbc>
 800f56a:	2300      	movs	r3, #0
 800f56c:	60a3      	str	r3, [r4, #8]
 800f56e:	6963      	ldr	r3, [r4, #20]
 800f570:	425b      	negs	r3, r3
 800f572:	61a3      	str	r3, [r4, #24]
 800f574:	6923      	ldr	r3, [r4, #16]
 800f576:	b943      	cbnz	r3, 800f58a <__swsetup_r+0xc6>
 800f578:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f57c:	d1ba      	bne.n	800f4f4 <__swsetup_r+0x30>
 800f57e:	bd70      	pop	{r4, r5, r6, pc}
 800f580:	0781      	lsls	r1, r0, #30
 800f582:	bf58      	it	pl
 800f584:	6963      	ldrpl	r3, [r4, #20]
 800f586:	60a3      	str	r3, [r4, #8]
 800f588:	e7f4      	b.n	800f574 <__swsetup_r+0xb0>
 800f58a:	2000      	movs	r0, #0
 800f58c:	e7f7      	b.n	800f57e <__swsetup_r+0xba>
 800f58e:	bf00      	nop
 800f590:	2000012c 	.word	0x2000012c
 800f594:	080105cc 	.word	0x080105cc
 800f598:	080105ec 	.word	0x080105ec
 800f59c:	080105ac 	.word	0x080105ac

0800f5a0 <abort>:
 800f5a0:	b508      	push	{r3, lr}
 800f5a2:	2006      	movs	r0, #6
 800f5a4:	f000 fa54 	bl	800fa50 <raise>
 800f5a8:	2001      	movs	r0, #1
 800f5aa:	f7f2 fc9d 	bl	8001ee8 <_exit>
	...

0800f5b0 <__sflush_r>:
 800f5b0:	898a      	ldrh	r2, [r1, #12]
 800f5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b6:	4605      	mov	r5, r0
 800f5b8:	0710      	lsls	r0, r2, #28
 800f5ba:	460c      	mov	r4, r1
 800f5bc:	d458      	bmi.n	800f670 <__sflush_r+0xc0>
 800f5be:	684b      	ldr	r3, [r1, #4]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	dc05      	bgt.n	800f5d0 <__sflush_r+0x20>
 800f5c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	dc02      	bgt.n	800f5d0 <__sflush_r+0x20>
 800f5ca:	2000      	movs	r0, #0
 800f5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5d2:	2e00      	cmp	r6, #0
 800f5d4:	d0f9      	beq.n	800f5ca <__sflush_r+0x1a>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f5dc:	682f      	ldr	r7, [r5, #0]
 800f5de:	602b      	str	r3, [r5, #0]
 800f5e0:	d032      	beq.n	800f648 <__sflush_r+0x98>
 800f5e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f5e4:	89a3      	ldrh	r3, [r4, #12]
 800f5e6:	075a      	lsls	r2, r3, #29
 800f5e8:	d505      	bpl.n	800f5f6 <__sflush_r+0x46>
 800f5ea:	6863      	ldr	r3, [r4, #4]
 800f5ec:	1ac0      	subs	r0, r0, r3
 800f5ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f5f0:	b10b      	cbz	r3, 800f5f6 <__sflush_r+0x46>
 800f5f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f5f4:	1ac0      	subs	r0, r0, r3
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5fc:	6a21      	ldr	r1, [r4, #32]
 800f5fe:	4628      	mov	r0, r5
 800f600:	47b0      	blx	r6
 800f602:	1c43      	adds	r3, r0, #1
 800f604:	89a3      	ldrh	r3, [r4, #12]
 800f606:	d106      	bne.n	800f616 <__sflush_r+0x66>
 800f608:	6829      	ldr	r1, [r5, #0]
 800f60a:	291d      	cmp	r1, #29
 800f60c:	d82c      	bhi.n	800f668 <__sflush_r+0xb8>
 800f60e:	4a2a      	ldr	r2, [pc, #168]	; (800f6b8 <__sflush_r+0x108>)
 800f610:	40ca      	lsrs	r2, r1
 800f612:	07d6      	lsls	r6, r2, #31
 800f614:	d528      	bpl.n	800f668 <__sflush_r+0xb8>
 800f616:	2200      	movs	r2, #0
 800f618:	6062      	str	r2, [r4, #4]
 800f61a:	04d9      	lsls	r1, r3, #19
 800f61c:	6922      	ldr	r2, [r4, #16]
 800f61e:	6022      	str	r2, [r4, #0]
 800f620:	d504      	bpl.n	800f62c <__sflush_r+0x7c>
 800f622:	1c42      	adds	r2, r0, #1
 800f624:	d101      	bne.n	800f62a <__sflush_r+0x7a>
 800f626:	682b      	ldr	r3, [r5, #0]
 800f628:	b903      	cbnz	r3, 800f62c <__sflush_r+0x7c>
 800f62a:	6560      	str	r0, [r4, #84]	; 0x54
 800f62c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f62e:	602f      	str	r7, [r5, #0]
 800f630:	2900      	cmp	r1, #0
 800f632:	d0ca      	beq.n	800f5ca <__sflush_r+0x1a>
 800f634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f638:	4299      	cmp	r1, r3
 800f63a:	d002      	beq.n	800f642 <__sflush_r+0x92>
 800f63c:	4628      	mov	r0, r5
 800f63e:	f7ff faa5 	bl	800eb8c <_free_r>
 800f642:	2000      	movs	r0, #0
 800f644:	6360      	str	r0, [r4, #52]	; 0x34
 800f646:	e7c1      	b.n	800f5cc <__sflush_r+0x1c>
 800f648:	6a21      	ldr	r1, [r4, #32]
 800f64a:	2301      	movs	r3, #1
 800f64c:	4628      	mov	r0, r5
 800f64e:	47b0      	blx	r6
 800f650:	1c41      	adds	r1, r0, #1
 800f652:	d1c7      	bne.n	800f5e4 <__sflush_r+0x34>
 800f654:	682b      	ldr	r3, [r5, #0]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d0c4      	beq.n	800f5e4 <__sflush_r+0x34>
 800f65a:	2b1d      	cmp	r3, #29
 800f65c:	d001      	beq.n	800f662 <__sflush_r+0xb2>
 800f65e:	2b16      	cmp	r3, #22
 800f660:	d101      	bne.n	800f666 <__sflush_r+0xb6>
 800f662:	602f      	str	r7, [r5, #0]
 800f664:	e7b1      	b.n	800f5ca <__sflush_r+0x1a>
 800f666:	89a3      	ldrh	r3, [r4, #12]
 800f668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f66c:	81a3      	strh	r3, [r4, #12]
 800f66e:	e7ad      	b.n	800f5cc <__sflush_r+0x1c>
 800f670:	690f      	ldr	r7, [r1, #16]
 800f672:	2f00      	cmp	r7, #0
 800f674:	d0a9      	beq.n	800f5ca <__sflush_r+0x1a>
 800f676:	0793      	lsls	r3, r2, #30
 800f678:	680e      	ldr	r6, [r1, #0]
 800f67a:	bf08      	it	eq
 800f67c:	694b      	ldreq	r3, [r1, #20]
 800f67e:	600f      	str	r7, [r1, #0]
 800f680:	bf18      	it	ne
 800f682:	2300      	movne	r3, #0
 800f684:	eba6 0807 	sub.w	r8, r6, r7
 800f688:	608b      	str	r3, [r1, #8]
 800f68a:	f1b8 0f00 	cmp.w	r8, #0
 800f68e:	dd9c      	ble.n	800f5ca <__sflush_r+0x1a>
 800f690:	6a21      	ldr	r1, [r4, #32]
 800f692:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f694:	4643      	mov	r3, r8
 800f696:	463a      	mov	r2, r7
 800f698:	4628      	mov	r0, r5
 800f69a:	47b0      	blx	r6
 800f69c:	2800      	cmp	r0, #0
 800f69e:	dc06      	bgt.n	800f6ae <__sflush_r+0xfe>
 800f6a0:	89a3      	ldrh	r3, [r4, #12]
 800f6a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6a6:	81a3      	strh	r3, [r4, #12]
 800f6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ac:	e78e      	b.n	800f5cc <__sflush_r+0x1c>
 800f6ae:	4407      	add	r7, r0
 800f6b0:	eba8 0800 	sub.w	r8, r8, r0
 800f6b4:	e7e9      	b.n	800f68a <__sflush_r+0xda>
 800f6b6:	bf00      	nop
 800f6b8:	20400001 	.word	0x20400001

0800f6bc <_fflush_r>:
 800f6bc:	b538      	push	{r3, r4, r5, lr}
 800f6be:	690b      	ldr	r3, [r1, #16]
 800f6c0:	4605      	mov	r5, r0
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	b913      	cbnz	r3, 800f6cc <_fflush_r+0x10>
 800f6c6:	2500      	movs	r5, #0
 800f6c8:	4628      	mov	r0, r5
 800f6ca:	bd38      	pop	{r3, r4, r5, pc}
 800f6cc:	b118      	cbz	r0, 800f6d6 <_fflush_r+0x1a>
 800f6ce:	6983      	ldr	r3, [r0, #24]
 800f6d0:	b90b      	cbnz	r3, 800f6d6 <_fflush_r+0x1a>
 800f6d2:	f000 f887 	bl	800f7e4 <__sinit>
 800f6d6:	4b14      	ldr	r3, [pc, #80]	; (800f728 <_fflush_r+0x6c>)
 800f6d8:	429c      	cmp	r4, r3
 800f6da:	d11b      	bne.n	800f714 <_fflush_r+0x58>
 800f6dc:	686c      	ldr	r4, [r5, #4]
 800f6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d0ef      	beq.n	800f6c6 <_fflush_r+0xa>
 800f6e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f6e8:	07d0      	lsls	r0, r2, #31
 800f6ea:	d404      	bmi.n	800f6f6 <_fflush_r+0x3a>
 800f6ec:	0599      	lsls	r1, r3, #22
 800f6ee:	d402      	bmi.n	800f6f6 <_fflush_r+0x3a>
 800f6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6f2:	f000 f915 	bl	800f920 <__retarget_lock_acquire_recursive>
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	4621      	mov	r1, r4
 800f6fa:	f7ff ff59 	bl	800f5b0 <__sflush_r>
 800f6fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f700:	07da      	lsls	r2, r3, #31
 800f702:	4605      	mov	r5, r0
 800f704:	d4e0      	bmi.n	800f6c8 <_fflush_r+0xc>
 800f706:	89a3      	ldrh	r3, [r4, #12]
 800f708:	059b      	lsls	r3, r3, #22
 800f70a:	d4dd      	bmi.n	800f6c8 <_fflush_r+0xc>
 800f70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f70e:	f000 f908 	bl	800f922 <__retarget_lock_release_recursive>
 800f712:	e7d9      	b.n	800f6c8 <_fflush_r+0xc>
 800f714:	4b05      	ldr	r3, [pc, #20]	; (800f72c <_fflush_r+0x70>)
 800f716:	429c      	cmp	r4, r3
 800f718:	d101      	bne.n	800f71e <_fflush_r+0x62>
 800f71a:	68ac      	ldr	r4, [r5, #8]
 800f71c:	e7df      	b.n	800f6de <_fflush_r+0x22>
 800f71e:	4b04      	ldr	r3, [pc, #16]	; (800f730 <_fflush_r+0x74>)
 800f720:	429c      	cmp	r4, r3
 800f722:	bf08      	it	eq
 800f724:	68ec      	ldreq	r4, [r5, #12]
 800f726:	e7da      	b.n	800f6de <_fflush_r+0x22>
 800f728:	080105cc 	.word	0x080105cc
 800f72c:	080105ec 	.word	0x080105ec
 800f730:	080105ac 	.word	0x080105ac

0800f734 <std>:
 800f734:	2300      	movs	r3, #0
 800f736:	b510      	push	{r4, lr}
 800f738:	4604      	mov	r4, r0
 800f73a:	e9c0 3300 	strd	r3, r3, [r0]
 800f73e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f742:	6083      	str	r3, [r0, #8]
 800f744:	8181      	strh	r1, [r0, #12]
 800f746:	6643      	str	r3, [r0, #100]	; 0x64
 800f748:	81c2      	strh	r2, [r0, #14]
 800f74a:	6183      	str	r3, [r0, #24]
 800f74c:	4619      	mov	r1, r3
 800f74e:	2208      	movs	r2, #8
 800f750:	305c      	adds	r0, #92	; 0x5c
 800f752:	f7fd fb59 	bl	800ce08 <memset>
 800f756:	4b05      	ldr	r3, [pc, #20]	; (800f76c <std+0x38>)
 800f758:	6263      	str	r3, [r4, #36]	; 0x24
 800f75a:	4b05      	ldr	r3, [pc, #20]	; (800f770 <std+0x3c>)
 800f75c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f75e:	4b05      	ldr	r3, [pc, #20]	; (800f774 <std+0x40>)
 800f760:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f762:	4b05      	ldr	r3, [pc, #20]	; (800f778 <std+0x44>)
 800f764:	6224      	str	r4, [r4, #32]
 800f766:	6323      	str	r3, [r4, #48]	; 0x30
 800f768:	bd10      	pop	{r4, pc}
 800f76a:	bf00      	nop
 800f76c:	0800fa89 	.word	0x0800fa89
 800f770:	0800faab 	.word	0x0800faab
 800f774:	0800fae3 	.word	0x0800fae3
 800f778:	0800fb07 	.word	0x0800fb07

0800f77c <_cleanup_r>:
 800f77c:	4901      	ldr	r1, [pc, #4]	; (800f784 <_cleanup_r+0x8>)
 800f77e:	f000 b8af 	b.w	800f8e0 <_fwalk_reent>
 800f782:	bf00      	nop
 800f784:	0800f6bd 	.word	0x0800f6bd

0800f788 <__sfmoreglue>:
 800f788:	b570      	push	{r4, r5, r6, lr}
 800f78a:	2268      	movs	r2, #104	; 0x68
 800f78c:	1e4d      	subs	r5, r1, #1
 800f78e:	4355      	muls	r5, r2
 800f790:	460e      	mov	r6, r1
 800f792:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f796:	f7ff fa65 	bl	800ec64 <_malloc_r>
 800f79a:	4604      	mov	r4, r0
 800f79c:	b140      	cbz	r0, 800f7b0 <__sfmoreglue+0x28>
 800f79e:	2100      	movs	r1, #0
 800f7a0:	e9c0 1600 	strd	r1, r6, [r0]
 800f7a4:	300c      	adds	r0, #12
 800f7a6:	60a0      	str	r0, [r4, #8]
 800f7a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f7ac:	f7fd fb2c 	bl	800ce08 <memset>
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	bd70      	pop	{r4, r5, r6, pc}

0800f7b4 <__sfp_lock_acquire>:
 800f7b4:	4801      	ldr	r0, [pc, #4]	; (800f7bc <__sfp_lock_acquire+0x8>)
 800f7b6:	f000 b8b3 	b.w	800f920 <__retarget_lock_acquire_recursive>
 800f7ba:	bf00      	nop
 800f7bc:	20002271 	.word	0x20002271

0800f7c0 <__sfp_lock_release>:
 800f7c0:	4801      	ldr	r0, [pc, #4]	; (800f7c8 <__sfp_lock_release+0x8>)
 800f7c2:	f000 b8ae 	b.w	800f922 <__retarget_lock_release_recursive>
 800f7c6:	bf00      	nop
 800f7c8:	20002271 	.word	0x20002271

0800f7cc <__sinit_lock_acquire>:
 800f7cc:	4801      	ldr	r0, [pc, #4]	; (800f7d4 <__sinit_lock_acquire+0x8>)
 800f7ce:	f000 b8a7 	b.w	800f920 <__retarget_lock_acquire_recursive>
 800f7d2:	bf00      	nop
 800f7d4:	20002272 	.word	0x20002272

0800f7d8 <__sinit_lock_release>:
 800f7d8:	4801      	ldr	r0, [pc, #4]	; (800f7e0 <__sinit_lock_release+0x8>)
 800f7da:	f000 b8a2 	b.w	800f922 <__retarget_lock_release_recursive>
 800f7de:	bf00      	nop
 800f7e0:	20002272 	.word	0x20002272

0800f7e4 <__sinit>:
 800f7e4:	b510      	push	{r4, lr}
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	f7ff fff0 	bl	800f7cc <__sinit_lock_acquire>
 800f7ec:	69a3      	ldr	r3, [r4, #24]
 800f7ee:	b11b      	cbz	r3, 800f7f8 <__sinit+0x14>
 800f7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7f4:	f7ff bff0 	b.w	800f7d8 <__sinit_lock_release>
 800f7f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f7fc:	6523      	str	r3, [r4, #80]	; 0x50
 800f7fe:	4b13      	ldr	r3, [pc, #76]	; (800f84c <__sinit+0x68>)
 800f800:	4a13      	ldr	r2, [pc, #76]	; (800f850 <__sinit+0x6c>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	62a2      	str	r2, [r4, #40]	; 0x28
 800f806:	42a3      	cmp	r3, r4
 800f808:	bf04      	itt	eq
 800f80a:	2301      	moveq	r3, #1
 800f80c:	61a3      	streq	r3, [r4, #24]
 800f80e:	4620      	mov	r0, r4
 800f810:	f000 f820 	bl	800f854 <__sfp>
 800f814:	6060      	str	r0, [r4, #4]
 800f816:	4620      	mov	r0, r4
 800f818:	f000 f81c 	bl	800f854 <__sfp>
 800f81c:	60a0      	str	r0, [r4, #8]
 800f81e:	4620      	mov	r0, r4
 800f820:	f000 f818 	bl	800f854 <__sfp>
 800f824:	2200      	movs	r2, #0
 800f826:	60e0      	str	r0, [r4, #12]
 800f828:	2104      	movs	r1, #4
 800f82a:	6860      	ldr	r0, [r4, #4]
 800f82c:	f7ff ff82 	bl	800f734 <std>
 800f830:	68a0      	ldr	r0, [r4, #8]
 800f832:	2201      	movs	r2, #1
 800f834:	2109      	movs	r1, #9
 800f836:	f7ff ff7d 	bl	800f734 <std>
 800f83a:	68e0      	ldr	r0, [r4, #12]
 800f83c:	2202      	movs	r2, #2
 800f83e:	2112      	movs	r1, #18
 800f840:	f7ff ff78 	bl	800f734 <std>
 800f844:	2301      	movs	r3, #1
 800f846:	61a3      	str	r3, [r4, #24]
 800f848:	e7d2      	b.n	800f7f0 <__sinit+0xc>
 800f84a:	bf00      	nop
 800f84c:	08010230 	.word	0x08010230
 800f850:	0800f77d 	.word	0x0800f77d

0800f854 <__sfp>:
 800f854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f856:	4607      	mov	r7, r0
 800f858:	f7ff ffac 	bl	800f7b4 <__sfp_lock_acquire>
 800f85c:	4b1e      	ldr	r3, [pc, #120]	; (800f8d8 <__sfp+0x84>)
 800f85e:	681e      	ldr	r6, [r3, #0]
 800f860:	69b3      	ldr	r3, [r6, #24]
 800f862:	b913      	cbnz	r3, 800f86a <__sfp+0x16>
 800f864:	4630      	mov	r0, r6
 800f866:	f7ff ffbd 	bl	800f7e4 <__sinit>
 800f86a:	3648      	adds	r6, #72	; 0x48
 800f86c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f870:	3b01      	subs	r3, #1
 800f872:	d503      	bpl.n	800f87c <__sfp+0x28>
 800f874:	6833      	ldr	r3, [r6, #0]
 800f876:	b30b      	cbz	r3, 800f8bc <__sfp+0x68>
 800f878:	6836      	ldr	r6, [r6, #0]
 800f87a:	e7f7      	b.n	800f86c <__sfp+0x18>
 800f87c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f880:	b9d5      	cbnz	r5, 800f8b8 <__sfp+0x64>
 800f882:	4b16      	ldr	r3, [pc, #88]	; (800f8dc <__sfp+0x88>)
 800f884:	60e3      	str	r3, [r4, #12]
 800f886:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f88a:	6665      	str	r5, [r4, #100]	; 0x64
 800f88c:	f000 f847 	bl	800f91e <__retarget_lock_init_recursive>
 800f890:	f7ff ff96 	bl	800f7c0 <__sfp_lock_release>
 800f894:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f898:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f89c:	6025      	str	r5, [r4, #0]
 800f89e:	61a5      	str	r5, [r4, #24]
 800f8a0:	2208      	movs	r2, #8
 800f8a2:	4629      	mov	r1, r5
 800f8a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f8a8:	f7fd faae 	bl	800ce08 <memset>
 800f8ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f8b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8b8:	3468      	adds	r4, #104	; 0x68
 800f8ba:	e7d9      	b.n	800f870 <__sfp+0x1c>
 800f8bc:	2104      	movs	r1, #4
 800f8be:	4638      	mov	r0, r7
 800f8c0:	f7ff ff62 	bl	800f788 <__sfmoreglue>
 800f8c4:	4604      	mov	r4, r0
 800f8c6:	6030      	str	r0, [r6, #0]
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	d1d5      	bne.n	800f878 <__sfp+0x24>
 800f8cc:	f7ff ff78 	bl	800f7c0 <__sfp_lock_release>
 800f8d0:	230c      	movs	r3, #12
 800f8d2:	603b      	str	r3, [r7, #0]
 800f8d4:	e7ee      	b.n	800f8b4 <__sfp+0x60>
 800f8d6:	bf00      	nop
 800f8d8:	08010230 	.word	0x08010230
 800f8dc:	ffff0001 	.word	0xffff0001

0800f8e0 <_fwalk_reent>:
 800f8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8e4:	4606      	mov	r6, r0
 800f8e6:	4688      	mov	r8, r1
 800f8e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f8ec:	2700      	movs	r7, #0
 800f8ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f8f2:	f1b9 0901 	subs.w	r9, r9, #1
 800f8f6:	d505      	bpl.n	800f904 <_fwalk_reent+0x24>
 800f8f8:	6824      	ldr	r4, [r4, #0]
 800f8fa:	2c00      	cmp	r4, #0
 800f8fc:	d1f7      	bne.n	800f8ee <_fwalk_reent+0xe>
 800f8fe:	4638      	mov	r0, r7
 800f900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f904:	89ab      	ldrh	r3, [r5, #12]
 800f906:	2b01      	cmp	r3, #1
 800f908:	d907      	bls.n	800f91a <_fwalk_reent+0x3a>
 800f90a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f90e:	3301      	adds	r3, #1
 800f910:	d003      	beq.n	800f91a <_fwalk_reent+0x3a>
 800f912:	4629      	mov	r1, r5
 800f914:	4630      	mov	r0, r6
 800f916:	47c0      	blx	r8
 800f918:	4307      	orrs	r7, r0
 800f91a:	3568      	adds	r5, #104	; 0x68
 800f91c:	e7e9      	b.n	800f8f2 <_fwalk_reent+0x12>

0800f91e <__retarget_lock_init_recursive>:
 800f91e:	4770      	bx	lr

0800f920 <__retarget_lock_acquire_recursive>:
 800f920:	4770      	bx	lr

0800f922 <__retarget_lock_release_recursive>:
 800f922:	4770      	bx	lr

0800f924 <__swhatbuf_r>:
 800f924:	b570      	push	{r4, r5, r6, lr}
 800f926:	460e      	mov	r6, r1
 800f928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f92c:	2900      	cmp	r1, #0
 800f92e:	b096      	sub	sp, #88	; 0x58
 800f930:	4614      	mov	r4, r2
 800f932:	461d      	mov	r5, r3
 800f934:	da08      	bge.n	800f948 <__swhatbuf_r+0x24>
 800f936:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f93a:	2200      	movs	r2, #0
 800f93c:	602a      	str	r2, [r5, #0]
 800f93e:	061a      	lsls	r2, r3, #24
 800f940:	d410      	bmi.n	800f964 <__swhatbuf_r+0x40>
 800f942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f946:	e00e      	b.n	800f966 <__swhatbuf_r+0x42>
 800f948:	466a      	mov	r2, sp
 800f94a:	f000 f903 	bl	800fb54 <_fstat_r>
 800f94e:	2800      	cmp	r0, #0
 800f950:	dbf1      	blt.n	800f936 <__swhatbuf_r+0x12>
 800f952:	9a01      	ldr	r2, [sp, #4]
 800f954:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f958:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f95c:	425a      	negs	r2, r3
 800f95e:	415a      	adcs	r2, r3
 800f960:	602a      	str	r2, [r5, #0]
 800f962:	e7ee      	b.n	800f942 <__swhatbuf_r+0x1e>
 800f964:	2340      	movs	r3, #64	; 0x40
 800f966:	2000      	movs	r0, #0
 800f968:	6023      	str	r3, [r4, #0]
 800f96a:	b016      	add	sp, #88	; 0x58
 800f96c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f970 <__smakebuf_r>:
 800f970:	898b      	ldrh	r3, [r1, #12]
 800f972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f974:	079d      	lsls	r5, r3, #30
 800f976:	4606      	mov	r6, r0
 800f978:	460c      	mov	r4, r1
 800f97a:	d507      	bpl.n	800f98c <__smakebuf_r+0x1c>
 800f97c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f980:	6023      	str	r3, [r4, #0]
 800f982:	6123      	str	r3, [r4, #16]
 800f984:	2301      	movs	r3, #1
 800f986:	6163      	str	r3, [r4, #20]
 800f988:	b002      	add	sp, #8
 800f98a:	bd70      	pop	{r4, r5, r6, pc}
 800f98c:	ab01      	add	r3, sp, #4
 800f98e:	466a      	mov	r2, sp
 800f990:	f7ff ffc8 	bl	800f924 <__swhatbuf_r>
 800f994:	9900      	ldr	r1, [sp, #0]
 800f996:	4605      	mov	r5, r0
 800f998:	4630      	mov	r0, r6
 800f99a:	f7ff f963 	bl	800ec64 <_malloc_r>
 800f99e:	b948      	cbnz	r0, 800f9b4 <__smakebuf_r+0x44>
 800f9a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9a4:	059a      	lsls	r2, r3, #22
 800f9a6:	d4ef      	bmi.n	800f988 <__smakebuf_r+0x18>
 800f9a8:	f023 0303 	bic.w	r3, r3, #3
 800f9ac:	f043 0302 	orr.w	r3, r3, #2
 800f9b0:	81a3      	strh	r3, [r4, #12]
 800f9b2:	e7e3      	b.n	800f97c <__smakebuf_r+0xc>
 800f9b4:	4b0d      	ldr	r3, [pc, #52]	; (800f9ec <__smakebuf_r+0x7c>)
 800f9b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f9b8:	89a3      	ldrh	r3, [r4, #12]
 800f9ba:	6020      	str	r0, [r4, #0]
 800f9bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9c0:	81a3      	strh	r3, [r4, #12]
 800f9c2:	9b00      	ldr	r3, [sp, #0]
 800f9c4:	6163      	str	r3, [r4, #20]
 800f9c6:	9b01      	ldr	r3, [sp, #4]
 800f9c8:	6120      	str	r0, [r4, #16]
 800f9ca:	b15b      	cbz	r3, 800f9e4 <__smakebuf_r+0x74>
 800f9cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	f000 f8d1 	bl	800fb78 <_isatty_r>
 800f9d6:	b128      	cbz	r0, 800f9e4 <__smakebuf_r+0x74>
 800f9d8:	89a3      	ldrh	r3, [r4, #12]
 800f9da:	f023 0303 	bic.w	r3, r3, #3
 800f9de:	f043 0301 	orr.w	r3, r3, #1
 800f9e2:	81a3      	strh	r3, [r4, #12]
 800f9e4:	89a0      	ldrh	r0, [r4, #12]
 800f9e6:	4305      	orrs	r5, r0
 800f9e8:	81a5      	strh	r5, [r4, #12]
 800f9ea:	e7cd      	b.n	800f988 <__smakebuf_r+0x18>
 800f9ec:	0800f77d 	.word	0x0800f77d

0800f9f0 <_malloc_usable_size_r>:
 800f9f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9f4:	1f18      	subs	r0, r3, #4
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	bfbc      	itt	lt
 800f9fa:	580b      	ldrlt	r3, [r1, r0]
 800f9fc:	18c0      	addlt	r0, r0, r3
 800f9fe:	4770      	bx	lr

0800fa00 <_raise_r>:
 800fa00:	291f      	cmp	r1, #31
 800fa02:	b538      	push	{r3, r4, r5, lr}
 800fa04:	4604      	mov	r4, r0
 800fa06:	460d      	mov	r5, r1
 800fa08:	d904      	bls.n	800fa14 <_raise_r+0x14>
 800fa0a:	2316      	movs	r3, #22
 800fa0c:	6003      	str	r3, [r0, #0]
 800fa0e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa12:	bd38      	pop	{r3, r4, r5, pc}
 800fa14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fa16:	b112      	cbz	r2, 800fa1e <_raise_r+0x1e>
 800fa18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa1c:	b94b      	cbnz	r3, 800fa32 <_raise_r+0x32>
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f000 f830 	bl	800fa84 <_getpid_r>
 800fa24:	462a      	mov	r2, r5
 800fa26:	4601      	mov	r1, r0
 800fa28:	4620      	mov	r0, r4
 800fa2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa2e:	f000 b817 	b.w	800fa60 <_kill_r>
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d00a      	beq.n	800fa4c <_raise_r+0x4c>
 800fa36:	1c59      	adds	r1, r3, #1
 800fa38:	d103      	bne.n	800fa42 <_raise_r+0x42>
 800fa3a:	2316      	movs	r3, #22
 800fa3c:	6003      	str	r3, [r0, #0]
 800fa3e:	2001      	movs	r0, #1
 800fa40:	e7e7      	b.n	800fa12 <_raise_r+0x12>
 800fa42:	2400      	movs	r4, #0
 800fa44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa48:	4628      	mov	r0, r5
 800fa4a:	4798      	blx	r3
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	e7e0      	b.n	800fa12 <_raise_r+0x12>

0800fa50 <raise>:
 800fa50:	4b02      	ldr	r3, [pc, #8]	; (800fa5c <raise+0xc>)
 800fa52:	4601      	mov	r1, r0
 800fa54:	6818      	ldr	r0, [r3, #0]
 800fa56:	f7ff bfd3 	b.w	800fa00 <_raise_r>
 800fa5a:	bf00      	nop
 800fa5c:	2000012c 	.word	0x2000012c

0800fa60 <_kill_r>:
 800fa60:	b538      	push	{r3, r4, r5, lr}
 800fa62:	4d07      	ldr	r5, [pc, #28]	; (800fa80 <_kill_r+0x20>)
 800fa64:	2300      	movs	r3, #0
 800fa66:	4604      	mov	r4, r0
 800fa68:	4608      	mov	r0, r1
 800fa6a:	4611      	mov	r1, r2
 800fa6c:	602b      	str	r3, [r5, #0]
 800fa6e:	f7f2 fa2b 	bl	8001ec8 <_kill>
 800fa72:	1c43      	adds	r3, r0, #1
 800fa74:	d102      	bne.n	800fa7c <_kill_r+0x1c>
 800fa76:	682b      	ldr	r3, [r5, #0]
 800fa78:	b103      	cbz	r3, 800fa7c <_kill_r+0x1c>
 800fa7a:	6023      	str	r3, [r4, #0]
 800fa7c:	bd38      	pop	{r3, r4, r5, pc}
 800fa7e:	bf00      	nop
 800fa80:	2000226c 	.word	0x2000226c

0800fa84 <_getpid_r>:
 800fa84:	f7f2 ba18 	b.w	8001eb8 <_getpid>

0800fa88 <__sread>:
 800fa88:	b510      	push	{r4, lr}
 800fa8a:	460c      	mov	r4, r1
 800fa8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa90:	f000 f894 	bl	800fbbc <_read_r>
 800fa94:	2800      	cmp	r0, #0
 800fa96:	bfab      	itete	ge
 800fa98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa9a:	89a3      	ldrhlt	r3, [r4, #12]
 800fa9c:	181b      	addge	r3, r3, r0
 800fa9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800faa2:	bfac      	ite	ge
 800faa4:	6563      	strge	r3, [r4, #84]	; 0x54
 800faa6:	81a3      	strhlt	r3, [r4, #12]
 800faa8:	bd10      	pop	{r4, pc}

0800faaa <__swrite>:
 800faaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faae:	461f      	mov	r7, r3
 800fab0:	898b      	ldrh	r3, [r1, #12]
 800fab2:	05db      	lsls	r3, r3, #23
 800fab4:	4605      	mov	r5, r0
 800fab6:	460c      	mov	r4, r1
 800fab8:	4616      	mov	r6, r2
 800faba:	d505      	bpl.n	800fac8 <__swrite+0x1e>
 800fabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fac0:	2302      	movs	r3, #2
 800fac2:	2200      	movs	r2, #0
 800fac4:	f000 f868 	bl	800fb98 <_lseek_r>
 800fac8:	89a3      	ldrh	r3, [r4, #12]
 800faca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800face:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fad2:	81a3      	strh	r3, [r4, #12]
 800fad4:	4632      	mov	r2, r6
 800fad6:	463b      	mov	r3, r7
 800fad8:	4628      	mov	r0, r5
 800fada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fade:	f000 b817 	b.w	800fb10 <_write_r>

0800fae2 <__sseek>:
 800fae2:	b510      	push	{r4, lr}
 800fae4:	460c      	mov	r4, r1
 800fae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faea:	f000 f855 	bl	800fb98 <_lseek_r>
 800faee:	1c43      	adds	r3, r0, #1
 800faf0:	89a3      	ldrh	r3, [r4, #12]
 800faf2:	bf15      	itete	ne
 800faf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800faf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fafa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fafe:	81a3      	strheq	r3, [r4, #12]
 800fb00:	bf18      	it	ne
 800fb02:	81a3      	strhne	r3, [r4, #12]
 800fb04:	bd10      	pop	{r4, pc}

0800fb06 <__sclose>:
 800fb06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb0a:	f000 b813 	b.w	800fb34 <_close_r>
	...

0800fb10 <_write_r>:
 800fb10:	b538      	push	{r3, r4, r5, lr}
 800fb12:	4d07      	ldr	r5, [pc, #28]	; (800fb30 <_write_r+0x20>)
 800fb14:	4604      	mov	r4, r0
 800fb16:	4608      	mov	r0, r1
 800fb18:	4611      	mov	r1, r2
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	602a      	str	r2, [r5, #0]
 800fb1e:	461a      	mov	r2, r3
 800fb20:	f7f2 fa09 	bl	8001f36 <_write>
 800fb24:	1c43      	adds	r3, r0, #1
 800fb26:	d102      	bne.n	800fb2e <_write_r+0x1e>
 800fb28:	682b      	ldr	r3, [r5, #0]
 800fb2a:	b103      	cbz	r3, 800fb2e <_write_r+0x1e>
 800fb2c:	6023      	str	r3, [r4, #0]
 800fb2e:	bd38      	pop	{r3, r4, r5, pc}
 800fb30:	2000226c 	.word	0x2000226c

0800fb34 <_close_r>:
 800fb34:	b538      	push	{r3, r4, r5, lr}
 800fb36:	4d06      	ldr	r5, [pc, #24]	; (800fb50 <_close_r+0x1c>)
 800fb38:	2300      	movs	r3, #0
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	4608      	mov	r0, r1
 800fb3e:	602b      	str	r3, [r5, #0]
 800fb40:	f7f2 fa15 	bl	8001f6e <_close>
 800fb44:	1c43      	adds	r3, r0, #1
 800fb46:	d102      	bne.n	800fb4e <_close_r+0x1a>
 800fb48:	682b      	ldr	r3, [r5, #0]
 800fb4a:	b103      	cbz	r3, 800fb4e <_close_r+0x1a>
 800fb4c:	6023      	str	r3, [r4, #0]
 800fb4e:	bd38      	pop	{r3, r4, r5, pc}
 800fb50:	2000226c 	.word	0x2000226c

0800fb54 <_fstat_r>:
 800fb54:	b538      	push	{r3, r4, r5, lr}
 800fb56:	4d07      	ldr	r5, [pc, #28]	; (800fb74 <_fstat_r+0x20>)
 800fb58:	2300      	movs	r3, #0
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	4608      	mov	r0, r1
 800fb5e:	4611      	mov	r1, r2
 800fb60:	602b      	str	r3, [r5, #0]
 800fb62:	f7f2 fa10 	bl	8001f86 <_fstat>
 800fb66:	1c43      	adds	r3, r0, #1
 800fb68:	d102      	bne.n	800fb70 <_fstat_r+0x1c>
 800fb6a:	682b      	ldr	r3, [r5, #0]
 800fb6c:	b103      	cbz	r3, 800fb70 <_fstat_r+0x1c>
 800fb6e:	6023      	str	r3, [r4, #0]
 800fb70:	bd38      	pop	{r3, r4, r5, pc}
 800fb72:	bf00      	nop
 800fb74:	2000226c 	.word	0x2000226c

0800fb78 <_isatty_r>:
 800fb78:	b538      	push	{r3, r4, r5, lr}
 800fb7a:	4d06      	ldr	r5, [pc, #24]	; (800fb94 <_isatty_r+0x1c>)
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	4604      	mov	r4, r0
 800fb80:	4608      	mov	r0, r1
 800fb82:	602b      	str	r3, [r5, #0]
 800fb84:	f7f2 fa0f 	bl	8001fa6 <_isatty>
 800fb88:	1c43      	adds	r3, r0, #1
 800fb8a:	d102      	bne.n	800fb92 <_isatty_r+0x1a>
 800fb8c:	682b      	ldr	r3, [r5, #0]
 800fb8e:	b103      	cbz	r3, 800fb92 <_isatty_r+0x1a>
 800fb90:	6023      	str	r3, [r4, #0]
 800fb92:	bd38      	pop	{r3, r4, r5, pc}
 800fb94:	2000226c 	.word	0x2000226c

0800fb98 <_lseek_r>:
 800fb98:	b538      	push	{r3, r4, r5, lr}
 800fb9a:	4d07      	ldr	r5, [pc, #28]	; (800fbb8 <_lseek_r+0x20>)
 800fb9c:	4604      	mov	r4, r0
 800fb9e:	4608      	mov	r0, r1
 800fba0:	4611      	mov	r1, r2
 800fba2:	2200      	movs	r2, #0
 800fba4:	602a      	str	r2, [r5, #0]
 800fba6:	461a      	mov	r2, r3
 800fba8:	f7f2 fa08 	bl	8001fbc <_lseek>
 800fbac:	1c43      	adds	r3, r0, #1
 800fbae:	d102      	bne.n	800fbb6 <_lseek_r+0x1e>
 800fbb0:	682b      	ldr	r3, [r5, #0]
 800fbb2:	b103      	cbz	r3, 800fbb6 <_lseek_r+0x1e>
 800fbb4:	6023      	str	r3, [r4, #0]
 800fbb6:	bd38      	pop	{r3, r4, r5, pc}
 800fbb8:	2000226c 	.word	0x2000226c

0800fbbc <_read_r>:
 800fbbc:	b538      	push	{r3, r4, r5, lr}
 800fbbe:	4d07      	ldr	r5, [pc, #28]	; (800fbdc <_read_r+0x20>)
 800fbc0:	4604      	mov	r4, r0
 800fbc2:	4608      	mov	r0, r1
 800fbc4:	4611      	mov	r1, r2
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	602a      	str	r2, [r5, #0]
 800fbca:	461a      	mov	r2, r3
 800fbcc:	f7f2 f996 	bl	8001efc <_read>
 800fbd0:	1c43      	adds	r3, r0, #1
 800fbd2:	d102      	bne.n	800fbda <_read_r+0x1e>
 800fbd4:	682b      	ldr	r3, [r5, #0]
 800fbd6:	b103      	cbz	r3, 800fbda <_read_r+0x1e>
 800fbd8:	6023      	str	r3, [r4, #0]
 800fbda:	bd38      	pop	{r3, r4, r5, pc}
 800fbdc:	2000226c 	.word	0x2000226c

0800fbe0 <atan2>:
 800fbe0:	f000 b802 	b.w	800fbe8 <__ieee754_atan2>
 800fbe4:	0000      	movs	r0, r0
	...

0800fbe8 <__ieee754_atan2>:
 800fbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbec:	ec57 6b11 	vmov	r6, r7, d1
 800fbf0:	4273      	negs	r3, r6
 800fbf2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800fd78 <__ieee754_atan2+0x190>
 800fbf6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fbfa:	4333      	orrs	r3, r6
 800fbfc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fc00:	4573      	cmp	r3, lr
 800fc02:	ec51 0b10 	vmov	r0, r1, d0
 800fc06:	ee11 8a10 	vmov	r8, s2
 800fc0a:	d80a      	bhi.n	800fc22 <__ieee754_atan2+0x3a>
 800fc0c:	4244      	negs	r4, r0
 800fc0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fc12:	4304      	orrs	r4, r0
 800fc14:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fc18:	4574      	cmp	r4, lr
 800fc1a:	ee10 9a10 	vmov	r9, s0
 800fc1e:	468c      	mov	ip, r1
 800fc20:	d907      	bls.n	800fc32 <__ieee754_atan2+0x4a>
 800fc22:	4632      	mov	r2, r6
 800fc24:	463b      	mov	r3, r7
 800fc26:	f7f0 fb39 	bl	800029c <__adddf3>
 800fc2a:	ec41 0b10 	vmov	d0, r0, r1
 800fc2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc32:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800fc36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fc3a:	4334      	orrs	r4, r6
 800fc3c:	d103      	bne.n	800fc46 <__ieee754_atan2+0x5e>
 800fc3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc42:	f000 b89d 	b.w	800fd80 <atan>
 800fc46:	17bc      	asrs	r4, r7, #30
 800fc48:	f004 0402 	and.w	r4, r4, #2
 800fc4c:	ea53 0909 	orrs.w	r9, r3, r9
 800fc50:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fc54:	d107      	bne.n	800fc66 <__ieee754_atan2+0x7e>
 800fc56:	2c02      	cmp	r4, #2
 800fc58:	d060      	beq.n	800fd1c <__ieee754_atan2+0x134>
 800fc5a:	2c03      	cmp	r4, #3
 800fc5c:	d1e5      	bne.n	800fc2a <__ieee754_atan2+0x42>
 800fc5e:	a142      	add	r1, pc, #264	; (adr r1, 800fd68 <__ieee754_atan2+0x180>)
 800fc60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc64:	e7e1      	b.n	800fc2a <__ieee754_atan2+0x42>
 800fc66:	ea52 0808 	orrs.w	r8, r2, r8
 800fc6a:	d106      	bne.n	800fc7a <__ieee754_atan2+0x92>
 800fc6c:	f1bc 0f00 	cmp.w	ip, #0
 800fc70:	da5f      	bge.n	800fd32 <__ieee754_atan2+0x14a>
 800fc72:	a13f      	add	r1, pc, #252	; (adr r1, 800fd70 <__ieee754_atan2+0x188>)
 800fc74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc78:	e7d7      	b.n	800fc2a <__ieee754_atan2+0x42>
 800fc7a:	4572      	cmp	r2, lr
 800fc7c:	d10f      	bne.n	800fc9e <__ieee754_atan2+0xb6>
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	f104 34ff 	add.w	r4, r4, #4294967295
 800fc84:	d107      	bne.n	800fc96 <__ieee754_atan2+0xae>
 800fc86:	2c02      	cmp	r4, #2
 800fc88:	d84c      	bhi.n	800fd24 <__ieee754_atan2+0x13c>
 800fc8a:	4b35      	ldr	r3, [pc, #212]	; (800fd60 <__ieee754_atan2+0x178>)
 800fc8c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800fc90:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fc94:	e7c9      	b.n	800fc2a <__ieee754_atan2+0x42>
 800fc96:	2c02      	cmp	r4, #2
 800fc98:	d848      	bhi.n	800fd2c <__ieee754_atan2+0x144>
 800fc9a:	4b32      	ldr	r3, [pc, #200]	; (800fd64 <__ieee754_atan2+0x17c>)
 800fc9c:	e7f6      	b.n	800fc8c <__ieee754_atan2+0xa4>
 800fc9e:	4573      	cmp	r3, lr
 800fca0:	d0e4      	beq.n	800fc6c <__ieee754_atan2+0x84>
 800fca2:	1a9b      	subs	r3, r3, r2
 800fca4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800fca8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fcac:	da1e      	bge.n	800fcec <__ieee754_atan2+0x104>
 800fcae:	2f00      	cmp	r7, #0
 800fcb0:	da01      	bge.n	800fcb6 <__ieee754_atan2+0xce>
 800fcb2:	323c      	adds	r2, #60	; 0x3c
 800fcb4:	db1e      	blt.n	800fcf4 <__ieee754_atan2+0x10c>
 800fcb6:	4632      	mov	r2, r6
 800fcb8:	463b      	mov	r3, r7
 800fcba:	f7f0 fdcf 	bl	800085c <__aeabi_ddiv>
 800fcbe:	ec41 0b10 	vmov	d0, r0, r1
 800fcc2:	f000 f9fd 	bl	80100c0 <fabs>
 800fcc6:	f000 f85b 	bl	800fd80 <atan>
 800fcca:	ec51 0b10 	vmov	r0, r1, d0
 800fcce:	2c01      	cmp	r4, #1
 800fcd0:	d013      	beq.n	800fcfa <__ieee754_atan2+0x112>
 800fcd2:	2c02      	cmp	r4, #2
 800fcd4:	d015      	beq.n	800fd02 <__ieee754_atan2+0x11a>
 800fcd6:	2c00      	cmp	r4, #0
 800fcd8:	d0a7      	beq.n	800fc2a <__ieee754_atan2+0x42>
 800fcda:	a319      	add	r3, pc, #100	; (adr r3, 800fd40 <__ieee754_atan2+0x158>)
 800fcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce0:	f7f0 fada 	bl	8000298 <__aeabi_dsub>
 800fce4:	a318      	add	r3, pc, #96	; (adr r3, 800fd48 <__ieee754_atan2+0x160>)
 800fce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcea:	e014      	b.n	800fd16 <__ieee754_atan2+0x12e>
 800fcec:	a118      	add	r1, pc, #96	; (adr r1, 800fd50 <__ieee754_atan2+0x168>)
 800fcee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcf2:	e7ec      	b.n	800fcce <__ieee754_atan2+0xe6>
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	2100      	movs	r1, #0
 800fcf8:	e7e9      	b.n	800fcce <__ieee754_atan2+0xe6>
 800fcfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fcfe:	4619      	mov	r1, r3
 800fd00:	e793      	b.n	800fc2a <__ieee754_atan2+0x42>
 800fd02:	a30f      	add	r3, pc, #60	; (adr r3, 800fd40 <__ieee754_atan2+0x158>)
 800fd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd08:	f7f0 fac6 	bl	8000298 <__aeabi_dsub>
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	460b      	mov	r3, r1
 800fd10:	a10d      	add	r1, pc, #52	; (adr r1, 800fd48 <__ieee754_atan2+0x160>)
 800fd12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd16:	f7f0 fabf 	bl	8000298 <__aeabi_dsub>
 800fd1a:	e786      	b.n	800fc2a <__ieee754_atan2+0x42>
 800fd1c:	a10a      	add	r1, pc, #40	; (adr r1, 800fd48 <__ieee754_atan2+0x160>)
 800fd1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd22:	e782      	b.n	800fc2a <__ieee754_atan2+0x42>
 800fd24:	a10c      	add	r1, pc, #48	; (adr r1, 800fd58 <__ieee754_atan2+0x170>)
 800fd26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd2a:	e77e      	b.n	800fc2a <__ieee754_atan2+0x42>
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	2100      	movs	r1, #0
 800fd30:	e77b      	b.n	800fc2a <__ieee754_atan2+0x42>
 800fd32:	a107      	add	r1, pc, #28	; (adr r1, 800fd50 <__ieee754_atan2+0x168>)
 800fd34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd38:	e777      	b.n	800fc2a <__ieee754_atan2+0x42>
 800fd3a:	bf00      	nop
 800fd3c:	f3af 8000 	nop.w
 800fd40:	33145c07 	.word	0x33145c07
 800fd44:	3ca1a626 	.word	0x3ca1a626
 800fd48:	54442d18 	.word	0x54442d18
 800fd4c:	400921fb 	.word	0x400921fb
 800fd50:	54442d18 	.word	0x54442d18
 800fd54:	3ff921fb 	.word	0x3ff921fb
 800fd58:	54442d18 	.word	0x54442d18
 800fd5c:	3fe921fb 	.word	0x3fe921fb
 800fd60:	08010610 	.word	0x08010610
 800fd64:	08010628 	.word	0x08010628
 800fd68:	54442d18 	.word	0x54442d18
 800fd6c:	c00921fb 	.word	0xc00921fb
 800fd70:	54442d18 	.word	0x54442d18
 800fd74:	bff921fb 	.word	0xbff921fb
 800fd78:	7ff00000 	.word	0x7ff00000
 800fd7c:	00000000 	.word	0x00000000

0800fd80 <atan>:
 800fd80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd84:	ec55 4b10 	vmov	r4, r5, d0
 800fd88:	4bc3      	ldr	r3, [pc, #780]	; (8010098 <atan+0x318>)
 800fd8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fd8e:	429e      	cmp	r6, r3
 800fd90:	46ab      	mov	fp, r5
 800fd92:	dd18      	ble.n	800fdc6 <atan+0x46>
 800fd94:	4bc1      	ldr	r3, [pc, #772]	; (801009c <atan+0x31c>)
 800fd96:	429e      	cmp	r6, r3
 800fd98:	dc01      	bgt.n	800fd9e <atan+0x1e>
 800fd9a:	d109      	bne.n	800fdb0 <atan+0x30>
 800fd9c:	b144      	cbz	r4, 800fdb0 <atan+0x30>
 800fd9e:	4622      	mov	r2, r4
 800fda0:	462b      	mov	r3, r5
 800fda2:	4620      	mov	r0, r4
 800fda4:	4629      	mov	r1, r5
 800fda6:	f7f0 fa79 	bl	800029c <__adddf3>
 800fdaa:	4604      	mov	r4, r0
 800fdac:	460d      	mov	r5, r1
 800fdae:	e006      	b.n	800fdbe <atan+0x3e>
 800fdb0:	f1bb 0f00 	cmp.w	fp, #0
 800fdb4:	f300 8131 	bgt.w	801001a <atan+0x29a>
 800fdb8:	a59b      	add	r5, pc, #620	; (adr r5, 8010028 <atan+0x2a8>)
 800fdba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fdbe:	ec45 4b10 	vmov	d0, r4, r5
 800fdc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdc6:	4bb6      	ldr	r3, [pc, #728]	; (80100a0 <atan+0x320>)
 800fdc8:	429e      	cmp	r6, r3
 800fdca:	dc14      	bgt.n	800fdf6 <atan+0x76>
 800fdcc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fdd0:	429e      	cmp	r6, r3
 800fdd2:	dc0d      	bgt.n	800fdf0 <atan+0x70>
 800fdd4:	a396      	add	r3, pc, #600	; (adr r3, 8010030 <atan+0x2b0>)
 800fdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdda:	ee10 0a10 	vmov	r0, s0
 800fdde:	4629      	mov	r1, r5
 800fde0:	f7f0 fa5c 	bl	800029c <__adddf3>
 800fde4:	4baf      	ldr	r3, [pc, #700]	; (80100a4 <atan+0x324>)
 800fde6:	2200      	movs	r2, #0
 800fde8:	f7f0 fe9e 	bl	8000b28 <__aeabi_dcmpgt>
 800fdec:	2800      	cmp	r0, #0
 800fdee:	d1e6      	bne.n	800fdbe <atan+0x3e>
 800fdf0:	f04f 3aff 	mov.w	sl, #4294967295
 800fdf4:	e02b      	b.n	800fe4e <atan+0xce>
 800fdf6:	f000 f963 	bl	80100c0 <fabs>
 800fdfa:	4bab      	ldr	r3, [pc, #684]	; (80100a8 <atan+0x328>)
 800fdfc:	429e      	cmp	r6, r3
 800fdfe:	ec55 4b10 	vmov	r4, r5, d0
 800fe02:	f300 80bf 	bgt.w	800ff84 <atan+0x204>
 800fe06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fe0a:	429e      	cmp	r6, r3
 800fe0c:	f300 80a0 	bgt.w	800ff50 <atan+0x1d0>
 800fe10:	ee10 2a10 	vmov	r2, s0
 800fe14:	ee10 0a10 	vmov	r0, s0
 800fe18:	462b      	mov	r3, r5
 800fe1a:	4629      	mov	r1, r5
 800fe1c:	f7f0 fa3e 	bl	800029c <__adddf3>
 800fe20:	4ba0      	ldr	r3, [pc, #640]	; (80100a4 <atan+0x324>)
 800fe22:	2200      	movs	r2, #0
 800fe24:	f7f0 fa38 	bl	8000298 <__aeabi_dsub>
 800fe28:	2200      	movs	r2, #0
 800fe2a:	4606      	mov	r6, r0
 800fe2c:	460f      	mov	r7, r1
 800fe2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fe32:	4620      	mov	r0, r4
 800fe34:	4629      	mov	r1, r5
 800fe36:	f7f0 fa31 	bl	800029c <__adddf3>
 800fe3a:	4602      	mov	r2, r0
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	4630      	mov	r0, r6
 800fe40:	4639      	mov	r1, r7
 800fe42:	f7f0 fd0b 	bl	800085c <__aeabi_ddiv>
 800fe46:	f04f 0a00 	mov.w	sl, #0
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	460d      	mov	r5, r1
 800fe4e:	4622      	mov	r2, r4
 800fe50:	462b      	mov	r3, r5
 800fe52:	4620      	mov	r0, r4
 800fe54:	4629      	mov	r1, r5
 800fe56:	f7f0 fbd7 	bl	8000608 <__aeabi_dmul>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	4680      	mov	r8, r0
 800fe60:	4689      	mov	r9, r1
 800fe62:	f7f0 fbd1 	bl	8000608 <__aeabi_dmul>
 800fe66:	a374      	add	r3, pc, #464	; (adr r3, 8010038 <atan+0x2b8>)
 800fe68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6c:	4606      	mov	r6, r0
 800fe6e:	460f      	mov	r7, r1
 800fe70:	f7f0 fbca 	bl	8000608 <__aeabi_dmul>
 800fe74:	a372      	add	r3, pc, #456	; (adr r3, 8010040 <atan+0x2c0>)
 800fe76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7a:	f7f0 fa0f 	bl	800029c <__adddf3>
 800fe7e:	4632      	mov	r2, r6
 800fe80:	463b      	mov	r3, r7
 800fe82:	f7f0 fbc1 	bl	8000608 <__aeabi_dmul>
 800fe86:	a370      	add	r3, pc, #448	; (adr r3, 8010048 <atan+0x2c8>)
 800fe88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8c:	f7f0 fa06 	bl	800029c <__adddf3>
 800fe90:	4632      	mov	r2, r6
 800fe92:	463b      	mov	r3, r7
 800fe94:	f7f0 fbb8 	bl	8000608 <__aeabi_dmul>
 800fe98:	a36d      	add	r3, pc, #436	; (adr r3, 8010050 <atan+0x2d0>)
 800fe9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9e:	f7f0 f9fd 	bl	800029c <__adddf3>
 800fea2:	4632      	mov	r2, r6
 800fea4:	463b      	mov	r3, r7
 800fea6:	f7f0 fbaf 	bl	8000608 <__aeabi_dmul>
 800feaa:	a36b      	add	r3, pc, #428	; (adr r3, 8010058 <atan+0x2d8>)
 800feac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb0:	f7f0 f9f4 	bl	800029c <__adddf3>
 800feb4:	4632      	mov	r2, r6
 800feb6:	463b      	mov	r3, r7
 800feb8:	f7f0 fba6 	bl	8000608 <__aeabi_dmul>
 800febc:	a368      	add	r3, pc, #416	; (adr r3, 8010060 <atan+0x2e0>)
 800febe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec2:	f7f0 f9eb 	bl	800029c <__adddf3>
 800fec6:	4642      	mov	r2, r8
 800fec8:	464b      	mov	r3, r9
 800feca:	f7f0 fb9d 	bl	8000608 <__aeabi_dmul>
 800fece:	a366      	add	r3, pc, #408	; (adr r3, 8010068 <atan+0x2e8>)
 800fed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed4:	4680      	mov	r8, r0
 800fed6:	4689      	mov	r9, r1
 800fed8:	4630      	mov	r0, r6
 800feda:	4639      	mov	r1, r7
 800fedc:	f7f0 fb94 	bl	8000608 <__aeabi_dmul>
 800fee0:	a363      	add	r3, pc, #396	; (adr r3, 8010070 <atan+0x2f0>)
 800fee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee6:	f7f0 f9d7 	bl	8000298 <__aeabi_dsub>
 800feea:	4632      	mov	r2, r6
 800feec:	463b      	mov	r3, r7
 800feee:	f7f0 fb8b 	bl	8000608 <__aeabi_dmul>
 800fef2:	a361      	add	r3, pc, #388	; (adr r3, 8010078 <atan+0x2f8>)
 800fef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef8:	f7f0 f9ce 	bl	8000298 <__aeabi_dsub>
 800fefc:	4632      	mov	r2, r6
 800fefe:	463b      	mov	r3, r7
 800ff00:	f7f0 fb82 	bl	8000608 <__aeabi_dmul>
 800ff04:	a35e      	add	r3, pc, #376	; (adr r3, 8010080 <atan+0x300>)
 800ff06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0a:	f7f0 f9c5 	bl	8000298 <__aeabi_dsub>
 800ff0e:	4632      	mov	r2, r6
 800ff10:	463b      	mov	r3, r7
 800ff12:	f7f0 fb79 	bl	8000608 <__aeabi_dmul>
 800ff16:	a35c      	add	r3, pc, #368	; (adr r3, 8010088 <atan+0x308>)
 800ff18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1c:	f7f0 f9bc 	bl	8000298 <__aeabi_dsub>
 800ff20:	4632      	mov	r2, r6
 800ff22:	463b      	mov	r3, r7
 800ff24:	f7f0 fb70 	bl	8000608 <__aeabi_dmul>
 800ff28:	4602      	mov	r2, r0
 800ff2a:	460b      	mov	r3, r1
 800ff2c:	4640      	mov	r0, r8
 800ff2e:	4649      	mov	r1, r9
 800ff30:	f7f0 f9b4 	bl	800029c <__adddf3>
 800ff34:	4622      	mov	r2, r4
 800ff36:	462b      	mov	r3, r5
 800ff38:	f7f0 fb66 	bl	8000608 <__aeabi_dmul>
 800ff3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ff40:	4602      	mov	r2, r0
 800ff42:	460b      	mov	r3, r1
 800ff44:	d14b      	bne.n	800ffde <atan+0x25e>
 800ff46:	4620      	mov	r0, r4
 800ff48:	4629      	mov	r1, r5
 800ff4a:	f7f0 f9a5 	bl	8000298 <__aeabi_dsub>
 800ff4e:	e72c      	b.n	800fdaa <atan+0x2a>
 800ff50:	ee10 0a10 	vmov	r0, s0
 800ff54:	4b53      	ldr	r3, [pc, #332]	; (80100a4 <atan+0x324>)
 800ff56:	2200      	movs	r2, #0
 800ff58:	4629      	mov	r1, r5
 800ff5a:	f7f0 f99d 	bl	8000298 <__aeabi_dsub>
 800ff5e:	4b51      	ldr	r3, [pc, #324]	; (80100a4 <atan+0x324>)
 800ff60:	4606      	mov	r6, r0
 800ff62:	460f      	mov	r7, r1
 800ff64:	2200      	movs	r2, #0
 800ff66:	4620      	mov	r0, r4
 800ff68:	4629      	mov	r1, r5
 800ff6a:	f7f0 f997 	bl	800029c <__adddf3>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	460b      	mov	r3, r1
 800ff72:	4630      	mov	r0, r6
 800ff74:	4639      	mov	r1, r7
 800ff76:	f7f0 fc71 	bl	800085c <__aeabi_ddiv>
 800ff7a:	f04f 0a01 	mov.w	sl, #1
 800ff7e:	4604      	mov	r4, r0
 800ff80:	460d      	mov	r5, r1
 800ff82:	e764      	b.n	800fe4e <atan+0xce>
 800ff84:	4b49      	ldr	r3, [pc, #292]	; (80100ac <atan+0x32c>)
 800ff86:	429e      	cmp	r6, r3
 800ff88:	da1d      	bge.n	800ffc6 <atan+0x246>
 800ff8a:	ee10 0a10 	vmov	r0, s0
 800ff8e:	4b48      	ldr	r3, [pc, #288]	; (80100b0 <atan+0x330>)
 800ff90:	2200      	movs	r2, #0
 800ff92:	4629      	mov	r1, r5
 800ff94:	f7f0 f980 	bl	8000298 <__aeabi_dsub>
 800ff98:	4b45      	ldr	r3, [pc, #276]	; (80100b0 <atan+0x330>)
 800ff9a:	4606      	mov	r6, r0
 800ff9c:	460f      	mov	r7, r1
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	4629      	mov	r1, r5
 800ffa4:	f7f0 fb30 	bl	8000608 <__aeabi_dmul>
 800ffa8:	4b3e      	ldr	r3, [pc, #248]	; (80100a4 <atan+0x324>)
 800ffaa:	2200      	movs	r2, #0
 800ffac:	f7f0 f976 	bl	800029c <__adddf3>
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	460b      	mov	r3, r1
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	4639      	mov	r1, r7
 800ffb8:	f7f0 fc50 	bl	800085c <__aeabi_ddiv>
 800ffbc:	f04f 0a02 	mov.w	sl, #2
 800ffc0:	4604      	mov	r4, r0
 800ffc2:	460d      	mov	r5, r1
 800ffc4:	e743      	b.n	800fe4e <atan+0xce>
 800ffc6:	462b      	mov	r3, r5
 800ffc8:	ee10 2a10 	vmov	r2, s0
 800ffcc:	4939      	ldr	r1, [pc, #228]	; (80100b4 <atan+0x334>)
 800ffce:	2000      	movs	r0, #0
 800ffd0:	f7f0 fc44 	bl	800085c <__aeabi_ddiv>
 800ffd4:	f04f 0a03 	mov.w	sl, #3
 800ffd8:	4604      	mov	r4, r0
 800ffda:	460d      	mov	r5, r1
 800ffdc:	e737      	b.n	800fe4e <atan+0xce>
 800ffde:	4b36      	ldr	r3, [pc, #216]	; (80100b8 <atan+0x338>)
 800ffe0:	4e36      	ldr	r6, [pc, #216]	; (80100bc <atan+0x33c>)
 800ffe2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ffe6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ffea:	e9da 2300 	ldrd	r2, r3, [sl]
 800ffee:	f7f0 f953 	bl	8000298 <__aeabi_dsub>
 800fff2:	4622      	mov	r2, r4
 800fff4:	462b      	mov	r3, r5
 800fff6:	f7f0 f94f 	bl	8000298 <__aeabi_dsub>
 800fffa:	4602      	mov	r2, r0
 800fffc:	460b      	mov	r3, r1
 800fffe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010002:	f7f0 f949 	bl	8000298 <__aeabi_dsub>
 8010006:	f1bb 0f00 	cmp.w	fp, #0
 801000a:	4604      	mov	r4, r0
 801000c:	460d      	mov	r5, r1
 801000e:	f6bf aed6 	bge.w	800fdbe <atan+0x3e>
 8010012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010016:	461d      	mov	r5, r3
 8010018:	e6d1      	b.n	800fdbe <atan+0x3e>
 801001a:	a51d      	add	r5, pc, #116	; (adr r5, 8010090 <atan+0x310>)
 801001c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010020:	e6cd      	b.n	800fdbe <atan+0x3e>
 8010022:	bf00      	nop
 8010024:	f3af 8000 	nop.w
 8010028:	54442d18 	.word	0x54442d18
 801002c:	bff921fb 	.word	0xbff921fb
 8010030:	8800759c 	.word	0x8800759c
 8010034:	7e37e43c 	.word	0x7e37e43c
 8010038:	e322da11 	.word	0xe322da11
 801003c:	3f90ad3a 	.word	0x3f90ad3a
 8010040:	24760deb 	.word	0x24760deb
 8010044:	3fa97b4b 	.word	0x3fa97b4b
 8010048:	a0d03d51 	.word	0xa0d03d51
 801004c:	3fb10d66 	.word	0x3fb10d66
 8010050:	c54c206e 	.word	0xc54c206e
 8010054:	3fb745cd 	.word	0x3fb745cd
 8010058:	920083ff 	.word	0x920083ff
 801005c:	3fc24924 	.word	0x3fc24924
 8010060:	5555550d 	.word	0x5555550d
 8010064:	3fd55555 	.word	0x3fd55555
 8010068:	2c6a6c2f 	.word	0x2c6a6c2f
 801006c:	bfa2b444 	.word	0xbfa2b444
 8010070:	52defd9a 	.word	0x52defd9a
 8010074:	3fadde2d 	.word	0x3fadde2d
 8010078:	af749a6d 	.word	0xaf749a6d
 801007c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010080:	fe231671 	.word	0xfe231671
 8010084:	3fbc71c6 	.word	0x3fbc71c6
 8010088:	9998ebc4 	.word	0x9998ebc4
 801008c:	3fc99999 	.word	0x3fc99999
 8010090:	54442d18 	.word	0x54442d18
 8010094:	3ff921fb 	.word	0x3ff921fb
 8010098:	440fffff 	.word	0x440fffff
 801009c:	7ff00000 	.word	0x7ff00000
 80100a0:	3fdbffff 	.word	0x3fdbffff
 80100a4:	3ff00000 	.word	0x3ff00000
 80100a8:	3ff2ffff 	.word	0x3ff2ffff
 80100ac:	40038000 	.word	0x40038000
 80100b0:	3ff80000 	.word	0x3ff80000
 80100b4:	bff00000 	.word	0xbff00000
 80100b8:	08010660 	.word	0x08010660
 80100bc:	08010640 	.word	0x08010640

080100c0 <fabs>:
 80100c0:	ec51 0b10 	vmov	r0, r1, d0
 80100c4:	ee10 2a10 	vmov	r2, s0
 80100c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80100cc:	ec43 2b10 	vmov	d0, r2, r3
 80100d0:	4770      	bx	lr
	...

080100d4 <_init>:
 80100d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d6:	bf00      	nop
 80100d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100da:	bc08      	pop	{r3}
 80100dc:	469e      	mov	lr, r3
 80100de:	4770      	bx	lr

080100e0 <_fini>:
 80100e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e2:	bf00      	nop
 80100e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100e6:	bc08      	pop	{r3}
 80100e8:	469e      	mov	lr, r3
 80100ea:	4770      	bx	lr
