
Glove Black Pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffd4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08010178  08010178  00020178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106e0  080106e0  000302dc  2**0
                  CONTENTS
  4 .ARM          00000008  080106e0  080106e0  000206e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106e8  080106e8  000302dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106e8  080106e8  000206e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106ec  080106ec  000206ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  080106f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee8  200002dc  080109cc  000302dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021c4  080109cc  000321c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001adc2  00000000  00000000  0003030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000430f  00000000  00000000  0004b0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0004f3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001288  00000000  00000000  00050810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb7a  00000000  00000000  00051a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0e5  00000000  00000000  0006e612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c459  00000000  00000000  0008b6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127b50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000652c  00000000  00000000  00127ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002dc 	.word	0x200002dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801015c 	.word	0x0801015c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e0 	.word	0x200002e0
 80001dc:	0801015c 	.word	0x0801015c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f6e:	4b4a      	ldr	r3, [pc, #296]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f70:	4a4a      	ldr	r2, [pc, #296]	; (800109c <MX_ADC1_Init+0x140>)
 8000f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f74:	4b48      	ldr	r3, [pc, #288]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7a:	4b47      	ldr	r3, [pc, #284]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f80:	4b45      	ldr	r3, [pc, #276]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f86:	4b44      	ldr	r3, [pc, #272]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8c:	4b42      	ldr	r3, [pc, #264]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f94:	4b40      	ldr	r3, [pc, #256]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000f9c:	4a40      	ldr	r2, [pc, #256]	; (80010a0 <MX_ADC1_Init+0x144>)
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa0:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fac:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb4:	4b38      	ldr	r3, [pc, #224]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fba:	4837      	ldr	r0, [pc, #220]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fbc:	f001 f8f0 	bl	80021a0 <HAL_ADC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fc6:	f000 fe35 	bl	8001c34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fca:	2309      	movs	r3, #9
 8000fcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482f      	ldr	r0, [pc, #188]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000fdc:	f001 fb4c 	bl	8002678 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fe6:	f000 fe25 	bl	8001c34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fea:	2308      	movs	r3, #8
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4828      	ldr	r0, [pc, #160]	; (8001098 <MX_ADC1_Init+0x13c>)
 8000ff8:	f001 fb3e 	bl	8002678 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001002:	f000 fe17 	bl	8001c34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001006:	2307      	movs	r3, #7
 8001008:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800100a:	2303      	movs	r3, #3
 800100c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	4619      	mov	r1, r3
 8001012:	4821      	ldr	r0, [pc, #132]	; (8001098 <MX_ADC1_Init+0x13c>)
 8001014:	f001 fb30 	bl	8002678 <HAL_ADC_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800101e:	f000 fe09 	bl	8001c34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001022:	2306      	movs	r3, #6
 8001024:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001026:	2304      	movs	r3, #4
 8001028:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	481a      	ldr	r0, [pc, #104]	; (8001098 <MX_ADC1_Init+0x13c>)
 8001030:	f001 fb22 	bl	8002678 <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800103a:	f000 fdfb 	bl	8001c34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800103e:	2305      	movs	r3, #5
 8001040:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001042:	2305      	movs	r3, #5
 8001044:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	4619      	mov	r1, r3
 800104a:	4813      	ldr	r0, [pc, #76]	; (8001098 <MX_ADC1_Init+0x13c>)
 800104c:	f001 fb14 	bl	8002678 <HAL_ADC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001056:	f000 fded 	bl	8001c34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 800105a:	2306      	movs	r3, #6
 800105c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <MX_ADC1_Init+0x13c>)
 8001064:	f001 fb08 	bl	8002678 <HAL_ADC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800106e:	f000 fde1 	bl	8001c34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8001072:	2307      	movs	r3, #7
 8001074:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <MX_ADC1_Init+0x13c>)
 8001080:	f001 fafa 	bl	8002678 <HAL_ADC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800108a:	f000 fdd3 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200002f8 	.word	0x200002f8
 800109c:	40012000 	.word	0x40012000
 80010a0:	0f000001 	.word	0x0f000001

080010a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a40      	ldr	r2, [pc, #256]	; (80011c4 <HAL_ADC_MspInit+0x120>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d179      	bne.n	80011ba <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a3e      	ldr	r2, [pc, #248]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a37      	ldr	r2, [pc, #220]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a30      	ldr	r2, [pc, #192]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <HAL_ADC_MspInit+0x124>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800111a:	23e0      	movs	r3, #224	; 0xe0
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4827      	ldr	r0, [pc, #156]	; (80011cc <HAL_ADC_MspInit+0x128>)
 800112e:	f002 fa1b 	bl	8003568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001132:	2303      	movs	r3, #3
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001136:	2303      	movs	r3, #3
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4822      	ldr	r0, [pc, #136]	; (80011d0 <HAL_ADC_MspInit+0x12c>)
 8001146:	f002 fa0f 	bl	8003568 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800114c:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <HAL_ADC_MspInit+0x134>)
 800114e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001168:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800116c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001170:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001174:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001178:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800117c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001180:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800118e:	4811      	ldr	r0, [pc, #68]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 8001190:	f001 fe3e 	bl	8002e10 <HAL_DMA_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800119a:	f000 fd4b 	bl	8001c34 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 80011a2:	639a      	str	r2, [r3, #56]	; 0x38
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_ADC_MspInit+0x130>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2012      	movs	r0, #18
 80011b0:	f001 fdf7 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011b4:	2012      	movs	r0, #18
 80011b6:	f001 fe10 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40012000 	.word	0x40012000
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400
 80011d4:	20000340 	.word	0x20000340
 80011d8:	40026410 	.word	0x40026410

080011dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_DMA_Init+0x68>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a16      	ldr	r2, [pc, #88]	; (8001244 <MX_DMA_Init+0x68>)
 80011ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_DMA_Init+0x68>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_DMA_Init+0x68>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <MX_DMA_Init+0x68>)
 8001208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <MX_DMA_Init+0x68>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	200b      	movs	r0, #11
 8001220:	f001 fdbf 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001224:	200b      	movs	r0, #11
 8001226:	f001 fdd8 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2038      	movs	r0, #56	; 0x38
 8001230:	f001 fdb7 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001234:	2038      	movs	r0, #56	; 0x38
 8001236:	f001 fdd0 	bl	8002dda <HAL_NVIC_EnableIRQ>

}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <MX_GPIO_Init+0xb0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a24      	ldr	r2, [pc, #144]	; (80012f8 <MX_GPIO_Init+0xb0>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_GPIO_Init+0xb0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_GPIO_Init+0xb0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <MX_GPIO_Init+0xb0>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_GPIO_Init+0xb0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_GPIO_Init+0xb0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <MX_GPIO_Init+0xb0>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_GPIO_Init+0xb0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB12 PB13 PB14 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5;
 80012b2:	f247 0320 	movw	r3, #28704	; 0x7020
 80012b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <MX_GPIO_Init+0xb4>)
 80012ca:	f002 f94d 	bl	8003568 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2017      	movs	r0, #23
 80012d4:	f001 fd65 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012d8:	2017      	movs	r0, #23
 80012da:	f001 fd7e 	bl	8002dda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2028      	movs	r0, #40	; 0x28
 80012e4:	f001 fd5d 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012e8:	2028      	movs	r0, #40	; 0x28
 80012ea:	f001 fd76 	bl	8002dda <HAL_NVIC_EnableIRQ>

}
 80012ee:	bf00      	nop
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020400 	.word	0x40020400

08001300 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_I2C1_Init+0x50>)
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <MX_I2C1_Init+0x54>)
 8001308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_I2C1_Init+0x50>)
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <MX_I2C1_Init+0x58>)
 800130e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_I2C1_Init+0x50>)
 800131e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001322:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_I2C1_Init+0x50>)
 800133e:	f002 faaf 	bl	80038a0 <HAL_I2C_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001348:	f000 fc74 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200003a0 	.word	0x200003a0
 8001354:	40005400 	.word	0x40005400
 8001358:	00061a80 	.word	0x00061a80

0800135c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a38      	ldr	r2, [pc, #224]	; (800145c <HAL_I2C_MspInit+0x100>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d169      	bne.n	8001452 <HAL_I2C_MspInit+0xf6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_I2C_MspInit+0x104>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a36      	ldr	r2, [pc, #216]	; (8001460 <HAL_I2C_MspInit+0x104>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <HAL_I2C_MspInit+0x104>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800139a:	23c0      	movs	r3, #192	; 0xc0
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139e:	2312      	movs	r3, #18
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013aa:	2304      	movs	r3, #4
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	482b      	ldr	r0, [pc, #172]	; (8001464 <HAL_I2C_MspInit+0x108>)
 80013b6:	f002 f8d7 	bl	8003568 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <HAL_I2C_MspInit+0x104>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a27      	ldr	r2, [pc, #156]	; (8001460 <HAL_I2C_MspInit+0x104>)
 80013c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b25      	ldr	r3, [pc, #148]	; (8001460 <HAL_I2C_MspInit+0x104>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_I2C_MspInit+0x10c>)
 80013d8:	4a24      	ldr	r2, [pc, #144]	; (800146c <HAL_I2C_MspInit+0x110>)
 80013da:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <HAL_I2C_MspInit+0x10c>)
 80013de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013e2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013e4:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_I2C_MspInit+0x10c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HAL_I2C_MspInit+0x10c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_I2C_MspInit+0x10c>)
 80013f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_I2C_MspInit+0x10c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_I2C_MspInit+0x10c>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_I2C_MspInit+0x10c>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_I2C_MspInit+0x10c>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_I2C_MspInit+0x10c>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001416:	4814      	ldr	r0, [pc, #80]	; (8001468 <HAL_I2C_MspInit+0x10c>)
 8001418:	f001 fcfa 	bl	8002e10 <HAL_DMA_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001422:	f000 fc07 	bl	8001c34 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <HAL_I2C_MspInit+0x10c>)
 800142a:	639a      	str	r2, [r3, #56]	; 0x38
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <HAL_I2C_MspInit+0x10c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	201f      	movs	r0, #31
 8001438:	f001 fcb3 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800143c:	201f      	movs	r0, #31
 800143e:	f001 fccc 	bl	8002dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2020      	movs	r0, #32
 8001448:	f001 fcab 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800144c:	2020      	movs	r0, #32
 800144e:	f001 fcc4 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40005400 	.word	0x40005400
 8001460:	40023800 	.word	0x40023800
 8001464:	40020400 	.word	0x40020400
 8001468:	200003f4 	.word	0x200003f4
 800146c:	40026010 	.word	0x40026010

08001470 <MPU6050_DMA_mode_init>:
uint8_t acc_sens = 16384.0;
float current_angle = 0.0;
char msg2[128];

uint8_t MPU6050_DMA_mode_init(I2C_HandleTypeDef *I2Cx)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af04      	add	r7, sp, #16
 8001476:	6078      	str	r0, [r7, #4]
    I2C_HandleTypeDef *i2c = I2Cx;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	60fb      	str	r3, [r7, #12]
    uint8_t counter = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	75fb      	strb	r3, [r7, #23]
    uint8_t check;
    uint8_t Data;
    
    for(int i = 0; i < 5; i++){
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	e02e      	b.n	80014e4 <MPU6050_DMA_mode_init+0x74>
        HAL_Delay(1000);
 8001486:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148a:	f000 fe65 	bl	8002158 <HAL_Delay>
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &check, 1, 10);
 800148e:	230a      	movs	r3, #10
 8001490:	9302      	str	r3, [sp, #8]
 8001492:	2301      	movs	r3, #1
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	f107 030b 	add.w	r3, r7, #11
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	2275      	movs	r2, #117	; 0x75
 80014a0:	21d0      	movs	r1, #208	; 0xd0
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f002 fc3a 	bl	8003d1c <HAL_I2C_Mem_Read>

        if(check == 104)
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	2b68      	cmp	r3, #104	; 0x68
 80014ac:	d105      	bne.n	80014ba <MPU6050_DMA_mode_init+0x4a>
        {
            counter++;
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
 80014b0:	3301      	adds	r3, #1
 80014b2:	75fb      	strb	r3, [r7, #23]
            if(counter >= 2)
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d818      	bhi.n	80014ec <MPU6050_DMA_mode_init+0x7c>
            {
                break;
            }
        }
        sprintf(msg2, "WHO_AM_I check: %d \n\r", check);
 80014ba:	7afb      	ldrb	r3, [r7, #11]
 80014bc:	461a      	mov	r2, r3
 80014be:	494a      	ldr	r1, [pc, #296]	; (80015e8 <MPU6050_DMA_mode_init+0x178>)
 80014c0:	484a      	ldr	r0, [pc, #296]	; (80015ec <MPU6050_DMA_mode_init+0x17c>)
 80014c2:	f00c f87d 	bl	800d5c0 <siprintf>
        CDC_Transmit_FS((uint8_t *)msg2, strlen(msg2));
 80014c6:	4849      	ldr	r0, [pc, #292]	; (80015ec <MPU6050_DMA_mode_init+0x17c>)
 80014c8:	f7fe fe8a 	bl	80001e0 <strlen>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4619      	mov	r1, r3
 80014d0:	4846      	ldr	r0, [pc, #280]	; (80015ec <MPU6050_DMA_mode_init+0x17c>)
 80014d2:	f00a ff87 	bl	800c3e4 <CDC_Transmit_FS>
        HAL_Delay(1000);
 80014d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014da:	f000 fe3d 	bl	8002158 <HAL_Delay>
    for(int i = 0; i < 5; i++){
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	3301      	adds	r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	ddcd      	ble.n	8001486 <MPU6050_DMA_mode_init+0x16>
 80014ea:	e000      	b.n	80014ee <MPU6050_DMA_mode_init+0x7e>
                break;
 80014ec:	bf00      	nop
    }

    Data = MPU6050_CLOCK_PLL_ZGYRO;
 80014ee:	2303      	movs	r3, #3
 80014f0:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &Data, 1, i2c_timeout);//PLL with Z axis gyroscope reference
 80014f2:	2364      	movs	r3, #100	; 0x64
 80014f4:	9302      	str	r3, [sp, #8]
 80014f6:	2301      	movs	r3, #1
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	f107 030a 	add.w	r3, r7, #10
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2301      	movs	r3, #1
 8001502:	226b      	movs	r2, #107	; 0x6b
 8001504:	21d0      	movs	r1, #208	; 0xd0
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f002 fb0e 	bl	8003b28 <HAL_I2C_Mem_Write>

    Data = 0x05;
 800150c:	2305      	movs	r3, #5
 800150e:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &Data, 1, i2c_timeout);        //DLPF_CFG = 1: Fs=1khz; bandwidth=42hz 
 8001510:	2364      	movs	r3, #100	; 0x64
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	2301      	movs	r3, #1
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	f107 030a 	add.w	r3, r7, #10
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2301      	movs	r3, #1
 8001520:	221a      	movs	r2, #26
 8001522:	21d0      	movs	r1, #208	; 0xd0
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f002 faff 	bl	8003b28 <HAL_I2C_Mem_Write>

    Data = 0x13;
 800152a:	2313      	movs	r3, #19
 800152c:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &Data, 1, i2c_timeout);    //500Hz sample rate ~ 2ms
 800152e:	2364      	movs	r3, #100	; 0x64
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	2301      	movs	r3, #1
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	f107 030a 	add.w	r3, r7, #10
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2301      	movs	r3, #1
 800153e:	2219      	movs	r2, #25
 8001540:	21d0      	movs	r1, #208	; 0xd0
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f002 faf0 	bl	8003b28 <HAL_I2C_Mem_Write>

    Data = MPU6050_GYRO_FS_250;
 8001548:	2300      	movs	r3, #0
 800154a:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &Data, 1, i2c_timeout);    //Gyro full scale setting
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	2301      	movs	r3, #1
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	f107 030a 	add.w	r3, r7, #10
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2301      	movs	r3, #1
 800155c:	221b      	movs	r2, #27
 800155e:	21d0      	movs	r1, #208	; 0xd0
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f002 fae1 	bl	8003b28 <HAL_I2C_Mem_Write>

    Data = MPU6050_ACCEL_FS_2;
 8001566:	2300      	movs	r3, #0
 8001568:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);    //Accel full scale setting
 800156a:	2364      	movs	r3, #100	; 0x64
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	2301      	movs	r3, #1
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	f107 030a 	add.w	r3, r7, #10
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	221c      	movs	r2, #28
 800157c:	21d0      	movs	r1, #208	; 0xd0
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f002 fad2 	bl	8003b28 <HAL_I2C_Mem_Write>

    // Data = 1<<4;
    Data = 0x30;
 8001584:	2330      	movs	r3, #48	; 0x30
 8001586:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &Data , 1, i2c_timeout);        //interrupt status bits are cleared on any read operation
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2301      	movs	r3, #1
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f107 030a 	add.w	r3, r7, #10
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	2237      	movs	r2, #55	; 0x37
 800159a:	21d0      	movs	r1, #208	; 0xd0
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f002 fac3 	bl	8003b28 <HAL_I2C_Mem_Write>

    Data = 1<<0;
 80015a2:	2301      	movs	r3, #1
 80015a4:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &Data, 1, i2c_timeout);        //interupt occurs when data is ready. The interupt routine is in the receiver.c file.   
 80015a6:	2364      	movs	r3, #100	; 0x64
 80015a8:	9302      	str	r3, [sp, #8]
 80015aa:	2301      	movs	r3, #1
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	f107 030a 	add.w	r3, r7, #10
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2301      	movs	r3, #1
 80015b6:	2238      	movs	r2, #56	; 0x38
 80015b8:	21d0      	movs	r1, #208	; 0xd0
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f002 fab4 	bl	8003b28 <HAL_I2C_Mem_Write>

    Data = 0x07;
 80015c0:	2307      	movs	r3, #7
 80015c2:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_RA_SIGNAL_PATH_RESET, 1, &Data, 1, i2c_timeout);//reset gyro and accel sensor  
 80015c4:	2364      	movs	r3, #100	; 0x64
 80015c6:	9302      	str	r3, [sp, #8]
 80015c8:	2301      	movs	r3, #1
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	f107 030a 	add.w	r3, r7, #10
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2301      	movs	r3, #1
 80015d4:	2268      	movs	r2, #104	; 0x68
 80015d6:	21d0      	movs	r1, #208	; 0xd0
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f002 faa5 	bl	8003b28 <HAL_I2C_Mem_Write>
}
 80015de:	bf00      	nop
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	08010178 	.word	0x08010178
 80015ec:	20000454 	.word	0x20000454

080015f0 <MPU6050_DMA_read_all_data>:
{
    HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data_buffer, 6);
}

void MPU6050_DMA_read_all_data(I2C_HandleTypeDef *I2Cx, uint8_t *data_buffer)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data_buffer, 14);
 80015fa:	230e      	movs	r3, #14
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2301      	movs	r3, #1
 8001604:	223b      	movs	r2, #59	; 0x3b
 8001606:	21d0      	movs	r1, #208	; 0xd0
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f002 fdad 	bl	8004168 <HAL_I2C_Mem_Read_DMA>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <MPU6050_process_6_axis_data_and_calculate_angles>:
    // imuStruct->accel_angle = -atan2(imuStruct->accelerometer.z, -imuStruct->accelerometer.x) * (180/M_PI);
    // imuStruct->gyro_angle = imuStruct->gyroscope.y / 131.0;  
}

void MPU6050_process_6_axis_data_and_calculate_angles(uint8_t *data_buffer, ImuData *imuStruct)
{
 8001618:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af04      	add	r7, sp, #16
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]

    imuStruct->accelerometer_raw.x = (int16_t)(data_buffer[0] << 8 | data_buffer[1]);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3301      	adds	r3, #1
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b21a      	sxth	r2, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	801a      	strh	r2, [r3, #0]
    imuStruct->accelerometer_raw.y= (int16_t)(data_buffer[2] << 8 | data_buffer[3]);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3302      	adds	r3, #2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b21a      	sxth	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3303      	adds	r3, #3
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21a      	sxth	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	805a      	strh	r2, [r3, #2]
    imuStruct->accelerometer_raw.z= (int16_t)(data_buffer[4] << 8 | data_buffer[5]);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3304      	adds	r3, #4
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	b21a      	sxth	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3305      	adds	r3, #5
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b21b      	sxth	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b21a      	sxth	r2, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	809a      	strh	r2, [r3, #4]

    imuStruct->gyroscope_raw.x = (int16_t)(data_buffer[8] << 8 | data_buffer[9]);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3308      	adds	r3, #8
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b21a      	sxth	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3309      	adds	r3, #9
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b21b      	sxth	r3, r3
 8001682:	4313      	orrs	r3, r2
 8001684:	b21a      	sxth	r2, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	80da      	strh	r2, [r3, #6]
    imuStruct->gyroscope_raw.y = (int16_t)(data_buffer[10] << 8 | data_buffer[11]);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	330a      	adds	r3, #10
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	330b      	adds	r3, #11
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b21b      	sxth	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b21a      	sxth	r2, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	811a      	strh	r2, [r3, #8]
    imuStruct->gyroscope_raw.z = (int16_t)(data_buffer[12] << 8 | data_buffer[13]);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	330c      	adds	r3, #12
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	330d      	adds	r3, #13
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	815a      	strh	r2, [r3, #10]

    imuStruct->accelerometer_scaled.x = (float)imuStruct->accelerometer_raw.x / acc_sens;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016cc:	4bc6      	ldr	r3, [pc, #792]	; (80019e8 <MPU6050_process_6_axis_data_and_calculate_angles+0x3d0>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e0:	ee17 3a90 	vmov	r3, s15
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	819a      	strh	r2, [r3, #12]
	imuStruct->accelerometer_scaled.y = (float)imuStruct->accelerometer_raw.y / acc_sens;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	885b      	ldrh	r3, [r3, #2]
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016f8:	4bbb      	ldr	r3, [pc, #748]	; (80019e8 <MPU6050_process_6_axis_data_and_calculate_angles+0x3d0>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170c:	ee17 3a90 	vmov	r3, s15
 8001710:	b21a      	sxth	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	81da      	strh	r2, [r3, #14]
	imuStruct->accelerometer_scaled.z = (float)imuStruct->accelerometer_raw.z / acc_sens;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	889b      	ldrh	r3, [r3, #4]
 800171a:	b21b      	sxth	r3, r3
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001724:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <MPU6050_process_6_axis_data_and_calculate_angles+0x3d0>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001738:	ee17 3a90 	vmov	r3, s15
 800173c:	b21a      	sxth	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	821a      	strh	r2, [r3, #16]

    imuStruct->gyroscope_scaled.x = (float)imuStruct->gyroscope_raw.x / gyro_sens;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	88db      	ldrh	r3, [r3, #6]
 8001746:	b21b      	sxth	r3, r3
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001750:	4ba6      	ldr	r3, [pc, #664]	; (80019ec <MPU6050_process_6_axis_data_and_calculate_angles+0x3d4>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001764:	ee17 3a90 	vmov	r3, s15
 8001768:	b21a      	sxth	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	825a      	strh	r2, [r3, #18]
    imuStruct->gyroscope_scaled.y = (float)imuStruct->gyroscope_raw.y / gyro_sens;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	891b      	ldrh	r3, [r3, #8]
 8001772:	b21b      	sxth	r3, r3
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800177c:	4b9b      	ldr	r3, [pc, #620]	; (80019ec <MPU6050_process_6_axis_data_and_calculate_angles+0x3d4>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800178c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001790:	ee17 3a90 	vmov	r3, s15
 8001794:	b21a      	sxth	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	829a      	strh	r2, [r3, #20]
    imuStruct->gyroscope_scaled.z = (float)imuStruct->gyroscope_raw.z / gyro_sens;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	895b      	ldrh	r3, [r3, #10]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017a8:	4b90      	ldr	r3, [pc, #576]	; (80019ec <MPU6050_process_6_axis_data_and_calculate_angles+0x3d4>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017bc:	ee17 3a90 	vmov	r3, s15
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	82da      	strh	r2, [r3, #22]

    imuStruct->roll_acc = (atan2(imuStruct->accelerometer_scaled.y, 
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	89db      	ldrh	r3, [r3, #14]
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe feb1 	bl	8000534 <__aeabi_i2d>
 80017d2:	4604      	mov	r4, r0
 80017d4:	460d      	mov	r5, r1
    sqrt(imuStruct->accelerometer_scaled.x*imuStruct->accelerometer_scaled.x + imuStruct->accelerometer_scaled.z*imuStruct->accelerometer_scaled.z))*180.0)/M_PI;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	899b      	ldrh	r3, [r3, #12]
 80017da:	b21b      	sxth	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	899b      	ldrh	r3, [r3, #12]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	fb03 f202 	mul.w	r2, r3, r2
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	8a1b      	ldrh	r3, [r3, #16]
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4619      	mov	r1, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	8a1b      	ldrh	r3, [r3, #16]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
    imuStruct->roll_acc = (atan2(imuStruct->accelerometer_scaled.y, 
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fe99 	bl	8000534 <__aeabi_i2d>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	ec43 2b10 	vmov	d0, r2, r3
 800180a:	f00e f953 	bl	800fab4 <sqrt>
 800180e:	eeb0 7a40 	vmov.f32	s14, s0
 8001812:	eef0 7a60 	vmov.f32	s15, s1
 8001816:	eeb0 1a47 	vmov.f32	s2, s14
 800181a:	eef0 1a67 	vmov.f32	s3, s15
 800181e:	ec45 4b10 	vmov	d0, r4, r5
 8001822:	f00e f945 	bl	800fab0 <atan2>
 8001826:	ec51 0b10 	vmov	r0, r1, d0
    sqrt(imuStruct->accelerometer_scaled.x*imuStruct->accelerometer_scaled.x + imuStruct->accelerometer_scaled.z*imuStruct->accelerometer_scaled.z))*180.0)/M_PI;
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	4b70      	ldr	r3, [pc, #448]	; (80019f0 <MPU6050_process_6_axis_data_and_calculate_angles+0x3d8>)
 8001830:	f7fe feea 	bl	8000608 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	a368      	add	r3, pc, #416	; (adr r3, 80019e0 <MPU6050_process_6_axis_data_and_calculate_angles+0x3c8>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	f7ff f80b 	bl	800085c <__aeabi_ddiv>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f9b3 	bl	8000bb8 <__aeabi_d2f>
 8001852:	4602      	mov	r2, r0
    imuStruct->roll_acc = (atan2(imuStruct->accelerometer_scaled.y, 
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	61da      	str	r2, [r3, #28]
    imuStruct->roll_gyro = imuStruct->gyroscope_raw.x * 180.0 / M_PI;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	88db      	ldrh	r3, [r3, #6]
 800185c:	b21b      	sxth	r3, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe68 	bl	8000534 <__aeabi_i2d>
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	4b61      	ldr	r3, [pc, #388]	; (80019f0 <MPU6050_process_6_axis_data_and_calculate_angles+0x3d8>)
 800186a:	f7fe fecd 	bl	8000608 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	a35a      	add	r3, pc, #360	; (adr r3, 80019e0 <MPU6050_process_6_axis_data_and_calculate_angles+0x3c8>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe ffee 	bl	800085c <__aeabi_ddiv>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff f996 	bl	8000bb8 <__aeabi_d2f>
 800188c:	4602      	mov	r2, r0
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
    imuStruct->roll_complementary = alpha * (imuStruct->roll_complementary + imuStruct->roll_gyro * sampling_time_sec) + (1.0 - alpha) * imuStruct->roll_acc;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800189e:	4b55      	ldr	r3, [pc, #340]	; (80019f4 <MPU6050_process_6_axis_data_and_calculate_angles+0x3dc>)
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ac:	4b52      	ldr	r3, [pc, #328]	; (80019f8 <MPU6050_process_6_axis_data_and_calculate_angles+0x3e0>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b6:	ee17 0a90 	vmov	r0, s15
 80018ba:	f7fe fe4d 	bl	8000558 <__aeabi_f2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <MPU6050_process_6_axis_data_and_calculate_angles+0x3e0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe46 	bl	8000558 <__aeabi_f2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	f04f 0000 	mov.w	r0, #0
 80018d4:	4949      	ldr	r1, [pc, #292]	; (80019fc <MPU6050_process_6_axis_data_and_calculate_angles+0x3e4>)
 80018d6:	f7fe fcdf 	bl	8000298 <__aeabi_dsub>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4690      	mov	r8, r2
 80018e0:	4699      	mov	r9, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe36 	bl	8000558 <__aeabi_f2d>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4640      	mov	r0, r8
 80018f2:	4649      	mov	r1, r9
 80018f4:	f7fe fe88 	bl	8000608 <__aeabi_dmul>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4620      	mov	r0, r4
 80018fe:	4629      	mov	r1, r5
 8001900:	f7fe fccc 	bl	800029c <__adddf3>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f954 	bl	8000bb8 <__aeabi_d2f>
 8001910:	4602      	mov	r2, r0
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	635a      	str	r2, [r3, #52]	; 0x34


    imuStruct->pitch_acc = atan2(imuStruct->accelerometer_scaled.x, imuStruct->accelerometer_scaled.z) * 180.0/M_PI;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	899b      	ldrh	r3, [r3, #12]
 800191a:	b21b      	sxth	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe09 	bl	8000534 <__aeabi_i2d>
 8001922:	4604      	mov	r4, r0
 8001924:	460d      	mov	r5, r1
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	8a1b      	ldrh	r3, [r3, #16]
 800192a:	b21b      	sxth	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe01 	bl	8000534 <__aeabi_i2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	ec43 2b11 	vmov	d1, r2, r3
 800193a:	ec45 4b10 	vmov	d0, r4, r5
 800193e:	f00e f8b7 	bl	800fab0 <atan2>
 8001942:	ec51 0b10 	vmov	r0, r1, d0
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <MPU6050_process_6_axis_data_and_calculate_angles+0x3d8>)
 800194c:	f7fe fe5c 	bl	8000608 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	a321      	add	r3, pc, #132	; (adr r3, 80019e0 <MPU6050_process_6_axis_data_and_calculate_angles+0x3c8>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe ff7d 	bl	800085c <__aeabi_ddiv>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f925 	bl	8000bb8 <__aeabi_d2f>
 800196e:	4602      	mov	r2, r0
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	619a      	str	r2, [r3, #24]
    imuStruct->pitch_gyro = imuStruct->gyroscope_scaled.y;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	8a9b      	ldrh	r3, [r3, #20]
 8001978:	b21b      	sxth	r3, r3
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    imuStruct->pitch_complementary = alpha * (imuStruct->pitch_complementary + imuStruct->pitch_gyro * sampling_time_sec) + (1.0 - alpha) * imuStruct->pitch_acc;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MPU6050_process_6_axis_data_and_calculate_angles+0x3dc>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <MPU6050_process_6_axis_data_and_calculate_angles+0x3e0>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ac:	ee17 0a90 	vmov	r0, s15
 80019b0:	f7fe fdd2 	bl	8000558 <__aeabi_f2d>
 80019b4:	4604      	mov	r4, r0
 80019b6:	460d      	mov	r5, r1
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MPU6050_process_6_axis_data_and_calculate_angles+0x3e0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdcb 	bl	8000558 <__aeabi_f2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	f04f 0000 	mov.w	r0, #0
 80019ca:	490c      	ldr	r1, [pc, #48]	; (80019fc <MPU6050_process_6_axis_data_and_calculate_angles+0x3e4>)
 80019cc:	f7fe fc64 	bl	8000298 <__aeabi_dsub>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4690      	mov	r8, r2
 80019d6:	4699      	mov	r9, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	e011      	b.n	8001a00 <MPU6050_process_6_axis_data_and_calculate_angles+0x3e8>
 80019dc:	f3af 8000 	nop.w
 80019e0:	54442d18 	.word	0x54442d18
 80019e4:	400921fb 	.word	0x400921fb
 80019e8:	2000000d 	.word	0x2000000d
 80019ec:	2000000c 	.word	0x2000000c
 80019f0:	40668000 	.word	0x40668000
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000008 	.word	0x20000008
 80019fc:	3ff00000 	.word	0x3ff00000
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fda8 	bl	8000558 <__aeabi_f2d>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4640      	mov	r0, r8
 8001a0e:	4649      	mov	r1, r9
 8001a10:	f7fe fdfa 	bl	8000608 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fc3e 	bl	800029c <__adddf3>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f8c6 	bl	8000bb8 <__aeabi_d2f>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30
    
    
    if(debug == 2)
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <MPU6050_process_6_axis_data_and_calculate_angles+0x47c>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d127      	bne.n	8001a8a <MPU6050_process_6_axis_data_and_calculate_angles+0x472>
    {
        sprintf(msg2, "0:=%d, 1:=%d 2:=%d, 3:=%d, 4:=%d 5:=%d\n\r", data_buffer[0], data_buffer[1],data_buffer[2],data_buffer[3],data_buffer[4],data_buffer[5]);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461c      	mov	r4, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3301      	adds	r3, #1
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461d      	mov	r5, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3303      	adds	r3, #3
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4619      	mov	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3305      	adds	r3, #5
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	9303      	str	r3, [sp, #12]
 8001a68:	9002      	str	r0, [sp, #8]
 8001a6a:	9101      	str	r1, [sp, #4]
 8001a6c:	9200      	str	r2, [sp, #0]
 8001a6e:	462b      	mov	r3, r5
 8001a70:	4622      	mov	r2, r4
 8001a72:	4909      	ldr	r1, [pc, #36]	; (8001a98 <MPU6050_process_6_axis_data_and_calculate_angles+0x480>)
 8001a74:	4809      	ldr	r0, [pc, #36]	; (8001a9c <MPU6050_process_6_axis_data_and_calculate_angles+0x484>)
 8001a76:	f00b fda3 	bl	800d5c0 <siprintf>
        CDC_Transmit_FS((uint8_t *)msg2, strlen(msg2));
 8001a7a:	4808      	ldr	r0, [pc, #32]	; (8001a9c <MPU6050_process_6_axis_data_and_calculate_angles+0x484>)
 8001a7c:	f7fe fbb0 	bl	80001e0 <strlen>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4619      	mov	r1, r3
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MPU6050_process_6_axis_data_and_calculate_angles+0x484>)
 8001a86:	f00a fcad 	bl	800c3e4 <CDC_Transmit_FS>
    }

 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a94:	20000004 	.word	0x20000004
 8001a98:	080101ec 	.word	0x080101ec
 8001a9c:	20000454 	.word	0x20000454

08001aa0 <main>:
void SystemClock_Config(void);
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);

int main(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  HAL_Init();
 8001aa4:	f000 fae6 	bl	8002074 <HAL_Init>
  SystemClock_Config();
 8001aa8:	f000 f85c 	bl	8001b64 <SystemClock_Config>
  MX_GPIO_Init();
 8001aac:	f7ff fbcc 	bl	8001248 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ab0:	f7ff fb94 	bl	80011dc <MX_DMA_Init>
  MX_ADC1_Init();
 8001ab4:	f7ff fa52 	bl	8000f5c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ab8:	f7ff fc22 	bl	8001300 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001abc:	f00a fbd4 	bl	800c268 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8001ac0:	f000 fa3c 	bl	8001f3c <MX_USART1_UART_Init>
  MPU6050_DMA_mode_init(&hi2c1);
 8001ac4:	480f      	ldr	r0, [pc, #60]	; (8001b04 <main+0x64>)
 8001ac6:	f7ff fcd3 	bl	8001470 <MPU6050_DMA_mode_init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 7);
 8001aca:	2207      	movs	r2, #7
 8001acc:	490e      	ldr	r1, [pc, #56]	; (8001b08 <main+0x68>)
 8001ace:	480f      	ldr	r0, [pc, #60]	; (8001b0c <main+0x6c>)
 8001ad0:	f000 fcba 	bl	8002448 <HAL_ADC_Start_DMA>

  while (1)
  {
    sprintf(msg, "pitch:=%f \n\r", imu_sensor_data.pitch_complementary);
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <main+0x70>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd3d 	bl	8000558 <__aeabi_f2d>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	490c      	ldr	r1, [pc, #48]	; (8001b14 <main+0x74>)
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <main+0x78>)
 8001ae6:	f00b fd6b 	bl	800d5c0 <siprintf>
    CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 8001aea:	480b      	ldr	r0, [pc, #44]	; (8001b18 <main+0x78>)
 8001aec:	f7fe fb78 	bl	80001e0 <strlen>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4619      	mov	r1, r3
 8001af4:	4808      	ldr	r0, [pc, #32]	; (8001b18 <main+0x78>)
 8001af6:	f00a fc75 	bl	800c3e4 <CDC_Transmit_FS>

    HAL_Delay(250);
 8001afa:	20fa      	movs	r0, #250	; 0xfa
 8001afc:	f000 fb2c 	bl	8002158 <HAL_Delay>
  {
 8001b00:	e7e8      	b.n	8001ad4 <main+0x34>
 8001b02:	bf00      	nop
 8001b04:	200003a0 	.word	0x200003a0
 8001b08:	20000518 	.word	0x20000518
 8001b0c:	200002f8 	.word	0x200002f8
 8001b10:	20000524 	.word	0x20000524
 8001b14:	08010218 	.word	0x08010218
 8001b18:	200004d4 	.word	0x200004d4

08001b1c <HAL_I2C_MemRxCpltCallback>:
  }
}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  MPU6050_process_6_axis_data_and_calculate_angles(&MPU6050_buff, &imu_sensor_data);
 8001b24:	4903      	ldr	r1, [pc, #12]	; (8001b34 <HAL_I2C_MemRxCpltCallback+0x18>)
 8001b26:	4804      	ldr	r0, [pc, #16]	; (8001b38 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8001b28:	f7ff fd76 	bl	8001618 <MPU6050_process_6_axis_data_and_calculate_angles>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000524 	.word	0x20000524
 8001b38:	20000508 	.word	0x20000508

08001b3c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_5)
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d103      	bne.n	8001b54 <HAL_GPIO_EXTI_Callback+0x18>
  {
    MPU6050_DMA_read_all_data(&hi2c1, &MPU6050_buff);
 8001b4c:	4903      	ldr	r1, [pc, #12]	; (8001b5c <HAL_GPIO_EXTI_Callback+0x20>)
 8001b4e:	4804      	ldr	r0, [pc, #16]	; (8001b60 <HAL_GPIO_EXTI_Callback+0x24>)
 8001b50:	f7ff fd4e 	bl	80015f0 <MPU6050_DMA_read_all_data>
  }
  
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000508 	.word	0x20000508
 8001b60:	200003a0 	.word	0x200003a0

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b094      	sub	sp, #80	; 0x50
 8001b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6a:	f107 0320 	add.w	r3, r7, #32
 8001b6e:	2230      	movs	r2, #48	; 0x30
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00b f8b2 	bl	800ccdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <SystemClock_Config+0xc8>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	4a26      	ldr	r2, [pc, #152]	; (8001c2c <SystemClock_Config+0xc8>)
 8001b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b96:	6413      	str	r3, [r2, #64]	; 0x40
 8001b98:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <SystemClock_Config+0xc8>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <SystemClock_Config+0xcc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a20      	ldr	r2, [pc, #128]	; (8001c30 <SystemClock_Config+0xcc>)
 8001bae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <SystemClock_Config+0xcc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001bd4:	2319      	movs	r3, #25
 8001bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001bd8:	2390      	movs	r3, #144	; 0x90
 8001bda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001be0:	2303      	movs	r3, #3
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be4:	f107 0320 	add.w	r3, r7, #32
 8001be8:	4618      	mov	r0, r3
 8001bea:	f006 f80d 	bl	8007c08 <HAL_RCC_OscConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bf4:	f000 f81e 	bl	8001c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	2102      	movs	r1, #2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f006 fa6f 	bl	80080f8 <HAL_RCC_ClockConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c20:	f000 f808 	bl	8001c34 <Error_Handler>
  }
}
 8001c24:	bf00      	nop
 8001c26:	3750      	adds	r7, #80	; 0x50
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40007000 	.word	0x40007000

08001c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c38:	b672      	cpsid	i
}
 8001c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <Error_Handler+0x8>
	...

08001c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800

08001c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <NMI_Handler+0x4>

08001c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <BusFault_Handler+0x4>

08001ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <UsageFault_Handler+0x4>

08001cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cdc:	f000 fa1c 	bl	8002118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <DMA1_Stream0_IRQHandler+0x10>)
 8001cea:	f001 f9b9 	bl	8003060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200003f4 	.word	0x200003f4

08001cf8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <ADC_IRQHandler+0x10>)
 8001cfe:	f000 fa92 	bl	8002226 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200002f8 	.word	0x200002f8

08001d0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001d10:	2020      	movs	r0, #32
 8001d12:	f001 fdad 	bl	8003870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <I2C1_EV_IRQHandler+0x10>)
 8001d22:	f002 fbb5 	bl	8004490 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200003a0 	.word	0x200003a0

08001d30 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <I2C1_ER_IRQHandler+0x10>)
 8001d36:	f002 fd1c 	bl	8004772 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200003a0 	.word	0x200003a0

08001d44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001d48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d4c:	f001 fd90 	bl	8003870 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d54:	f001 fd8c 	bl	8003870 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001d58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d5c:	f001 fd88 	bl	8003870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <DMA2_Stream0_IRQHandler+0x10>)
 8001d6a:	f001 f979 	bl	8003060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000340 	.word	0x20000340

08001d78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <OTG_FS_IRQHandler+0x10>)
 8001d7e:	f004 fe15 	bl	80069ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20001a88 	.word	0x20001a88

08001d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return 1;
 8001d90:	2301      	movs	r3, #1
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_kill>:

int _kill(int pid, int sig)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001da6:	f00a ff6f 	bl	800cc88 <__errno>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2216      	movs	r2, #22
 8001dae:	601a      	str	r2, [r3, #0]
  return -1;
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_exit>:

void _exit (int status)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ffe7 	bl	8001d9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dce:	e7fe      	b.n	8001dce <_exit+0x12>

08001dd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	e00a      	b.n	8001df8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001de2:	f3af 8000 	nop.w
 8001de6:	4601      	mov	r1, r0
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	60ba      	str	r2, [r7, #8]
 8001dee:	b2ca      	uxtb	r2, r1
 8001df0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3301      	adds	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dbf0      	blt.n	8001de2 <_read+0x12>
  }

  return len;
 8001e00:	687b      	ldr	r3, [r7, #4]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e009      	b.n	8001e30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	60ba      	str	r2, [r7, #8]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dbf1      	blt.n	8001e1c <_write+0x12>
  }
  return len;
 8001e38:	687b      	ldr	r3, [r7, #4]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_close>:

int _close(int file)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <_isatty>:

int _isatty(int file)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <_sbrk+0x5c>)
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <_sbrk+0x60>)
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <_sbrk+0x64>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <_sbrk+0x68>)
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d207      	bcs.n	8001eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001edc:	f00a fed4 	bl	800cc88 <__errno>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e009      	b.n	8001f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <_sbrk+0x64>)
 8001efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20020000 	.word	0x20020000
 8001f0c:	00000400 	.word	0x00000400
 8001f10:	2000055c 	.word	0x2000055c
 8001f14:	200021c8 	.word	0x200021c8

08001f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <SystemInit+0x20>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <SystemInit+0x20>)
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <MX_USART1_UART_Init+0x50>)
 8001f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f62:	220c      	movs	r2, #12
 8001f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f74:	f006 faa0 	bl	80084b8 <HAL_UART_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f7e:	f7ff fe59 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000560 	.word	0x20000560
 8001f8c:	40011000 	.word	0x40011000

08001f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a19      	ldr	r2, [pc, #100]	; (8002014 <HAL_UART_MspInit+0x84>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d12c      	bne.n	800200c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <HAL_UART_MspInit+0x88>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a17      	ldr	r2, [pc, #92]	; (8002018 <HAL_UART_MspInit+0x88>)
 8001fbc:	f043 0310 	orr.w	r3, r3, #16
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <HAL_UART_MspInit+0x88>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_UART_MspInit+0x88>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <HAL_UART_MspInit+0x88>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_UART_MspInit+0x88>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ffc:	2307      	movs	r3, #7
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	4619      	mov	r1, r3
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <HAL_UART_MspInit+0x8c>)
 8002008:	f001 faae 	bl	8003568 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800200c:	bf00      	nop
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40011000 	.word	0x40011000
 8002018:	40023800 	.word	0x40023800
 800201c:	40020000 	.word	0x40020000

08002020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002058 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002024:	480d      	ldr	r0, [pc, #52]	; (800205c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002026:	490e      	ldr	r1, [pc, #56]	; (8002060 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002028:	4a0e      	ldr	r2, [pc, #56]	; (8002064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800202c:	e002      	b.n	8002034 <LoopCopyDataInit>

0800202e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002032:	3304      	adds	r3, #4

08002034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002038:	d3f9      	bcc.n	800202e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800203c:	4c0b      	ldr	r4, [pc, #44]	; (800206c <LoopFillZerobss+0x26>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002040:	e001      	b.n	8002046 <LoopFillZerobss>

08002042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002044:	3204      	adds	r2, #4

08002046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002048:	d3fb      	bcc.n	8002042 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800204a:	f7ff ff65 	bl	8001f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204e:	f00a fe21 	bl	800cc94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002052:	f7ff fd25 	bl	8001aa0 <main>
  bx  lr    
 8002056:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002058:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800205c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002060:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8002064:	080106f0 	.word	0x080106f0
  ldr r2, =_sbss
 8002068:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 800206c:	200021c4 	.word	0x200021c4

08002070 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <DMA1_Stream1_IRQHandler>
	...

08002074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_Init+0x40>)
 800207e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_Init+0x40>)
 800208a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_Init+0x40>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209c:	2003      	movs	r0, #3
 800209e:	f000 fe75 	bl	8002d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a2:	200f      	movs	r0, #15
 80020a4:	f000 f808 	bl	80020b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a8:	f7ff fdca 	bl	8001c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00

080020b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x54>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_InitTick+0x58>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fe8d 	bl	8002df6 <HAL_SYSTICK_Config>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00e      	b.n	8002104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b0f      	cmp	r3, #15
 80020ea:	d80a      	bhi.n	8002102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ec:	2200      	movs	r2, #0
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	f000 fe55 	bl	8002da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f8:	4a06      	ldr	r2, [pc, #24]	; (8002114 <HAL_InitTick+0x5c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	e000      	b.n	8002104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000010 	.word	0x20000010
 8002110:	20000018 	.word	0x20000018
 8002114:	20000014 	.word	0x20000014

08002118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x20>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_IncTick+0x24>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_IncTick+0x24>)
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000018 	.word	0x20000018
 800213c:	200005a4 	.word	0x200005a4

08002140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_GetTick+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	200005a4 	.word	0x200005a4

08002158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff ffee 	bl	8002140 <HAL_GetTick>
 8002164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d005      	beq.n	800217e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_Delay+0x44>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800217e:	bf00      	nop
 8002180:	f7ff ffde 	bl	8002140 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	429a      	cmp	r2, r3
 800218e:	d8f7      	bhi.n	8002180 <HAL_Delay+0x28>
  {
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000018 	.word	0x20000018

080021a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e033      	b.n	800221e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe ff70 	bl	80010a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d118      	bne.n	8002210 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021e6:	f023 0302 	bic.w	r3, r3, #2
 80021ea:	f043 0202 	orr.w	r2, r3, #2
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fb72 	bl	80028dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f023 0303 	bic.w	r3, r3, #3
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
 800220e:	e001      	b.n	8002214 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d049      	beq.n	80022f0 <HAL_ADC_IRQHandler+0xca>
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d046      	beq.n	80022f0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	d105      	bne.n	800227a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d12b      	bne.n	80022e0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800228c:	2b00      	cmp	r3, #0
 800228e:	d127      	bne.n	80022e0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d119      	bne.n	80022e0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0220 	bic.w	r2, r2, #32
 80022ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f9a1 	bl	8002628 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f06f 0212 	mvn.w	r2, #18
 80022ee:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d057      	beq.n	80023b6 <HAL_ADC_IRQHandler+0x190>
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d054      	beq.n	80023b6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d139      	bne.n	80023a6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002338:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800234a:	2b00      	cmp	r3, #0
 800234c:	d12b      	bne.n	80023a6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002358:	2b00      	cmp	r3, #0
 800235a:	d124      	bne.n	80023a6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11d      	bne.n	80023a6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800236e:	2b00      	cmp	r3, #0
 8002370:	d119      	bne.n	80023a6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002380:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d105      	bne.n	80023a6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fc16 	bl	8002bd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 020c 	mvn.w	r2, #12
 80023b4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d017      	beq.n	80023fc <HAL_ADC_IRQHandler+0x1d6>
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d014      	beq.n	80023fc <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d10d      	bne.n	80023fc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f92f 	bl	8002650 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f06f 0201 	mvn.w	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800240a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d015      	beq.n	800243e <HAL_ADC_IRQHandler+0x218>
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d012      	beq.n	800243e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	f043 0202 	orr.w	r2, r3, #2
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0220 	mvn.w	r2, #32
 800242c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f918 	bl	8002664 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0220 	mvn.w	r2, #32
 800243c:	601a      	str	r2, [r3, #0]
  }
}
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_ADC_Start_DMA+0x1e>
 8002462:	2302      	movs	r3, #2
 8002464:	e0ce      	b.n	8002604 <HAL_ADC_Start_DMA+0x1bc>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b01      	cmp	r3, #1
 800247a:	d018      	beq.n	80024ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800248c:	4b5f      	ldr	r3, [pc, #380]	; (800260c <HAL_ADC_Start_DMA+0x1c4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a5f      	ldr	r2, [pc, #380]	; (8002610 <HAL_ADC_Start_DMA+0x1c8>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9a      	lsrs	r2, r3, #18
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024a0:	e002      	b.n	80024a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f9      	bne.n	80024a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024bc:	d107      	bne.n	80024ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	f040 8086 	bne.w	80025ea <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002508:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251c:	d106      	bne.n	800252c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f023 0206 	bic.w	r2, r3, #6
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
 800252a:	e002      	b.n	8002532 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800253a:	4b36      	ldr	r3, [pc, #216]	; (8002614 <HAL_ADC_Start_DMA+0x1cc>)
 800253c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	4a35      	ldr	r2, [pc, #212]	; (8002618 <HAL_ADC_Start_DMA+0x1d0>)
 8002544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	4a34      	ldr	r2, [pc, #208]	; (800261c <HAL_ADC_Start_DMA+0x1d4>)
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002552:	4a33      	ldr	r2, [pc, #204]	; (8002620 <HAL_ADC_Start_DMA+0x1d8>)
 8002554:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800255e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800256e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800257e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	334c      	adds	r3, #76	; 0x4c
 800258a:	4619      	mov	r1, r3
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f000 fcec 	bl	8002f6c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10f      	bne.n	80025c0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d129      	bne.n	8002602 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	e020      	b.n	8002602 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a17      	ldr	r2, [pc, #92]	; (8002624 <HAL_ADC_Start_DMA+0x1dc>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d11b      	bne.n	8002602 <HAL_ADC_Start_DMA+0x1ba>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d114      	bne.n	8002602 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	e00b      	b.n	8002602 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f043 0210 	orr.w	r2, r3, #16
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f043 0201 	orr.w	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000010 	.word	0x20000010
 8002610:	431bde83 	.word	0x431bde83
 8002614:	40012300 	.word	0x40012300
 8002618:	08002ad5 	.word	0x08002ad5
 800261c:	08002b8f 	.word	0x08002b8f
 8002620:	08002bab 	.word	0x08002bab
 8002624:	40012000 	.word	0x40012000

08002628 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1c>
 8002690:	2302      	movs	r3, #2
 8002692:	e113      	b.n	80028bc <HAL_ADC_ConfigChannel+0x244>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b09      	cmp	r3, #9
 80026a2:	d925      	bls.n	80026f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68d9      	ldr	r1, [r3, #12]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	3b1e      	subs	r3, #30
 80026ba:	2207      	movs	r2, #7
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43da      	mvns	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	400a      	ands	r2, r1
 80026c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68d9      	ldr	r1, [r3, #12]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	4603      	mov	r3, r0
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4403      	add	r3, r0
 80026e2:	3b1e      	subs	r3, #30
 80026e4:	409a      	lsls	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	e022      	b.n	8002736 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6919      	ldr	r1, [r3, #16]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	2207      	movs	r2, #7
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	400a      	ands	r2, r1
 8002712:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6919      	ldr	r1, [r3, #16]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	4603      	mov	r3, r0
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4403      	add	r3, r0
 800272c:	409a      	lsls	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b06      	cmp	r3, #6
 800273c:	d824      	bhi.n	8002788 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3b05      	subs	r3, #5
 8002750:	221f      	movs	r2, #31
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	400a      	ands	r2, r1
 800275e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	4618      	mov	r0, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	3b05      	subs	r3, #5
 800277a:	fa00 f203 	lsl.w	r2, r0, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	635a      	str	r2, [r3, #52]	; 0x34
 8002786:	e04c      	b.n	8002822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b0c      	cmp	r3, #12
 800278e:	d824      	bhi.n	80027da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	3b23      	subs	r3, #35	; 0x23
 80027a2:	221f      	movs	r2, #31
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43da      	mvns	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	400a      	ands	r2, r1
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	3b23      	subs	r3, #35	; 0x23
 80027cc:	fa00 f203 	lsl.w	r2, r0, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
 80027d8:	e023      	b.n	8002822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	3b41      	subs	r3, #65	; 0x41
 80027ec:	221f      	movs	r2, #31
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	400a      	ands	r2, r1
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	4618      	mov	r0, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	3b41      	subs	r3, #65	; 0x41
 8002816:	fa00 f203 	lsl.w	r2, r0, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <HAL_ADC_ConfigChannel+0x250>)
 8002824:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a28      	ldr	r2, [pc, #160]	; (80028cc <HAL_ADC_ConfigChannel+0x254>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d10f      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x1d8>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b12      	cmp	r3, #18
 8002836:	d10b      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_ADC_ConfigChannel+0x254>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d12b      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x23a>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <HAL_ADC_ConfigChannel+0x258>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d003      	beq.n	800286c <HAL_ADC_ConfigChannel+0x1f4>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b11      	cmp	r3, #17
 800286a:	d122      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <HAL_ADC_ConfigChannel+0x258>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d111      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_ADC_ConfigChannel+0x25c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <HAL_ADC_ConfigChannel+0x260>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	0c9a      	lsrs	r2, r3, #18
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028a4:	e002      	b.n	80028ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f9      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40012300 	.word	0x40012300
 80028cc:	40012000 	.word	0x40012000
 80028d0:	10000012 	.word	0x10000012
 80028d4:	20000010 	.word	0x20000010
 80028d8:	431bde83 	.word	0x431bde83

080028dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028e4:	4b79      	ldr	r3, [pc, #484]	; (8002acc <ADC_Init+0x1f0>)
 80028e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	021a      	lsls	r2, r3, #8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002934:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002956:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6899      	ldr	r1, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	4a58      	ldr	r2, [pc, #352]	; (8002ad0 <ADC_Init+0x1f4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d022      	beq.n	80029ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002982:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6899      	ldr	r1, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6899      	ldr	r1, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	e00f      	b.n	80029da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0202 	bic.w	r2, r2, #2
 80029e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	7e1b      	ldrb	r3, [r3, #24]
 80029f4:	005a      	lsls	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01b      	beq.n	8002a40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6859      	ldr	r1, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	3b01      	subs	r3, #1
 8002a34:	035a      	lsls	r2, r3, #13
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	e007      	b.n	8002a50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	051a      	lsls	r2, r3, #20
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6899      	ldr	r1, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a92:	025a      	lsls	r2, r3, #9
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6899      	ldr	r1, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	029a      	lsls	r2, r3, #10
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40012300 	.word	0x40012300
 8002ad0:	0f000001 	.word	0x0f000001

08002ad4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d13c      	bne.n	8002b68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d12b      	bne.n	8002b60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d127      	bne.n	8002b60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d006      	beq.n	8002b2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d119      	bne.n	8002b60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0220 	bic.w	r2, r2, #32
 8002b3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f7ff fd61 	bl	8002628 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b66:	e00e      	b.n	8002b86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7ff fd75 	bl	8002664 <HAL_ADC_ErrorCallback>
}
 8002b7a:	e004      	b.n	8002b86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	4798      	blx	r3
}
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f7ff fd4d 	bl	800263c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2240      	movs	r2, #64	; 0x40
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f043 0204 	orr.w	r2, r3, #4
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f7ff fd4a 	bl	8002664 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1e:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	60d3      	str	r3, [r2, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <__NVIC_GetPriorityGrouping+0x18>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	0a1b      	lsrs	r3, r3, #8
 8002c3e:	f003 0307 	and.w	r3, r3, #7
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	db0b      	blt.n	8002c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	f003 021f 	and.w	r2, r3, #31
 8002c68:	4907      	ldr	r1, [pc, #28]	; (8002c88 <__NVIC_EnableIRQ+0x38>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2001      	movs	r0, #1
 8002c72:	fa00 f202 	lsl.w	r2, r0, r2
 8002c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000e100 	.word	0xe000e100

08002c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	6039      	str	r1, [r7, #0]
 8002c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	db0a      	blt.n	8002cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	490c      	ldr	r1, [pc, #48]	; (8002cd8 <__NVIC_SetPriority+0x4c>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	0112      	lsls	r2, r2, #4
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	440b      	add	r3, r1
 8002cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb4:	e00a      	b.n	8002ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4908      	ldr	r1, [pc, #32]	; (8002cdc <__NVIC_SetPriority+0x50>)
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	3b04      	subs	r3, #4
 8002cc4:	0112      	lsls	r2, r2, #4
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	440b      	add	r3, r1
 8002cca:	761a      	strb	r2, [r3, #24]
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000e100 	.word	0xe000e100
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	; 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f1c3 0307 	rsb	r3, r3, #7
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	bf28      	it	cs
 8002cfe:	2304      	movcs	r3, #4
 8002d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3304      	adds	r3, #4
 8002d06:	2b06      	cmp	r3, #6
 8002d08:	d902      	bls.n	8002d10 <NVIC_EncodePriority+0x30>
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3b03      	subs	r3, #3
 8002d0e:	e000      	b.n	8002d12 <NVIC_EncodePriority+0x32>
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	f04f 32ff 	mov.w	r2, #4294967295
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	401a      	ands	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d28:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	43d9      	mvns	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	4313      	orrs	r3, r2
         );
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3724      	adds	r7, #36	; 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d58:	d301      	bcc.n	8002d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00f      	b.n	8002d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <SysTick_Config+0x40>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d66:	210f      	movs	r1, #15
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	f7ff ff8e 	bl	8002c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <SysTick_Config+0x40>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d76:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <SysTick_Config+0x40>)
 8002d78:	2207      	movs	r2, #7
 8002d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	e000e010 	.word	0xe000e010

08002d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ff29 	bl	8002bec <__NVIC_SetPriorityGrouping>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db4:	f7ff ff3e 	bl	8002c34 <__NVIC_GetPriorityGrouping>
 8002db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f7ff ff8e 	bl	8002ce0 <NVIC_EncodePriority>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff5d 	bl	8002c8c <__NVIC_SetPriority>
}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff31 	bl	8002c50 <__NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ffa2 	bl	8002d48 <SysTick_Config>
 8002e04:	4603      	mov	r3, r0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e1c:	f7ff f990 	bl	8002140 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e099      	b.n	8002f60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e4c:	e00f      	b.n	8002e6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e4e:	f7ff f977 	bl	8002140 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d908      	bls.n	8002e6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2203      	movs	r2, #3
 8002e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e078      	b.n	8002f60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e8      	bne.n	8002e4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <HAL_DMA_Init+0x158>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d107      	bne.n	8002ed8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f023 0307 	bic.w	r3, r3, #7
 8002eee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d117      	bne.n	8002f32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00e      	beq.n	8002f32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 faab 	bl	8003470 <DMA_CheckFifoParam>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2240      	movs	r2, #64	; 0x40
 8002f24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e016      	b.n	8002f60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fa62 	bl	8003404 <DMA_CalcBaseAndBitshift>
 8002f40:	4603      	mov	r3, r0
 8002f42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	223f      	movs	r2, #63	; 0x3f
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	f010803f 	.word	0xf010803f

08002f6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_DMA_Start_IT+0x26>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e040      	b.n	8003014 <HAL_DMA_Start_IT+0xa8>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d12f      	bne.n	8003006 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f9f4 	bl	80033a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc4:	223f      	movs	r2, #63	; 0x3f
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0216 	orr.w	r2, r2, #22
 8002fda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0208 	orr.w	r2, r2, #8
 8002ff2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e005      	b.n	8003012 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800300e:	2302      	movs	r3, #2
 8003010:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003012:	7dfb      	ldrb	r3, [r7, #23]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d004      	beq.n	800303a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e00c      	b.n	8003054 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2205      	movs	r2, #5
 800303e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800306c:	4b8e      	ldr	r3, [pc, #568]	; (80032a8 <HAL_DMA_IRQHandler+0x248>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a8e      	ldr	r2, [pc, #568]	; (80032ac <HAL_DMA_IRQHandler+0x24c>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0a9b      	lsrs	r3, r3, #10
 8003078:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	2208      	movs	r2, #8
 800308c:	409a      	lsls	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01a      	beq.n	80030cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0204 	bic.w	r2, r2, #4
 80030b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	2208      	movs	r2, #8
 80030ba:	409a      	lsls	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	2201      	movs	r2, #1
 80030d2:	409a      	lsls	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d012      	beq.n	8003102 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	2201      	movs	r2, #1
 80030f0:	409a      	lsls	r2, r3
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	f043 0202 	orr.w	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	2204      	movs	r2, #4
 8003108:	409a      	lsls	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d012      	beq.n	8003138 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003124:	2204      	movs	r2, #4
 8003126:	409a      	lsls	r2, r3
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	f043 0204 	orr.w	r2, r3, #4
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	2210      	movs	r2, #16
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d043      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d03c      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	2210      	movs	r2, #16
 800315c:	409a      	lsls	r2, r3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d018      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d108      	bne.n	8003190 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d024      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4798      	blx	r3
 800318e:	e01f      	b.n	80031d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01b      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
 80031a0:	e016      	b.n	80031d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d107      	bne.n	80031c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0208 	bic.w	r2, r2, #8
 80031be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d4:	2220      	movs	r2, #32
 80031d6:	409a      	lsls	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 808f 	beq.w	8003300 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8087 	beq.w	8003300 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	2220      	movs	r2, #32
 80031f8:	409a      	lsls	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b05      	cmp	r3, #5
 8003208:	d136      	bne.n	8003278 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0216 	bic.w	r2, r2, #22
 8003218:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003228:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <HAL_DMA_IRQHandler+0x1da>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003236:	2b00      	cmp	r3, #0
 8003238:	d007      	beq.n	800324a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0208 	bic.w	r2, r2, #8
 8003248:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	223f      	movs	r2, #63	; 0x3f
 8003250:	409a      	lsls	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326a:	2b00      	cmp	r3, #0
 800326c:	d07e      	beq.n	800336c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	4798      	blx	r3
        }
        return;
 8003276:	e079      	b.n	800336c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01d      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10d      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	2b00      	cmp	r3, #0
 800329a:	d031      	beq.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4798      	blx	r3
 80032a4:	e02c      	b.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
 80032a6:	bf00      	nop
 80032a8:	20000010 	.word	0x20000010
 80032ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d023      	beq.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
 80032c0:	e01e      	b.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10f      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0210 	bic.w	r2, r2, #16
 80032de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	2b00      	cmp	r3, #0
 8003306:	d032      	beq.n	800336e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d022      	beq.n	800335a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2205      	movs	r2, #5
 8003318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	3301      	adds	r3, #1
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	429a      	cmp	r2, r3
 8003336:	d307      	bcc.n	8003348 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f2      	bne.n	800332c <HAL_DMA_IRQHandler+0x2cc>
 8003346:	e000      	b.n	800334a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003348:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
 800336a:	e000      	b.n	800336e <HAL_DMA_IRQHandler+0x30e>
        return;
 800336c:	bf00      	nop
    }
  }
}
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003382:	b2db      	uxtb	r3, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b40      	cmp	r3, #64	; 0x40
 80033d4:	d108      	bne.n	80033e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033e6:	e007      	b.n	80033f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	60da      	str	r2, [r3, #12]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	3b10      	subs	r3, #16
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <DMA_CalcBaseAndBitshift+0x64>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	091b      	lsrs	r3, r3, #4
 800341c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800341e:	4a13      	ldr	r2, [pc, #76]	; (800346c <DMA_CalcBaseAndBitshift+0x68>)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d909      	bls.n	8003446 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800343a:	f023 0303 	bic.w	r3, r3, #3
 800343e:	1d1a      	adds	r2, r3, #4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	659a      	str	r2, [r3, #88]	; 0x58
 8003444:	e007      	b.n	8003456 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800344e:	f023 0303 	bic.w	r3, r3, #3
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	aaaaaaab 	.word	0xaaaaaaab
 800346c:	08010288 	.word	0x08010288

08003470 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d11f      	bne.n	80034ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d856      	bhi.n	800353e <DMA_CheckFifoParam+0xce>
 8003490:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <DMA_CheckFifoParam+0x28>)
 8003492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003496:	bf00      	nop
 8003498:	080034a9 	.word	0x080034a9
 800349c:	080034bb 	.word	0x080034bb
 80034a0:	080034a9 	.word	0x080034a9
 80034a4:	0800353f 	.word	0x0800353f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d046      	beq.n	8003542 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b8:	e043      	b.n	8003542 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034c2:	d140      	bne.n	8003546 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c8:	e03d      	b.n	8003546 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d2:	d121      	bne.n	8003518 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d837      	bhi.n	800354a <DMA_CheckFifoParam+0xda>
 80034da:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <DMA_CheckFifoParam+0x70>)
 80034dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e0:	080034f1 	.word	0x080034f1
 80034e4:	080034f7 	.word	0x080034f7
 80034e8:	080034f1 	.word	0x080034f1
 80034ec:	08003509 	.word	0x08003509
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
      break;
 80034f4:	e030      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d025      	beq.n	800354e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003506:	e022      	b.n	800354e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003510:	d11f      	bne.n	8003552 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003516:	e01c      	b.n	8003552 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d903      	bls.n	8003526 <DMA_CheckFifoParam+0xb6>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d003      	beq.n	800352c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003524:	e018      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
      break;
 800352a:	e015      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00e      	beq.n	8003556 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      break;
 800353c:	e00b      	b.n	8003556 <DMA_CheckFifoParam+0xe6>
      break;
 800353e:	bf00      	nop
 8003540:	e00a      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      break;
 8003542:	bf00      	nop
 8003544:	e008      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      break;
 8003546:	bf00      	nop
 8003548:	e006      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      break;
 800354a:	bf00      	nop
 800354c:	e004      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      break;
 800354e:	bf00      	nop
 8003550:	e002      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      break;   
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <DMA_CheckFifoParam+0xe8>
      break;
 8003556:	bf00      	nop
    }
  } 
  
  return status; 
 8003558:	7bfb      	ldrb	r3, [r7, #15]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop

08003568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	; 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800357a:	2300      	movs	r3, #0
 800357c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	e159      	b.n	8003838 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003584:	2201      	movs	r2, #1
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	429a      	cmp	r2, r3
 800359e:	f040 8148 	bne.w	8003832 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d005      	beq.n	80035ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d130      	bne.n	800361c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	2203      	movs	r2, #3
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035f0:	2201      	movs	r2, #1
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 0201 	and.w	r2, r3, #1
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b03      	cmp	r3, #3
 8003626:	d017      	beq.n	8003658 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	2203      	movs	r2, #3
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d123      	bne.n	80036ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	08da      	lsrs	r2, r3, #3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3208      	adds	r2, #8
 800366c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	220f      	movs	r2, #15
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	08da      	lsrs	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3208      	adds	r2, #8
 80036a6:	69b9      	ldr	r1, [r7, #24]
 80036a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	2203      	movs	r2, #3
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0203 	and.w	r2, r3, #3
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80a2 	beq.w	8003832 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	4b57      	ldr	r3, [pc, #348]	; (8003850 <HAL_GPIO_Init+0x2e8>)
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	4a56      	ldr	r2, [pc, #344]	; (8003850 <HAL_GPIO_Init+0x2e8>)
 80036f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036fc:	6453      	str	r3, [r2, #68]	; 0x44
 80036fe:	4b54      	ldr	r3, [pc, #336]	; (8003850 <HAL_GPIO_Init+0x2e8>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800370a:	4a52      	ldr	r2, [pc, #328]	; (8003854 <HAL_GPIO_Init+0x2ec>)
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	089b      	lsrs	r3, r3, #2
 8003710:	3302      	adds	r3, #2
 8003712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	220f      	movs	r2, #15
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a49      	ldr	r2, [pc, #292]	; (8003858 <HAL_GPIO_Init+0x2f0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d019      	beq.n	800376a <HAL_GPIO_Init+0x202>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a48      	ldr	r2, [pc, #288]	; (800385c <HAL_GPIO_Init+0x2f4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <HAL_GPIO_Init+0x1fe>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a47      	ldr	r2, [pc, #284]	; (8003860 <HAL_GPIO_Init+0x2f8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00d      	beq.n	8003762 <HAL_GPIO_Init+0x1fa>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a46      	ldr	r2, [pc, #280]	; (8003864 <HAL_GPIO_Init+0x2fc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d007      	beq.n	800375e <HAL_GPIO_Init+0x1f6>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a45      	ldr	r2, [pc, #276]	; (8003868 <HAL_GPIO_Init+0x300>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_GPIO_Init+0x1f2>
 8003756:	2304      	movs	r3, #4
 8003758:	e008      	b.n	800376c <HAL_GPIO_Init+0x204>
 800375a:	2307      	movs	r3, #7
 800375c:	e006      	b.n	800376c <HAL_GPIO_Init+0x204>
 800375e:	2303      	movs	r3, #3
 8003760:	e004      	b.n	800376c <HAL_GPIO_Init+0x204>
 8003762:	2302      	movs	r3, #2
 8003764:	e002      	b.n	800376c <HAL_GPIO_Init+0x204>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_GPIO_Init+0x204>
 800376a:	2300      	movs	r3, #0
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	f002 0203 	and.w	r2, r2, #3
 8003772:	0092      	lsls	r2, r2, #2
 8003774:	4093      	lsls	r3, r2
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800377c:	4935      	ldr	r1, [pc, #212]	; (8003854 <HAL_GPIO_Init+0x2ec>)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	3302      	adds	r3, #2
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378a:	4b38      	ldr	r3, [pc, #224]	; (800386c <HAL_GPIO_Init+0x304>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ae:	4a2f      	ldr	r2, [pc, #188]	; (800386c <HAL_GPIO_Init+0x304>)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037b4:	4b2d      	ldr	r3, [pc, #180]	; (800386c <HAL_GPIO_Init+0x304>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037d8:	4a24      	ldr	r2, [pc, #144]	; (800386c <HAL_GPIO_Init+0x304>)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037de:	4b23      	ldr	r3, [pc, #140]	; (800386c <HAL_GPIO_Init+0x304>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003802:	4a1a      	ldr	r2, [pc, #104]	; (800386c <HAL_GPIO_Init+0x304>)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003808:	4b18      	ldr	r3, [pc, #96]	; (800386c <HAL_GPIO_Init+0x304>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800382c:	4a0f      	ldr	r2, [pc, #60]	; (800386c <HAL_GPIO_Init+0x304>)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3301      	adds	r3, #1
 8003836:	61fb      	str	r3, [r7, #28]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b0f      	cmp	r3, #15
 800383c:	f67f aea2 	bls.w	8003584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	3724      	adds	r7, #36	; 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800
 8003854:	40013800 	.word	0x40013800
 8003858:	40020000 	.word	0x40020000
 800385c:	40020400 	.word	0x40020400
 8003860:	40020800 	.word	0x40020800
 8003864:	40020c00 	.word	0x40020c00
 8003868:	40021000 	.word	0x40021000
 800386c:	40013c00 	.word	0x40013c00

08003870 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800387a:	4b08      	ldr	r3, [pc, #32]	; (800389c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	4013      	ands	r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d006      	beq.n	8003894 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003886:	4a05      	ldr	r2, [pc, #20]	; (800389c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe f954 	bl	8001b3c <HAL_GPIO_EXTI_Callback>
  }
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40013c00 	.word	0x40013c00

080038a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e12b      	b.n	8003b0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fd48 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2224      	movs	r2, #36	; 0x24
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003904:	f004 fdb0 	bl	8008468 <HAL_RCC_GetPCLK1Freq>
 8003908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4a81      	ldr	r2, [pc, #516]	; (8003b14 <HAL_I2C_Init+0x274>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d807      	bhi.n	8003924 <HAL_I2C_Init+0x84>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a80      	ldr	r2, [pc, #512]	; (8003b18 <HAL_I2C_Init+0x278>)
 8003918:	4293      	cmp	r3, r2
 800391a:	bf94      	ite	ls
 800391c:	2301      	movls	r3, #1
 800391e:	2300      	movhi	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e006      	b.n	8003932 <HAL_I2C_Init+0x92>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a7d      	ldr	r2, [pc, #500]	; (8003b1c <HAL_I2C_Init+0x27c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	bf94      	ite	ls
 800392c:	2301      	movls	r3, #1
 800392e:	2300      	movhi	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e0e7      	b.n	8003b0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4a78      	ldr	r2, [pc, #480]	; (8003b20 <HAL_I2C_Init+0x280>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	0c9b      	lsrs	r3, r3, #18
 8003944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4a6a      	ldr	r2, [pc, #424]	; (8003b14 <HAL_I2C_Init+0x274>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d802      	bhi.n	8003974 <HAL_I2C_Init+0xd4>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	3301      	adds	r3, #1
 8003972:	e009      	b.n	8003988 <HAL_I2C_Init+0xe8>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	4a69      	ldr	r2, [pc, #420]	; (8003b24 <HAL_I2C_Init+0x284>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	099b      	lsrs	r3, r3, #6
 8003986:	3301      	adds	r3, #1
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	430b      	orrs	r3, r1
 800398e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800399a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	495c      	ldr	r1, [pc, #368]	; (8003b14 <HAL_I2C_Init+0x274>)
 80039a4:	428b      	cmp	r3, r1
 80039a6:	d819      	bhi.n	80039dc <HAL_I2C_Init+0x13c>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1e59      	subs	r1, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039b6:	1c59      	adds	r1, r3, #1
 80039b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039bc:	400b      	ands	r3, r1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_I2C_Init+0x138>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1e59      	subs	r1, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d0:	3301      	adds	r3, #1
 80039d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d6:	e051      	b.n	8003a7c <HAL_I2C_Init+0x1dc>
 80039d8:	2304      	movs	r3, #4
 80039da:	e04f      	b.n	8003a7c <HAL_I2C_Init+0x1dc>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d111      	bne.n	8003a08 <HAL_I2C_Init+0x168>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1e58      	subs	r0, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	440b      	add	r3, r1
 80039f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f6:	3301      	adds	r3, #1
 80039f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bf0c      	ite	eq
 8003a00:	2301      	moveq	r3, #1
 8003a02:	2300      	movne	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	e012      	b.n	8003a2e <HAL_I2C_Init+0x18e>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e58      	subs	r0, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	0099      	lsls	r1, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_I2C_Init+0x196>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e022      	b.n	8003a7c <HAL_I2C_Init+0x1dc>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10e      	bne.n	8003a5c <HAL_I2C_Init+0x1bc>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1e58      	subs	r0, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6859      	ldr	r1, [r3, #4]
 8003a46:	460b      	mov	r3, r1
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	440b      	add	r3, r1
 8003a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a50:	3301      	adds	r3, #1
 8003a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a5a:	e00f      	b.n	8003a7c <HAL_I2C_Init+0x1dc>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1e58      	subs	r0, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	0099      	lsls	r1, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	6809      	ldr	r1, [r1, #0]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6911      	ldr	r1, [r2, #16]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68d2      	ldr	r2, [r2, #12]
 8003ab6:	4311      	orrs	r1, r2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	000186a0 	.word	0x000186a0
 8003b18:	001e847f 	.word	0x001e847f
 8003b1c:	003d08ff 	.word	0x003d08ff
 8003b20:	431bde83 	.word	0x431bde83
 8003b24:	10624dd3 	.word	0x10624dd3

08003b28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	4608      	mov	r0, r1
 8003b32:	4611      	mov	r1, r2
 8003b34:	461a      	mov	r2, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	817b      	strh	r3, [r7, #10]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	813b      	strh	r3, [r7, #8]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b42:	f7fe fafd 	bl	8002140 <HAL_GetTick>
 8003b46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	f040 80d9 	bne.w	8003d08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	2319      	movs	r3, #25
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	496d      	ldr	r1, [pc, #436]	; (8003d14 <HAL_I2C_Mem_Write+0x1ec>)
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f002 fba9 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e0cc      	b.n	8003d0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_I2C_Mem_Write+0x56>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e0c5      	b.n	8003d0a <HAL_I2C_Mem_Write+0x1e2>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d007      	beq.n	8003ba4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2221      	movs	r2, #33	; 0x21
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2240      	movs	r2, #64	; 0x40
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a3a      	ldr	r2, [r7, #32]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a4d      	ldr	r2, [pc, #308]	; (8003d18 <HAL_I2C_Mem_Write+0x1f0>)
 8003be4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003be6:	88f8      	ldrh	r0, [r7, #6]
 8003be8:	893a      	ldrh	r2, [r7, #8]
 8003bea:	8979      	ldrh	r1, [r7, #10]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f002 f826 	bl	8005c48 <I2C_RequestMemoryWrite>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d052      	beq.n	8003ca8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e081      	b.n	8003d0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f002 fc2a 	bl	8006464 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00d      	beq.n	8003c32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d107      	bne.n	8003c2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e06b      	b.n	8003d0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	781a      	ldrb	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d11b      	bne.n	8003ca8 <HAL_I2C_Mem_Write+0x180>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d017      	beq.n	8003ca8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	781a      	ldrb	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1aa      	bne.n	8003c06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f002 fc16 	bl	80064e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00d      	beq.n	8003cdc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d107      	bne.n	8003cd8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e016      	b.n	8003d0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e000      	b.n	8003d0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
  }
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	00100002 	.word	0x00100002
 8003d18:	ffff0000 	.word	0xffff0000

08003d1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08c      	sub	sp, #48	; 0x30
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	4608      	mov	r0, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	817b      	strh	r3, [r7, #10]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	813b      	strh	r3, [r7, #8]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d36:	f7fe fa03 	bl	8002140 <HAL_GetTick>
 8003d3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	f040 8208 	bne.w	800415a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	2319      	movs	r3, #25
 8003d50:	2201      	movs	r2, #1
 8003d52:	497b      	ldr	r1, [pc, #492]	; (8003f40 <HAL_I2C_Mem_Read+0x224>)
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f002 faaf 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
 8003d62:	e1fb      	b.n	800415c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2C_Mem_Read+0x56>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e1f4      	b.n	800415c <HAL_I2C_Mem_Read+0x440>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d007      	beq.n	8003d98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2222      	movs	r2, #34	; 0x22
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2240      	movs	r2, #64	; 0x40
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a5b      	ldr	r2, [pc, #364]	; (8003f44 <HAL_I2C_Mem_Read+0x228>)
 8003dd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dda:	88f8      	ldrh	r0, [r7, #6]
 8003ddc:	893a      	ldrh	r2, [r7, #8]
 8003dde:	8979      	ldrh	r1, [r7, #10]
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	4603      	mov	r3, r0
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f001 ffc2 	bl	8005d74 <I2C_RequestMemoryRead>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e1b0      	b.n	800415c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d113      	bne.n	8003e2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e02:	2300      	movs	r3, #0
 8003e04:	623b      	str	r3, [r7, #32]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	623b      	str	r3, [r7, #32]
 8003e16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e184      	b.n	8004134 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d11b      	bne.n	8003e6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	e164      	b.n	8004134 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d11b      	bne.n	8003eaa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	e144      	b.n	8004134 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ec0:	e138      	b.n	8004134 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	f200 80f1 	bhi.w	80040ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d123      	bne.n	8003f1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f002 fb77 	bl	80065cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e139      	b.n	800415c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f1a:	e10b      	b.n	8004134 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d14e      	bne.n	8003fc2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	4906      	ldr	r1, [pc, #24]	; (8003f48 <HAL_I2C_Mem_Read+0x22c>)
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f002 f9c2 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d008      	beq.n	8003f4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e10e      	b.n	800415c <HAL_I2C_Mem_Read+0x440>
 8003f3e:	bf00      	nop
 8003f40:	00100002 	.word	0x00100002
 8003f44:	ffff0000 	.word	0xffff0000
 8003f48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fc0:	e0b8      	b.n	8004134 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	2200      	movs	r2, #0
 8003fca:	4966      	ldr	r1, [pc, #408]	; (8004164 <HAL_I2C_Mem_Read+0x448>)
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f002 f973 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0bf      	b.n	800415c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	2200      	movs	r2, #0
 8004026:	494f      	ldr	r1, [pc, #316]	; (8004164 <HAL_I2C_Mem_Read+0x448>)
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f002 f945 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e091      	b.n	800415c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040ac:	e042      	b.n	8004134 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f002 fa8a 	bl	80065cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e04c      	b.n	800415c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d118      	bne.n	8004134 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	2b00      	cmp	r3, #0
 800413a:	f47f aec2 	bne.w	8003ec2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e000      	b.n	800415c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800415a:	2302      	movs	r3, #2
  }
}
 800415c:	4618      	mov	r0, r3
 800415e:	3728      	adds	r7, #40	; 0x28
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	00010004 	.word	0x00010004

08004168 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	; 0x30
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	4608      	mov	r0, r1
 8004172:	4611      	mov	r1, r2
 8004174:	461a      	mov	r2, r3
 8004176:	4603      	mov	r3, r0
 8004178:	817b      	strh	r3, [r7, #10]
 800417a:	460b      	mov	r3, r1
 800417c:	813b      	strh	r3, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004182:	f7fd ffdd 	bl	8002140 <HAL_GetTick>
 8004186:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b20      	cmp	r3, #32
 8004196:	f040 8176 	bne.w	8004486 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800419a:	4b95      	ldr	r3, [pc, #596]	; (80043f0 <HAL_I2C_Mem_Read_DMA+0x288>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	08db      	lsrs	r3, r3, #3
 80041a0:	4a94      	ldr	r2, [pc, #592]	; (80043f4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	0a1a      	lsrs	r2, r3, #8
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009a      	lsls	r2, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d116      	bne.n	80041ee <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f043 0220 	orr.w	r2, r3, #32
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e14c      	b.n	8004488 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d0db      	beq.n	80041b4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_I2C_Mem_Read_DMA+0xa2>
 8004206:	2302      	movs	r3, #2
 8004208:	e13e      	b.n	8004488 <HAL_I2C_Mem_Read_DMA+0x320>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d007      	beq.n	8004230 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800423e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2222      	movs	r2, #34	; 0x22
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2240      	movs	r2, #64	; 0x40
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800425a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004260:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a62      	ldr	r2, [pc, #392]	; (80043f8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004270:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004272:	897a      	ldrh	r2, [r7, #10]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004278:	893a      	ldrh	r2, [r7, #8]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80cc 	beq.w	800442c <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02d      	beq.n	80042f8 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	4a56      	ldr	r2, [pc, #344]	; (80043fc <HAL_I2C_Mem_Read_DMA+0x294>)
 80042a2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	4a55      	ldr	r2, [pc, #340]	; (8004400 <HAL_I2C_Mem_Read_DMA+0x298>)
 80042aa:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	2200      	movs	r2, #0
 80042b2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	2200      	movs	r2, #0
 80042ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	2200      	movs	r2, #0
 80042c2:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	2200      	movs	r2, #0
 80042ca:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3310      	adds	r3, #16
 80042d6:	4619      	mov	r1, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	461a      	mov	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e2:	f7fe fe43 	bl	8002f6c <HAL_DMA_Start_IT>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80042ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f040 8087 	bne.w	8004404 <HAL_I2C_Mem_Read_DMA+0x29c>
 80042f6:	e013      	b.n	8004320 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0b3      	b.n	8004488 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004320:	88f8      	ldrh	r0, [r7, #6]
 8004322:	893a      	ldrh	r2, [r7, #8]
 8004324:	8979      	ldrh	r1, [r7, #10]
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	2323      	movs	r3, #35	; 0x23
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	4603      	mov	r3, r0
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f001 fd1f 	bl	8005d74 <I2C_RequestMemoryRead>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d023      	beq.n	8004384 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	4618      	mov	r0, r3
 8004342:	f7fe fe6b 	bl	800301c <HAL_DMA_Abort_IT>
 8004346:	4603      	mov	r3, r0
 8004348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	2200      	movs	r2, #0
 8004352:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004362:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e081      	b.n	8004488 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004388:	2b01      	cmp	r3, #1
 800438a:	d108      	bne.n	800439e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	e007      	b.n	80043ae <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ae:	2300      	movs	r3, #0
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043da:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	e049      	b.n	8004482 <HAL_I2C_Mem_Read_DMA+0x31a>
 80043ee:	bf00      	nop
 80043f0:	20000010 	.word	0x20000010
 80043f4:	14f8b589 	.word	0x14f8b589
 80043f8:	ffff0000 	.word	0xffff0000
 80043fc:	08005f45 	.word	0x08005f45
 8004400:	080060ef 	.word	0x080060ef
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	f043 0210 	orr.w	r2, r3, #16
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e02d      	b.n	8004488 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800442c:	88f8      	ldrh	r0, [r7, #6]
 800442e:	893a      	ldrh	r2, [r7, #8]
 8004430:	8979      	ldrh	r1, [r7, #10]
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	2323      	movs	r3, #35	; 0x23
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	4603      	mov	r3, r0
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f001 fc99 	bl	8005d74 <I2C_RequestMemoryRead>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e01d      	b.n	8004488 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004470:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e000      	b.n	8004488 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8004486:	2302      	movs	r3, #2
  }
}
 8004488:	4618      	mov	r0, r3
 800448a:	3728      	adds	r7, #40	; 0x28
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d003      	beq.n	80044c8 <HAL_I2C_EV_IRQHandler+0x38>
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b40      	cmp	r3, #64	; 0x40
 80044c4:	f040 80c1 	bne.w	800464a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10d      	bne.n	80044fe <HAL_I2C_EV_IRQHandler+0x6e>
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80044e8:	d003      	beq.n	80044f2 <HAL_I2C_EV_IRQHandler+0x62>
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044f0:	d101      	bne.n	80044f6 <HAL_I2C_EV_IRQHandler+0x66>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <HAL_I2C_EV_IRQHandler+0x68>
 80044f6:	2300      	movs	r3, #0
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	f000 8132 	beq.w	8004762 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00c      	beq.n	8004522 <HAL_I2C_EV_IRQHandler+0x92>
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	0a5b      	lsrs	r3, r3, #9
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d006      	beq.n	8004522 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f002 f8de 	bl	80066d6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fd79 	bl	8005012 <I2C_Master_SB>
 8004520:	e092      	b.n	8004648 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	08db      	lsrs	r3, r3, #3
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <HAL_I2C_EV_IRQHandler+0xb2>
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	0a5b      	lsrs	r3, r3, #9
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fdef 	bl	800511e <I2C_Master_ADD10>
 8004540:	e082      	b.n	8004648 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	085b      	lsrs	r3, r3, #1
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HAL_I2C_EV_IRQHandler+0xd2>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	0a5b      	lsrs	r3, r3, #9
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fe09 	bl	8005172 <I2C_Master_ADDR>
 8004560:	e072      	b.n	8004648 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	089b      	lsrs	r3, r3, #2
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d03b      	beq.n	80045e6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457c:	f000 80f3 	beq.w	8004766 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	09db      	lsrs	r3, r3, #7
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00f      	beq.n	80045ac <HAL_I2C_EV_IRQHandler+0x11c>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	0a9b      	lsrs	r3, r3, #10
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d009      	beq.n	80045ac <HAL_I2C_EV_IRQHandler+0x11c>
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d103      	bne.n	80045ac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f9e9 	bl	800497c <I2C_MasterTransmit_TXE>
 80045aa:	e04d      	b.n	8004648 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	089b      	lsrs	r3, r3, #2
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80d6 	beq.w	8004766 <HAL_I2C_EV_IRQHandler+0x2d6>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	0a5b      	lsrs	r3, r3, #9
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80cf 	beq.w	8004766 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80045c8:	7bbb      	ldrb	r3, [r7, #14]
 80045ca:	2b21      	cmp	r3, #33	; 0x21
 80045cc:	d103      	bne.n	80045d6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa70 	bl	8004ab4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045d4:	e0c7      	b.n	8004766 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	f040 80c4 	bne.w	8004766 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fade 	bl	8004ba0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045e4:	e0bf      	b.n	8004766 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f4:	f000 80b7 	beq.w	8004766 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	099b      	lsrs	r3, r3, #6
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00f      	beq.n	8004624 <HAL_I2C_EV_IRQHandler+0x194>
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	0a9b      	lsrs	r3, r3, #10
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d009      	beq.n	8004624 <HAL_I2C_EV_IRQHandler+0x194>
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	089b      	lsrs	r3, r3, #2
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d103      	bne.n	8004624 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fb53 	bl	8004cc8 <I2C_MasterReceive_RXNE>
 8004622:	e011      	b.n	8004648 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	089b      	lsrs	r3, r3, #2
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 809a 	beq.w	8004766 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	0a5b      	lsrs	r3, r3, #9
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 8093 	beq.w	8004766 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fbfc 	bl	8004e3e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004646:	e08e      	b.n	8004766 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004648:	e08d      	b.n	8004766 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d004      	beq.n	800465c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	61fb      	str	r3, [r7, #28]
 800465a:	e007      	b.n	800466c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d012      	beq.n	800469e <HAL_I2C_EV_IRQHandler+0x20e>
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	0a5b      	lsrs	r3, r3, #9
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004694:	69b9      	ldr	r1, [r7, #24]
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 ffba 	bl	8005610 <I2C_Slave_ADDR>
 800469c:	e066      	b.n	800476c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_I2C_EV_IRQHandler+0x22e>
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	0a5b      	lsrs	r3, r3, #9
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fff4 	bl	80056a4 <I2C_Slave_STOPF>
 80046bc:	e056      	b.n	800476c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046be:	7bbb      	ldrb	r3, [r7, #14]
 80046c0:	2b21      	cmp	r3, #33	; 0x21
 80046c2:	d002      	beq.n	80046ca <HAL_I2C_EV_IRQHandler+0x23a>
 80046c4:	7bbb      	ldrb	r3, [r7, #14]
 80046c6:	2b29      	cmp	r3, #41	; 0x29
 80046c8:	d125      	bne.n	8004716 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	09db      	lsrs	r3, r3, #7
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00f      	beq.n	80046f6 <HAL_I2C_EV_IRQHandler+0x266>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	0a9b      	lsrs	r3, r3, #10
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_I2C_EV_IRQHandler+0x266>
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	089b      	lsrs	r3, r3, #2
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fed0 	bl	8005494 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046f4:	e039      	b.n	800476a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d033      	beq.n	800476a <HAL_I2C_EV_IRQHandler+0x2da>
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	0a5b      	lsrs	r3, r3, #9
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d02d      	beq.n	800476a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fefd 	bl	800550e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004714:	e029      	b.n	800476a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	099b      	lsrs	r3, r3, #6
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00f      	beq.n	8004742 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	0a9b      	lsrs	r3, r3, #10
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_I2C_EV_IRQHandler+0x2b2>
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 ff08 	bl	8005550 <I2C_SlaveReceive_RXNE>
 8004740:	e014      	b.n	800476c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00e      	beq.n	800476c <HAL_I2C_EV_IRQHandler+0x2dc>
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	0a5b      	lsrs	r3, r3, #9
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 ff36 	bl	80055cc <I2C_SlaveReceive_BTF>
 8004760:	e004      	b.n	800476c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004762:	bf00      	nop
 8004764:	e002      	b.n	800476c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800476a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800476c:	3720      	adds	r7, #32
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b08a      	sub	sp, #40	; 0x28
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800478a:	2300      	movs	r3, #0
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004794:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00e      	beq.n	80047c0 <HAL_I2C_ER_IRQHandler+0x4e>
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	0a1b      	lsrs	r3, r3, #8
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047be:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	0a5b      	lsrs	r3, r3, #9
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00e      	beq.n	80047ea <HAL_I2C_ER_IRQHandler+0x78>
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	f043 0302 	orr.w	r3, r3, #2
 80047de:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80047e8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	0a9b      	lsrs	r3, r3, #10
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d03f      	beq.n	8004876 <HAL_I2C_ER_IRQHandler+0x104>
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d039      	beq.n	8004876 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004802:	7efb      	ldrb	r3, [r7, #27]
 8004804:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800481c:	7ebb      	ldrb	r3, [r7, #26]
 800481e:	2b20      	cmp	r3, #32
 8004820:	d112      	bne.n	8004848 <HAL_I2C_ER_IRQHandler+0xd6>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10f      	bne.n	8004848 <HAL_I2C_ER_IRQHandler+0xd6>
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	2b21      	cmp	r3, #33	; 0x21
 800482c:	d008      	beq.n	8004840 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800482e:	7cfb      	ldrb	r3, [r7, #19]
 8004830:	2b29      	cmp	r3, #41	; 0x29
 8004832:	d005      	beq.n	8004840 <HAL_I2C_ER_IRQHandler+0xce>
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	2b28      	cmp	r3, #40	; 0x28
 8004838:	d106      	bne.n	8004848 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b21      	cmp	r3, #33	; 0x21
 800483e:	d103      	bne.n	8004848 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f001 f85f 	bl	8005904 <I2C_Slave_AF>
 8004846:	e016      	b.n	8004876 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004850:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	f043 0304 	orr.w	r3, r3, #4
 8004858:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800485a:	7efb      	ldrb	r3, [r7, #27]
 800485c:	2b10      	cmp	r3, #16
 800485e:	d002      	beq.n	8004866 <HAL_I2C_ER_IRQHandler+0xf4>
 8004860:	7efb      	ldrb	r3, [r7, #27]
 8004862:	2b40      	cmp	r3, #64	; 0x40
 8004864:	d107      	bne.n	8004876 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004874:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	0adb      	lsrs	r3, r3, #11
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00e      	beq.n	80048a0 <HAL_I2C_ER_IRQHandler+0x12e>
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	0a1b      	lsrs	r3, r3, #8
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	f043 0308 	orr.w	r3, r3, #8
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800489e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d008      	beq.n	80048b8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f001 f896 	bl	80059e4 <I2C_ITError>
  }
}
 80048b8:	bf00      	nop
 80048ba:	3728      	adds	r7, #40	; 0x28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	70fb      	strb	r3, [r7, #3]
 800491c:	4613      	mov	r3, r2
 800491e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004992:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d150      	bne.n	8004a44 <I2C_MasterTransmit_TXE+0xc8>
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	2b21      	cmp	r3, #33	; 0x21
 80049a6:	d14d      	bne.n	8004a44 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d01d      	beq.n	80049ea <I2C_MasterTransmit_TXE+0x6e>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d01a      	beq.n	80049ea <I2C_MasterTransmit_TXE+0x6e>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049ba:	d016      	beq.n	80049ea <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049ca:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2211      	movs	r2, #17
 80049d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff ff6c 	bl	80048c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049e8:	e060      	b.n	8004aac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049f8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a08:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d107      	bne.n	8004a34 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff ff87 	bl	8004940 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a32:	e03b      	b.n	8004aac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff ff3f 	bl	80048c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a42:	e033      	b.n	8004aac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
 8004a46:	2b21      	cmp	r3, #33	; 0x21
 8004a48:	d005      	beq.n	8004a56 <I2C_MasterTransmit_TXE+0xda>
 8004a4a:	7bbb      	ldrb	r3, [r7, #14]
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d12d      	bne.n	8004aac <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b22      	cmp	r3, #34	; 0x22
 8004a54:	d12a      	bne.n	8004aac <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d108      	bne.n	8004a72 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a70:	e01c      	b.n	8004aac <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b40      	cmp	r3, #64	; 0x40
 8004a7c:	d103      	bne.n	8004a86 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f88e 	bl	8004ba0 <I2C_MemoryTransmit_TXE_BTF>
}
 8004a84:	e012      	b.n	8004aac <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	781a      	ldrb	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004aaa:	e7ff      	b.n	8004aac <I2C_MasterTransmit_TXE+0x130>
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b21      	cmp	r3, #33	; 0x21
 8004acc:	d164      	bne.n	8004b98 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d012      	beq.n	8004afe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	781a      	ldrb	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004afc:	e04c      	b.n	8004b98 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d01d      	beq.n	8004b40 <I2C_MasterTransmit_BTF+0x8c>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d01a      	beq.n	8004b40 <I2C_MasterTransmit_BTF+0x8c>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b10:	d016      	beq.n	8004b40 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b20:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2211      	movs	r2, #17
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff fec1 	bl	80048c0 <HAL_I2C_MasterTxCpltCallback>
}
 8004b3e:	e02b      	b.n	8004b98 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b4e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b5e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d107      	bne.n	8004b8a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff fedc 	bl	8004940 <HAL_I2C_MemTxCpltCallback>
}
 8004b88:	e006      	b.n	8004b98 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fe94 	bl	80048c0 <HAL_I2C_MasterTxCpltCallback>
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d11d      	bne.n	8004bf4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10b      	bne.n	8004bd8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd0:	1c9a      	adds	r2, r3, #2
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004bd6:	e073      	b.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	121b      	asrs	r3, r3, #8
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bf2:	e065      	b.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d10b      	bne.n	8004c14 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c12:	e055      	b.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d151      	bne.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b22      	cmp	r3, #34	; 0x22
 8004c20:	d10d      	bne.n	8004c3e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c30:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c3c:	e040      	b.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d015      	beq.n	8004c74 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	2b21      	cmp	r3, #33	; 0x21
 8004c4c:	d112      	bne.n	8004c74 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	781a      	ldrb	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c72:	e025      	b.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d120      	bne.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	2b21      	cmp	r3, #33	; 0x21
 8004c82:	d11d      	bne.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c92:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff fe40 	bl	8004940 <HAL_I2C_MemTxCpltCallback>
}
 8004cc0:	bf00      	nop
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b22      	cmp	r3, #34	; 0x22
 8004cda:	f040 80ac 	bne.w	8004e36 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d921      	bls.n	8004d30 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	f040 808c 	bne.w	8004e36 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004d2e:	e082      	b.n	8004e36 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d075      	beq.n	8004e24 <I2C_MasterReceive_RXNE+0x15c>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d002      	beq.n	8004d44 <I2C_MasterReceive_RXNE+0x7c>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d16f      	bne.n	8004e24 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f001 fc0f 	bl	8006568 <I2C_WaitOnSTOPRequestThroughIT>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d142      	bne.n	8004dd6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d6e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b40      	cmp	r3, #64	; 0x40
 8004da8:	d10a      	bne.n	8004dc0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7fc feaf 	bl	8001b1c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dbe:	e03a      	b.n	8004e36 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2212      	movs	r2, #18
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fd80 	bl	80048d4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dd4:	e02f      	b.n	8004e36 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004de4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff fd99 	bl	8004954 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e22:	e008      	b.n	8004e36 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e32:	605a      	str	r2, [r3, #4]
}
 8004e34:	e7ff      	b.n	8004e36 <I2C_MasterReceive_RXNE+0x16e>
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d11b      	bne.n	8004e8e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e64:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e8c:	e0bd      	b.n	800500a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d129      	bne.n	8004eec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d00a      	beq.n	8004ec4 <I2C_MasterReceive_BTF+0x86>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d007      	beq.n	8004ec4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004eea:	e08e      	b.n	800500a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d176      	bne.n	8004fe4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d002      	beq.n	8004f02 <I2C_MasterReceive_BTF+0xc4>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b10      	cmp	r3, #16
 8004f00:	d108      	bne.n	8004f14 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e019      	b.n	8004f48 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d002      	beq.n	8004f20 <I2C_MasterReceive_BTF+0xe2>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d108      	bne.n	8004f32 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	e00a      	b.n	8004f48 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d007      	beq.n	8004f48 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f46:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fa2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d10a      	bne.n	8004fce <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fc fda8 	bl	8001b1c <HAL_I2C_MemRxCpltCallback>
}
 8004fcc:	e01d      	b.n	800500a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2212      	movs	r2, #18
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fc79 	bl	80048d4 <HAL_I2C_MasterRxCpltCallback>
}
 8004fe2:	e012      	b.n	800500a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b40      	cmp	r3, #64	; 0x40
 8005024:	d117      	bne.n	8005056 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005032:	b2db      	uxtb	r3, r3
 8005034:	461a      	mov	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800503e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005040:	e067      	b.n	8005112 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	b2da      	uxtb	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	611a      	str	r2, [r3, #16]
}
 8005054:	e05d      	b.n	8005112 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800505e:	d133      	bne.n	80050c8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b21      	cmp	r3, #33	; 0x21
 800506a:	d109      	bne.n	8005080 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005070:	b2db      	uxtb	r3, r3
 8005072:	461a      	mov	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800507c:	611a      	str	r2, [r3, #16]
 800507e:	e008      	b.n	8005092 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	b2da      	uxtb	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	2b00      	cmp	r3, #0
 8005098:	d004      	beq.n	80050a4 <I2C_Master_SB+0x92>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d108      	bne.n	80050b6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d032      	beq.n	8005112 <I2C_Master_SB+0x100>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d02d      	beq.n	8005112 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c4:	605a      	str	r2, [r3, #4]
}
 80050c6:	e024      	b.n	8005112 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10e      	bne.n	80050ee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	11db      	asrs	r3, r3, #7
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 0306 	and.w	r3, r3, #6
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f063 030f 	orn	r3, r3, #15
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	611a      	str	r2, [r3, #16]
}
 80050ec:	e011      	b.n	8005112 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d10d      	bne.n	8005112 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	11db      	asrs	r3, r3, #7
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f003 0306 	and.w	r3, r3, #6
 8005104:	b2db      	uxtb	r3, r3
 8005106:	f063 030e 	orn	r3, r3, #14
 800510a:	b2da      	uxtb	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	611a      	str	r2, [r3, #16]
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	b2da      	uxtb	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <I2C_Master_ADD10+0x26>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d108      	bne.n	8005156 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00c      	beq.n	8005166 <I2C_Master_ADD10+0x48>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005164:	605a      	str	r2, [r3, #4]
  }
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005172:	b480      	push	{r7}
 8005174:	b091      	sub	sp, #68	; 0x44
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005180:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b22      	cmp	r3, #34	; 0x22
 800519a:	f040 8169 	bne.w	8005470 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10f      	bne.n	80051c6 <I2C_Master_ADDR+0x54>
 80051a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80051aa:	2b40      	cmp	r3, #64	; 0x40
 80051ac:	d10b      	bne.n	80051c6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ae:	2300      	movs	r3, #0
 80051b0:	633b      	str	r3, [r7, #48]	; 0x30
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	633b      	str	r3, [r7, #48]	; 0x30
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	633b      	str	r3, [r7, #48]	; 0x30
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	e160      	b.n	8005488 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d11d      	bne.n	800520a <I2C_Master_ADDR+0x98>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051d6:	d118      	bne.n	800520a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d8:	2300      	movs	r3, #0
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	651a      	str	r2, [r3, #80]	; 0x50
 8005208:	e13e      	b.n	8005488 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d113      	bne.n	800523c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005214:	2300      	movs	r3, #0
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	e115      	b.n	8005468 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b01      	cmp	r3, #1
 8005244:	f040 808a 	bne.w	800535c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800524e:	d137      	bne.n	80052c0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800526a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800526e:	d113      	bne.n	8005298 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005280:	2300      	movs	r3, #0
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	e0e7      	b.n	8005468 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005298:	2300      	movs	r3, #0
 800529a:	623b      	str	r3, [r7, #32]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	623b      	str	r3, [r7, #32]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	623b      	str	r3, [r7, #32]
 80052ac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e0d3      	b.n	8005468 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d02e      	beq.n	8005324 <I2C_Master_ADDR+0x1b2>
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d02b      	beq.n	8005324 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80052cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ce:	2b12      	cmp	r3, #18
 80052d0:	d102      	bne.n	80052d8 <I2C_Master_ADDR+0x166>
 80052d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d125      	bne.n	8005324 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d00e      	beq.n	80052fc <I2C_Master_ADDR+0x18a>
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d00b      	beq.n	80052fc <I2C_Master_ADDR+0x18a>
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d008      	beq.n	80052fc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e007      	b.n	800530c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800530a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530c:	2300      	movs	r3, #0
 800530e:	61fb      	str	r3, [r7, #28]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	e0a1      	b.n	8005468 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005332:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005334:	2300      	movs	r3, #0
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e085      	b.n	8005468 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d14d      	bne.n	8005402 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	2b04      	cmp	r3, #4
 800536a:	d016      	beq.n	800539a <I2C_Master_ADDR+0x228>
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	2b02      	cmp	r3, #2
 8005370:	d013      	beq.n	800539a <I2C_Master_ADDR+0x228>
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	2b10      	cmp	r3, #16
 8005376:	d010      	beq.n	800539a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005386:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e007      	b.n	80053aa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053a8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b8:	d117      	bne.n	80053ea <I2C_Master_ADDR+0x278>
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053c0:	d00b      	beq.n	80053da <I2C_Master_ADDR+0x268>
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d008      	beq.n	80053da <I2C_Master_ADDR+0x268>
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d005      	beq.n	80053da <I2C_Master_ADDR+0x268>
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d002      	beq.n	80053da <I2C_Master_ADDR+0x268>
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d107      	bne.n	80053ea <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	e032      	b.n	8005468 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005410:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005420:	d117      	bne.n	8005452 <I2C_Master_ADDR+0x2e0>
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005428:	d00b      	beq.n	8005442 <I2C_Master_ADDR+0x2d0>
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	2b01      	cmp	r3, #1
 800542e:	d008      	beq.n	8005442 <I2C_Master_ADDR+0x2d0>
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	2b08      	cmp	r3, #8
 8005434:	d005      	beq.n	8005442 <I2C_Master_ADDR+0x2d0>
 8005436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005438:	2b10      	cmp	r3, #16
 800543a:	d002      	beq.n	8005442 <I2C_Master_ADDR+0x2d0>
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	2b20      	cmp	r3, #32
 8005440:	d107      	bne.n	8005452 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005450:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005452:	2300      	movs	r3, #0
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800546e:	e00b      	b.n	8005488 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
}
 8005486:	e7ff      	b.n	8005488 <I2C_Master_ADDR+0x316>
 8005488:	bf00      	nop
 800548a:	3744      	adds	r7, #68	; 0x44
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d02b      	beq.n	8005506 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	781a      	ldrb	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d114      	bne.n	8005506 <I2C_SlaveTransmit_TXE+0x72>
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	2b29      	cmp	r3, #41	; 0x29
 80054e0:	d111      	bne.n	8005506 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2221      	movs	r2, #33	; 0x21
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2228      	movs	r2, #40	; 0x28
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff f9f1 	bl	80048e8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d011      	beq.n	8005544 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	781a      	ldrb	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d02c      	beq.n	80055c4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d114      	bne.n	80055c4 <I2C_SlaveReceive_RXNE+0x74>
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	2b2a      	cmp	r3, #42	; 0x2a
 800559e:	d111      	bne.n	80055c4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2222      	movs	r2, #34	; 0x22
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2228      	movs	r2, #40	; 0x28
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff f99c 	bl	80048fc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d012      	beq.n	8005604 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800562a:	2b28      	cmp	r3, #40	; 0x28
 800562c:	d127      	bne.n	800567e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800563c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	089b      	lsrs	r3, r3, #2
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	09db      	lsrs	r3, r3, #7
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d103      	bne.n	8005662 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	81bb      	strh	r3, [r7, #12]
 8005660:	e002      	b.n	8005668 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005670:	89ba      	ldrh	r2, [r7, #12]
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	4619      	mov	r1, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff f94a 	bl	8004910 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800567c:	e00e      	b.n	800569c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567e:	2300      	movs	r3, #0
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80056c4:	2300      	movs	r3, #0
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	60bb      	str	r3, [r7, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005700:	d172      	bne.n	80057e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b22      	cmp	r3, #34	; 0x22
 8005706:	d002      	beq.n	800570e <I2C_Slave_STOPF+0x6a>
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b2a      	cmp	r3, #42	; 0x2a
 800570c:	d135      	bne.n	800577a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	b29a      	uxth	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f043 0204 	orr.w	r2, r3, #4
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005740:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	4618      	mov	r0, r3
 8005748:	f7fd fe14 	bl	8003374 <HAL_DMA_GetState>
 800574c:	4603      	mov	r3, r0
 800574e:	2b01      	cmp	r3, #1
 8005750:	d049      	beq.n	80057e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	4a69      	ldr	r2, [pc, #420]	; (80058fc <I2C_Slave_STOPF+0x258>)
 8005758:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	4618      	mov	r0, r3
 8005760:	f7fd fc5c 	bl	800301c <HAL_DMA_Abort_IT>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d03d      	beq.n	80057e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005774:	4610      	mov	r0, r2
 8005776:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005778:	e035      	b.n	80057e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	b29a      	uxth	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f043 0204 	orr.w	r2, r3, #4
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fd fdde 	bl	8003374 <HAL_DMA_GetState>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d014      	beq.n	80057e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c2:	4a4e      	ldr	r2, [pc, #312]	; (80058fc <I2C_Slave_STOPF+0x258>)
 80057c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fd fc26 	bl	800301c <HAL_DMA_Abort_IT>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d008      	beq.n	80057e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057e0:	4610      	mov	r0, r2
 80057e2:	4798      	blx	r3
 80057e4:	e000      	b.n	80057e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d03e      	beq.n	8005870 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d112      	bne.n	8005826 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d112      	bne.n	800585a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	f043 0204 	orr.w	r2, r3, #4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f8b3 	bl	80059e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800587e:	e039      	b.n	80058f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b2a      	cmp	r3, #42	; 0x2a
 8005884:	d109      	bne.n	800589a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2228      	movs	r2, #40	; 0x28
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff f831 	bl	80048fc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b28      	cmp	r3, #40	; 0x28
 80058a4:	d111      	bne.n	80058ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a15      	ldr	r2, [pc, #84]	; (8005900 <I2C_Slave_STOPF+0x25c>)
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff f832 	bl	800492c <HAL_I2C_ListenCpltCallback>
}
 80058c8:	e014      	b.n	80058f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	2b22      	cmp	r3, #34	; 0x22
 80058d0:	d002      	beq.n	80058d8 <I2C_Slave_STOPF+0x234>
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	2b22      	cmp	r3, #34	; 0x22
 80058d6:	d10d      	bne.n	80058f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff f804 	bl	80048fc <HAL_I2C_SlaveRxCpltCallback>
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	08006169 	.word	0x08006169
 8005900:	ffff0000 	.word	0xffff0000

08005904 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005912:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b08      	cmp	r3, #8
 800591e:	d002      	beq.n	8005926 <I2C_Slave_AF+0x22>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b20      	cmp	r3, #32
 8005924:	d129      	bne.n	800597a <I2C_Slave_AF+0x76>
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	2b28      	cmp	r3, #40	; 0x28
 800592a:	d126      	bne.n	800597a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a2c      	ldr	r2, [pc, #176]	; (80059e0 <I2C_Slave_AF+0xdc>)
 8005930:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005940:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800594a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fe ffda 	bl	800492c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005978:	e02e      	b.n	80059d8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	2b21      	cmp	r3, #33	; 0x21
 800597e:	d126      	bne.n	80059ce <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a17      	ldr	r2, [pc, #92]	; (80059e0 <I2C_Slave_AF+0xdc>)
 8005984:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2221      	movs	r2, #33	; 0x21
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059aa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059b4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fe ff8e 	bl	80048e8 <HAL_I2C_SlaveTxCpltCallback>
}
 80059cc:	e004      	b.n	80059d8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059d6:	615a      	str	r2, [r3, #20]
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	ffff0000 	.word	0xffff0000

080059e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059fc:	7bbb      	ldrb	r3, [r7, #14]
 80059fe:	2b10      	cmp	r3, #16
 8005a00:	d002      	beq.n	8005a08 <I2C_ITError+0x24>
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	2b40      	cmp	r3, #64	; 0x40
 8005a06:	d10a      	bne.n	8005a1e <I2C_ITError+0x3a>
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b22      	cmp	r3, #34	; 0x22
 8005a0c:	d107      	bne.n	8005a1e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a1c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a24:	2b28      	cmp	r3, #40	; 0x28
 8005a26:	d107      	bne.n	8005a38 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2228      	movs	r2, #40	; 0x28
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a36:	e015      	b.n	8005a64 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a46:	d00a      	beq.n	8005a5e <I2C_ITError+0x7a>
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	2b60      	cmp	r3, #96	; 0x60
 8005a4c:	d007      	beq.n	8005a5e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a72:	d162      	bne.n	8005b3a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a82:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d020      	beq.n	8005ad4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a96:	4a6a      	ldr	r2, [pc, #424]	; (8005c40 <I2C_ITError+0x25c>)
 8005a98:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fd fabc 	bl	800301c <HAL_DMA_Abort_IT>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 8089 	beq.w	8005bbe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0201 	bic.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ace:	4610      	mov	r0, r2
 8005ad0:	4798      	blx	r3
 8005ad2:	e074      	b.n	8005bbe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	4a59      	ldr	r2, [pc, #356]	; (8005c40 <I2C_ITError+0x25c>)
 8005ada:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fd fa9b 	bl	800301c <HAL_DMA_Abort_IT>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d068      	beq.n	8005bbe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b40      	cmp	r3, #64	; 0x40
 8005af8:	d10b      	bne.n	8005b12 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0201 	bic.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b34:	4610      	mov	r0, r2
 8005b36:	4798      	blx	r3
 8005b38:	e041      	b.n	8005bbe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b60      	cmp	r3, #96	; 0x60
 8005b44:	d125      	bne.n	8005b92 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5e:	2b40      	cmp	r3, #64	; 0x40
 8005b60:	d10b      	bne.n	8005b7a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0201 	bic.w	r2, r2, #1
 8005b88:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fe feec 	bl	8004968 <HAL_I2C_AbortCpltCallback>
 8005b90:	e015      	b.n	8005bbe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	d10b      	bne.n	8005bb8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fe fecb 	bl	8004954 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10e      	bne.n	8005bec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d109      	bne.n	8005bec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d104      	bne.n	8005bec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bfa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c02:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d113      	bne.n	8005c38 <I2C_ITError+0x254>
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b28      	cmp	r3, #40	; 0x28
 8005c14:	d110      	bne.n	8005c38 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a0a      	ldr	r2, [pc, #40]	; (8005c44 <I2C_ITError+0x260>)
 8005c1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fe fe7a 	bl	800492c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	08006169 	.word	0x08006169
 8005c44:	ffff0000 	.word	0xffff0000

08005c48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	4608      	mov	r0, r1
 8005c52:	4611      	mov	r1, r2
 8005c54:	461a      	mov	r2, r3
 8005c56:	4603      	mov	r3, r0
 8005c58:	817b      	strh	r3, [r7, #10]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	813b      	strh	r3, [r7, #8]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fb1a 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00d      	beq.n	8005ca6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c98:	d103      	bne.n	8005ca2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e05f      	b.n	8005d66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ca6:	897b      	ldrh	r3, [r7, #10]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	6a3a      	ldr	r2, [r7, #32]
 8005cba:	492d      	ldr	r1, [pc, #180]	; (8005d70 <I2C_RequestMemoryWrite+0x128>)
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 fb52 	bl	8006366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e04c      	b.n	8005d66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce4:	6a39      	ldr	r1, [r7, #32]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fbbc 	bl	8006464 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00d      	beq.n	8005d0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d107      	bne.n	8005d0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e02b      	b.n	8005d66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d0e:	88fb      	ldrh	r3, [r7, #6]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d105      	bne.n	8005d20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d14:	893b      	ldrh	r3, [r7, #8]
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	611a      	str	r2, [r3, #16]
 8005d1e:	e021      	b.n	8005d64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d20:	893b      	ldrh	r3, [r7, #8]
 8005d22:	0a1b      	lsrs	r3, r3, #8
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d30:	6a39      	ldr	r1, [r7, #32]
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fb96 	bl	8006464 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00d      	beq.n	8005d5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d107      	bne.n	8005d56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e005      	b.n	8005d66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d5a:	893b      	ldrh	r3, [r7, #8]
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	00010002 	.word	0x00010002

08005d74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	461a      	mov	r2, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	817b      	strh	r3, [r7, #10]
 8005d86:	460b      	mov	r3, r1
 8005d88:	813b      	strh	r3, [r7, #8]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fa7c 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00d      	beq.n	8005de2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd4:	d103      	bne.n	8005dde <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e0aa      	b.n	8005f38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005de2:	897b      	ldrh	r3, [r7, #10]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005df0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	6a3a      	ldr	r2, [r7, #32]
 8005df6:	4952      	ldr	r1, [pc, #328]	; (8005f40 <I2C_RequestMemoryRead+0x1cc>)
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fab4 	bl	8006366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e097      	b.n	8005f38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e20:	6a39      	ldr	r1, [r7, #32]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fb1e 	bl	8006464 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00d      	beq.n	8005e4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d107      	bne.n	8005e46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e076      	b.n	8005f38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d105      	bne.n	8005e5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e50:	893b      	ldrh	r3, [r7, #8]
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	611a      	str	r2, [r3, #16]
 8005e5a:	e021      	b.n	8005ea0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e5c:	893b      	ldrh	r3, [r7, #8]
 8005e5e:	0a1b      	lsrs	r3, r3, #8
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6c:	6a39      	ldr	r1, [r7, #32]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 faf8 	bl	8006464 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00d      	beq.n	8005e96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d107      	bne.n	8005e92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e050      	b.n	8005f38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e96:	893b      	ldrh	r3, [r7, #8]
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea2:	6a39      	ldr	r1, [r7, #32]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 fadd 	bl	8006464 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00d      	beq.n	8005ecc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d107      	bne.n	8005ec8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e035      	b.n	8005f38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f9e5 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00d      	beq.n	8005f10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f02:	d103      	bne.n	8005f0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e013      	b.n	8005f38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f10:	897b      	ldrh	r3, [r7, #10]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	6a3a      	ldr	r2, [r7, #32]
 8005f24:	4906      	ldr	r1, [pc, #24]	; (8005f40 <I2C_RequestMemoryRead+0x1cc>)
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fa1d 	bl	8006366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	00010002 	.word	0x00010002

08005f44 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f58:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f60:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f76:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f84:	2200      	movs	r2, #0
 8005f86:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	2200      	movs	r2, #0
 8005f96:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005f9e:	2b21      	cmp	r3, #33	; 0x21
 8005fa0:	d007      	beq.n	8005fb2 <I2C_DMAXferCplt+0x6e>
 8005fa2:	7cfb      	ldrb	r3, [r7, #19]
 8005fa4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005fa8:	2b22      	cmp	r3, #34	; 0x22
 8005faa:	d131      	bne.n	8006010 <I2C_DMAXferCplt+0xcc>
 8005fac:	7cbb      	ldrb	r3, [r7, #18]
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d12e      	bne.n	8006010 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fc0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005fc8:	7cfb      	ldrb	r3, [r7, #19]
 8005fca:	2b29      	cmp	r3, #41	; 0x29
 8005fcc:	d10a      	bne.n	8005fe4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2221      	movs	r2, #33	; 0x21
 8005fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2228      	movs	r2, #40	; 0x28
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fdc:	6978      	ldr	r0, [r7, #20]
 8005fde:	f7fe fc83 	bl	80048e8 <HAL_I2C_SlaveTxCpltCallback>
 8005fe2:	e00c      	b.n	8005ffe <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005fe4:	7cfb      	ldrb	r3, [r7, #19]
 8005fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe8:	d109      	bne.n	8005ffe <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2222      	movs	r2, #34	; 0x22
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2228      	movs	r2, #40	; 0x28
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ff8:	6978      	ldr	r0, [r7, #20]
 8005ffa:	f7fe fc7f 	bl	80048fc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800600c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800600e:	e06a      	b.n	80060e6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d064      	beq.n	80060e6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b01      	cmp	r3, #1
 8006024:	d107      	bne.n	8006036 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006034:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006044:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800604c:	d009      	beq.n	8006062 <I2C_DMAXferCplt+0x11e>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d006      	beq.n	8006062 <I2C_DMAXferCplt+0x11e>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800605a:	d002      	beq.n	8006062 <I2C_DMAXferCplt+0x11e>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b20      	cmp	r3, #32
 8006060:	d107      	bne.n	8006072 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006070:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006080:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006090:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2200      	movs	r2, #0
 8006096:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80060a0:	6978      	ldr	r0, [r7, #20]
 80060a2:	f7fe fc57 	bl	8004954 <HAL_I2C_ErrorCallback>
}
 80060a6:	e01e      	b.n	80060e6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	d10a      	bne.n	80060d2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2200      	movs	r2, #0
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80060ca:	6978      	ldr	r0, [r7, #20]
 80060cc:	f7fb fd26 	bl	8001b1c <HAL_I2C_MemRxCpltCallback>
}
 80060d0:	e009      	b.n	80060e6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2212      	movs	r2, #18
 80060de:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80060e0:	6978      	ldr	r0, [r7, #20]
 80060e2:	f7fe fbf7 	bl	80048d4 <HAL_I2C_MasterRxCpltCallback>
}
 80060e6:	bf00      	nop
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006108:	2200      	movs	r2, #0
 800610a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	2200      	movs	r2, #0
 800611a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fd f937 	bl	8003390 <HAL_DMA_GetError>
 8006122:	4603      	mov	r3, r0
 8006124:	2b02      	cmp	r3, #2
 8006126:	d01b      	beq.n	8006160 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006136:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f043 0210 	orr.w	r2, r3, #16
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7fe fbfa 	bl	8004954 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006180:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006182:	4b4b      	ldr	r3, [pc, #300]	; (80062b0 <I2C_DMAAbort+0x148>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	08db      	lsrs	r3, r3, #3
 8006188:	4a4a      	ldr	r2, [pc, #296]	; (80062b4 <I2C_DMAAbort+0x14c>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	0a1a      	lsrs	r2, r3, #8
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	00da      	lsls	r2, r3, #3
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80061ae:	e00a      	b.n	80061c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c4:	d0ea      	beq.n	800619c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d2:	2200      	movs	r2, #0
 80061d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	2200      	movs	r2, #0
 80061e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2200      	movs	r2, #0
 80061fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006208:	2200      	movs	r2, #0
 800620a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	2200      	movs	r2, #0
 800621a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b60      	cmp	r3, #96	; 0x60
 8006236:	d10e      	bne.n	8006256 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2200      	movs	r2, #0
 800624c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800624e:	6978      	ldr	r0, [r7, #20]
 8006250:	f7fe fb8a 	bl	8004968 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006254:	e027      	b.n	80062a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006256:	7cfb      	ldrb	r3, [r7, #19]
 8006258:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800625c:	2b28      	cmp	r3, #40	; 0x28
 800625e:	d117      	bne.n	8006290 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800627e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2200      	movs	r2, #0
 8006284:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2228      	movs	r2, #40	; 0x28
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800628e:	e007      	b.n	80062a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80062a0:	6978      	ldr	r0, [r7, #20]
 80062a2:	f7fe fb57 	bl	8004954 <HAL_I2C_ErrorCallback>
}
 80062a6:	bf00      	nop
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000010 	.word	0x20000010
 80062b4:	14f8b589 	.word	0x14f8b589

080062b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062c8:	e025      	b.n	8006316 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d021      	beq.n	8006316 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d2:	f7fb ff35 	bl	8002140 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d302      	bcc.n	80062e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d116      	bne.n	8006316 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f043 0220 	orr.w	r2, r3, #32
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e023      	b.n	800635e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	0c1b      	lsrs	r3, r3, #16
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	d10d      	bne.n	800633c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	43da      	mvns	r2, r3
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4013      	ands	r3, r2
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	bf0c      	ite	eq
 8006332:	2301      	moveq	r3, #1
 8006334:	2300      	movne	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	e00c      	b.n	8006356 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	43da      	mvns	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4013      	ands	r3, r2
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	bf0c      	ite	eq
 800634e:	2301      	moveq	r3, #1
 8006350:	2300      	movne	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	461a      	mov	r2, r3
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	429a      	cmp	r2, r3
 800635a:	d0b6      	beq.n	80062ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
 8006372:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006374:	e051      	b.n	800641a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006384:	d123      	bne.n	80063ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006394:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800639e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	f043 0204 	orr.w	r2, r3, #4
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e046      	b.n	800645c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d4:	d021      	beq.n	800641a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d6:	f7fb feb3 	bl	8002140 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d116      	bne.n	800641a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	f043 0220 	orr.w	r2, r3, #32
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e020      	b.n	800645c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	0c1b      	lsrs	r3, r3, #16
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b01      	cmp	r3, #1
 8006422:	d10c      	bne.n	800643e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	43da      	mvns	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4013      	ands	r3, r2
 8006430:	b29b      	uxth	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	bf14      	ite	ne
 8006436:	2301      	movne	r3, #1
 8006438:	2300      	moveq	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	e00b      	b.n	8006456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	43da      	mvns	r2, r3
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	4013      	ands	r3, r2
 800644a:	b29b      	uxth	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	bf14      	ite	ne
 8006450:	2301      	movne	r3, #1
 8006452:	2300      	moveq	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d18d      	bne.n	8006376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006470:	e02d      	b.n	80064ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f900 	bl	8006678 <I2C_IsAcknowledgeFailed>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e02d      	b.n	80064de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006488:	d021      	beq.n	80064ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800648a:	f7fb fe59 	bl	8002140 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	429a      	cmp	r2, r3
 8006498:	d302      	bcc.n	80064a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d116      	bne.n	80064ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	f043 0220 	orr.w	r2, r3, #32
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e007      	b.n	80064de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d8:	2b80      	cmp	r3, #128	; 0x80
 80064da:	d1ca      	bne.n	8006472 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064f2:	e02d      	b.n	8006550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f8bf 	bl	8006678 <I2C_IsAcknowledgeFailed>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e02d      	b.n	8006560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650a:	d021      	beq.n	8006550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800650c:	f7fb fe18 	bl	8002140 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	429a      	cmp	r2, r3
 800651a:	d302      	bcc.n	8006522 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d116      	bne.n	8006550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2220      	movs	r2, #32
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	f043 0220 	orr.w	r2, r3, #32
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e007      	b.n	8006560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b04      	cmp	r3, #4
 800655c:	d1ca      	bne.n	80064f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006574:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	08db      	lsrs	r3, r3, #3
 800657a:	4a13      	ldr	r2, [pc, #76]	; (80065c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800657c:	fba2 2303 	umull	r2, r3, r2, r3
 8006580:	0a1a      	lsrs	r2, r3, #8
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3b01      	subs	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d107      	bne.n	80065a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	f043 0220 	orr.w	r2, r3, #32
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e008      	b.n	80065b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b4:	d0e9      	beq.n	800658a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	20000010 	.word	0x20000010
 80065c8:	14f8b589 	.word	0x14f8b589

080065cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065d8:	e042      	b.n	8006660 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d119      	bne.n	800661c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0210 	mvn.w	r2, #16
 80065f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e029      	b.n	8006670 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661c:	f7fb fd90 	bl	8002140 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	429a      	cmp	r2, r3
 800662a:	d302      	bcc.n	8006632 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d116      	bne.n	8006660 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	f043 0220 	orr.w	r2, r3, #32
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e007      	b.n	8006670 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666a:	2b40      	cmp	r3, #64	; 0x40
 800666c:	d1b5      	bne.n	80065da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800668a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668e:	d11b      	bne.n	80066c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006698:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	f043 0204 	orr.w	r2, r3, #4
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80066e6:	d103      	bne.n	80066f0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80066ee:	e007      	b.n	8006700 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80066f8:	d102      	bne.n	8006700 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2208      	movs	r2, #8
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800670c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800670e:	b08f      	sub	sp, #60	; 0x3c
 8006710:	af0a      	add	r7, sp, #40	; 0x28
 8006712:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e10f      	b.n	800693e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d106      	bne.n	800673e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f005 ff9b 	bl	800c674 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2203      	movs	r2, #3
 8006742:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674e:	2b00      	cmp	r3, #0
 8006750:	d102      	bne.n	8006758 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4618      	mov	r0, r3
 800675e:	f002 fa82 	bl	8008c66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	687e      	ldr	r6, [r7, #4]
 800676a:	466d      	mov	r5, sp
 800676c:	f106 0410 	add.w	r4, r6, #16
 8006770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006778:	e894 0003 	ldmia.w	r4, {r0, r1}
 800677c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006780:	1d33      	adds	r3, r6, #4
 8006782:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006784:	6838      	ldr	r0, [r7, #0]
 8006786:	f002 f959 	bl	8008a3c <USB_CoreInit>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d005      	beq.n	800679c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e0d0      	b.n	800693e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2100      	movs	r1, #0
 80067a2:	4618      	mov	r0, r3
 80067a4:	f002 fa70 	bl	8008c88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067a8:	2300      	movs	r3, #0
 80067aa:	73fb      	strb	r3, [r7, #15]
 80067ac:	e04a      	b.n	8006844 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80067ae:	7bfa      	ldrb	r2, [r7, #15]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	333d      	adds	r3, #61	; 0x3d
 80067be:	2201      	movs	r2, #1
 80067c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80067c2:	7bfa      	ldrb	r2, [r7, #15]
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	333c      	adds	r3, #60	; 0x3c
 80067d2:	7bfa      	ldrb	r2, [r7, #15]
 80067d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80067d6:	7bfa      	ldrb	r2, [r7, #15]
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	b298      	uxth	r0, r3
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	4613      	mov	r3, r2
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	440b      	add	r3, r1
 80067e8:	3344      	adds	r3, #68	; 0x44
 80067ea:	4602      	mov	r2, r0
 80067ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80067ee:	7bfa      	ldrb	r2, [r7, #15]
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	3340      	adds	r3, #64	; 0x40
 80067fe:	2200      	movs	r2, #0
 8006800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006802:	7bfa      	ldrb	r2, [r7, #15]
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	3348      	adds	r3, #72	; 0x48
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006816:	7bfa      	ldrb	r2, [r7, #15]
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	334c      	adds	r3, #76	; 0x4c
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800682a:	7bfa      	ldrb	r2, [r7, #15]
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	3354      	adds	r3, #84	; 0x54
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	3301      	adds	r3, #1
 8006842:	73fb      	strb	r3, [r7, #15]
 8006844:	7bfa      	ldrb	r2, [r7, #15]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	429a      	cmp	r2, r3
 800684c:	d3af      	bcc.n	80067ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800684e:	2300      	movs	r3, #0
 8006850:	73fb      	strb	r3, [r7, #15]
 8006852:	e044      	b.n	80068de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006854:	7bfa      	ldrb	r2, [r7, #15]
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	4613      	mov	r3, r2
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	4413      	add	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006866:	2200      	movs	r2, #0
 8006868:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800686a:	7bfa      	ldrb	r2, [r7, #15]
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800687c:	7bfa      	ldrb	r2, [r7, #15]
 800687e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006880:	7bfa      	ldrb	r2, [r7, #15]
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	4613      	mov	r3, r2
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006892:	2200      	movs	r2, #0
 8006894:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006896:	7bfa      	ldrb	r2, [r7, #15]
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80068ac:	7bfa      	ldrb	r2, [r7, #15]
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4613      	mov	r3, r2
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	4413      	add	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80068c2:	7bfa      	ldrb	r2, [r7, #15]
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	3301      	adds	r3, #1
 80068dc:	73fb      	strb	r3, [r7, #15]
 80068de:	7bfa      	ldrb	r2, [r7, #15]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d3b5      	bcc.n	8006854 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	603b      	str	r3, [r7, #0]
 80068ee:	687e      	ldr	r6, [r7, #4]
 80068f0:	466d      	mov	r5, sp
 80068f2:	f106 0410 	add.w	r4, r6, #16
 80068f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006902:	e885 0003 	stmia.w	r5, {r0, r1}
 8006906:	1d33      	adds	r3, r6, #4
 8006908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800690a:	6838      	ldr	r0, [r7, #0]
 800690c:	f002 fa08 	bl	8008d20 <USB_DevInit>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e00d      	b.n	800693e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4618      	mov	r0, r3
 8006938:	f003 fb57 	bl	8009fea <USB_DevDisconnect>

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006946 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <HAL_PCD_Start+0x1c>
 800695e:	2302      	movs	r3, #2
 8006960:	e020      	b.n	80069a4 <HAL_PCD_Start+0x5e>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696e:	2b01      	cmp	r3, #1
 8006970:	d109      	bne.n	8006986 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006976:	2b01      	cmp	r3, #1
 8006978:	d005      	beq.n	8006986 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f002 f95a 	bl	8008c44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4618      	mov	r0, r3
 8006996:	f003 fb07 	bl	8009fa8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80069ac:	b590      	push	{r4, r7, lr}
 80069ae:	b08d      	sub	sp, #52	; 0x34
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f003 fbc5 	bl	800a152 <USB_GetMode>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f040 848a 	bne.w	80072e4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f003 fb29 	bl	800a02c <USB_ReadInterrupts>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8480 	beq.w	80072e2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	0a1b      	lsrs	r3, r3, #8
 80069ec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f003 fb16 	bl	800a02c <USB_ReadInterrupts>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d107      	bne.n	8006a1a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	695a      	ldr	r2, [r3, #20]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f002 0202 	and.w	r2, r2, #2
 8006a18:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f003 fb04 	bl	800a02c <USB_ReadInterrupts>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f003 0310 	and.w	r3, r3, #16
 8006a2a:	2b10      	cmp	r3, #16
 8006a2c:	d161      	bne.n	8006af2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	699a      	ldr	r2, [r3, #24]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0210 	bic.w	r2, r2, #16
 8006a3c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	f003 020f 	and.w	r2, r3, #15
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	4413      	add	r3, r2
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	0c5b      	lsrs	r3, r3, #17
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d124      	bne.n	8006ab4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d035      	beq.n	8006ae2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	091b      	lsrs	r3, r3, #4
 8006a7e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	461a      	mov	r2, r3
 8006a88:	6a38      	ldr	r0, [r7, #32]
 8006a8a:	f003 f93b 	bl	8009d04 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	691a      	ldr	r2, [r3, #16]
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	091b      	lsrs	r3, r3, #4
 8006a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a9a:	441a      	add	r2, r3
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	6a1a      	ldr	r2, [r3, #32]
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	091b      	lsrs	r3, r3, #4
 8006aa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aac:	441a      	add	r2, r3
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	621a      	str	r2, [r3, #32]
 8006ab2:	e016      	b.n	8006ae2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	0c5b      	lsrs	r3, r3, #17
 8006ab8:	f003 030f 	and.w	r3, r3, #15
 8006abc:	2b06      	cmp	r3, #6
 8006abe:	d110      	bne.n	8006ae2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ac6:	2208      	movs	r2, #8
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6a38      	ldr	r0, [r7, #32]
 8006acc:	f003 f91a 	bl	8009d04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	6a1a      	ldr	r2, [r3, #32]
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	091b      	lsrs	r3, r3, #4
 8006ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006adc:	441a      	add	r2, r3
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699a      	ldr	r2, [r3, #24]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0210 	orr.w	r2, r2, #16
 8006af0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f003 fa98 	bl	800a02c <USB_ReadInterrupts>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b06:	f040 80a7 	bne.w	8006c58 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f003 fa9d 	bl	800a052 <USB_ReadDevAllOutEpInterrupt>
 8006b18:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006b1a:	e099      	b.n	8006c50 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 808e 	beq.w	8006c44 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	4611      	mov	r1, r2
 8006b32:	4618      	mov	r0, r3
 8006b34:	f003 fac1 	bl	800a0ba <USB_ReadDevOutEPInterrupt>
 8006b38:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00c      	beq.n	8006b5e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b50:	461a      	mov	r2, r3
 8006b52:	2301      	movs	r3, #1
 8006b54:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fec3 	bl	80078e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00c      	beq.n	8006b82 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b74:	461a      	mov	r2, r3
 8006b76:	2308      	movs	r3, #8
 8006b78:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006b7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 ff99 	bl	8007ab4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f003 0310 	and.w	r3, r3, #16
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d008      	beq.n	8006b9e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b98:	461a      	mov	r2, r3
 8006b9a:	2310      	movs	r3, #16
 8006b9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d030      	beq.n	8006c0a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb0:	2b80      	cmp	r3, #128	; 0x80
 8006bb2:	d109      	bne.n	8006bc8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	69fa      	ldr	r2, [r7, #28]
 8006bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bc6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bca:	4613      	mov	r3, r2
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	4413      	add	r3, r2
 8006bda:	3304      	adds	r3, #4
 8006bdc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	78db      	ldrb	r3, [r3, #3]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d108      	bne.n	8006bf8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2200      	movs	r2, #0
 8006bea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f005 fe3a 	bl	800c86c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c04:	461a      	mov	r2, r3
 8006c06:	2302      	movs	r3, #2
 8006c08:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d008      	beq.n	8006c26 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c20:	461a      	mov	r2, r3
 8006c22:	2320      	movs	r3, #32
 8006c24:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d009      	beq.n	8006c44 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c42:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	3301      	adds	r3, #1
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	085b      	lsrs	r3, r3, #1
 8006c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f47f af62 	bne.w	8006b1c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f003 f9e5 	bl	800a02c <USB_ReadInterrupts>
 8006c62:	4603      	mov	r3, r0
 8006c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c6c:	f040 80db 	bne.w	8006e26 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f003 fa06 	bl	800a086 <USB_ReadDevAllInEpInterrupt>
 8006c7a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006c80:	e0cd      	b.n	8006e1e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80c2 	beq.w	8006e12 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	4611      	mov	r1, r2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f003 fa2c 	bl	800a0f6 <USB_ReadDevInEPInterrupt>
 8006c9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d057      	beq.n	8006d5a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	f003 030f 	and.w	r3, r3, #15
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	69f9      	ldr	r1, [r7, #28]
 8006cc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cca:	4013      	ands	r3, r2
 8006ccc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cda:	461a      	mov	r2, r3
 8006cdc:	2301      	movs	r3, #1
 8006cde:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d132      	bne.n	8006d4e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cec:	4613      	mov	r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	440b      	add	r3, r1
 8006cf6:	334c      	adds	r3, #76	; 0x4c
 8006cf8:	6819      	ldr	r1, [r3, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfe:	4613      	mov	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4403      	add	r3, r0
 8006d08:	3348      	adds	r3, #72	; 0x48
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4419      	add	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d12:	4613      	mov	r3, r2
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4403      	add	r3, r0
 8006d1c:	334c      	adds	r3, #76	; 0x4c
 8006d1e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d113      	bne.n	8006d4e <HAL_PCD_IRQHandler+0x3a2>
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	3354      	adds	r3, #84	; 0x54
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d108      	bne.n	8006d4e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d46:	461a      	mov	r2, r3
 8006d48:	2101      	movs	r1, #1
 8006d4a:	f003 fa33 	bl	800a1b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f005 fd0e 	bl	800c776 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f003 0308 	and.w	r3, r3, #8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d008      	beq.n	8006d76 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d70:	461a      	mov	r2, r3
 8006d72:	2308      	movs	r3, #8
 8006d74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	2310      	movs	r3, #16
 8006d90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d008      	beq.n	8006dae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da8:	461a      	mov	r2, r3
 8006daa:	2340      	movs	r3, #64	; 0x40
 8006dac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d023      	beq.n	8006e00 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dba:	6a38      	ldr	r0, [r7, #32]
 8006dbc:	f002 f914 	bl	8008fe8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	3338      	adds	r3, #56	; 0x38
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	4413      	add	r3, r2
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	78db      	ldrb	r3, [r3, #3]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d108      	bne.n	8006dee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2200      	movs	r2, #0
 8006de0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f005 fd51 	bl	800c890 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fcdb 	bl	80077c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	3301      	adds	r3, #1
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	085b      	lsrs	r3, r3, #1
 8006e1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f47f af2e 	bne.w	8006c82 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f003 f8fe 	bl	800a02c <USB_ReadInterrupts>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e3a:	d122      	bne.n	8006e82 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d108      	bne.n	8006e6c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e62:	2100      	movs	r1, #0
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fec3 	bl	8007bf0 <HAL_PCDEx_LPM_Callback>
 8006e6a:	e002      	b.n	8006e72 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f005 fcef 	bl	800c850 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f003 f8d0 	bl	800a02c <USB_ReadInterrupts>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e96:	d112      	bne.n	8006ebe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d102      	bne.n	8006eae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f005 fcab 	bl	800c804 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	695a      	ldr	r2, [r3, #20]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006ebc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f003 f8b2 	bl	800a02c <USB_ReadInterrupts>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed2:	f040 80b7 	bne.w	8007044 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2110      	movs	r1, #16
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f002 f879 	bl	8008fe8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006efa:	e046      	b.n	8006f8a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f08:	461a      	mov	r2, r3
 8006f0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f0e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f20:	0151      	lsls	r1, r2, #5
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	440a      	add	r2, r1
 8006f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f42:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f74:	0151      	lsls	r1, r2, #5
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	440a      	add	r2, r1
 8006f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f82:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	3301      	adds	r3, #1
 8006f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d3b3      	bcc.n	8006efc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9a:	69db      	ldr	r3, [r3, #28]
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fa2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006fa6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d016      	beq.n	8006fde <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fba:	69fa      	ldr	r2, [r7, #28]
 8006fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc0:	f043 030b 	orr.w	r3, r3, #11
 8006fc4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd0:	69fa      	ldr	r2, [r7, #28]
 8006fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fd6:	f043 030b 	orr.w	r3, r3, #11
 8006fda:	6453      	str	r3, [r2, #68]	; 0x44
 8006fdc:	e015      	b.n	800700a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ff0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006ff4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007004:	f043 030b 	orr.w	r3, r3, #11
 8007008:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007018:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800701c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800702e:	461a      	mov	r2, r3
 8007030:	f003 f8c0 	bl	800a1b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695a      	ldr	r2, [r3, #20]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007042:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4618      	mov	r0, r3
 800704a:	f002 ffef 	bl	800a02c <USB_ReadInterrupts>
 800704e:	4603      	mov	r3, r0
 8007050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007058:	d124      	bne.n	80070a4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f003 f885 	bl	800a16e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f002 f83a 	bl	80090e2 <USB_GetDevSpeed>
 800706e:	4603      	mov	r3, r0
 8007070:	461a      	mov	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681c      	ldr	r4, [r3, #0]
 800707a:	f001 f9e9 	bl	8008450 <HAL_RCC_GetHCLKFreq>
 800707e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007084:	b2db      	uxtb	r3, r3
 8007086:	461a      	mov	r2, r3
 8007088:	4620      	mov	r0, r4
 800708a:	f001 fd39 	bl	8008b00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f005 fb99 	bl	800c7c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695a      	ldr	r2, [r3, #20]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80070a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f002 ffbf 	bl	800a02c <USB_ReadInterrupts>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f003 0308 	and.w	r3, r3, #8
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d10a      	bne.n	80070ce <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f005 fb76 	bl	800c7aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	695a      	ldr	r2, [r3, #20]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f002 0208 	and.w	r2, r2, #8
 80070cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f002 ffaa 	bl	800a02c <USB_ReadInterrupts>
 80070d8:	4603      	mov	r3, r0
 80070da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070de:	2b80      	cmp	r3, #128	; 0x80
 80070e0:	d122      	bne.n	8007128 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80070ee:	2301      	movs	r3, #1
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
 80070f2:	e014      	b.n	800711e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f8:	4613      	mov	r3, r2
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	440b      	add	r3, r1
 8007102:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d105      	bne.n	8007118 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	b2db      	uxtb	r3, r3
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fb27 	bl	8007766 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	3301      	adds	r3, #1
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007124:	429a      	cmp	r2, r3
 8007126:	d3e5      	bcc.n	80070f4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4618      	mov	r0, r3
 800712e:	f002 ff7d 	bl	800a02c <USB_ReadInterrupts>
 8007132:	4603      	mov	r3, r0
 8007134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800713c:	d13b      	bne.n	80071b6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800713e:	2301      	movs	r3, #1
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
 8007142:	e02b      	b.n	800719c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007158:	4613      	mov	r3, r2
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	3340      	adds	r3, #64	; 0x40
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d115      	bne.n	8007196 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800716a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800716c:	2b00      	cmp	r3, #0
 800716e:	da12      	bge.n	8007196 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007170:	6879      	ldr	r1, [r7, #4]
 8007172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007174:	4613      	mov	r3, r2
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	440b      	add	r3, r1
 800717e:	333f      	adds	r3, #63	; 0x3f
 8007180:	2201      	movs	r2, #1
 8007182:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	b2db      	uxtb	r3, r3
 8007188:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800718c:	b2db      	uxtb	r3, r3
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fae8 	bl	8007766 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	3301      	adds	r3, #1
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d3ce      	bcc.n	8007144 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	695a      	ldr	r2, [r3, #20]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80071b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f002 ff36 	bl	800a02c <USB_ReadInterrupts>
 80071c0:	4603      	mov	r3, r0
 80071c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071ca:	d155      	bne.n	8007278 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071cc:	2301      	movs	r3, #1
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
 80071d0:	e045      	b.n	800725e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e6:	4613      	mov	r3, r2
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	440b      	add	r3, r1
 80071f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d12e      	bne.n	8007258 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80071fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	da2b      	bge.n	8007258 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800720c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007210:	429a      	cmp	r2, r3
 8007212:	d121      	bne.n	8007258 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007218:	4613      	mov	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007226:	2201      	movs	r2, #1
 8007228:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007254:	6053      	str	r3, [r2, #4]
            break;
 8007256:	e007      	b.n	8007268 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	3301      	adds	r3, #1
 800725c:	627b      	str	r3, [r7, #36]	; 0x24
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007264:	429a      	cmp	r2, r3
 8007266:	d3b4      	bcc.n	80071d2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695a      	ldr	r2, [r3, #20]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007276:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4618      	mov	r0, r3
 800727e:	f002 fed5 	bl	800a02c <USB_ReadInterrupts>
 8007282:	4603      	mov	r3, r0
 8007284:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800728c:	d10a      	bne.n	80072a4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f005 fb10 	bl	800c8b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695a      	ldr	r2, [r3, #20]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80072a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f002 febf 	bl	800a02c <USB_ReadInterrupts>
 80072ae:	4603      	mov	r3, r0
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d115      	bne.n	80072e4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	f003 0304 	and.w	r3, r3, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f005 fb00 	bl	800c8d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6859      	ldr	r1, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	430a      	orrs	r2, r1
 80072de:	605a      	str	r2, [r3, #4]
 80072e0:	e000      	b.n	80072e4 <HAL_PCD_IRQHandler+0x938>
      return;
 80072e2:	bf00      	nop
    }
  }
}
 80072e4:	3734      	adds	r7, #52	; 0x34
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd90      	pop	{r4, r7, pc}

080072ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d101      	bne.n	8007304 <HAL_PCD_SetAddress+0x1a>
 8007300:	2302      	movs	r3, #2
 8007302:	e013      	b.n	800732c <HAL_PCD_SetAddress+0x42>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	78fa      	ldrb	r2, [r7, #3]
 8007310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	78fa      	ldrb	r2, [r7, #3]
 800731a:	4611      	mov	r1, r2
 800731c:	4618      	mov	r0, r3
 800731e:	f002 fe1d 	bl	8009f5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	4608      	mov	r0, r1
 800733e:	4611      	mov	r1, r2
 8007340:	461a      	mov	r2, r3
 8007342:	4603      	mov	r3, r0
 8007344:	70fb      	strb	r3, [r7, #3]
 8007346:	460b      	mov	r3, r1
 8007348:	803b      	strh	r3, [r7, #0]
 800734a:	4613      	mov	r3, r2
 800734c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007356:	2b00      	cmp	r3, #0
 8007358:	da0f      	bge.n	800737a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	f003 020f 	and.w	r2, r3, #15
 8007360:	4613      	mov	r3, r2
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	3338      	adds	r3, #56	; 0x38
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	4413      	add	r3, r2
 800736e:	3304      	adds	r3, #4
 8007370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	705a      	strb	r2, [r3, #1]
 8007378:	e00f      	b.n	800739a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	f003 020f 	and.w	r2, r3, #15
 8007380:	4613      	mov	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	4413      	add	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	4413      	add	r3, r2
 8007390:	3304      	adds	r3, #4
 8007392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	f003 030f 	and.w	r3, r3, #15
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80073a6:	883a      	ldrh	r2, [r7, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	78ba      	ldrb	r2, [r7, #2]
 80073b0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	785b      	ldrb	r3, [r3, #1]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d004      	beq.n	80073c4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80073c4:	78bb      	ldrb	r3, [r7, #2]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d102      	bne.n	80073d0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d101      	bne.n	80073de <HAL_PCD_EP_Open+0xaa>
 80073da:	2302      	movs	r3, #2
 80073dc:	e00e      	b.n	80073fc <HAL_PCD_EP_Open+0xc8>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68f9      	ldr	r1, [r7, #12]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f001 fe9d 	bl	800912c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80073fa:	7afb      	ldrb	r3, [r7, #11]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007414:	2b00      	cmp	r3, #0
 8007416:	da0f      	bge.n	8007438 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	f003 020f 	and.w	r2, r3, #15
 800741e:	4613      	mov	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	3338      	adds	r3, #56	; 0x38
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	4413      	add	r3, r2
 800742c:	3304      	adds	r3, #4
 800742e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2201      	movs	r2, #1
 8007434:	705a      	strb	r2, [r3, #1]
 8007436:	e00f      	b.n	8007458 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	f003 020f 	and.w	r2, r3, #15
 800743e:	4613      	mov	r3, r2
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	4413      	add	r3, r2
 800744e:	3304      	adds	r3, #4
 8007450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	b2da      	uxtb	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_PCD_EP_Close+0x6e>
 800746e:	2302      	movs	r3, #2
 8007470:	e00e      	b.n	8007490 <HAL_PCD_EP_Close+0x8c>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	4618      	mov	r0, r3
 8007482:	f001 fedb 	bl	800923c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	607a      	str	r2, [r7, #4]
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	460b      	mov	r3, r1
 80074a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074a8:	7afb      	ldrb	r3, [r7, #11]
 80074aa:	f003 020f 	and.w	r2, r3, #15
 80074ae:	4613      	mov	r3, r2
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	3304      	adds	r3, #4
 80074c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2200      	movs	r2, #0
 80074d2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2200      	movs	r2, #0
 80074d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074da:	7afb      	ldrb	r3, [r7, #11]
 80074dc:	f003 030f 	and.w	r3, r3, #15
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d102      	bne.n	80074f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80074f4:	7afb      	ldrb	r3, [r7, #11]
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6818      	ldr	r0, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	461a      	mov	r2, r3
 800750a:	6979      	ldr	r1, [r7, #20]
 800750c:	f002 f9ba 	bl	8009884 <USB_EP0StartXfer>
 8007510:	e008      	b.n	8007524 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	461a      	mov	r2, r3
 800751e:	6979      	ldr	r1, [r7, #20]
 8007520:	f001 ff68 	bl	80093f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	f003 020f 	and.w	r2, r3, #15
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	4613      	mov	r3, r2
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007550:	681b      	ldr	r3, [r3, #0]
}
 8007552:	4618      	mov	r0, r3
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b086      	sub	sp, #24
 8007562:	af00      	add	r7, sp, #0
 8007564:	60f8      	str	r0, [r7, #12]
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	603b      	str	r3, [r7, #0]
 800756a:	460b      	mov	r3, r1
 800756c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800756e:	7afb      	ldrb	r3, [r7, #11]
 8007570:	f003 020f 	and.w	r2, r3, #15
 8007574:	4613      	mov	r3, r2
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	3338      	adds	r3, #56	; 0x38
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4413      	add	r3, r2
 8007582:	3304      	adds	r3, #4
 8007584:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	2200      	movs	r2, #0
 8007596:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2201      	movs	r2, #1
 800759c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800759e:	7afb      	ldrb	r3, [r7, #11]
 80075a0:	f003 030f 	and.w	r3, r3, #15
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d102      	bne.n	80075b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075b8:	7afb      	ldrb	r3, [r7, #11]
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d109      	bne.n	80075d6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6818      	ldr	r0, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	6979      	ldr	r1, [r7, #20]
 80075d0:	f002 f958 	bl	8009884 <USB_EP0StartXfer>
 80075d4:	e008      	b.n	80075e8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	461a      	mov	r2, r3
 80075e2:	6979      	ldr	r1, [r7, #20]
 80075e4:	f001 ff06 	bl	80093f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	460b      	mov	r3, r1
 80075fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	f003 020f 	and.w	r2, r3, #15
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	429a      	cmp	r2, r3
 800760a:	d901      	bls.n	8007610 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e050      	b.n	80076b2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007614:	2b00      	cmp	r3, #0
 8007616:	da0f      	bge.n	8007638 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007618:	78fb      	ldrb	r3, [r7, #3]
 800761a:	f003 020f 	and.w	r2, r3, #15
 800761e:	4613      	mov	r3, r2
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	3338      	adds	r3, #56	; 0x38
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	4413      	add	r3, r2
 800762c:	3304      	adds	r3, #4
 800762e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	705a      	strb	r2, [r3, #1]
 8007636:	e00d      	b.n	8007654 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007638:	78fa      	ldrb	r2, [r7, #3]
 800763a:	4613      	mov	r3, r2
 800763c:	00db      	lsls	r3, r3, #3
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	4413      	add	r3, r2
 800764a:	3304      	adds	r3, #4
 800764c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2201      	movs	r2, #1
 8007658:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800765a:	78fb      	ldrb	r3, [r7, #3]
 800765c:	f003 030f 	and.w	r3, r3, #15
 8007660:	b2da      	uxtb	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800766c:	2b01      	cmp	r3, #1
 800766e:	d101      	bne.n	8007674 <HAL_PCD_EP_SetStall+0x82>
 8007670:	2302      	movs	r3, #2
 8007672:	e01e      	b.n	80076b2 <HAL_PCD_EP_SetStall+0xc0>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68f9      	ldr	r1, [r7, #12]
 8007682:	4618      	mov	r0, r3
 8007684:	f002 fb96 	bl	8009db4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10a      	bne.n	80076a8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	b2d9      	uxtb	r1, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80076a2:	461a      	mov	r2, r3
 80076a4:	f002 fd86 	bl	800a1b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	460b      	mov	r3, r1
 80076c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	f003 020f 	and.w	r2, r3, #15
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d901      	bls.n	80076d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e042      	b.n	800775e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	da0f      	bge.n	8007700 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	f003 020f 	and.w	r2, r3, #15
 80076e6:	4613      	mov	r3, r2
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	3338      	adds	r3, #56	; 0x38
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	4413      	add	r3, r2
 80076f4:	3304      	adds	r3, #4
 80076f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2201      	movs	r2, #1
 80076fc:	705a      	strb	r2, [r3, #1]
 80076fe:	e00f      	b.n	8007720 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	f003 020f 	and.w	r2, r3, #15
 8007706:	4613      	mov	r3, r2
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	4413      	add	r3, r2
 8007716:	3304      	adds	r3, #4
 8007718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007726:	78fb      	ldrb	r3, [r7, #3]
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	b2da      	uxtb	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_PCD_EP_ClrStall+0x86>
 800773c:	2302      	movs	r3, #2
 800773e:	e00e      	b.n	800775e <HAL_PCD_EP_ClrStall+0xa4>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68f9      	ldr	r1, [r7, #12]
 800774e:	4618      	mov	r0, r3
 8007750:	f002 fb9e 	bl	8009e90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	460b      	mov	r3, r1
 8007770:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007776:	2b00      	cmp	r3, #0
 8007778:	da0c      	bge.n	8007794 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	f003 020f 	and.w	r2, r3, #15
 8007780:	4613      	mov	r3, r2
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	4413      	add	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	3338      	adds	r3, #56	; 0x38
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	3304      	adds	r3, #4
 8007790:	60fb      	str	r3, [r7, #12]
 8007792:	e00c      	b.n	80077ae <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007794:	78fb      	ldrb	r3, [r7, #3]
 8007796:	f003 020f 	and.w	r2, r3, #15
 800779a:	4613      	mov	r3, r2
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	4413      	add	r3, r2
 80077aa:	3304      	adds	r3, #4
 80077ac:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68f9      	ldr	r1, [r7, #12]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f002 f9bd 	bl	8009b34 <USB_EPStopXfer>
 80077ba:	4603      	mov	r3, r0
 80077bc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80077be:	7afb      	ldrb	r3, [r7, #11]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	; 0x28
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	4613      	mov	r3, r2
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	3338      	adds	r3, #56	; 0x38
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	4413      	add	r3, r2
 80077ec:	3304      	adds	r3, #4
 80077ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a1a      	ldr	r2, [r3, #32]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d901      	bls.n	8007800 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e06c      	b.n	80078da <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	699a      	ldr	r2, [r3, #24]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	429a      	cmp	r2, r3
 8007814:	d902      	bls.n	800781c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	3303      	adds	r3, #3
 8007820:	089b      	lsrs	r3, r3, #2
 8007822:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007824:	e02b      	b.n	800787e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	429a      	cmp	r2, r3
 800783a:	d902      	bls.n	8007842 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	3303      	adds	r3, #3
 8007846:	089b      	lsrs	r3, r3, #2
 8007848:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6919      	ldr	r1, [r3, #16]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	b2da      	uxtb	r2, r3
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800785a:	b2db      	uxtb	r3, r3
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	4603      	mov	r3, r0
 8007860:	6978      	ldr	r0, [r7, #20]
 8007862:	f002 fa11 	bl	8009c88 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	691a      	ldr	r2, [r3, #16]
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	441a      	add	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6a1a      	ldr	r2, [r3, #32]
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	441a      	add	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	b29b      	uxth	r3, r3
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	429a      	cmp	r2, r3
 8007892:	d809      	bhi.n	80078a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a1a      	ldr	r2, [r3, #32]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800789c:	429a      	cmp	r2, r3
 800789e:	d203      	bcs.n	80078a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1be      	bne.n	8007826 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	699a      	ldr	r2, [r3, #24]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d811      	bhi.n	80078d8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	2201      	movs	r2, #1
 80078bc:	fa02 f303 	lsl.w	r3, r2, r3
 80078c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	43db      	mvns	r3, r3
 80078ce:	6939      	ldr	r1, [r7, #16]
 80078d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078d4:	4013      	ands	r3, r2
 80078d6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3720      	adds	r7, #32
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	333c      	adds	r3, #60	; 0x3c
 80078fc:	3304      	adds	r3, #4
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d17b      	bne.n	8007a12 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f003 0308 	and.w	r3, r3, #8
 8007920:	2b00      	cmp	r3, #0
 8007922:	d015      	beq.n	8007950 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	4a61      	ldr	r2, [pc, #388]	; (8007aac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	f240 80b9 	bls.w	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 80b3 	beq.w	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	461a      	mov	r2, r3
 8007948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800794c:	6093      	str	r3, [r2, #8]
 800794e:	e0a7      	b.n	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	d009      	beq.n	800796e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007966:	461a      	mov	r2, r3
 8007968:	2320      	movs	r3, #32
 800796a:	6093      	str	r3, [r2, #8]
 800796c:	e098      	b.n	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007974:	2b00      	cmp	r3, #0
 8007976:	f040 8093 	bne.w	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	4a4b      	ldr	r2, [pc, #300]	; (8007aac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d90f      	bls.n	80079a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00a      	beq.n	80079a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007998:	461a      	mov	r2, r3
 800799a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800799e:	6093      	str	r3, [r2, #8]
 80079a0:	e07e      	b.n	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	4613      	mov	r3, r2
 80079a6:	00db      	lsls	r3, r3, #3
 80079a8:	4413      	add	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	4413      	add	r3, r2
 80079b4:	3304      	adds	r3, #4
 80079b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	0159      	lsls	r1, r3, #5
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	440b      	add	r3, r1
 80079c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d114      	bne.n	8007a04 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d109      	bne.n	80079f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80079ec:	461a      	mov	r2, r3
 80079ee:	2101      	movs	r1, #1
 80079f0:	f002 fbe0 	bl	800a1b4 <USB_EP0_OutStart>
 80079f4:	e006      	b.n	8007a04 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	441a      	add	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f004 fe98 	bl	800c740 <HAL_PCD_DataOutStageCallback>
 8007a10:	e046      	b.n	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	4a26      	ldr	r2, [pc, #152]	; (8007ab0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d124      	bne.n	8007a64 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00a      	beq.n	8007a3a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a30:	461a      	mov	r2, r3
 8007a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a36:	6093      	str	r3, [r2, #8]
 8007a38:	e032      	b.n	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d008      	beq.n	8007a56 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a50:	461a      	mov	r2, r3
 8007a52:	2320      	movs	r3, #32
 8007a54:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f004 fe6f 	bl	800c740 <HAL_PCD_DataOutStageCallback>
 8007a62:	e01d      	b.n	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d114      	bne.n	8007a94 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	4413      	add	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	440b      	add	r3, r1
 8007a78:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d108      	bne.n	8007a94 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	2100      	movs	r1, #0
 8007a90:	f002 fb90 	bl	800a1b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f004 fe50 	bl	800c740 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3720      	adds	r7, #32
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	4f54300a 	.word	0x4f54300a
 8007ab0:	4f54310a 	.word	0x4f54310a

08007ab4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	333c      	adds	r3, #60	; 0x3c
 8007acc:	3304      	adds	r3, #4
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4a15      	ldr	r2, [pc, #84]	; (8007b3c <PCD_EP_OutSetupPacket_int+0x88>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d90e      	bls.n	8007b08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d009      	beq.n	8007b08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b00:	461a      	mov	r2, r3
 8007b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f004 fe07 	bl	800c71c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4a0a      	ldr	r2, [pc, #40]	; (8007b3c <PCD_EP_OutSetupPacket_int+0x88>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d90c      	bls.n	8007b30 <PCD_EP_OutSetupPacket_int+0x7c>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d108      	bne.n	8007b30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b28:	461a      	mov	r2, r3
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	f002 fb42 	bl	800a1b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	4f54300a 	.word	0x4f54300a

08007b40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70fb      	strb	r3, [r7, #3]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d107      	bne.n	8007b6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007b5e:	883b      	ldrh	r3, [r7, #0]
 8007b60:	0419      	lsls	r1, r3, #16
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8007b6c:	e028      	b.n	8007bc0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b74:	0c1b      	lsrs	r3, r3, #16
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	4413      	add	r3, r2
 8007b7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]
 8007b80:	e00d      	b.n	8007b9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	3340      	adds	r3, #64	; 0x40
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	0c1b      	lsrs	r3, r3, #16
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	4413      	add	r3, r2
 8007b96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	73fb      	strb	r3, [r7, #15]
 8007b9e:	7bfa      	ldrb	r2, [r7, #15]
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d3ec      	bcc.n	8007b82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007ba8:	883b      	ldrh	r3, [r7, #0]
 8007baa:	0418      	lsls	r0, r3, #16
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6819      	ldr	r1, [r3, #0]
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	4302      	orrs	r2, r0
 8007bb8:	3340      	adds	r3, #64	; 0x40
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	887a      	ldrh	r2, [r7, #2]
 8007be0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e267      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d075      	beq.n	8007d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c26:	4b88      	ldr	r3, [pc, #544]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f003 030c 	and.w	r3, r3, #12
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d00c      	beq.n	8007c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c32:	4b85      	ldr	r3, [pc, #532]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c3a:	2b08      	cmp	r3, #8
 8007c3c:	d112      	bne.n	8007c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c3e:	4b82      	ldr	r3, [pc, #520]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c4a:	d10b      	bne.n	8007c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c4c:	4b7e      	ldr	r3, [pc, #504]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d05b      	beq.n	8007d10 <HAL_RCC_OscConfig+0x108>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d157      	bne.n	8007d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e242      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c6c:	d106      	bne.n	8007c7c <HAL_RCC_OscConfig+0x74>
 8007c6e:	4b76      	ldr	r3, [pc, #472]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a75      	ldr	r2, [pc, #468]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	e01d      	b.n	8007cb8 <HAL_RCC_OscConfig+0xb0>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c84:	d10c      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x98>
 8007c86:	4b70      	ldr	r3, [pc, #448]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a6f      	ldr	r2, [pc, #444]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	4b6d      	ldr	r3, [pc, #436]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a6c      	ldr	r2, [pc, #432]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	e00b      	b.n	8007cb8 <HAL_RCC_OscConfig+0xb0>
 8007ca0:	4b69      	ldr	r3, [pc, #420]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a68      	ldr	r2, [pc, #416]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	4b66      	ldr	r3, [pc, #408]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a65      	ldr	r2, [pc, #404]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d013      	beq.n	8007ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cc0:	f7fa fa3e 	bl	8002140 <HAL_GetTick>
 8007cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cc6:	e008      	b.n	8007cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cc8:	f7fa fa3a 	bl	8002140 <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	2b64      	cmp	r3, #100	; 0x64
 8007cd4:	d901      	bls.n	8007cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e207      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cda:	4b5b      	ldr	r3, [pc, #364]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0f0      	beq.n	8007cc8 <HAL_RCC_OscConfig+0xc0>
 8007ce6:	e014      	b.n	8007d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ce8:	f7fa fa2a 	bl	8002140 <HAL_GetTick>
 8007cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cee:	e008      	b.n	8007d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cf0:	f7fa fa26 	bl	8002140 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b64      	cmp	r3, #100	; 0x64
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e1f3      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d02:	4b51      	ldr	r3, [pc, #324]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1f0      	bne.n	8007cf0 <HAL_RCC_OscConfig+0xe8>
 8007d0e:	e000      	b.n	8007d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d063      	beq.n	8007de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d1e:	4b4a      	ldr	r3, [pc, #296]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 030c 	and.w	r3, r3, #12
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00b      	beq.n	8007d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d2a:	4b47      	ldr	r3, [pc, #284]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d32:	2b08      	cmp	r3, #8
 8007d34:	d11c      	bne.n	8007d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d36:	4b44      	ldr	r3, [pc, #272]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d116      	bne.n	8007d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d42:	4b41      	ldr	r3, [pc, #260]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d005      	beq.n	8007d5a <HAL_RCC_OscConfig+0x152>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d001      	beq.n	8007d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e1c7      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d5a:	4b3b      	ldr	r3, [pc, #236]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	4937      	ldr	r1, [pc, #220]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d6e:	e03a      	b.n	8007de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d020      	beq.n	8007dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d78:	4b34      	ldr	r3, [pc, #208]	; (8007e4c <HAL_RCC_OscConfig+0x244>)
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7e:	f7fa f9df 	bl	8002140 <HAL_GetTick>
 8007d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d84:	e008      	b.n	8007d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d86:	f7fa f9db 	bl	8002140 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d901      	bls.n	8007d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e1a8      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d98:	4b2b      	ldr	r3, [pc, #172]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0f0      	beq.n	8007d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007da4:	4b28      	ldr	r3, [pc, #160]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	4925      	ldr	r1, [pc, #148]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	600b      	str	r3, [r1, #0]
 8007db8:	e015      	b.n	8007de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dba:	4b24      	ldr	r3, [pc, #144]	; (8007e4c <HAL_RCC_OscConfig+0x244>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc0:	f7fa f9be 	bl	8002140 <HAL_GetTick>
 8007dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dc6:	e008      	b.n	8007dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dc8:	f7fa f9ba 	bl	8002140 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e187      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dda:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1f0      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0308 	and.w	r3, r3, #8
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d036      	beq.n	8007e60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d016      	beq.n	8007e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dfa:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <HAL_RCC_OscConfig+0x248>)
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e00:	f7fa f99e 	bl	8002140 <HAL_GetTick>
 8007e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e06:	e008      	b.n	8007e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e08:	f7fa f99a 	bl	8002140 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d901      	bls.n	8007e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e167      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e1a:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <HAL_RCC_OscConfig+0x240>)
 8007e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0f0      	beq.n	8007e08 <HAL_RCC_OscConfig+0x200>
 8007e26:	e01b      	b.n	8007e60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e28:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <HAL_RCC_OscConfig+0x248>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e2e:	f7fa f987 	bl	8002140 <HAL_GetTick>
 8007e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e34:	e00e      	b.n	8007e54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e36:	f7fa f983 	bl	8002140 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d907      	bls.n	8007e54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e150      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
 8007e48:	40023800 	.word	0x40023800
 8007e4c:	42470000 	.word	0x42470000
 8007e50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e54:	4b88      	ldr	r3, [pc, #544]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1ea      	bne.n	8007e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 8097 	beq.w	8007f9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e72:	4b81      	ldr	r3, [pc, #516]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10f      	bne.n	8007e9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60bb      	str	r3, [r7, #8]
 8007e82:	4b7d      	ldr	r3, [pc, #500]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e86:	4a7c      	ldr	r2, [pc, #496]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e8e:	4b7a      	ldr	r3, [pc, #488]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e96:	60bb      	str	r3, [r7, #8]
 8007e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e9e:	4b77      	ldr	r3, [pc, #476]	; (800807c <HAL_RCC_OscConfig+0x474>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d118      	bne.n	8007edc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007eaa:	4b74      	ldr	r3, [pc, #464]	; (800807c <HAL_RCC_OscConfig+0x474>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a73      	ldr	r2, [pc, #460]	; (800807c <HAL_RCC_OscConfig+0x474>)
 8007eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007eb6:	f7fa f943 	bl	8002140 <HAL_GetTick>
 8007eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ebc:	e008      	b.n	8007ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ebe:	f7fa f93f 	bl	8002140 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d901      	bls.n	8007ed0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e10c      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ed0:	4b6a      	ldr	r3, [pc, #424]	; (800807c <HAL_RCC_OscConfig+0x474>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d0f0      	beq.n	8007ebe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d106      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x2ea>
 8007ee4:	4b64      	ldr	r3, [pc, #400]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee8:	4a63      	ldr	r2, [pc, #396]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007eea:	f043 0301 	orr.w	r3, r3, #1
 8007eee:	6713      	str	r3, [r2, #112]	; 0x70
 8007ef0:	e01c      	b.n	8007f2c <HAL_RCC_OscConfig+0x324>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	2b05      	cmp	r3, #5
 8007ef8:	d10c      	bne.n	8007f14 <HAL_RCC_OscConfig+0x30c>
 8007efa:	4b5f      	ldr	r3, [pc, #380]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efe:	4a5e      	ldr	r2, [pc, #376]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007f00:	f043 0304 	orr.w	r3, r3, #4
 8007f04:	6713      	str	r3, [r2, #112]	; 0x70
 8007f06:	4b5c      	ldr	r3, [pc, #368]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0a:	4a5b      	ldr	r2, [pc, #364]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007f0c:	f043 0301 	orr.w	r3, r3, #1
 8007f10:	6713      	str	r3, [r2, #112]	; 0x70
 8007f12:	e00b      	b.n	8007f2c <HAL_RCC_OscConfig+0x324>
 8007f14:	4b58      	ldr	r3, [pc, #352]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f18:	4a57      	ldr	r2, [pc, #348]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007f1a:	f023 0301 	bic.w	r3, r3, #1
 8007f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007f20:	4b55      	ldr	r3, [pc, #340]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f24:	4a54      	ldr	r2, [pc, #336]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007f26:	f023 0304 	bic.w	r3, r3, #4
 8007f2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d015      	beq.n	8007f60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f34:	f7fa f904 	bl	8002140 <HAL_GetTick>
 8007f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f3a:	e00a      	b.n	8007f52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f3c:	f7fa f900 	bl	8002140 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e0cb      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f52:	4b49      	ldr	r3, [pc, #292]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0ee      	beq.n	8007f3c <HAL_RCC_OscConfig+0x334>
 8007f5e:	e014      	b.n	8007f8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f60:	f7fa f8ee 	bl	8002140 <HAL_GetTick>
 8007f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f66:	e00a      	b.n	8007f7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f68:	f7fa f8ea 	bl	8002140 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d901      	bls.n	8007f7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e0b5      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f7e:	4b3e      	ldr	r3, [pc, #248]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1ee      	bne.n	8007f68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d105      	bne.n	8007f9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f90:	4b39      	ldr	r3, [pc, #228]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	4a38      	ldr	r2, [pc, #224]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 80a1 	beq.w	80080e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fa6:	4b34      	ldr	r3, [pc, #208]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f003 030c 	and.w	r3, r3, #12
 8007fae:	2b08      	cmp	r3, #8
 8007fb0:	d05c      	beq.n	800806c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d141      	bne.n	800803e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fba:	4b31      	ldr	r3, [pc, #196]	; (8008080 <HAL_RCC_OscConfig+0x478>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fc0:	f7fa f8be 	bl	8002140 <HAL_GetTick>
 8007fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fc6:	e008      	b.n	8007fda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fc8:	f7fa f8ba 	bl	8002140 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d901      	bls.n	8007fda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e087      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fda:	4b27      	ldr	r3, [pc, #156]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1f0      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	69da      	ldr	r2, [r3, #28]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	019b      	lsls	r3, r3, #6
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffc:	085b      	lsrs	r3, r3, #1
 8007ffe:	3b01      	subs	r3, #1
 8008000:	041b      	lsls	r3, r3, #16
 8008002:	431a      	orrs	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	061b      	lsls	r3, r3, #24
 800800a:	491b      	ldr	r1, [pc, #108]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 800800c:	4313      	orrs	r3, r2
 800800e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008010:	4b1b      	ldr	r3, [pc, #108]	; (8008080 <HAL_RCC_OscConfig+0x478>)
 8008012:	2201      	movs	r2, #1
 8008014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008016:	f7fa f893 	bl	8002140 <HAL_GetTick>
 800801a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800801c:	e008      	b.n	8008030 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800801e:	f7fa f88f 	bl	8002140 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	2b02      	cmp	r3, #2
 800802a:	d901      	bls.n	8008030 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e05c      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008030:	4b11      	ldr	r3, [pc, #68]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0f0      	beq.n	800801e <HAL_RCC_OscConfig+0x416>
 800803c:	e054      	b.n	80080e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800803e:	4b10      	ldr	r3, [pc, #64]	; (8008080 <HAL_RCC_OscConfig+0x478>)
 8008040:	2200      	movs	r2, #0
 8008042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008044:	f7fa f87c 	bl	8002140 <HAL_GetTick>
 8008048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800804a:	e008      	b.n	800805e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800804c:	f7fa f878 	bl	8002140 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b02      	cmp	r3, #2
 8008058:	d901      	bls.n	800805e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e045      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800805e:	4b06      	ldr	r3, [pc, #24]	; (8008078 <HAL_RCC_OscConfig+0x470>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1f0      	bne.n	800804c <HAL_RCC_OscConfig+0x444>
 800806a:	e03d      	b.n	80080e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d107      	bne.n	8008084 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e038      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
 8008078:	40023800 	.word	0x40023800
 800807c:	40007000 	.word	0x40007000
 8008080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008084:	4b1b      	ldr	r3, [pc, #108]	; (80080f4 <HAL_RCC_OscConfig+0x4ec>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d028      	beq.n	80080e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800809c:	429a      	cmp	r2, r3
 800809e:	d121      	bne.n	80080e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d11a      	bne.n	80080e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80080b4:	4013      	ands	r3, r2
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80080ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080bc:	4293      	cmp	r3, r2
 80080be:	d111      	bne.n	80080e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ca:	085b      	lsrs	r3, r3, #1
 80080cc:	3b01      	subs	r3, #1
 80080ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d107      	bne.n	80080e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d001      	beq.n	80080e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e000      	b.n	80080ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	40023800 	.word	0x40023800

080080f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e0cc      	b.n	80082a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800810c:	4b68      	ldr	r3, [pc, #416]	; (80082b0 <HAL_RCC_ClockConfig+0x1b8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0307 	and.w	r3, r3, #7
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	429a      	cmp	r2, r3
 8008118:	d90c      	bls.n	8008134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800811a:	4b65      	ldr	r3, [pc, #404]	; (80082b0 <HAL_RCC_ClockConfig+0x1b8>)
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	b2d2      	uxtb	r2, r2
 8008120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008122:	4b63      	ldr	r3, [pc, #396]	; (80082b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	429a      	cmp	r2, r3
 800812e:	d001      	beq.n	8008134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e0b8      	b.n	80082a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d020      	beq.n	8008182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0304 	and.w	r3, r3, #4
 8008148:	2b00      	cmp	r3, #0
 800814a:	d005      	beq.n	8008158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800814c:	4b59      	ldr	r3, [pc, #356]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	4a58      	ldr	r2, [pc, #352]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0308 	and.w	r3, r3, #8
 8008160:	2b00      	cmp	r3, #0
 8008162:	d005      	beq.n	8008170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008164:	4b53      	ldr	r3, [pc, #332]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	4a52      	ldr	r2, [pc, #328]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 800816a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800816e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008170:	4b50      	ldr	r3, [pc, #320]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	494d      	ldr	r1, [pc, #308]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 800817e:	4313      	orrs	r3, r2
 8008180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	2b00      	cmp	r3, #0
 800818c:	d044      	beq.n	8008218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d107      	bne.n	80081a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008196:	4b47      	ldr	r3, [pc, #284]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d119      	bne.n	80081d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e07f      	b.n	80082a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d003      	beq.n	80081b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d107      	bne.n	80081c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081b6:	4b3f      	ldr	r3, [pc, #252]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d109      	bne.n	80081d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e06f      	b.n	80082a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081c6:	4b3b      	ldr	r3, [pc, #236]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e067      	b.n	80082a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081d6:	4b37      	ldr	r3, [pc, #220]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f023 0203 	bic.w	r2, r3, #3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	4934      	ldr	r1, [pc, #208]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80081e8:	f7f9 ffaa 	bl	8002140 <HAL_GetTick>
 80081ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081ee:	e00a      	b.n	8008206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081f0:	f7f9 ffa6 	bl	8002140 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80081fe:	4293      	cmp	r3, r2
 8008200:	d901      	bls.n	8008206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e04f      	b.n	80082a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008206:	4b2b      	ldr	r3, [pc, #172]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f003 020c 	and.w	r2, r3, #12
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	429a      	cmp	r2, r3
 8008216:	d1eb      	bne.n	80081f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008218:	4b25      	ldr	r3, [pc, #148]	; (80082b0 <HAL_RCC_ClockConfig+0x1b8>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0307 	and.w	r3, r3, #7
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d20c      	bcs.n	8008240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008226:	4b22      	ldr	r3, [pc, #136]	; (80082b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800822e:	4b20      	ldr	r3, [pc, #128]	; (80082b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0307 	and.w	r3, r3, #7
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	429a      	cmp	r2, r3
 800823a:	d001      	beq.n	8008240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e032      	b.n	80082a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0304 	and.w	r3, r3, #4
 8008248:	2b00      	cmp	r3, #0
 800824a:	d008      	beq.n	800825e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800824c:	4b19      	ldr	r3, [pc, #100]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	4916      	ldr	r1, [pc, #88]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 800825a:	4313      	orrs	r3, r2
 800825c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0308 	and.w	r3, r3, #8
 8008266:	2b00      	cmp	r3, #0
 8008268:	d009      	beq.n	800827e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800826a:	4b12      	ldr	r3, [pc, #72]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	490e      	ldr	r1, [pc, #56]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 800827a:	4313      	orrs	r3, r2
 800827c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800827e:	f000 f821 	bl	80082c4 <HAL_RCC_GetSysClockFreq>
 8008282:	4602      	mov	r2, r0
 8008284:	4b0b      	ldr	r3, [pc, #44]	; (80082b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	091b      	lsrs	r3, r3, #4
 800828a:	f003 030f 	and.w	r3, r3, #15
 800828e:	490a      	ldr	r1, [pc, #40]	; (80082b8 <HAL_RCC_ClockConfig+0x1c0>)
 8008290:	5ccb      	ldrb	r3, [r1, r3]
 8008292:	fa22 f303 	lsr.w	r3, r2, r3
 8008296:	4a09      	ldr	r2, [pc, #36]	; (80082bc <HAL_RCC_ClockConfig+0x1c4>)
 8008298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800829a:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <HAL_RCC_ClockConfig+0x1c8>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f7f9 ff0a 	bl	80020b8 <HAL_InitTick>

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	40023c00 	.word	0x40023c00
 80082b4:	40023800 	.word	0x40023800
 80082b8:	08010270 	.word	0x08010270
 80082bc:	20000010 	.word	0x20000010
 80082c0:	20000014 	.word	0x20000014

080082c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082c8:	b090      	sub	sp, #64	; 0x40
 80082ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	637b      	str	r3, [r7, #52]	; 0x34
 80082d0:	2300      	movs	r3, #0
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d4:	2300      	movs	r3, #0
 80082d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082dc:	4b59      	ldr	r3, [pc, #356]	; (8008444 <HAL_RCC_GetSysClockFreq+0x180>)
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f003 030c 	and.w	r3, r3, #12
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d00d      	beq.n	8008304 <HAL_RCC_GetSysClockFreq+0x40>
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	f200 80a1 	bhi.w	8008430 <HAL_RCC_GetSysClockFreq+0x16c>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <HAL_RCC_GetSysClockFreq+0x34>
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	d003      	beq.n	80082fe <HAL_RCC_GetSysClockFreq+0x3a>
 80082f6:	e09b      	b.n	8008430 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80082f8:	4b53      	ldr	r3, [pc, #332]	; (8008448 <HAL_RCC_GetSysClockFreq+0x184>)
 80082fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80082fc:	e09b      	b.n	8008436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80082fe:	4b53      	ldr	r3, [pc, #332]	; (800844c <HAL_RCC_GetSysClockFreq+0x188>)
 8008300:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008302:	e098      	b.n	8008436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008304:	4b4f      	ldr	r3, [pc, #316]	; (8008444 <HAL_RCC_GetSysClockFreq+0x180>)
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800830c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800830e:	4b4d      	ldr	r3, [pc, #308]	; (8008444 <HAL_RCC_GetSysClockFreq+0x180>)
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d028      	beq.n	800836c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800831a:	4b4a      	ldr	r3, [pc, #296]	; (8008444 <HAL_RCC_GetSysClockFreq+0x180>)
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	099b      	lsrs	r3, r3, #6
 8008320:	2200      	movs	r2, #0
 8008322:	623b      	str	r3, [r7, #32]
 8008324:	627a      	str	r2, [r7, #36]	; 0x24
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800832c:	2100      	movs	r1, #0
 800832e:	4b47      	ldr	r3, [pc, #284]	; (800844c <HAL_RCC_GetSysClockFreq+0x188>)
 8008330:	fb03 f201 	mul.w	r2, r3, r1
 8008334:	2300      	movs	r3, #0
 8008336:	fb00 f303 	mul.w	r3, r0, r3
 800833a:	4413      	add	r3, r2
 800833c:	4a43      	ldr	r2, [pc, #268]	; (800844c <HAL_RCC_GetSysClockFreq+0x188>)
 800833e:	fba0 1202 	umull	r1, r2, r0, r2
 8008342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008344:	460a      	mov	r2, r1
 8008346:	62ba      	str	r2, [r7, #40]	; 0x28
 8008348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800834a:	4413      	add	r3, r2
 800834c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800834e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008350:	2200      	movs	r2, #0
 8008352:	61bb      	str	r3, [r7, #24]
 8008354:	61fa      	str	r2, [r7, #28]
 8008356:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800835a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800835e:	f7f8 fc7b 	bl	8000c58 <__aeabi_uldivmod>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4613      	mov	r3, r2
 8008368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800836a:	e053      	b.n	8008414 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800836c:	4b35      	ldr	r3, [pc, #212]	; (8008444 <HAL_RCC_GetSysClockFreq+0x180>)
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	099b      	lsrs	r3, r3, #6
 8008372:	2200      	movs	r2, #0
 8008374:	613b      	str	r3, [r7, #16]
 8008376:	617a      	str	r2, [r7, #20]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800837e:	f04f 0b00 	mov.w	fp, #0
 8008382:	4652      	mov	r2, sl
 8008384:	465b      	mov	r3, fp
 8008386:	f04f 0000 	mov.w	r0, #0
 800838a:	f04f 0100 	mov.w	r1, #0
 800838e:	0159      	lsls	r1, r3, #5
 8008390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008394:	0150      	lsls	r0, r2, #5
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	ebb2 080a 	subs.w	r8, r2, sl
 800839e:	eb63 090b 	sbc.w	r9, r3, fp
 80083a2:	f04f 0200 	mov.w	r2, #0
 80083a6:	f04f 0300 	mov.w	r3, #0
 80083aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80083ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80083b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80083b6:	ebb2 0408 	subs.w	r4, r2, r8
 80083ba:	eb63 0509 	sbc.w	r5, r3, r9
 80083be:	f04f 0200 	mov.w	r2, #0
 80083c2:	f04f 0300 	mov.w	r3, #0
 80083c6:	00eb      	lsls	r3, r5, #3
 80083c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083cc:	00e2      	lsls	r2, r4, #3
 80083ce:	4614      	mov	r4, r2
 80083d0:	461d      	mov	r5, r3
 80083d2:	eb14 030a 	adds.w	r3, r4, sl
 80083d6:	603b      	str	r3, [r7, #0]
 80083d8:	eb45 030b 	adc.w	r3, r5, fp
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	f04f 0200 	mov.w	r2, #0
 80083e2:	f04f 0300 	mov.w	r3, #0
 80083e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80083ea:	4629      	mov	r1, r5
 80083ec:	028b      	lsls	r3, r1, #10
 80083ee:	4621      	mov	r1, r4
 80083f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80083f4:	4621      	mov	r1, r4
 80083f6:	028a      	lsls	r2, r1, #10
 80083f8:	4610      	mov	r0, r2
 80083fa:	4619      	mov	r1, r3
 80083fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fe:	2200      	movs	r2, #0
 8008400:	60bb      	str	r3, [r7, #8]
 8008402:	60fa      	str	r2, [r7, #12]
 8008404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008408:	f7f8 fc26 	bl	8000c58 <__aeabi_uldivmod>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4613      	mov	r3, r2
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008414:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <HAL_RCC_GetSysClockFreq+0x180>)
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	0c1b      	lsrs	r3, r3, #16
 800841a:	f003 0303 	and.w	r3, r3, #3
 800841e:	3301      	adds	r3, #1
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	fbb2 f3f3 	udiv	r3, r2, r3
 800842c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800842e:	e002      	b.n	8008436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008430:	4b05      	ldr	r3, [pc, #20]	; (8008448 <HAL_RCC_GetSysClockFreq+0x184>)
 8008432:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008438:	4618      	mov	r0, r3
 800843a:	3740      	adds	r7, #64	; 0x40
 800843c:	46bd      	mov	sp, r7
 800843e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008442:	bf00      	nop
 8008444:	40023800 	.word	0x40023800
 8008448:	00f42400 	.word	0x00f42400
 800844c:	017d7840 	.word	0x017d7840

08008450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008454:	4b03      	ldr	r3, [pc, #12]	; (8008464 <HAL_RCC_GetHCLKFreq+0x14>)
 8008456:	681b      	ldr	r3, [r3, #0]
}
 8008458:	4618      	mov	r0, r3
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	20000010 	.word	0x20000010

08008468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800846c:	f7ff fff0 	bl	8008450 <HAL_RCC_GetHCLKFreq>
 8008470:	4602      	mov	r2, r0
 8008472:	4b05      	ldr	r3, [pc, #20]	; (8008488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	0a9b      	lsrs	r3, r3, #10
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	4903      	ldr	r1, [pc, #12]	; (800848c <HAL_RCC_GetPCLK1Freq+0x24>)
 800847e:	5ccb      	ldrb	r3, [r1, r3]
 8008480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008484:	4618      	mov	r0, r3
 8008486:	bd80      	pop	{r7, pc}
 8008488:	40023800 	.word	0x40023800
 800848c:	08010280 	.word	0x08010280

08008490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008494:	f7ff ffdc 	bl	8008450 <HAL_RCC_GetHCLKFreq>
 8008498:	4602      	mov	r2, r0
 800849a:	4b05      	ldr	r3, [pc, #20]	; (80084b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	0b5b      	lsrs	r3, r3, #13
 80084a0:	f003 0307 	and.w	r3, r3, #7
 80084a4:	4903      	ldr	r1, [pc, #12]	; (80084b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084a6:	5ccb      	ldrb	r3, [r1, r3]
 80084a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40023800 	.word	0x40023800
 80084b4:	08010280 	.word	0x08010280

080084b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e03f      	b.n	800854a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d106      	bne.n	80084e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7f9 fd56 	bl	8001f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2224      	movs	r2, #36	; 0x24
 80084e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f829 	bl	8008554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	691a      	ldr	r2, [r3, #16]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	695a      	ldr	r2, [r3, #20]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2220      	movs	r2, #32
 800853c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2220      	movs	r2, #32
 8008544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008558:	b0c0      	sub	sp, #256	; 0x100
 800855a:	af00      	add	r7, sp, #0
 800855c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800856c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008570:	68d9      	ldr	r1, [r3, #12]
 8008572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	ea40 0301 	orr.w	r3, r0, r1
 800857c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800857e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	431a      	orrs	r2, r3
 800858c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	431a      	orrs	r2, r3
 8008594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	4313      	orrs	r3, r2
 800859c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80085a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80085ac:	f021 010c 	bic.w	r1, r1, #12
 80085b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085ba:	430b      	orrs	r3, r1
 80085bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80085ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ce:	6999      	ldr	r1, [r3, #24]
 80085d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	ea40 0301 	orr.w	r3, r0, r1
 80085da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	4b8f      	ldr	r3, [pc, #572]	; (8008820 <UART_SetConfig+0x2cc>)
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d005      	beq.n	80085f4 <UART_SetConfig+0xa0>
 80085e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	4b8d      	ldr	r3, [pc, #564]	; (8008824 <UART_SetConfig+0x2d0>)
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d104      	bne.n	80085fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085f4:	f7ff ff4c 	bl	8008490 <HAL_RCC_GetPCLK2Freq>
 80085f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80085fc:	e003      	b.n	8008606 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085fe:	f7ff ff33 	bl	8008468 <HAL_RCC_GetPCLK1Freq>
 8008602:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008610:	f040 810c 	bne.w	800882c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008618:	2200      	movs	r2, #0
 800861a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800861e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008622:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008626:	4622      	mov	r2, r4
 8008628:	462b      	mov	r3, r5
 800862a:	1891      	adds	r1, r2, r2
 800862c:	65b9      	str	r1, [r7, #88]	; 0x58
 800862e:	415b      	adcs	r3, r3
 8008630:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008632:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008636:	4621      	mov	r1, r4
 8008638:	eb12 0801 	adds.w	r8, r2, r1
 800863c:	4629      	mov	r1, r5
 800863e:	eb43 0901 	adc.w	r9, r3, r1
 8008642:	f04f 0200 	mov.w	r2, #0
 8008646:	f04f 0300 	mov.w	r3, #0
 800864a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800864e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008656:	4690      	mov	r8, r2
 8008658:	4699      	mov	r9, r3
 800865a:	4623      	mov	r3, r4
 800865c:	eb18 0303 	adds.w	r3, r8, r3
 8008660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008664:	462b      	mov	r3, r5
 8008666:	eb49 0303 	adc.w	r3, r9, r3
 800866a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800866e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800867a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800867e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008682:	460b      	mov	r3, r1
 8008684:	18db      	adds	r3, r3, r3
 8008686:	653b      	str	r3, [r7, #80]	; 0x50
 8008688:	4613      	mov	r3, r2
 800868a:	eb42 0303 	adc.w	r3, r2, r3
 800868e:	657b      	str	r3, [r7, #84]	; 0x54
 8008690:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008694:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008698:	f7f8 fade 	bl	8000c58 <__aeabi_uldivmod>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4b61      	ldr	r3, [pc, #388]	; (8008828 <UART_SetConfig+0x2d4>)
 80086a2:	fba3 2302 	umull	r2, r3, r3, r2
 80086a6:	095b      	lsrs	r3, r3, #5
 80086a8:	011c      	lsls	r4, r3, #4
 80086aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80086b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80086bc:	4642      	mov	r2, r8
 80086be:	464b      	mov	r3, r9
 80086c0:	1891      	adds	r1, r2, r2
 80086c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80086c4:	415b      	adcs	r3, r3
 80086c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086cc:	4641      	mov	r1, r8
 80086ce:	eb12 0a01 	adds.w	sl, r2, r1
 80086d2:	4649      	mov	r1, r9
 80086d4:	eb43 0b01 	adc.w	fp, r3, r1
 80086d8:	f04f 0200 	mov.w	r2, #0
 80086dc:	f04f 0300 	mov.w	r3, #0
 80086e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086ec:	4692      	mov	sl, r2
 80086ee:	469b      	mov	fp, r3
 80086f0:	4643      	mov	r3, r8
 80086f2:	eb1a 0303 	adds.w	r3, sl, r3
 80086f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086fa:	464b      	mov	r3, r9
 80086fc:	eb4b 0303 	adc.w	r3, fp, r3
 8008700:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008710:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008714:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008718:	460b      	mov	r3, r1
 800871a:	18db      	adds	r3, r3, r3
 800871c:	643b      	str	r3, [r7, #64]	; 0x40
 800871e:	4613      	mov	r3, r2
 8008720:	eb42 0303 	adc.w	r3, r2, r3
 8008724:	647b      	str	r3, [r7, #68]	; 0x44
 8008726:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800872a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800872e:	f7f8 fa93 	bl	8000c58 <__aeabi_uldivmod>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4611      	mov	r1, r2
 8008738:	4b3b      	ldr	r3, [pc, #236]	; (8008828 <UART_SetConfig+0x2d4>)
 800873a:	fba3 2301 	umull	r2, r3, r3, r1
 800873e:	095b      	lsrs	r3, r3, #5
 8008740:	2264      	movs	r2, #100	; 0x64
 8008742:	fb02 f303 	mul.w	r3, r2, r3
 8008746:	1acb      	subs	r3, r1, r3
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800874e:	4b36      	ldr	r3, [pc, #216]	; (8008828 <UART_SetConfig+0x2d4>)
 8008750:	fba3 2302 	umull	r2, r3, r3, r2
 8008754:	095b      	lsrs	r3, r3, #5
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800875c:	441c      	add	r4, r3
 800875e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008762:	2200      	movs	r2, #0
 8008764:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008768:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800876c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008770:	4642      	mov	r2, r8
 8008772:	464b      	mov	r3, r9
 8008774:	1891      	adds	r1, r2, r2
 8008776:	63b9      	str	r1, [r7, #56]	; 0x38
 8008778:	415b      	adcs	r3, r3
 800877a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800877c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008780:	4641      	mov	r1, r8
 8008782:	1851      	adds	r1, r2, r1
 8008784:	6339      	str	r1, [r7, #48]	; 0x30
 8008786:	4649      	mov	r1, r9
 8008788:	414b      	adcs	r3, r1
 800878a:	637b      	str	r3, [r7, #52]	; 0x34
 800878c:	f04f 0200 	mov.w	r2, #0
 8008790:	f04f 0300 	mov.w	r3, #0
 8008794:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008798:	4659      	mov	r1, fp
 800879a:	00cb      	lsls	r3, r1, #3
 800879c:	4651      	mov	r1, sl
 800879e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087a2:	4651      	mov	r1, sl
 80087a4:	00ca      	lsls	r2, r1, #3
 80087a6:	4610      	mov	r0, r2
 80087a8:	4619      	mov	r1, r3
 80087aa:	4603      	mov	r3, r0
 80087ac:	4642      	mov	r2, r8
 80087ae:	189b      	adds	r3, r3, r2
 80087b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087b4:	464b      	mov	r3, r9
 80087b6:	460a      	mov	r2, r1
 80087b8:	eb42 0303 	adc.w	r3, r2, r3
 80087bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80087cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80087d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80087d4:	460b      	mov	r3, r1
 80087d6:	18db      	adds	r3, r3, r3
 80087d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80087da:	4613      	mov	r3, r2
 80087dc:	eb42 0303 	adc.w	r3, r2, r3
 80087e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80087ea:	f7f8 fa35 	bl	8000c58 <__aeabi_uldivmod>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4b0d      	ldr	r3, [pc, #52]	; (8008828 <UART_SetConfig+0x2d4>)
 80087f4:	fba3 1302 	umull	r1, r3, r3, r2
 80087f8:	095b      	lsrs	r3, r3, #5
 80087fa:	2164      	movs	r1, #100	; 0x64
 80087fc:	fb01 f303 	mul.w	r3, r1, r3
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	3332      	adds	r3, #50	; 0x32
 8008806:	4a08      	ldr	r2, [pc, #32]	; (8008828 <UART_SetConfig+0x2d4>)
 8008808:	fba2 2303 	umull	r2, r3, r2, r3
 800880c:	095b      	lsrs	r3, r3, #5
 800880e:	f003 0207 	and.w	r2, r3, #7
 8008812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4422      	add	r2, r4
 800881a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800881c:	e105      	b.n	8008a2a <UART_SetConfig+0x4d6>
 800881e:	bf00      	nop
 8008820:	40011000 	.word	0x40011000
 8008824:	40011400 	.word	0x40011400
 8008828:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800882c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008830:	2200      	movs	r2, #0
 8008832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008836:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800883a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800883e:	4642      	mov	r2, r8
 8008840:	464b      	mov	r3, r9
 8008842:	1891      	adds	r1, r2, r2
 8008844:	6239      	str	r1, [r7, #32]
 8008846:	415b      	adcs	r3, r3
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
 800884a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800884e:	4641      	mov	r1, r8
 8008850:	1854      	adds	r4, r2, r1
 8008852:	4649      	mov	r1, r9
 8008854:	eb43 0501 	adc.w	r5, r3, r1
 8008858:	f04f 0200 	mov.w	r2, #0
 800885c:	f04f 0300 	mov.w	r3, #0
 8008860:	00eb      	lsls	r3, r5, #3
 8008862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008866:	00e2      	lsls	r2, r4, #3
 8008868:	4614      	mov	r4, r2
 800886a:	461d      	mov	r5, r3
 800886c:	4643      	mov	r3, r8
 800886e:	18e3      	adds	r3, r4, r3
 8008870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008874:	464b      	mov	r3, r9
 8008876:	eb45 0303 	adc.w	r3, r5, r3
 800887a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800887e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800888a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800888e:	f04f 0200 	mov.w	r2, #0
 8008892:	f04f 0300 	mov.w	r3, #0
 8008896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800889a:	4629      	mov	r1, r5
 800889c:	008b      	lsls	r3, r1, #2
 800889e:	4621      	mov	r1, r4
 80088a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088a4:	4621      	mov	r1, r4
 80088a6:	008a      	lsls	r2, r1, #2
 80088a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80088ac:	f7f8 f9d4 	bl	8000c58 <__aeabi_uldivmod>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	4b60      	ldr	r3, [pc, #384]	; (8008a38 <UART_SetConfig+0x4e4>)
 80088b6:	fba3 2302 	umull	r2, r3, r3, r2
 80088ba:	095b      	lsrs	r3, r3, #5
 80088bc:	011c      	lsls	r4, r3, #4
 80088be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80088cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80088d0:	4642      	mov	r2, r8
 80088d2:	464b      	mov	r3, r9
 80088d4:	1891      	adds	r1, r2, r2
 80088d6:	61b9      	str	r1, [r7, #24]
 80088d8:	415b      	adcs	r3, r3
 80088da:	61fb      	str	r3, [r7, #28]
 80088dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088e0:	4641      	mov	r1, r8
 80088e2:	1851      	adds	r1, r2, r1
 80088e4:	6139      	str	r1, [r7, #16]
 80088e6:	4649      	mov	r1, r9
 80088e8:	414b      	adcs	r3, r1
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	f04f 0300 	mov.w	r3, #0
 80088f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088f8:	4659      	mov	r1, fp
 80088fa:	00cb      	lsls	r3, r1, #3
 80088fc:	4651      	mov	r1, sl
 80088fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008902:	4651      	mov	r1, sl
 8008904:	00ca      	lsls	r2, r1, #3
 8008906:	4610      	mov	r0, r2
 8008908:	4619      	mov	r1, r3
 800890a:	4603      	mov	r3, r0
 800890c:	4642      	mov	r2, r8
 800890e:	189b      	adds	r3, r3, r2
 8008910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008914:	464b      	mov	r3, r9
 8008916:	460a      	mov	r2, r1
 8008918:	eb42 0303 	adc.w	r3, r2, r3
 800891c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	67bb      	str	r3, [r7, #120]	; 0x78
 800892a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800892c:	f04f 0200 	mov.w	r2, #0
 8008930:	f04f 0300 	mov.w	r3, #0
 8008934:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008938:	4649      	mov	r1, r9
 800893a:	008b      	lsls	r3, r1, #2
 800893c:	4641      	mov	r1, r8
 800893e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008942:	4641      	mov	r1, r8
 8008944:	008a      	lsls	r2, r1, #2
 8008946:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800894a:	f7f8 f985 	bl	8000c58 <__aeabi_uldivmod>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4b39      	ldr	r3, [pc, #228]	; (8008a38 <UART_SetConfig+0x4e4>)
 8008954:	fba3 1302 	umull	r1, r3, r3, r2
 8008958:	095b      	lsrs	r3, r3, #5
 800895a:	2164      	movs	r1, #100	; 0x64
 800895c:	fb01 f303 	mul.w	r3, r1, r3
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	3332      	adds	r3, #50	; 0x32
 8008966:	4a34      	ldr	r2, [pc, #208]	; (8008a38 <UART_SetConfig+0x4e4>)
 8008968:	fba2 2303 	umull	r2, r3, r2, r3
 800896c:	095b      	lsrs	r3, r3, #5
 800896e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008972:	441c      	add	r4, r3
 8008974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008978:	2200      	movs	r2, #0
 800897a:	673b      	str	r3, [r7, #112]	; 0x70
 800897c:	677a      	str	r2, [r7, #116]	; 0x74
 800897e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008982:	4642      	mov	r2, r8
 8008984:	464b      	mov	r3, r9
 8008986:	1891      	adds	r1, r2, r2
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	415b      	adcs	r3, r3
 800898c:	60fb      	str	r3, [r7, #12]
 800898e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008992:	4641      	mov	r1, r8
 8008994:	1851      	adds	r1, r2, r1
 8008996:	6039      	str	r1, [r7, #0]
 8008998:	4649      	mov	r1, r9
 800899a:	414b      	adcs	r3, r1
 800899c:	607b      	str	r3, [r7, #4]
 800899e:	f04f 0200 	mov.w	r2, #0
 80089a2:	f04f 0300 	mov.w	r3, #0
 80089a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80089aa:	4659      	mov	r1, fp
 80089ac:	00cb      	lsls	r3, r1, #3
 80089ae:	4651      	mov	r1, sl
 80089b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089b4:	4651      	mov	r1, sl
 80089b6:	00ca      	lsls	r2, r1, #3
 80089b8:	4610      	mov	r0, r2
 80089ba:	4619      	mov	r1, r3
 80089bc:	4603      	mov	r3, r0
 80089be:	4642      	mov	r2, r8
 80089c0:	189b      	adds	r3, r3, r2
 80089c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80089c4:	464b      	mov	r3, r9
 80089c6:	460a      	mov	r2, r1
 80089c8:	eb42 0303 	adc.w	r3, r2, r3
 80089cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	663b      	str	r3, [r7, #96]	; 0x60
 80089d8:	667a      	str	r2, [r7, #100]	; 0x64
 80089da:	f04f 0200 	mov.w	r2, #0
 80089de:	f04f 0300 	mov.w	r3, #0
 80089e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80089e6:	4649      	mov	r1, r9
 80089e8:	008b      	lsls	r3, r1, #2
 80089ea:	4641      	mov	r1, r8
 80089ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089f0:	4641      	mov	r1, r8
 80089f2:	008a      	lsls	r2, r1, #2
 80089f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80089f8:	f7f8 f92e 	bl	8000c58 <__aeabi_uldivmod>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4b0d      	ldr	r3, [pc, #52]	; (8008a38 <UART_SetConfig+0x4e4>)
 8008a02:	fba3 1302 	umull	r1, r3, r3, r2
 8008a06:	095b      	lsrs	r3, r3, #5
 8008a08:	2164      	movs	r1, #100	; 0x64
 8008a0a:	fb01 f303 	mul.w	r3, r1, r3
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	011b      	lsls	r3, r3, #4
 8008a12:	3332      	adds	r3, #50	; 0x32
 8008a14:	4a08      	ldr	r2, [pc, #32]	; (8008a38 <UART_SetConfig+0x4e4>)
 8008a16:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1a:	095b      	lsrs	r3, r3, #5
 8008a1c:	f003 020f 	and.w	r2, r3, #15
 8008a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4422      	add	r2, r4
 8008a28:	609a      	str	r2, [r3, #8]
}
 8008a2a:	bf00      	nop
 8008a2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008a30:	46bd      	mov	sp, r7
 8008a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a36:	bf00      	nop
 8008a38:	51eb851f 	.word	0x51eb851f

08008a3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	f107 001c 	add.w	r0, r7, #28
 8008a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d122      	bne.n	8008a9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d105      	bne.n	8008a8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f001 fbee 	bl	800a270 <USB_CoreReset>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73fb      	strb	r3, [r7, #15]
 8008a98:	e01a      	b.n	8008ad0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 fbe2 	bl	800a270 <USB_CoreReset>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d106      	bne.n	8008ac4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38
 8008ac2:	e005      	b.n	8008ad0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d10b      	bne.n	8008aee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f043 0206 	orr.w	r2, r3, #6
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f043 0220 	orr.w	r2, r3, #32
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008afa:	b004      	add	sp, #16
 8008afc:	4770      	bx	lr
	...

08008b00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d165      	bne.n	8008be0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	4a41      	ldr	r2, [pc, #260]	; (8008c1c <USB_SetTurnaroundTime+0x11c>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d906      	bls.n	8008b2a <USB_SetTurnaroundTime+0x2a>
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	4a40      	ldr	r2, [pc, #256]	; (8008c20 <USB_SetTurnaroundTime+0x120>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d202      	bcs.n	8008b2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b24:	230f      	movs	r3, #15
 8008b26:	617b      	str	r3, [r7, #20]
 8008b28:	e062      	b.n	8008bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	4a3c      	ldr	r2, [pc, #240]	; (8008c20 <USB_SetTurnaroundTime+0x120>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d306      	bcc.n	8008b40 <USB_SetTurnaroundTime+0x40>
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	4a3b      	ldr	r2, [pc, #236]	; (8008c24 <USB_SetTurnaroundTime+0x124>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d202      	bcs.n	8008b40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b3a:	230e      	movs	r3, #14
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	e057      	b.n	8008bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	4a38      	ldr	r2, [pc, #224]	; (8008c24 <USB_SetTurnaroundTime+0x124>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d306      	bcc.n	8008b56 <USB_SetTurnaroundTime+0x56>
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	4a37      	ldr	r2, [pc, #220]	; (8008c28 <USB_SetTurnaroundTime+0x128>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d202      	bcs.n	8008b56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b50:	230d      	movs	r3, #13
 8008b52:	617b      	str	r3, [r7, #20]
 8008b54:	e04c      	b.n	8008bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	4a33      	ldr	r2, [pc, #204]	; (8008c28 <USB_SetTurnaroundTime+0x128>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d306      	bcc.n	8008b6c <USB_SetTurnaroundTime+0x6c>
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	4a32      	ldr	r2, [pc, #200]	; (8008c2c <USB_SetTurnaroundTime+0x12c>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d802      	bhi.n	8008b6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b66:	230c      	movs	r3, #12
 8008b68:	617b      	str	r3, [r7, #20]
 8008b6a:	e041      	b.n	8008bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	4a2f      	ldr	r2, [pc, #188]	; (8008c2c <USB_SetTurnaroundTime+0x12c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d906      	bls.n	8008b82 <USB_SetTurnaroundTime+0x82>
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	4a2e      	ldr	r2, [pc, #184]	; (8008c30 <USB_SetTurnaroundTime+0x130>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d802      	bhi.n	8008b82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b7c:	230b      	movs	r3, #11
 8008b7e:	617b      	str	r3, [r7, #20]
 8008b80:	e036      	b.n	8008bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	4a2a      	ldr	r2, [pc, #168]	; (8008c30 <USB_SetTurnaroundTime+0x130>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d906      	bls.n	8008b98 <USB_SetTurnaroundTime+0x98>
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	4a29      	ldr	r2, [pc, #164]	; (8008c34 <USB_SetTurnaroundTime+0x134>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d802      	bhi.n	8008b98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b92:	230a      	movs	r3, #10
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	e02b      	b.n	8008bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	4a26      	ldr	r2, [pc, #152]	; (8008c34 <USB_SetTurnaroundTime+0x134>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d906      	bls.n	8008bae <USB_SetTurnaroundTime+0xae>
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	4a25      	ldr	r2, [pc, #148]	; (8008c38 <USB_SetTurnaroundTime+0x138>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d202      	bcs.n	8008bae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008ba8:	2309      	movs	r3, #9
 8008baa:	617b      	str	r3, [r7, #20]
 8008bac:	e020      	b.n	8008bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	4a21      	ldr	r2, [pc, #132]	; (8008c38 <USB_SetTurnaroundTime+0x138>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d306      	bcc.n	8008bc4 <USB_SetTurnaroundTime+0xc4>
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	4a20      	ldr	r2, [pc, #128]	; (8008c3c <USB_SetTurnaroundTime+0x13c>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d802      	bhi.n	8008bc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008bbe:	2308      	movs	r3, #8
 8008bc0:	617b      	str	r3, [r7, #20]
 8008bc2:	e015      	b.n	8008bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	4a1d      	ldr	r2, [pc, #116]	; (8008c3c <USB_SetTurnaroundTime+0x13c>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d906      	bls.n	8008bda <USB_SetTurnaroundTime+0xda>
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	4a1c      	ldr	r2, [pc, #112]	; (8008c40 <USB_SetTurnaroundTime+0x140>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d202      	bcs.n	8008bda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008bd4:	2307      	movs	r3, #7
 8008bd6:	617b      	str	r3, [r7, #20]
 8008bd8:	e00a      	b.n	8008bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008bda:	2306      	movs	r3, #6
 8008bdc:	617b      	str	r3, [r7, #20]
 8008bde:	e007      	b.n	8008bf0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d102      	bne.n	8008bec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008be6:	2309      	movs	r3, #9
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	e001      	b.n	8008bf0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bec:	2309      	movs	r3, #9
 8008bee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	029b      	lsls	r3, r3, #10
 8008c04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	00d8acbf 	.word	0x00d8acbf
 8008c20:	00e4e1c0 	.word	0x00e4e1c0
 8008c24:	00f42400 	.word	0x00f42400
 8008c28:	01067380 	.word	0x01067380
 8008c2c:	011a499f 	.word	0x011a499f
 8008c30:	01312cff 	.word	0x01312cff
 8008c34:	014ca43f 	.word	0x014ca43f
 8008c38:	016e3600 	.word	0x016e3600
 8008c3c:	01a6ab1f 	.word	0x01a6ab1f
 8008c40:	01e84800 	.word	0x01e84800

08008c44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f043 0201 	orr.w	r2, r3, #1
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f023 0201 	bic.w	r2, r3, #1
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d115      	bne.n	8008cd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	f7f9 fa4e 	bl	8002158 <HAL_Delay>
      ms++;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 fa45 	bl	800a152 <USB_GetMode>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d01e      	beq.n	8008d0c <USB_SetCurrentMode+0x84>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2b31      	cmp	r3, #49	; 0x31
 8008cd2:	d9f0      	bls.n	8008cb6 <USB_SetCurrentMode+0x2e>
 8008cd4:	e01a      	b.n	8008d0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cd6:	78fb      	ldrb	r3, [r7, #3]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d115      	bne.n	8008d08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ce8:	2001      	movs	r0, #1
 8008cea:	f7f9 fa35 	bl	8002158 <HAL_Delay>
      ms++;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f001 fa2c 	bl	800a152 <USB_GetMode>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d005      	beq.n	8008d0c <USB_SetCurrentMode+0x84>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2b31      	cmp	r3, #49	; 0x31
 8008d04:	d9f0      	bls.n	8008ce8 <USB_SetCurrentMode+0x60>
 8008d06:	e001      	b.n	8008d0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e005      	b.n	8008d18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b32      	cmp	r3, #50	; 0x32
 8008d10:	d101      	bne.n	8008d16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e000      	b.n	8008d18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d20:	b084      	sub	sp, #16
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b086      	sub	sp, #24
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	613b      	str	r3, [r7, #16]
 8008d3e:	e009      	b.n	8008d54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	3340      	adds	r3, #64	; 0x40
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3301      	adds	r3, #1
 8008d52:	613b      	str	r3, [r7, #16]
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	2b0e      	cmp	r3, #14
 8008d58:	d9f2      	bls.n	8008d40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d11c      	bne.n	8008d9a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d6e:	f043 0302 	orr.w	r3, r3, #2
 8008d72:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d84:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d90:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	639a      	str	r2, [r3, #56]	; 0x38
 8008d98:	e00b      	b.n	8008db2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008db8:	461a      	mov	r2, r3
 8008dba:	2300      	movs	r3, #0
 8008dbc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dcc:	461a      	mov	r2, r3
 8008dce:	680b      	ldr	r3, [r1, #0]
 8008dd0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d10c      	bne.n	8008df2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d104      	bne.n	8008de8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008dde:	2100      	movs	r1, #0
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f965 	bl	80090b0 <USB_SetDevSpeed>
 8008de6:	e008      	b.n	8008dfa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008de8:	2101      	movs	r1, #1
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f960 	bl	80090b0 <USB_SetDevSpeed>
 8008df0:	e003      	b.n	8008dfa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008df2:	2103      	movs	r1, #3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f95b 	bl	80090b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dfa:	2110      	movs	r1, #16
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f8f3 	bl	8008fe8 <USB_FlushTxFifo>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f91f 	bl	8009050 <USB_FlushRxFifo>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e22:	461a      	mov	r2, r3
 8008e24:	2300      	movs	r3, #0
 8008e26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2e:	461a      	mov	r2, r3
 8008e30:	2300      	movs	r3, #0
 8008e32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e40:	2300      	movs	r3, #0
 8008e42:	613b      	str	r3, [r7, #16]
 8008e44:	e043      	b.n	8008ece <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e5c:	d118      	bne.n	8008e90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10a      	bne.n	8008e7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e70:	461a      	mov	r2, r3
 8008e72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	e013      	b.n	8008ea2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e86:	461a      	mov	r2, r3
 8008e88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	e008      	b.n	8008ea2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eae:	461a      	mov	r2, r3
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ec6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	613b      	str	r3, [r7, #16]
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d3b7      	bcc.n	8008e46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	613b      	str	r3, [r7, #16]
 8008eda:	e043      	b.n	8008f64 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ef2:	d118      	bne.n	8008f26 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10a      	bne.n	8008f10 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f06:	461a      	mov	r2, r3
 8008f08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	e013      	b.n	8008f38 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	e008      	b.n	8008f38 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f32:	461a      	mov	r2, r3
 8008f34:	2300      	movs	r3, #0
 8008f36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f44:	461a      	mov	r2, r3
 8008f46:	2300      	movs	r3, #0
 8008f48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f56:	461a      	mov	r2, r3
 8008f58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	3301      	adds	r3, #1
 8008f62:	613b      	str	r3, [r7, #16]
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d3b7      	bcc.n	8008edc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d105      	bne.n	8008fa0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	f043 0210 	orr.w	r2, r3, #16
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699a      	ldr	r2, [r3, #24]
 8008fa4:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <USB_DevInit+0x2c4>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d005      	beq.n	8008fbe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	f043 0208 	orr.w	r2, r3, #8
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d107      	bne.n	8008fd4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fcc:	f043 0304 	orr.w	r3, r3, #4
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fe0:	b004      	add	sp, #16
 8008fe2:	4770      	bx	lr
 8008fe4:	803c3800 	.word	0x803c3800

08008fe8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4a13      	ldr	r2, [pc, #76]	; (800904c <USB_FlushTxFifo+0x64>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d901      	bls.n	8009008 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e01b      	b.n	8009040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	daf2      	bge.n	8008ff6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	019b      	lsls	r3, r3, #6
 8009018:	f043 0220 	orr.w	r2, r3, #32
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3301      	adds	r3, #1
 8009024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4a08      	ldr	r2, [pc, #32]	; (800904c <USB_FlushTxFifo+0x64>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d901      	bls.n	8009032 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e006      	b.n	8009040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b20      	cmp	r3, #32
 800903c:	d0f0      	beq.n	8009020 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3714      	adds	r7, #20
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	00030d40 	.word	0x00030d40

08009050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009058:	2300      	movs	r3, #0
 800905a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	3301      	adds	r3, #1
 8009060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	4a11      	ldr	r2, [pc, #68]	; (80090ac <USB_FlushRxFifo+0x5c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d901      	bls.n	800906e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e018      	b.n	80090a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	daf2      	bge.n	800905c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2210      	movs	r2, #16
 800907e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	3301      	adds	r3, #1
 8009084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	4a08      	ldr	r2, [pc, #32]	; (80090ac <USB_FlushRxFifo+0x5c>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d901      	bls.n	8009092 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800908e:	2303      	movs	r3, #3
 8009090:	e006      	b.n	80090a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	f003 0310 	and.w	r3, r3, #16
 800909a:	2b10      	cmp	r3, #16
 800909c:	d0f0      	beq.n	8009080 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	00030d40 	.word	0x00030d40

080090b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	68f9      	ldr	r1, [r7, #12]
 80090cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090d0:	4313      	orrs	r3, r2
 80090d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b087      	sub	sp, #28
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	f003 0306 	and.w	r3, r3, #6
 80090fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d102      	bne.n	8009108 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009102:	2300      	movs	r3, #0
 8009104:	75fb      	strb	r3, [r7, #23]
 8009106:	e00a      	b.n	800911e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b02      	cmp	r3, #2
 800910c:	d002      	beq.n	8009114 <USB_GetDevSpeed+0x32>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b06      	cmp	r3, #6
 8009112:	d102      	bne.n	800911a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009114:	2302      	movs	r3, #2
 8009116:	75fb      	strb	r3, [r7, #23]
 8009118:	e001      	b.n	800911e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800911a:	230f      	movs	r3, #15
 800911c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800911e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009120:	4618      	mov	r0, r3
 8009122:	371c      	adds	r7, #28
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	785b      	ldrb	r3, [r3, #1]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d13a      	bne.n	80091be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914e:	69da      	ldr	r2, [r3, #28]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	f003 030f 	and.w	r3, r3, #15
 8009158:	2101      	movs	r1, #1
 800915a:	fa01 f303 	lsl.w	r3, r1, r3
 800915e:	b29b      	uxth	r3, r3
 8009160:	68f9      	ldr	r1, [r7, #12]
 8009162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009166:	4313      	orrs	r3, r2
 8009168:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d155      	bne.n	800922c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4413      	add	r3, r2
 8009188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	791b      	ldrb	r3, [r3, #4]
 800919a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800919c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	059b      	lsls	r3, r3, #22
 80091a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091a4:	4313      	orrs	r3, r2
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	0151      	lsls	r1, r2, #5
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	440a      	add	r2, r1
 80091ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ba:	6013      	str	r3, [r2, #0]
 80091bc:	e036      	b.n	800922c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c4:	69da      	ldr	r2, [r3, #28]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	f003 030f 	and.w	r3, r3, #15
 80091ce:	2101      	movs	r1, #1
 80091d0:	fa01 f303 	lsl.w	r3, r1, r3
 80091d4:	041b      	lsls	r3, r3, #16
 80091d6:	68f9      	ldr	r1, [r7, #12]
 80091d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091dc:	4313      	orrs	r3, r2
 80091de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d11a      	bne.n	800922c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	791b      	ldrb	r3, [r3, #4]
 8009210:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009212:	430b      	orrs	r3, r1
 8009214:	4313      	orrs	r3, r2
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	0151      	lsls	r1, r2, #5
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	440a      	add	r2, r1
 800921e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800922a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
	...

0800923c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	785b      	ldrb	r3, [r3, #1]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d161      	bne.n	800931c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800926a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800926e:	d11f      	bne.n	80092b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	0151      	lsls	r1, r2, #5
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	440a      	add	r2, r1
 8009286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800928a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800928e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	2101      	movs	r1, #1
 80092c2:	fa01 f303 	lsl.w	r3, r1, r3
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	43db      	mvns	r3, r3
 80092ca:	68f9      	ldr	r1, [r7, #12]
 80092cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092d0:	4013      	ands	r3, r2
 80092d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092da:	69da      	ldr	r2, [r3, #28]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	f003 030f 	and.w	r3, r3, #15
 80092e4:	2101      	movs	r1, #1
 80092e6:	fa01 f303 	lsl.w	r3, r1, r3
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	43db      	mvns	r3, r3
 80092ee:	68f9      	ldr	r1, [r7, #12]
 80092f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092f4:	4013      	ands	r3, r2
 80092f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	015a      	lsls	r2, r3, #5
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	0159      	lsls	r1, r3, #5
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	440b      	add	r3, r1
 800930e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009312:	4619      	mov	r1, r3
 8009314:	4b35      	ldr	r3, [pc, #212]	; (80093ec <USB_DeactivateEndpoint+0x1b0>)
 8009316:	4013      	ands	r3, r2
 8009318:	600b      	str	r3, [r1, #0]
 800931a:	e060      	b.n	80093de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4413      	add	r3, r2
 8009324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800932e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009332:	d11f      	bne.n	8009374 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	0151      	lsls	r1, r2, #5
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	440a      	add	r2, r1
 800934a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009352:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	0151      	lsls	r1, r2, #5
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	440a      	add	r2, r1
 800936a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800936e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009372:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	f003 030f 	and.w	r3, r3, #15
 8009384:	2101      	movs	r1, #1
 8009386:	fa01 f303 	lsl.w	r3, r1, r3
 800938a:	041b      	lsls	r3, r3, #16
 800938c:	43db      	mvns	r3, r3
 800938e:	68f9      	ldr	r1, [r7, #12]
 8009390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009394:	4013      	ands	r3, r2
 8009396:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800939e:	69da      	ldr	r2, [r3, #28]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	f003 030f 	and.w	r3, r3, #15
 80093a8:	2101      	movs	r1, #1
 80093aa:	fa01 f303 	lsl.w	r3, r1, r3
 80093ae:	041b      	lsls	r3, r3, #16
 80093b0:	43db      	mvns	r3, r3
 80093b2:	68f9      	ldr	r1, [r7, #12]
 80093b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093b8:	4013      	ands	r3, r2
 80093ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	0159      	lsls	r1, r3, #5
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	440b      	add	r3, r1
 80093d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d6:	4619      	mov	r1, r3
 80093d8:	4b05      	ldr	r3, [pc, #20]	; (80093f0 <USB_DeactivateEndpoint+0x1b4>)
 80093da:	4013      	ands	r3, r2
 80093dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	ec337800 	.word	0xec337800
 80093f0:	eff37800 	.word	0xeff37800

080093f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b08a      	sub	sp, #40	; 0x28
 80093f8:	af02      	add	r7, sp, #8
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	4613      	mov	r3, r2
 8009400:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	785b      	ldrb	r3, [r3, #1]
 8009410:	2b01      	cmp	r3, #1
 8009412:	f040 815c 	bne.w	80096ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d132      	bne.n	8009484 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	0151      	lsls	r1, r2, #5
 8009430:	69fa      	ldr	r2, [r7, #28]
 8009432:	440a      	add	r2, r1
 8009434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009438:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800943c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009440:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	4413      	add	r3, r2
 800944a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	69ba      	ldr	r2, [r7, #24]
 8009452:	0151      	lsls	r1, r2, #5
 8009454:	69fa      	ldr	r2, [r7, #28]
 8009456:	440a      	add	r2, r1
 8009458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800945c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009460:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	015a      	lsls	r2, r3, #5
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	4413      	add	r3, r2
 800946a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	0151      	lsls	r1, r2, #5
 8009474:	69fa      	ldr	r2, [r7, #28]
 8009476:	440a      	add	r2, r1
 8009478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800947c:	0cdb      	lsrs	r3, r3, #19
 800947e:	04db      	lsls	r3, r3, #19
 8009480:	6113      	str	r3, [r2, #16]
 8009482:	e074      	b.n	800956e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	0151      	lsls	r1, r2, #5
 8009496:	69fa      	ldr	r2, [r7, #28]
 8009498:	440a      	add	r2, r1
 800949a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800949e:	0cdb      	lsrs	r3, r3, #19
 80094a0:	04db      	lsls	r3, r3, #19
 80094a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	69ba      	ldr	r2, [r7, #24]
 80094b4:	0151      	lsls	r1, r2, #5
 80094b6:	69fa      	ldr	r2, [r7, #28]
 80094b8:	440a      	add	r2, r1
 80094ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	6999      	ldr	r1, [r3, #24]
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	440b      	add	r3, r1
 80094e0:	1e59      	subs	r1, r3, #1
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80094ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094ec:	4b9d      	ldr	r3, [pc, #628]	; (8009764 <USB_EPStartXfer+0x370>)
 80094ee:	400b      	ands	r3, r1
 80094f0:	69b9      	ldr	r1, [r7, #24]
 80094f2:	0148      	lsls	r0, r1, #5
 80094f4:	69f9      	ldr	r1, [r7, #28]
 80094f6:	4401      	add	r1, r0
 80094f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094fc:	4313      	orrs	r3, r2
 80094fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	4413      	add	r3, r2
 8009508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950c:	691a      	ldr	r2, [r3, #16]
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009516:	69b9      	ldr	r1, [r7, #24]
 8009518:	0148      	lsls	r0, r1, #5
 800951a:	69f9      	ldr	r1, [r7, #28]
 800951c:	4401      	add	r1, r0
 800951e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009522:	4313      	orrs	r3, r2
 8009524:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	791b      	ldrb	r3, [r3, #4]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d11f      	bne.n	800956e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	0151      	lsls	r1, r2, #5
 8009540:	69fa      	ldr	r2, [r7, #28]
 8009542:	440a      	add	r2, r1
 8009544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009548:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800954c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	0151      	lsls	r1, r2, #5
 8009560:	69fa      	ldr	r2, [r7, #28]
 8009562:	440a      	add	r2, r1
 8009564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009568:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800956c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800956e:	79fb      	ldrb	r3, [r7, #7]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d14b      	bne.n	800960c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d009      	beq.n	8009590 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009588:	461a      	mov	r2, r3
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	791b      	ldrb	r3, [r3, #4]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d128      	bne.n	80095ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d110      	bne.n	80095ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	69ba      	ldr	r2, [r7, #24]
 80095b8:	0151      	lsls	r1, r2, #5
 80095ba:	69fa      	ldr	r2, [r7, #28]
 80095bc:	440a      	add	r2, r1
 80095be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	e00f      	b.n	80095ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	0151      	lsls	r1, r2, #5
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	440a      	add	r2, r1
 80095e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	69ba      	ldr	r2, [r7, #24]
 80095fa:	0151      	lsls	r1, r2, #5
 80095fc:	69fa      	ldr	r2, [r7, #28]
 80095fe:	440a      	add	r2, r1
 8009600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009604:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009608:	6013      	str	r3, [r2, #0]
 800960a:	e133      	b.n	8009874 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	69ba      	ldr	r2, [r7, #24]
 800961c:	0151      	lsls	r1, r2, #5
 800961e:	69fa      	ldr	r2, [r7, #28]
 8009620:	440a      	add	r2, r1
 8009622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009626:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800962a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	791b      	ldrb	r3, [r3, #4]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d015      	beq.n	8009660 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 811b 	beq.w	8009874 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	f003 030f 	and.w	r3, r3, #15
 800964e:	2101      	movs	r1, #1
 8009650:	fa01 f303 	lsl.w	r3, r1, r3
 8009654:	69f9      	ldr	r1, [r7, #28]
 8009656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800965a:	4313      	orrs	r3, r2
 800965c:	634b      	str	r3, [r1, #52]	; 0x34
 800965e:	e109      	b.n	8009874 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800966c:	2b00      	cmp	r3, #0
 800966e:	d110      	bne.n	8009692 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	015a      	lsls	r2, r3, #5
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	4413      	add	r3, r2
 8009678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	0151      	lsls	r1, r2, #5
 8009682:	69fa      	ldr	r2, [r7, #28]
 8009684:	440a      	add	r2, r1
 8009686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800968a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800968e:	6013      	str	r3, [r2, #0]
 8009690:	e00f      	b.n	80096b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	015a      	lsls	r2, r3, #5
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	4413      	add	r3, r2
 800969a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	0151      	lsls	r1, r2, #5
 80096a4:	69fa      	ldr	r2, [r7, #28]
 80096a6:	440a      	add	r2, r1
 80096a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	6919      	ldr	r1, [r3, #16]
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	781a      	ldrb	r2, [r3, #0]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	b298      	uxth	r0, r3
 80096c0:	79fb      	ldrb	r3, [r7, #7]
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	4603      	mov	r3, r0
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 fade 	bl	8009c88 <USB_WritePacket>
 80096cc:	e0d2      	b.n	8009874 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	0151      	lsls	r1, r2, #5
 80096e0:	69fa      	ldr	r2, [r7, #28]
 80096e2:	440a      	add	r2, r1
 80096e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096e8:	0cdb      	lsrs	r3, r3, #19
 80096ea:	04db      	lsls	r3, r3, #19
 80096ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	015a      	lsls	r2, r3, #5
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	4413      	add	r3, r2
 80096f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	69ba      	ldr	r2, [r7, #24]
 80096fe:	0151      	lsls	r1, r2, #5
 8009700:	69fa      	ldr	r2, [r7, #28]
 8009702:	440a      	add	r2, r1
 8009704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009708:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800970c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009710:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d126      	bne.n	8009768 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	015a      	lsls	r2, r3, #5
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	4413      	add	r3, r2
 8009722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009726:	691a      	ldr	r2, [r3, #16]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009730:	69b9      	ldr	r1, [r7, #24]
 8009732:	0148      	lsls	r0, r1, #5
 8009734:	69f9      	ldr	r1, [r7, #28]
 8009736:	4401      	add	r1, r0
 8009738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800973c:	4313      	orrs	r3, r2
 800973e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	015a      	lsls	r2, r3, #5
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	4413      	add	r3, r2
 8009748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	69ba      	ldr	r2, [r7, #24]
 8009750:	0151      	lsls	r1, r2, #5
 8009752:	69fa      	ldr	r2, [r7, #28]
 8009754:	440a      	add	r2, r1
 8009756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800975a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800975e:	6113      	str	r3, [r2, #16]
 8009760:	e03a      	b.n	80097d8 <USB_EPStartXfer+0x3e4>
 8009762:	bf00      	nop
 8009764:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	699a      	ldr	r2, [r3, #24]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	4413      	add	r3, r2
 8009772:	1e5a      	subs	r2, r3, #1
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	fbb2 f3f3 	udiv	r3, r2, r3
 800977c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	8afa      	ldrh	r2, [r7, #22]
 8009784:	fb03 f202 	mul.w	r2, r3, r2
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009798:	691a      	ldr	r2, [r3, #16]
 800979a:	8afb      	ldrh	r3, [r7, #22]
 800979c:	04d9      	lsls	r1, r3, #19
 800979e:	4b38      	ldr	r3, [pc, #224]	; (8009880 <USB_EPStartXfer+0x48c>)
 80097a0:	400b      	ands	r3, r1
 80097a2:	69b9      	ldr	r1, [r7, #24]
 80097a4:	0148      	lsls	r0, r1, #5
 80097a6:	69f9      	ldr	r1, [r7, #28]
 80097a8:	4401      	add	r1, r0
 80097aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097ae:	4313      	orrs	r3, r2
 80097b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097be:	691a      	ldr	r2, [r3, #16]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097c8:	69b9      	ldr	r1, [r7, #24]
 80097ca:	0148      	lsls	r0, r1, #5
 80097cc:	69f9      	ldr	r1, [r7, #28]
 80097ce:	4401      	add	r1, r0
 80097d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097d4:	4313      	orrs	r3, r2
 80097d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80097d8:	79fb      	ldrb	r3, [r7, #7]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d10d      	bne.n	80097fa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d009      	beq.n	80097fa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	6919      	ldr	r1, [r3, #16]
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f6:	460a      	mov	r2, r1
 80097f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	791b      	ldrb	r3, [r3, #4]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d128      	bne.n	8009854 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800980e:	2b00      	cmp	r3, #0
 8009810:	d110      	bne.n	8009834 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	015a      	lsls	r2, r3, #5
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	4413      	add	r3, r2
 800981a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69ba      	ldr	r2, [r7, #24]
 8009822:	0151      	lsls	r1, r2, #5
 8009824:	69fa      	ldr	r2, [r7, #28]
 8009826:	440a      	add	r2, r1
 8009828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800982c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009830:	6013      	str	r3, [r2, #0]
 8009832:	e00f      	b.n	8009854 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69ba      	ldr	r2, [r7, #24]
 8009844:	0151      	lsls	r1, r2, #5
 8009846:	69fa      	ldr	r2, [r7, #28]
 8009848:	440a      	add	r2, r1
 800984a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800984e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009852:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	4413      	add	r3, r2
 800985c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	69ba      	ldr	r2, [r7, #24]
 8009864:	0151      	lsls	r1, r2, #5
 8009866:	69fa      	ldr	r2, [r7, #28]
 8009868:	440a      	add	r2, r1
 800986a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800986e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009872:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3720      	adds	r7, #32
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	1ff80000 	.word	0x1ff80000

08009884 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009884:	b480      	push	{r7}
 8009886:	b087      	sub	sp, #28
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	4613      	mov	r3, r2
 8009890:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	785b      	ldrb	r3, [r3, #1]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	f040 80ce 	bne.w	8009a42 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d132      	bne.n	8009914 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	0151      	lsls	r1, r2, #5
 80098c0:	697a      	ldr	r2, [r7, #20]
 80098c2:	440a      	add	r2, r1
 80098c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	0151      	lsls	r1, r2, #5
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	440a      	add	r2, r1
 80098e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	0151      	lsls	r1, r2, #5
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	440a      	add	r2, r1
 8009908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800990c:	0cdb      	lsrs	r3, r3, #19
 800990e:	04db      	lsls	r3, r3, #19
 8009910:	6113      	str	r3, [r2, #16]
 8009912:	e04e      	b.n	80099b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	4413      	add	r3, r2
 800991c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	0151      	lsls	r1, r2, #5
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	440a      	add	r2, r1
 800992a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800992e:	0cdb      	lsrs	r3, r3, #19
 8009930:	04db      	lsls	r3, r3, #19
 8009932:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	015a      	lsls	r2, r3, #5
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	4413      	add	r3, r2
 800993c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	0151      	lsls	r1, r2, #5
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	440a      	add	r2, r1
 800994a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800994e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009952:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009956:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	699a      	ldr	r2, [r3, #24]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	429a      	cmp	r2, r3
 8009962:	d903      	bls.n	800996c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	68da      	ldr	r2, [r3, #12]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	0151      	lsls	r1, r2, #5
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	440a      	add	r2, r1
 8009982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009986:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800998a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009998:	691a      	ldr	r2, [r3, #16]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099a2:	6939      	ldr	r1, [r7, #16]
 80099a4:	0148      	lsls	r0, r1, #5
 80099a6:	6979      	ldr	r1, [r7, #20]
 80099a8:	4401      	add	r1, r0
 80099aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80099ae:	4313      	orrs	r3, r2
 80099b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80099b2:	79fb      	ldrb	r3, [r7, #7]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d11e      	bne.n	80099f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	695b      	ldr	r3, [r3, #20]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d009      	beq.n	80099d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099cc:	461a      	mov	r2, r3
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	0151      	lsls	r1, r2, #5
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	440a      	add	r2, r1
 80099ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	e097      	b.n	8009b26 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	015a      	lsls	r2, r3, #5
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	0151      	lsls	r1, r2, #5
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	440a      	add	r2, r1
 8009a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 8083 	beq.w	8009b26 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	f003 030f 	and.w	r3, r3, #15
 8009a30:	2101      	movs	r1, #1
 8009a32:	fa01 f303 	lsl.w	r3, r1, r3
 8009a36:	6979      	ldr	r1, [r7, #20]
 8009a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	634b      	str	r3, [r1, #52]	; 0x34
 8009a40:	e071      	b.n	8009b26 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	0151      	lsls	r1, r2, #5
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	440a      	add	r2, r1
 8009a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a5c:	0cdb      	lsrs	r3, r3, #19
 8009a5e:	04db      	lsls	r3, r3, #19
 8009a60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	0151      	lsls	r1, r2, #5
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	440a      	add	r2, r1
 8009a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	68da      	ldr	r2, [r3, #12]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	68da      	ldr	r2, [r3, #12]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	015a      	lsls	r2, r3, #5
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	0151      	lsls	r1, r2, #5
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	440a      	add	r2, r1
 8009ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ab8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009abc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aca:	691a      	ldr	r2, [r3, #16]
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	69db      	ldr	r3, [r3, #28]
 8009ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ad4:	6939      	ldr	r1, [r7, #16]
 8009ad6:	0148      	lsls	r0, r1, #5
 8009ad8:	6979      	ldr	r1, [r7, #20]
 8009ada:	4401      	add	r1, r0
 8009adc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d10d      	bne.n	8009b06 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d009      	beq.n	8009b06 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	6919      	ldr	r1, [r3, #16]
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	015a      	lsls	r2, r3, #5
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	4413      	add	r3, r2
 8009afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b02:	460a      	mov	r2, r1
 8009b04:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	0151      	lsls	r1, r2, #5
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	440a      	add	r2, r1
 8009b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	371c      	adds	r7, #28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	785b      	ldrb	r3, [r3, #1]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d14a      	bne.n	8009be8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	015a      	lsls	r2, r3, #5
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b6a:	f040 8086 	bne.w	8009c7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	7812      	ldrb	r2, [r2, #0]
 8009b82:	0151      	lsls	r1, r2, #5
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	440a      	add	r2, r1
 8009b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	7812      	ldrb	r2, [r2, #0]
 8009ba6:	0151      	lsls	r1, r2, #5
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	440a      	add	r2, r1
 8009bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d902      	bls.n	8009bcc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8009bca:	e056      	b.n	8009c7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009be4:	d0e7      	beq.n	8009bb6 <USB_EPStopXfer+0x82>
 8009be6:	e048      	b.n	8009c7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c00:	d13b      	bne.n	8009c7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	683a      	ldr	r2, [r7, #0]
 8009c14:	7812      	ldrb	r2, [r2, #0]
 8009c16:	0151      	lsls	r1, r2, #5
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	440a      	add	r2, r1
 8009c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	7812      	ldrb	r2, [r2, #0]
 8009c3a:	0151      	lsls	r1, r2, #5
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	440a      	add	r2, r1
 8009c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d902      	bls.n	8009c60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	75fb      	strb	r3, [r7, #23]
          break;
 8009c5e:	e00c      	b.n	8009c7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	015a      	lsls	r2, r3, #5
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	4413      	add	r3, r2
 8009c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c78:	d0e7      	beq.n	8009c4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	371c      	adds	r7, #28
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b089      	sub	sp, #36	; 0x24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	4611      	mov	r1, r2
 8009c94:	461a      	mov	r2, r3
 8009c96:	460b      	mov	r3, r1
 8009c98:	71fb      	strb	r3, [r7, #7]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d123      	bne.n	8009cf6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009cae:	88bb      	ldrh	r3, [r7, #4]
 8009cb0:	3303      	adds	r3, #3
 8009cb2:	089b      	lsrs	r3, r3, #2
 8009cb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61bb      	str	r3, [r7, #24]
 8009cba:	e018      	b.n	8009cee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009cbc:	79fb      	ldrb	r3, [r7, #7]
 8009cbe:	031a      	lsls	r2, r3, #12
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc8:	461a      	mov	r2, r3
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	3301      	adds	r3, #1
 8009cec:	61bb      	str	r3, [r7, #24]
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d3e2      	bcc.n	8009cbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3724      	adds	r7, #36	; 0x24
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b08b      	sub	sp, #44	; 0x2c
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d1a:	88fb      	ldrh	r3, [r7, #6]
 8009d1c:	089b      	lsrs	r3, r3, #2
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d22:	88fb      	ldrh	r3, [r7, #6]
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	623b      	str	r3, [r7, #32]
 8009d2e:	e014      	b.n	8009d5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	3301      	adds	r3, #1
 8009d40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	3301      	adds	r3, #1
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	3301      	adds	r3, #1
 8009d52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009d54:	6a3b      	ldr	r3, [r7, #32]
 8009d56:	3301      	adds	r3, #1
 8009d58:	623b      	str	r3, [r7, #32]
 8009d5a:	6a3a      	ldr	r2, [r7, #32]
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d3e6      	bcc.n	8009d30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d62:	8bfb      	ldrh	r3, [r7, #30]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01e      	beq.n	8009da6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d72:	461a      	mov	r2, r3
 8009d74:	f107 0310 	add.w	r3, r7, #16
 8009d78:	6812      	ldr	r2, [r2, #0]
 8009d7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	00db      	lsls	r3, r3, #3
 8009d84:	fa22 f303 	lsr.w	r3, r2, r3
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	701a      	strb	r2, [r3, #0]
      i++;
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	3301      	adds	r3, #1
 8009d92:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	3301      	adds	r3, #1
 8009d98:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009d9a:	8bfb      	ldrh	r3, [r7, #30]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009da0:	8bfb      	ldrh	r3, [r7, #30]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1ea      	bne.n	8009d7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	372c      	adds	r7, #44	; 0x2c
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	785b      	ldrb	r3, [r3, #1]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d12c      	bne.n	8009e2a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	015a      	lsls	r2, r3, #5
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	db12      	blt.n	8009e08 <USB_EPSetStall+0x54>
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00f      	beq.n	8009e08 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	0151      	lsls	r1, r2, #5
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	440a      	add	r2, r1
 8009dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e06:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	0151      	lsls	r1, r2, #5
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	440a      	add	r2, r1
 8009e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	e02b      	b.n	8009e82 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	015a      	lsls	r2, r3, #5
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	4413      	add	r3, r2
 8009e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	db12      	blt.n	8009e62 <USB_EPSetStall+0xae>
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00f      	beq.n	8009e62 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	015a      	lsls	r2, r3, #5
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	0151      	lsls	r1, r2, #5
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	440a      	add	r2, r1
 8009e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e60:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	015a      	lsls	r2, r3, #5
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	4413      	add	r3, r2
 8009e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	0151      	lsls	r1, r2, #5
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	440a      	add	r2, r1
 8009e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	785b      	ldrb	r3, [r3, #1]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d128      	bne.n	8009efe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	015a      	lsls	r2, r3, #5
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	0151      	lsls	r1, r2, #5
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	440a      	add	r2, r1
 8009ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ec6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009eca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	791b      	ldrb	r3, [r3, #4]
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d003      	beq.n	8009edc <USB_EPClearStall+0x4c>
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	791b      	ldrb	r3, [r3, #4]
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d138      	bne.n	8009f4e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	015a      	lsls	r2, r3, #5
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	0151      	lsls	r1, r2, #5
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	440a      	add	r2, r1
 8009ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009efa:	6013      	str	r3, [r2, #0]
 8009efc:	e027      	b.n	8009f4e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	0151      	lsls	r1, r2, #5
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	440a      	add	r2, r1
 8009f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	791b      	ldrb	r3, [r3, #4]
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d003      	beq.n	8009f2e <USB_EPClearStall+0x9e>
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	791b      	ldrb	r3, [r3, #4]
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d10f      	bne.n	8009f4e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	015a      	lsls	r2, r3, #5
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	4413      	add	r3, r2
 8009f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	0151      	lsls	r1, r2, #5
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	440a      	add	r2, r1
 8009f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f4c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009f7e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	78fb      	ldrb	r3, [r7, #3]
 8009f8a:	011b      	lsls	r3, r3, #4
 8009f8c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009f90:	68f9      	ldr	r1, [r7, #12]
 8009f92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f96:	4313      	orrs	r3, r2
 8009f98:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fc2:	f023 0303 	bic.w	r3, r3, #3
 8009fc6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fd6:	f023 0302 	bic.w	r3, r3, #2
 8009fda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b085      	sub	sp, #20
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a004:	f023 0303 	bic.w	r3, r3, #3
 800a008:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a018:	f043 0302 	orr.w	r3, r3, #2
 800a01c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	4013      	ands	r3, r2
 800a042:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a044:	68fb      	ldr	r3, [r7, #12]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a052:	b480      	push	{r7}
 800a054:	b085      	sub	sp, #20
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a06e:	69db      	ldr	r3, [r3, #28]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	4013      	ands	r3, r2
 800a074:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	0c1b      	lsrs	r3, r3, #16
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3714      	adds	r7, #20
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a086:	b480      	push	{r7}
 800a088:	b085      	sub	sp, #20
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a2:	69db      	ldr	r3, [r3, #28]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	b29b      	uxth	r3, r3
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b085      	sub	sp, #20
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a0ca:	78fb      	ldrb	r3, [r7, #3]
 800a0cc:	015a      	lsls	r2, r3, #5
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0e8:	68bb      	ldr	r3, [r7, #8]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b087      	sub	sp, #28
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	460b      	mov	r3, r1
 800a100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a118:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a11a:	78fb      	ldrb	r3, [r7, #3]
 800a11c:	f003 030f 	and.w	r3, r3, #15
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	fa22 f303 	lsr.w	r3, r2, r3
 800a126:	01db      	lsls	r3, r3, #7
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	4013      	ands	r3, r2
 800a142:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a144:	68bb      	ldr	r3, [r7, #8]
}
 800a146:	4618      	mov	r0, r3
 800a148:	371c      	adds	r7, #28
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	f003 0301 	and.w	r3, r3, #1
}
 800a162:	4618      	mov	r0, r3
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a16e:	b480      	push	{r7}
 800a170:	b085      	sub	sp, #20
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a188:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a18c:	f023 0307 	bic.w	r3, r3, #7
 800a190:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3714      	adds	r7, #20
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b087      	sub	sp, #28
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	460b      	mov	r3, r1
 800a1be:	607a      	str	r2, [r7, #4]
 800a1c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	333c      	adds	r3, #60	; 0x3c
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	4a26      	ldr	r2, [pc, #152]	; (800a26c <USB_EP0_OutStart+0xb8>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d90a      	bls.n	800a1ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1e8:	d101      	bne.n	800a1ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	e037      	b.n	800a25e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	697a      	ldr	r2, [r7, #20]
 800a204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a208:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a20c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a21c:	f043 0318 	orr.w	r3, r3, #24
 800a220:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a230:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a234:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a236:	7afb      	ldrb	r3, [r7, #11]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d10f      	bne.n	800a25c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a242:	461a      	mov	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a256:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a25a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	371c      	adds	r7, #28
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	4f54300a 	.word	0x4f54300a

0800a270 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	3301      	adds	r3, #1
 800a280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	4a13      	ldr	r2, [pc, #76]	; (800a2d4 <USB_CoreReset+0x64>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d901      	bls.n	800a28e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e01b      	b.n	800a2c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	daf2      	bge.n	800a27c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a296:	2300      	movs	r3, #0
 800a298:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	f043 0201 	orr.w	r2, r3, #1
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4a09      	ldr	r2, [pc, #36]	; (800a2d4 <USB_CoreReset+0x64>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d901      	bls.n	800a2b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e006      	b.n	800a2c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	f003 0301 	and.w	r3, r3, #1
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d0f0      	beq.n	800a2a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	00030d40 	.word	0x00030d40

0800a2d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a2e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a2e8:	f002 fc8a 	bl	800cc00 <USBD_static_malloc>
 800a2ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d109      	bne.n	800a308 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	32b0      	adds	r2, #176	; 0xb0
 800a2fe:	2100      	movs	r1, #0
 800a300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a304:	2302      	movs	r3, #2
 800a306:	e0d4      	b.n	800a4b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a308:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a30c:	2100      	movs	r1, #0
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f002 fce4 	bl	800ccdc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	32b0      	adds	r2, #176	; 0xb0
 800a31e:	68f9      	ldr	r1, [r7, #12]
 800a320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	32b0      	adds	r2, #176	; 0xb0
 800a32e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	7c1b      	ldrb	r3, [r3, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d138      	bne.n	800a3b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a340:	4b5e      	ldr	r3, [pc, #376]	; (800a4bc <USBD_CDC_Init+0x1e4>)
 800a342:	7819      	ldrb	r1, [r3, #0]
 800a344:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a348:	2202      	movs	r2, #2
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f002 fb35 	bl	800c9ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a350:	4b5a      	ldr	r3, [pc, #360]	; (800a4bc <USBD_CDC_Init+0x1e4>)
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	f003 020f 	and.w	r2, r3, #15
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	4613      	mov	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4413      	add	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	440b      	add	r3, r1
 800a364:	3324      	adds	r3, #36	; 0x24
 800a366:	2201      	movs	r2, #1
 800a368:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a36a:	4b55      	ldr	r3, [pc, #340]	; (800a4c0 <USBD_CDC_Init+0x1e8>)
 800a36c:	7819      	ldrb	r1, [r3, #0]
 800a36e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a372:	2202      	movs	r2, #2
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f002 fb20 	bl	800c9ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a37a:	4b51      	ldr	r3, [pc, #324]	; (800a4c0 <USBD_CDC_Init+0x1e8>)
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	f003 020f 	and.w	r2, r3, #15
 800a382:	6879      	ldr	r1, [r7, #4]
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	440b      	add	r3, r1
 800a38e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a392:	2201      	movs	r2, #1
 800a394:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a396:	4b4b      	ldr	r3, [pc, #300]	; (800a4c4 <USBD_CDC_Init+0x1ec>)
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	f003 020f 	and.w	r2, r3, #15
 800a39e:	6879      	ldr	r1, [r7, #4]
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4413      	add	r3, r2
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	440b      	add	r3, r1
 800a3aa:	3326      	adds	r3, #38	; 0x26
 800a3ac:	2210      	movs	r2, #16
 800a3ae:	801a      	strh	r2, [r3, #0]
 800a3b0:	e035      	b.n	800a41e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a3b2:	4b42      	ldr	r3, [pc, #264]	; (800a4bc <USBD_CDC_Init+0x1e4>)
 800a3b4:	7819      	ldrb	r1, [r3, #0]
 800a3b6:	2340      	movs	r3, #64	; 0x40
 800a3b8:	2202      	movs	r2, #2
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f002 fafd 	bl	800c9ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a3c0:	4b3e      	ldr	r3, [pc, #248]	; (800a4bc <USBD_CDC_Init+0x1e4>)
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	f003 020f 	and.w	r2, r3, #15
 800a3c8:	6879      	ldr	r1, [r7, #4]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	4413      	add	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	440b      	add	r3, r1
 800a3d4:	3324      	adds	r3, #36	; 0x24
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a3da:	4b39      	ldr	r3, [pc, #228]	; (800a4c0 <USBD_CDC_Init+0x1e8>)
 800a3dc:	7819      	ldrb	r1, [r3, #0]
 800a3de:	2340      	movs	r3, #64	; 0x40
 800a3e0:	2202      	movs	r2, #2
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f002 fae9 	bl	800c9ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a3e8:	4b35      	ldr	r3, [pc, #212]	; (800a4c0 <USBD_CDC_Init+0x1e8>)
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	f003 020f 	and.w	r2, r3, #15
 800a3f0:	6879      	ldr	r1, [r7, #4]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	440b      	add	r3, r1
 800a3fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a400:	2201      	movs	r2, #1
 800a402:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a404:	4b2f      	ldr	r3, [pc, #188]	; (800a4c4 <USBD_CDC_Init+0x1ec>)
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	f003 020f 	and.w	r2, r3, #15
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	4613      	mov	r3, r2
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	440b      	add	r3, r1
 800a418:	3326      	adds	r3, #38	; 0x26
 800a41a:	2210      	movs	r2, #16
 800a41c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a41e:	4b29      	ldr	r3, [pc, #164]	; (800a4c4 <USBD_CDC_Init+0x1ec>)
 800a420:	7819      	ldrb	r1, [r3, #0]
 800a422:	2308      	movs	r3, #8
 800a424:	2203      	movs	r2, #3
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f002 fac7 	bl	800c9ba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a42c:	4b25      	ldr	r3, [pc, #148]	; (800a4c4 <USBD_CDC_Init+0x1ec>)
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	f003 020f 	and.w	r2, r3, #15
 800a434:	6879      	ldr	r1, [r7, #4]
 800a436:	4613      	mov	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	440b      	add	r3, r1
 800a440:	3324      	adds	r3, #36	; 0x24
 800a442:	2201      	movs	r2, #1
 800a444:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	33b0      	adds	r3, #176	; 0xb0
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4413      	add	r3, r2
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a47c:	2302      	movs	r3, #2
 800a47e:	e018      	b.n	800a4b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	7c1b      	ldrb	r3, [r3, #16]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10a      	bne.n	800a49e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a488:	4b0d      	ldr	r3, [pc, #52]	; (800a4c0 <USBD_CDC_Init+0x1e8>)
 800a48a:	7819      	ldrb	r1, [r3, #0]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a492:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f002 fb7e 	bl	800cb98 <USBD_LL_PrepareReceive>
 800a49c:	e008      	b.n	800a4b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a49e:	4b08      	ldr	r3, [pc, #32]	; (800a4c0 <USBD_CDC_Init+0x1e8>)
 800a4a0:	7819      	ldrb	r1, [r3, #0]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4a8:	2340      	movs	r3, #64	; 0x40
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f002 fb74 	bl	800cb98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	200000a3 	.word	0x200000a3
 800a4c0:	200000a4 	.word	0x200000a4
 800a4c4:	200000a5 	.word	0x200000a5

0800a4c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a4d4:	4b3a      	ldr	r3, [pc, #232]	; (800a5c0 <USBD_CDC_DeInit+0xf8>)
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f002 fa93 	bl	800ca06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a4e0:	4b37      	ldr	r3, [pc, #220]	; (800a5c0 <USBD_CDC_DeInit+0xf8>)
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	f003 020f 	and.w	r2, r3, #15
 800a4e8:	6879      	ldr	r1, [r7, #4]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4413      	add	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	440b      	add	r3, r1
 800a4f4:	3324      	adds	r3, #36	; 0x24
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a4fa:	4b32      	ldr	r3, [pc, #200]	; (800a5c4 <USBD_CDC_DeInit+0xfc>)
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f002 fa80 	bl	800ca06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a506:	4b2f      	ldr	r3, [pc, #188]	; (800a5c4 <USBD_CDC_DeInit+0xfc>)
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	f003 020f 	and.w	r2, r3, #15
 800a50e:	6879      	ldr	r1, [r7, #4]
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	440b      	add	r3, r1
 800a51a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a51e:	2200      	movs	r2, #0
 800a520:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a522:	4b29      	ldr	r3, [pc, #164]	; (800a5c8 <USBD_CDC_DeInit+0x100>)
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	4619      	mov	r1, r3
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f002 fa6c 	bl	800ca06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a52e:	4b26      	ldr	r3, [pc, #152]	; (800a5c8 <USBD_CDC_DeInit+0x100>)
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	f003 020f 	and.w	r2, r3, #15
 800a536:	6879      	ldr	r1, [r7, #4]
 800a538:	4613      	mov	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4413      	add	r3, r2
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	440b      	add	r3, r1
 800a542:	3324      	adds	r3, #36	; 0x24
 800a544:	2200      	movs	r2, #0
 800a546:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a548:	4b1f      	ldr	r3, [pc, #124]	; (800a5c8 <USBD_CDC_DeInit+0x100>)
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	f003 020f 	and.w	r2, r3, #15
 800a550:	6879      	ldr	r1, [r7, #4]
 800a552:	4613      	mov	r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	440b      	add	r3, r1
 800a55c:	3326      	adds	r3, #38	; 0x26
 800a55e:	2200      	movs	r2, #0
 800a560:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	32b0      	adds	r2, #176	; 0xb0
 800a56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d01f      	beq.n	800a5b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	33b0      	adds	r3, #176	; 0xb0
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4413      	add	r3, r2
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	32b0      	adds	r2, #176	; 0xb0
 800a592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a596:	4618      	mov	r0, r3
 800a598:	f002 fb40 	bl	800cc1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	32b0      	adds	r2, #176	; 0xb0
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	200000a3 	.word	0x200000a3
 800a5c4:	200000a4 	.word	0x200000a4
 800a5c8:	200000a5 	.word	0x200000a5

0800a5cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	32b0      	adds	r2, #176	; 0xb0
 800a5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e0bf      	b.n	800a77c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a604:	2b00      	cmp	r3, #0
 800a606:	d050      	beq.n	800a6aa <USBD_CDC_Setup+0xde>
 800a608:	2b20      	cmp	r3, #32
 800a60a:	f040 80af 	bne.w	800a76c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	88db      	ldrh	r3, [r3, #6]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d03a      	beq.n	800a68c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	b25b      	sxtb	r3, r3
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	da1b      	bge.n	800a658 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	33b0      	adds	r3, #176	; 0xb0
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4413      	add	r3, r2
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a636:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	88d2      	ldrh	r2, [r2, #6]
 800a63c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	88db      	ldrh	r3, [r3, #6]
 800a642:	2b07      	cmp	r3, #7
 800a644:	bf28      	it	cs
 800a646:	2307      	movcs	r3, #7
 800a648:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	89fa      	ldrh	r2, [r7, #14]
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f001 fd89 	bl	800c168 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a656:	e090      	b.n	800a77a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	785a      	ldrb	r2, [r3, #1]
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	88db      	ldrh	r3, [r3, #6]
 800a666:	2b3f      	cmp	r3, #63	; 0x3f
 800a668:	d803      	bhi.n	800a672 <USBD_CDC_Setup+0xa6>
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	88db      	ldrh	r3, [r3, #6]
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	e000      	b.n	800a674 <USBD_CDC_Setup+0xa8>
 800a672:	2240      	movs	r2, #64	; 0x40
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a67a:	6939      	ldr	r1, [r7, #16]
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a682:	461a      	mov	r2, r3
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f001 fd9b 	bl	800c1c0 <USBD_CtlPrepareRx>
      break;
 800a68a:	e076      	b.n	800a77a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	33b0      	adds	r3, #176	; 0xb0
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	7850      	ldrb	r0, [r2, #1]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	4798      	blx	r3
      break;
 800a6a8:	e067      	b.n	800a77a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	785b      	ldrb	r3, [r3, #1]
 800a6ae:	2b0b      	cmp	r3, #11
 800a6b0:	d851      	bhi.n	800a756 <USBD_CDC_Setup+0x18a>
 800a6b2:	a201      	add	r2, pc, #4	; (adr r2, 800a6b8 <USBD_CDC_Setup+0xec>)
 800a6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b8:	0800a6e9 	.word	0x0800a6e9
 800a6bc:	0800a765 	.word	0x0800a765
 800a6c0:	0800a757 	.word	0x0800a757
 800a6c4:	0800a757 	.word	0x0800a757
 800a6c8:	0800a757 	.word	0x0800a757
 800a6cc:	0800a757 	.word	0x0800a757
 800a6d0:	0800a757 	.word	0x0800a757
 800a6d4:	0800a757 	.word	0x0800a757
 800a6d8:	0800a757 	.word	0x0800a757
 800a6dc:	0800a757 	.word	0x0800a757
 800a6e0:	0800a713 	.word	0x0800a713
 800a6e4:	0800a73d 	.word	0x0800a73d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b03      	cmp	r3, #3
 800a6f2:	d107      	bne.n	800a704 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a6f4:	f107 030a 	add.w	r3, r7, #10
 800a6f8:	2202      	movs	r2, #2
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f001 fd33 	bl	800c168 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a702:	e032      	b.n	800a76a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f001 fcbd 	bl	800c086 <USBD_CtlError>
            ret = USBD_FAIL;
 800a70c:	2303      	movs	r3, #3
 800a70e:	75fb      	strb	r3, [r7, #23]
          break;
 800a710:	e02b      	b.n	800a76a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d107      	bne.n	800a72e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a71e:	f107 030d 	add.w	r3, r7, #13
 800a722:	2201      	movs	r2, #1
 800a724:	4619      	mov	r1, r3
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f001 fd1e 	bl	800c168 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a72c:	e01d      	b.n	800a76a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f001 fca8 	bl	800c086 <USBD_CtlError>
            ret = USBD_FAIL;
 800a736:	2303      	movs	r3, #3
 800a738:	75fb      	strb	r3, [r7, #23]
          break;
 800a73a:	e016      	b.n	800a76a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b03      	cmp	r3, #3
 800a746:	d00f      	beq.n	800a768 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a748:	6839      	ldr	r1, [r7, #0]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f001 fc9b 	bl	800c086 <USBD_CtlError>
            ret = USBD_FAIL;
 800a750:	2303      	movs	r3, #3
 800a752:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a754:	e008      	b.n	800a768 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f001 fc94 	bl	800c086 <USBD_CtlError>
          ret = USBD_FAIL;
 800a75e:	2303      	movs	r3, #3
 800a760:	75fb      	strb	r3, [r7, #23]
          break;
 800a762:	e002      	b.n	800a76a <USBD_CDC_Setup+0x19e>
          break;
 800a764:	bf00      	nop
 800a766:	e008      	b.n	800a77a <USBD_CDC_Setup+0x1ae>
          break;
 800a768:	bf00      	nop
      }
      break;
 800a76a:	e006      	b.n	800a77a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f001 fc89 	bl	800c086 <USBD_CtlError>
      ret = USBD_FAIL;
 800a774:	2303      	movs	r3, #3
 800a776:	75fb      	strb	r3, [r7, #23]
      break;
 800a778:	bf00      	nop
  }

  return (uint8_t)ret;
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	460b      	mov	r3, r1
 800a78e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a796:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	32b0      	adds	r2, #176	; 0xb0
 800a7a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d101      	bne.n	800a7ae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	e065      	b.n	800a87a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	32b0      	adds	r2, #176	; 0xb0
 800a7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a7be:	78fb      	ldrb	r3, [r7, #3]
 800a7c0:	f003 020f 	and.w	r2, r3, #15
 800a7c4:	6879      	ldr	r1, [r7, #4]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	440b      	add	r3, r1
 800a7d0:	3318      	adds	r3, #24
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d02f      	beq.n	800a838 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	f003 020f 	and.w	r2, r3, #15
 800a7de:	6879      	ldr	r1, [r7, #4]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	440b      	add	r3, r1
 800a7ea:	3318      	adds	r3, #24
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	78fb      	ldrb	r3, [r7, #3]
 800a7f0:	f003 010f 	and.w	r1, r3, #15
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	00db      	lsls	r3, r3, #3
 800a7fa:	440b      	add	r3, r1
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4403      	add	r3, r0
 800a800:	3348      	adds	r3, #72	; 0x48
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	fbb2 f1f3 	udiv	r1, r2, r3
 800a808:	fb01 f303 	mul.w	r3, r1, r3
 800a80c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d112      	bne.n	800a838 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a812:	78fb      	ldrb	r3, [r7, #3]
 800a814:	f003 020f 	and.w	r2, r3, #15
 800a818:	6879      	ldr	r1, [r7, #4]
 800a81a:	4613      	mov	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	4413      	add	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	440b      	add	r3, r1
 800a824:	3318      	adds	r3, #24
 800a826:	2200      	movs	r2, #0
 800a828:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a82a:	78f9      	ldrb	r1, [r7, #3]
 800a82c:	2300      	movs	r3, #0
 800a82e:	2200      	movs	r2, #0
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f002 f990 	bl	800cb56 <USBD_LL_Transmit>
 800a836:	e01f      	b.n	800a878 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	33b0      	adds	r3, #176	; 0xb0
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d010      	beq.n	800a878 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	33b0      	adds	r3, #176	; 0xb0
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a874:	78fa      	ldrb	r2, [r7, #3]
 800a876:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b084      	sub	sp, #16
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	460b      	mov	r3, r1
 800a88c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	32b0      	adds	r2, #176	; 0xb0
 800a898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a89c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	32b0      	adds	r2, #176	; 0xb0
 800a8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e01a      	b.n	800a8ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a8b4:	78fb      	ldrb	r3, [r7, #3]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f002 f98e 	bl	800cbda <USBD_LL_GetRxDataSize>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	33b0      	adds	r3, #176	; 0xb0
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4413      	add	r3, r2
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b084      	sub	sp, #16
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	32b0      	adds	r2, #176	; 0xb0
 800a904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a908:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a910:	2303      	movs	r3, #3
 800a912:	e025      	b.n	800a960 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	33b0      	adds	r3, #176	; 0xb0
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4413      	add	r3, r2
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d01a      	beq.n	800a95e <USBD_CDC_EP0_RxReady+0x6c>
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a92e:	2bff      	cmp	r3, #255	; 0xff
 800a930:	d015      	beq.n	800a95e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	33b0      	adds	r3, #176	; 0xb0
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a94a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a952:	b292      	uxth	r2, r2
 800a954:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	22ff      	movs	r2, #255	; 0xff
 800a95a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a970:	2182      	movs	r1, #130	; 0x82
 800a972:	4818      	ldr	r0, [pc, #96]	; (800a9d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a974:	f000 fd4f 	bl	800b416 <USBD_GetEpDesc>
 800a978:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a97a:	2101      	movs	r1, #1
 800a97c:	4815      	ldr	r0, [pc, #84]	; (800a9d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a97e:	f000 fd4a 	bl	800b416 <USBD_GetEpDesc>
 800a982:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a984:	2181      	movs	r1, #129	; 0x81
 800a986:	4813      	ldr	r0, [pc, #76]	; (800a9d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a988:	f000 fd45 	bl	800b416 <USBD_GetEpDesc>
 800a98c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2210      	movs	r2, #16
 800a998:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d006      	beq.n	800a9ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9a8:	711a      	strb	r2, [r3, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d006      	beq.n	800a9c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9bc:	711a      	strb	r2, [r3, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2243      	movs	r2, #67	; 0x43
 800a9c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a9c8:	4b02      	ldr	r3, [pc, #8]	; (800a9d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3718      	adds	r7, #24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20000060 	.word	0x20000060

0800a9d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a9e0:	2182      	movs	r1, #130	; 0x82
 800a9e2:	4818      	ldr	r0, [pc, #96]	; (800aa44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9e4:	f000 fd17 	bl	800b416 <USBD_GetEpDesc>
 800a9e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a9ea:	2101      	movs	r1, #1
 800a9ec:	4815      	ldr	r0, [pc, #84]	; (800aa44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9ee:	f000 fd12 	bl	800b416 <USBD_GetEpDesc>
 800a9f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a9f4:	2181      	movs	r1, #129	; 0x81
 800a9f6:	4813      	ldr	r0, [pc, #76]	; (800aa44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9f8:	f000 fd0d 	bl	800b416 <USBD_GetEpDesc>
 800a9fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d002      	beq.n	800aa0a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	2210      	movs	r2, #16
 800aa08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d006      	beq.n	800aa1e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	2200      	movs	r2, #0
 800aa14:	711a      	strb	r2, [r3, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f042 0202 	orr.w	r2, r2, #2
 800aa1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d006      	beq.n	800aa32 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	711a      	strb	r2, [r3, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f042 0202 	orr.w	r2, r2, #2
 800aa30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2243      	movs	r2, #67	; 0x43
 800aa36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aa38:	4b02      	ldr	r3, [pc, #8]	; (800aa44 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20000060 	.word	0x20000060

0800aa48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aa50:	2182      	movs	r1, #130	; 0x82
 800aa52:	4818      	ldr	r0, [pc, #96]	; (800aab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa54:	f000 fcdf 	bl	800b416 <USBD_GetEpDesc>
 800aa58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	4815      	ldr	r0, [pc, #84]	; (800aab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa5e:	f000 fcda 	bl	800b416 <USBD_GetEpDesc>
 800aa62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aa64:	2181      	movs	r1, #129	; 0x81
 800aa66:	4813      	ldr	r0, [pc, #76]	; (800aab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa68:	f000 fcd5 	bl	800b416 <USBD_GetEpDesc>
 800aa6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	2210      	movs	r2, #16
 800aa78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d006      	beq.n	800aa8e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa88:	711a      	strb	r2, [r3, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d006      	beq.n	800aaa2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa9c:	711a      	strb	r2, [r3, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2243      	movs	r2, #67	; 0x43
 800aaa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aaa8:	4b02      	ldr	r3, [pc, #8]	; (800aab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	20000060 	.word	0x20000060

0800aab8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	220a      	movs	r2, #10
 800aac4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aac6:	4b03      	ldr	r3, [pc, #12]	; (800aad4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	2000001c 	.word	0x2000001c

0800aad8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e009      	b.n	800ab00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	33b0      	adds	r3, #176	; 0xb0
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4413      	add	r3, r2
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	32b0      	adds	r2, #176	; 0xb0
 800ab22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab26:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e008      	b.n	800ab44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	371c      	adds	r7, #28
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	32b0      	adds	r2, #176	; 0xb0
 800ab64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e004      	b.n	800ab7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
	...

0800ab8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	32b0      	adds	r2, #176	; 0xb0
 800ab9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800aba4:	2301      	movs	r3, #1
 800aba6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	32b0      	adds	r2, #176	; 0xb0
 800abb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d101      	bne.n	800abbe <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800abba:	2303      	movs	r3, #3
 800abbc:	e025      	b.n	800ac0a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d11f      	bne.n	800ac08 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	2201      	movs	r2, #1
 800abcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800abd0:	4b10      	ldr	r3, [pc, #64]	; (800ac14 <USBD_CDC_TransmitPacket+0x88>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	f003 020f 	and.w	r2, r3, #15
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	4613      	mov	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4413      	add	r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4403      	add	r3, r0
 800abea:	3318      	adds	r3, #24
 800abec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800abee:	4b09      	ldr	r3, [pc, #36]	; (800ac14 <USBD_CDC_TransmitPacket+0x88>)
 800abf0:	7819      	ldrb	r1, [r3, #0]
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f001 ffa9 	bl	800cb56 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ac04:	2300      	movs	r3, #0
 800ac06:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ac08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	200000a3 	.word	0x200000a3

0800ac18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	32b0      	adds	r2, #176	; 0xb0
 800ac2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac2e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	32b0      	adds	r2, #176	; 0xb0
 800ac3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d101      	bne.n	800ac46 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e018      	b.n	800ac78 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	7c1b      	ldrb	r3, [r3, #16]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10a      	bne.n	800ac64 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac4e:	4b0c      	ldr	r3, [pc, #48]	; (800ac80 <USBD_CDC_ReceivePacket+0x68>)
 800ac50:	7819      	ldrb	r1, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f001 ff9b 	bl	800cb98 <USBD_LL_PrepareReceive>
 800ac62:	e008      	b.n	800ac76 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac64:	4b06      	ldr	r3, [pc, #24]	; (800ac80 <USBD_CDC_ReceivePacket+0x68>)
 800ac66:	7819      	ldrb	r1, [r3, #0]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac6e:	2340      	movs	r3, #64	; 0x40
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f001 ff91 	bl	800cb98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	200000a4 	.word	0x200000a4

0800ac84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d101      	bne.n	800ac9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e01f      	b.n	800acdc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	68ba      	ldr	r2, [r7, #8]
 800acbe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	79fa      	ldrb	r2, [r7, #7]
 800acce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f001 fe0b 	bl	800c8ec <USBD_LL_Init>
 800acd6:	4603      	mov	r3, r0
 800acd8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800acda:	7dfb      	ldrb	r3, [r7, #23]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acee:	2300      	movs	r3, #0
 800acf0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e025      	b.n	800ad48 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	32ae      	adds	r2, #174	; 0xae
 800ad0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00f      	beq.n	800ad38 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	32ae      	adds	r2, #174	; 0xae
 800ad22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad28:	f107 020e 	add.w	r2, r7, #14
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4798      	blx	r3
 800ad30:	4602      	mov	r2, r0
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ad3e:	1c5a      	adds	r2, r3, #1
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f001 fe13 	bl	800c984 <USBD_LL_Start>
 800ad5e:	4603      	mov	r3, r0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad70:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b084      	sub	sp, #16
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	460b      	mov	r3, r1
 800ad88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d009      	beq.n	800adac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	78fa      	ldrb	r2, [r7, #3]
 800ada2:	4611      	mov	r1, r2
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	4798      	blx	r3
 800ada8:	4603      	mov	r3, r0
 800adaa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800adac:	7bfb      	ldrb	r3, [r7, #15]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
 800adbe:	460b      	mov	r3, r1
 800adc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800adc2:	2300      	movs	r3, #0
 800adc4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	78fa      	ldrb	r2, [r7, #3]
 800add0:	4611      	mov	r1, r2
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	4798      	blx	r3
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d001      	beq.n	800ade0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800addc:	2303      	movs	r3, #3
 800adde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b084      	sub	sp, #16
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adfa:	6839      	ldr	r1, [r7, #0]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f001 f908 	bl	800c012 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ae10:	461a      	mov	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae1e:	f003 031f 	and.w	r3, r3, #31
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d01a      	beq.n	800ae5c <USBD_LL_SetupStage+0x72>
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d822      	bhi.n	800ae70 <USBD_LL_SetupStage+0x86>
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <USBD_LL_SetupStage+0x4a>
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d00a      	beq.n	800ae48 <USBD_LL_SetupStage+0x5e>
 800ae32:	e01d      	b.n	800ae70 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fb5f 	bl	800b500 <USBD_StdDevReq>
 800ae42:	4603      	mov	r3, r0
 800ae44:	73fb      	strb	r3, [r7, #15]
      break;
 800ae46:	e020      	b.n	800ae8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fbc7 	bl	800b5e4 <USBD_StdItfReq>
 800ae56:	4603      	mov	r3, r0
 800ae58:	73fb      	strb	r3, [r7, #15]
      break;
 800ae5a:	e016      	b.n	800ae8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fc29 	bl	800b6bc <USBD_StdEPReq>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae6e:	e00c      	b.n	800ae8a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f001 fde0 	bl	800ca44 <USBD_LL_StallEP>
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
      break;
 800ae88:	bf00      	nop
  }

  return ret;
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800aea6:	7afb      	ldrb	r3, [r7, #11]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d16e      	bne.n	800af8a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aeb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aeba:	2b03      	cmp	r3, #3
 800aebc:	f040 8098 	bne.w	800aff0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	689a      	ldr	r2, [r3, #8]
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d913      	bls.n	800aef4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	689a      	ldr	r2, [r3, #8]
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	1ad2      	subs	r2, r2, r3
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	68da      	ldr	r2, [r3, #12]
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	4293      	cmp	r3, r2
 800aee4:	bf28      	it	cs
 800aee6:	4613      	movcs	r3, r2
 800aee8:	461a      	mov	r2, r3
 800aeea:	6879      	ldr	r1, [r7, #4]
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f001 f984 	bl	800c1fa <USBD_CtlContinueRx>
 800aef2:	e07d      	b.n	800aff0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aefa:	f003 031f 	and.w	r3, r3, #31
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d014      	beq.n	800af2c <USBD_LL_DataOutStage+0x98>
 800af02:	2b02      	cmp	r3, #2
 800af04:	d81d      	bhi.n	800af42 <USBD_LL_DataOutStage+0xae>
 800af06:	2b00      	cmp	r3, #0
 800af08:	d002      	beq.n	800af10 <USBD_LL_DataOutStage+0x7c>
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d003      	beq.n	800af16 <USBD_LL_DataOutStage+0x82>
 800af0e:	e018      	b.n	800af42 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800af10:	2300      	movs	r3, #0
 800af12:	75bb      	strb	r3, [r7, #22]
            break;
 800af14:	e018      	b.n	800af48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	4619      	mov	r1, r3
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f000 fa5e 	bl	800b3e2 <USBD_CoreFindIF>
 800af26:	4603      	mov	r3, r0
 800af28:	75bb      	strb	r3, [r7, #22]
            break;
 800af2a:	e00d      	b.n	800af48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800af32:	b2db      	uxtb	r3, r3
 800af34:	4619      	mov	r1, r3
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f000 fa60 	bl	800b3fc <USBD_CoreFindEP>
 800af3c:	4603      	mov	r3, r0
 800af3e:	75bb      	strb	r3, [r7, #22]
            break;
 800af40:	e002      	b.n	800af48 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800af42:	2300      	movs	r3, #0
 800af44:	75bb      	strb	r3, [r7, #22]
            break;
 800af46:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800af48:	7dbb      	ldrb	r3, [r7, #22]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d119      	bne.n	800af82 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b03      	cmp	r3, #3
 800af58:	d113      	bne.n	800af82 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800af5a:	7dba      	ldrb	r2, [r7, #22]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	32ae      	adds	r2, #174	; 0xae
 800af60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00b      	beq.n	800af82 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800af6a:	7dba      	ldrb	r2, [r7, #22]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800af72:	7dba      	ldrb	r2, [r7, #22]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	32ae      	adds	r2, #174	; 0xae
 800af78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f001 f94a 	bl	800c21c <USBD_CtlSendStatus>
 800af88:	e032      	b.n	800aff0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800af8a:	7afb      	ldrb	r3, [r7, #11]
 800af8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af90:	b2db      	uxtb	r3, r3
 800af92:	4619      	mov	r1, r3
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f000 fa31 	bl	800b3fc <USBD_CoreFindEP>
 800af9a:	4603      	mov	r3, r0
 800af9c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af9e:	7dbb      	ldrb	r3, [r7, #22]
 800afa0:	2bff      	cmp	r3, #255	; 0xff
 800afa2:	d025      	beq.n	800aff0 <USBD_LL_DataOutStage+0x15c>
 800afa4:	7dbb      	ldrb	r3, [r7, #22]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d122      	bne.n	800aff0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b03      	cmp	r3, #3
 800afb4:	d117      	bne.n	800afe6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800afb6:	7dba      	ldrb	r2, [r7, #22]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	32ae      	adds	r2, #174	; 0xae
 800afbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00f      	beq.n	800afe6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800afc6:	7dba      	ldrb	r2, [r7, #22]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800afce:	7dba      	ldrb	r2, [r7, #22]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	32ae      	adds	r2, #174	; 0xae
 800afd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	7afa      	ldrb	r2, [r7, #11]
 800afdc:	4611      	mov	r1, r2
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	4798      	blx	r3
 800afe2:	4603      	mov	r3, r0
 800afe4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800afec:	7dfb      	ldrb	r3, [r7, #23]
 800afee:	e000      	b.n	800aff2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3718      	adds	r7, #24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b086      	sub	sp, #24
 800affe:	af00      	add	r7, sp, #0
 800b000:	60f8      	str	r0, [r7, #12]
 800b002:	460b      	mov	r3, r1
 800b004:	607a      	str	r2, [r7, #4]
 800b006:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b008:	7afb      	ldrb	r3, [r7, #11]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d16f      	bne.n	800b0ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3314      	adds	r3, #20
 800b012:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d15a      	bne.n	800b0d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	689a      	ldr	r2, [r3, #8]
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	429a      	cmp	r2, r3
 800b028:	d914      	bls.n	800b054 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	689a      	ldr	r2, [r3, #8]
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	1ad2      	subs	r2, r2, r3
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	461a      	mov	r2, r3
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f001 f8ac 	bl	800c19e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b046:	2300      	movs	r3, #0
 800b048:	2200      	movs	r2, #0
 800b04a:	2100      	movs	r1, #0
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f001 fda3 	bl	800cb98 <USBD_LL_PrepareReceive>
 800b052:	e03f      	b.n	800b0d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	68da      	ldr	r2, [r3, #12]
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d11c      	bne.n	800b09a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	685a      	ldr	r2, [r3, #4]
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b068:	429a      	cmp	r2, r3
 800b06a:	d316      	bcc.n	800b09a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	685a      	ldr	r2, [r3, #4]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b076:	429a      	cmp	r2, r3
 800b078:	d20f      	bcs.n	800b09a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b07a:	2200      	movs	r2, #0
 800b07c:	2100      	movs	r1, #0
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f001 f88d 	bl	800c19e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b08c:	2300      	movs	r3, #0
 800b08e:	2200      	movs	r2, #0
 800b090:	2100      	movs	r1, #0
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f001 fd80 	bl	800cb98 <USBD_LL_PrepareReceive>
 800b098:	e01c      	b.n	800b0d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d10f      	bne.n	800b0c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d009      	beq.n	800b0c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0c6:	2180      	movs	r1, #128	; 0x80
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f001 fcbb 	bl	800ca44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f001 f8b7 	bl	800c242 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d03a      	beq.n	800b154 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f7ff fe42 	bl	800ad68 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b0ec:	e032      	b.n	800b154 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b0ee:	7afb      	ldrb	r3, [r7, #11]
 800b0f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f000 f97f 	bl	800b3fc <USBD_CoreFindEP>
 800b0fe:	4603      	mov	r3, r0
 800b100:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b102:	7dfb      	ldrb	r3, [r7, #23]
 800b104:	2bff      	cmp	r3, #255	; 0xff
 800b106:	d025      	beq.n	800b154 <USBD_LL_DataInStage+0x15a>
 800b108:	7dfb      	ldrb	r3, [r7, #23]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d122      	bne.n	800b154 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b03      	cmp	r3, #3
 800b118:	d11c      	bne.n	800b154 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b11a:	7dfa      	ldrb	r2, [r7, #23]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	32ae      	adds	r2, #174	; 0xae
 800b120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d014      	beq.n	800b154 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b12a:	7dfa      	ldrb	r2, [r7, #23]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b132:	7dfa      	ldrb	r2, [r7, #23]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	32ae      	adds	r2, #174	; 0xae
 800b138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	7afa      	ldrb	r2, [r7, #11]
 800b140:	4611      	mov	r1, r2
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	4798      	blx	r3
 800b146:	4603      	mov	r3, r0
 800b148:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b14a:	7dbb      	ldrb	r3, [r7, #22]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d001      	beq.n	800b154 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b150:	7dbb      	ldrb	r3, [r7, #22]
 800b152:	e000      	b.n	800b156 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3718      	adds	r7, #24
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b084      	sub	sp, #16
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b196:	2b00      	cmp	r3, #0
 800b198:	d014      	beq.n	800b1c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00e      	beq.n	800b1c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	6852      	ldr	r2, [r2, #4]
 800b1b2:	b2d2      	uxtb	r2, r2
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	4798      	blx	r3
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b1c4:	2340      	movs	r3, #64	; 0x40
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f001 fbf5 	bl	800c9ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2240      	movs	r2, #64	; 0x40
 800b1dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b1e0:	2340      	movs	r3, #64	; 0x40
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	2180      	movs	r1, #128	; 0x80
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f001 fbe7 	bl	800c9ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2240      	movs	r2, #64	; 0x40
 800b1f6:	621a      	str	r2, [r3, #32]

  return ret;
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b202:	b480      	push	{r7}
 800b204:	b083      	sub	sp, #12
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	460b      	mov	r3, r1
 800b20c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	78fa      	ldrb	r2, [r7, #3]
 800b212:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b222:	b480      	push	{r7}
 800b224:	b083      	sub	sp, #12
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b230:	b2da      	uxtb	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2204      	movs	r2, #4
 800b23c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	370c      	adds	r7, #12
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b24e:	b480      	push	{r7}
 800b250:	b083      	sub	sp, #12
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b04      	cmp	r3, #4
 800b260:	d106      	bne.n	800b270 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	370c      	adds	r7, #12
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr

0800b27e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b082      	sub	sp, #8
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d110      	bne.n	800b2b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00b      	beq.n	800b2b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a2:	69db      	ldr	r3, [r3, #28]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d005      	beq.n	800b2b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ae:	69db      	ldr	r3, [r3, #28]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3708      	adds	r7, #8
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b082      	sub	sp, #8
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	32ae      	adds	r2, #174	; 0xae
 800b2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d101      	bne.n	800b2e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e01c      	b.n	800b31a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	2b03      	cmp	r3, #3
 800b2ea:	d115      	bne.n	800b318 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	32ae      	adds	r2, #174	; 0xae
 800b2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2fa:	6a1b      	ldr	r3, [r3, #32]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00b      	beq.n	800b318 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	32ae      	adds	r2, #174	; 0xae
 800b30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b30e:	6a1b      	ldr	r3, [r3, #32]
 800b310:	78fa      	ldrb	r2, [r7, #3]
 800b312:	4611      	mov	r1, r2
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b082      	sub	sp, #8
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	460b      	mov	r3, r1
 800b32c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	32ae      	adds	r2, #174	; 0xae
 800b338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b340:	2303      	movs	r3, #3
 800b342:	e01c      	b.n	800b37e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b03      	cmp	r3, #3
 800b34e:	d115      	bne.n	800b37c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	32ae      	adds	r2, #174	; 0xae
 800b35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00b      	beq.n	800b37c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	32ae      	adds	r2, #174	; 0xae
 800b36e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b374:	78fa      	ldrb	r2, [r7, #3]
 800b376:	4611      	mov	r1, r2
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b386:	b480      	push	{r7}
 800b388:	b083      	sub	sp, #12
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00e      	beq.n	800b3d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	6852      	ldr	r2, [r2, #4]
 800b3c6:	b2d2      	uxtb	r2, r2
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	4798      	blx	r3
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d001      	beq.n	800b3d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b3e2:	b480      	push	{r7}
 800b3e4:	b083      	sub	sp, #12
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b3ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	460b      	mov	r3, r1
 800b406:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b408:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b086      	sub	sp, #24
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	460b      	mov	r3, r1
 800b420:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b42a:	2300      	movs	r3, #0
 800b42c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	885b      	ldrh	r3, [r3, #2]
 800b432:	b29a      	uxth	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d920      	bls.n	800b480 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	b29b      	uxth	r3, r3
 800b444:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b446:	e013      	b.n	800b470 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b448:	f107 030a 	add.w	r3, r7, #10
 800b44c:	4619      	mov	r1, r3
 800b44e:	6978      	ldr	r0, [r7, #20]
 800b450:	f000 f81b 	bl	800b48a <USBD_GetNextDesc>
 800b454:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	785b      	ldrb	r3, [r3, #1]
 800b45a:	2b05      	cmp	r3, #5
 800b45c:	d108      	bne.n	800b470 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	789b      	ldrb	r3, [r3, #2]
 800b466:	78fa      	ldrb	r2, [r7, #3]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d008      	beq.n	800b47e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b46c:	2300      	movs	r3, #0
 800b46e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	885b      	ldrh	r3, [r3, #2]
 800b474:	b29a      	uxth	r2, r3
 800b476:	897b      	ldrh	r3, [r7, #10]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d8e5      	bhi.n	800b448 <USBD_GetEpDesc+0x32>
 800b47c:	e000      	b.n	800b480 <USBD_GetEpDesc+0x6a>
          break;
 800b47e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b480:	693b      	ldr	r3, [r7, #16]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b085      	sub	sp, #20
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	881a      	ldrh	r2, [r3, #0]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	4413      	add	r3, r2
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b4e2:	8a3b      	ldrh	r3, [r7, #16]
 800b4e4:	021b      	lsls	r3, r3, #8
 800b4e6:	b21a      	sxth	r2, r3
 800b4e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	b21b      	sxth	r3, r3
 800b4f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b4f2:	89fb      	ldrh	r3, [r7, #14]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	371c      	adds	r7, #28
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b516:	2b40      	cmp	r3, #64	; 0x40
 800b518:	d005      	beq.n	800b526 <USBD_StdDevReq+0x26>
 800b51a:	2b40      	cmp	r3, #64	; 0x40
 800b51c:	d857      	bhi.n	800b5ce <USBD_StdDevReq+0xce>
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00f      	beq.n	800b542 <USBD_StdDevReq+0x42>
 800b522:	2b20      	cmp	r3, #32
 800b524:	d153      	bne.n	800b5ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	32ae      	adds	r2, #174	; 0xae
 800b530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	6839      	ldr	r1, [r7, #0]
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	4798      	blx	r3
 800b53c:	4603      	mov	r3, r0
 800b53e:	73fb      	strb	r3, [r7, #15]
      break;
 800b540:	e04a      	b.n	800b5d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	785b      	ldrb	r3, [r3, #1]
 800b546:	2b09      	cmp	r3, #9
 800b548:	d83b      	bhi.n	800b5c2 <USBD_StdDevReq+0xc2>
 800b54a:	a201      	add	r2, pc, #4	; (adr r2, 800b550 <USBD_StdDevReq+0x50>)
 800b54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b550:	0800b5a5 	.word	0x0800b5a5
 800b554:	0800b5b9 	.word	0x0800b5b9
 800b558:	0800b5c3 	.word	0x0800b5c3
 800b55c:	0800b5af 	.word	0x0800b5af
 800b560:	0800b5c3 	.word	0x0800b5c3
 800b564:	0800b583 	.word	0x0800b583
 800b568:	0800b579 	.word	0x0800b579
 800b56c:	0800b5c3 	.word	0x0800b5c3
 800b570:	0800b59b 	.word	0x0800b59b
 800b574:	0800b58d 	.word	0x0800b58d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fa3c 	bl	800b9f8 <USBD_GetDescriptor>
          break;
 800b580:	e024      	b.n	800b5cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fba1 	bl	800bccc <USBD_SetAddress>
          break;
 800b58a:	e01f      	b.n	800b5cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b58c:	6839      	ldr	r1, [r7, #0]
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 fbe0 	bl	800bd54 <USBD_SetConfig>
 800b594:	4603      	mov	r3, r0
 800b596:	73fb      	strb	r3, [r7, #15]
          break;
 800b598:	e018      	b.n	800b5cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b59a:	6839      	ldr	r1, [r7, #0]
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 fc83 	bl	800bea8 <USBD_GetConfig>
          break;
 800b5a2:	e013      	b.n	800b5cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fcb4 	bl	800bf14 <USBD_GetStatus>
          break;
 800b5ac:	e00e      	b.n	800b5cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b5ae:	6839      	ldr	r1, [r7, #0]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 fce3 	bl	800bf7c <USBD_SetFeature>
          break;
 800b5b6:	e009      	b.n	800b5cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b5b8:	6839      	ldr	r1, [r7, #0]
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fd07 	bl	800bfce <USBD_ClrFeature>
          break;
 800b5c0:	e004      	b.n	800b5cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b5c2:	6839      	ldr	r1, [r7, #0]
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fd5e 	bl	800c086 <USBD_CtlError>
          break;
 800b5ca:	bf00      	nop
      }
      break;
 800b5cc:	e004      	b.n	800b5d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b5ce:	6839      	ldr	r1, [r7, #0]
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fd58 	bl	800c086 <USBD_CtlError>
      break;
 800b5d6:	bf00      	nop
  }

  return ret;
 800b5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop

0800b5e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5fa:	2b40      	cmp	r3, #64	; 0x40
 800b5fc:	d005      	beq.n	800b60a <USBD_StdItfReq+0x26>
 800b5fe:	2b40      	cmp	r3, #64	; 0x40
 800b600:	d852      	bhi.n	800b6a8 <USBD_StdItfReq+0xc4>
 800b602:	2b00      	cmp	r3, #0
 800b604:	d001      	beq.n	800b60a <USBD_StdItfReq+0x26>
 800b606:	2b20      	cmp	r3, #32
 800b608:	d14e      	bne.n	800b6a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b610:	b2db      	uxtb	r3, r3
 800b612:	3b01      	subs	r3, #1
 800b614:	2b02      	cmp	r3, #2
 800b616:	d840      	bhi.n	800b69a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	889b      	ldrh	r3, [r3, #4]
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d836      	bhi.n	800b690 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	889b      	ldrh	r3, [r3, #4]
 800b626:	b2db      	uxtb	r3, r3
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7ff fed9 	bl	800b3e2 <USBD_CoreFindIF>
 800b630:	4603      	mov	r3, r0
 800b632:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b634:	7bbb      	ldrb	r3, [r7, #14]
 800b636:	2bff      	cmp	r3, #255	; 0xff
 800b638:	d01d      	beq.n	800b676 <USBD_StdItfReq+0x92>
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d11a      	bne.n	800b676 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b640:	7bba      	ldrb	r2, [r7, #14]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	32ae      	adds	r2, #174	; 0xae
 800b646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00f      	beq.n	800b670 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b650:	7bba      	ldrb	r2, [r7, #14]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b658:	7bba      	ldrb	r2, [r7, #14]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	32ae      	adds	r2, #174	; 0xae
 800b65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	6839      	ldr	r1, [r7, #0]
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	4798      	blx	r3
 800b66a:	4603      	mov	r3, r0
 800b66c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b66e:	e004      	b.n	800b67a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b670:	2303      	movs	r3, #3
 800b672:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b674:	e001      	b.n	800b67a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b676:	2303      	movs	r3, #3
 800b678:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	88db      	ldrh	r3, [r3, #6]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d110      	bne.n	800b6a4 <USBD_StdItfReq+0xc0>
 800b682:	7bfb      	ldrb	r3, [r7, #15]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10d      	bne.n	800b6a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fdc7 	bl	800c21c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b68e:	e009      	b.n	800b6a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b690:	6839      	ldr	r1, [r7, #0]
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fcf7 	bl	800c086 <USBD_CtlError>
          break;
 800b698:	e004      	b.n	800b6a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b69a:	6839      	ldr	r1, [r7, #0]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fcf2 	bl	800c086 <USBD_CtlError>
          break;
 800b6a2:	e000      	b.n	800b6a6 <USBD_StdItfReq+0xc2>
          break;
 800b6a4:	bf00      	nop
      }
      break;
 800b6a6:	e004      	b.n	800b6b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fceb 	bl	800c086 <USBD_CtlError>
      break;
 800b6b0:	bf00      	nop
  }

  return ret;
 800b6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	889b      	ldrh	r3, [r3, #4]
 800b6ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6d8:	2b40      	cmp	r3, #64	; 0x40
 800b6da:	d007      	beq.n	800b6ec <USBD_StdEPReq+0x30>
 800b6dc:	2b40      	cmp	r3, #64	; 0x40
 800b6de:	f200 817f 	bhi.w	800b9e0 <USBD_StdEPReq+0x324>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d02a      	beq.n	800b73c <USBD_StdEPReq+0x80>
 800b6e6:	2b20      	cmp	r3, #32
 800b6e8:	f040 817a 	bne.w	800b9e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f7ff fe83 	bl	800b3fc <USBD_CoreFindEP>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6fa:	7b7b      	ldrb	r3, [r7, #13]
 800b6fc:	2bff      	cmp	r3, #255	; 0xff
 800b6fe:	f000 8174 	beq.w	800b9ea <USBD_StdEPReq+0x32e>
 800b702:	7b7b      	ldrb	r3, [r7, #13]
 800b704:	2b00      	cmp	r3, #0
 800b706:	f040 8170 	bne.w	800b9ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b70a:	7b7a      	ldrb	r2, [r7, #13]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b712:	7b7a      	ldrb	r2, [r7, #13]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	32ae      	adds	r2, #174	; 0xae
 800b718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f000 8163 	beq.w	800b9ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b724:	7b7a      	ldrb	r2, [r7, #13]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	32ae      	adds	r2, #174	; 0xae
 800b72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	6839      	ldr	r1, [r7, #0]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	4798      	blx	r3
 800b736:	4603      	mov	r3, r0
 800b738:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b73a:	e156      	b.n	800b9ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	785b      	ldrb	r3, [r3, #1]
 800b740:	2b03      	cmp	r3, #3
 800b742:	d008      	beq.n	800b756 <USBD_StdEPReq+0x9a>
 800b744:	2b03      	cmp	r3, #3
 800b746:	f300 8145 	bgt.w	800b9d4 <USBD_StdEPReq+0x318>
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f000 809b 	beq.w	800b886 <USBD_StdEPReq+0x1ca>
 800b750:	2b01      	cmp	r3, #1
 800b752:	d03c      	beq.n	800b7ce <USBD_StdEPReq+0x112>
 800b754:	e13e      	b.n	800b9d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d002      	beq.n	800b768 <USBD_StdEPReq+0xac>
 800b762:	2b03      	cmp	r3, #3
 800b764:	d016      	beq.n	800b794 <USBD_StdEPReq+0xd8>
 800b766:	e02c      	b.n	800b7c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b768:	7bbb      	ldrb	r3, [r7, #14]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00d      	beq.n	800b78a <USBD_StdEPReq+0xce>
 800b76e:	7bbb      	ldrb	r3, [r7, #14]
 800b770:	2b80      	cmp	r3, #128	; 0x80
 800b772:	d00a      	beq.n	800b78a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b774:	7bbb      	ldrb	r3, [r7, #14]
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f001 f963 	bl	800ca44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b77e:	2180      	movs	r1, #128	; 0x80
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f001 f95f 	bl	800ca44 <USBD_LL_StallEP>
 800b786:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b788:	e020      	b.n	800b7cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fc7a 	bl	800c086 <USBD_CtlError>
              break;
 800b792:	e01b      	b.n	800b7cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	885b      	ldrh	r3, [r3, #2]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10e      	bne.n	800b7ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b79c:	7bbb      	ldrb	r3, [r7, #14]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00b      	beq.n	800b7ba <USBD_StdEPReq+0xfe>
 800b7a2:	7bbb      	ldrb	r3, [r7, #14]
 800b7a4:	2b80      	cmp	r3, #128	; 0x80
 800b7a6:	d008      	beq.n	800b7ba <USBD_StdEPReq+0xfe>
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	88db      	ldrh	r3, [r3, #6]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d104      	bne.n	800b7ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7b0:	7bbb      	ldrb	r3, [r7, #14]
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f001 f945 	bl	800ca44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fd2e 	bl	800c21c <USBD_CtlSendStatus>

              break;
 800b7c0:	e004      	b.n	800b7cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fc5e 	bl	800c086 <USBD_CtlError>
              break;
 800b7ca:	bf00      	nop
          }
          break;
 800b7cc:	e107      	b.n	800b9de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d002      	beq.n	800b7e0 <USBD_StdEPReq+0x124>
 800b7da:	2b03      	cmp	r3, #3
 800b7dc:	d016      	beq.n	800b80c <USBD_StdEPReq+0x150>
 800b7de:	e04b      	b.n	800b878 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7e0:	7bbb      	ldrb	r3, [r7, #14]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00d      	beq.n	800b802 <USBD_StdEPReq+0x146>
 800b7e6:	7bbb      	ldrb	r3, [r7, #14]
 800b7e8:	2b80      	cmp	r3, #128	; 0x80
 800b7ea:	d00a      	beq.n	800b802 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7ec:	7bbb      	ldrb	r3, [r7, #14]
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f001 f927 	bl	800ca44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7f6:	2180      	movs	r1, #128	; 0x80
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f001 f923 	bl	800ca44 <USBD_LL_StallEP>
 800b7fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b800:	e040      	b.n	800b884 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b802:	6839      	ldr	r1, [r7, #0]
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fc3e 	bl	800c086 <USBD_CtlError>
              break;
 800b80a:	e03b      	b.n	800b884 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	885b      	ldrh	r3, [r3, #2]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d136      	bne.n	800b882 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b814:	7bbb      	ldrb	r3, [r7, #14]
 800b816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d004      	beq.n	800b828 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b81e:	7bbb      	ldrb	r3, [r7, #14]
 800b820:	4619      	mov	r1, r3
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f001 f92d 	bl	800ca82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 fcf7 	bl	800c21c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b82e:	7bbb      	ldrb	r3, [r7, #14]
 800b830:	4619      	mov	r1, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f7ff fde2 	bl	800b3fc <USBD_CoreFindEP>
 800b838:	4603      	mov	r3, r0
 800b83a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b83c:	7b7b      	ldrb	r3, [r7, #13]
 800b83e:	2bff      	cmp	r3, #255	; 0xff
 800b840:	d01f      	beq.n	800b882 <USBD_StdEPReq+0x1c6>
 800b842:	7b7b      	ldrb	r3, [r7, #13]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d11c      	bne.n	800b882 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b848:	7b7a      	ldrb	r2, [r7, #13]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b850:	7b7a      	ldrb	r2, [r7, #13]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	32ae      	adds	r2, #174	; 0xae
 800b856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d010      	beq.n	800b882 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b860:	7b7a      	ldrb	r2, [r7, #13]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	32ae      	adds	r2, #174	; 0xae
 800b866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	6839      	ldr	r1, [r7, #0]
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	4798      	blx	r3
 800b872:	4603      	mov	r3, r0
 800b874:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b876:	e004      	b.n	800b882 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b878:	6839      	ldr	r1, [r7, #0]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fc03 	bl	800c086 <USBD_CtlError>
              break;
 800b880:	e000      	b.n	800b884 <USBD_StdEPReq+0x1c8>
              break;
 800b882:	bf00      	nop
          }
          break;
 800b884:	e0ab      	b.n	800b9de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d002      	beq.n	800b898 <USBD_StdEPReq+0x1dc>
 800b892:	2b03      	cmp	r3, #3
 800b894:	d032      	beq.n	800b8fc <USBD_StdEPReq+0x240>
 800b896:	e097      	b.n	800b9c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b898:	7bbb      	ldrb	r3, [r7, #14]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d007      	beq.n	800b8ae <USBD_StdEPReq+0x1f2>
 800b89e:	7bbb      	ldrb	r3, [r7, #14]
 800b8a0:	2b80      	cmp	r3, #128	; 0x80
 800b8a2:	d004      	beq.n	800b8ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b8a4:	6839      	ldr	r1, [r7, #0]
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 fbed 	bl	800c086 <USBD_CtlError>
                break;
 800b8ac:	e091      	b.n	800b9d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	da0b      	bge.n	800b8ce <USBD_StdEPReq+0x212>
 800b8b6:	7bbb      	ldrb	r3, [r7, #14]
 800b8b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8bc:	4613      	mov	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	3310      	adds	r3, #16
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	e00b      	b.n	800b8e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8ce:	7bbb      	ldrb	r3, [r7, #14]
 800b8d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4413      	add	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fc37 	bl	800c168 <USBD_CtlSendData>
              break;
 800b8fa:	e06a      	b.n	800b9d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b8fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b900:	2b00      	cmp	r3, #0
 800b902:	da11      	bge.n	800b928 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b904:	7bbb      	ldrb	r3, [r7, #14]
 800b906:	f003 020f 	and.w	r2, r3, #15
 800b90a:	6879      	ldr	r1, [r7, #4]
 800b90c:	4613      	mov	r3, r2
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	4413      	add	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	440b      	add	r3, r1
 800b916:	3324      	adds	r3, #36	; 0x24
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d117      	bne.n	800b94e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b91e:	6839      	ldr	r1, [r7, #0]
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 fbb0 	bl	800c086 <USBD_CtlError>
                  break;
 800b926:	e054      	b.n	800b9d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b928:	7bbb      	ldrb	r3, [r7, #14]
 800b92a:	f003 020f 	and.w	r2, r3, #15
 800b92e:	6879      	ldr	r1, [r7, #4]
 800b930:	4613      	mov	r3, r2
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	4413      	add	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	440b      	add	r3, r1
 800b93a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b93e:	881b      	ldrh	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d104      	bne.n	800b94e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b944:	6839      	ldr	r1, [r7, #0]
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fb9d 	bl	800c086 <USBD_CtlError>
                  break;
 800b94c:	e041      	b.n	800b9d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b94e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b952:	2b00      	cmp	r3, #0
 800b954:	da0b      	bge.n	800b96e <USBD_StdEPReq+0x2b2>
 800b956:	7bbb      	ldrb	r3, [r7, #14]
 800b958:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b95c:	4613      	mov	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4413      	add	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	3310      	adds	r3, #16
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	4413      	add	r3, r2
 800b96a:	3304      	adds	r3, #4
 800b96c:	e00b      	b.n	800b986 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b96e:	7bbb      	ldrb	r3, [r7, #14]
 800b970:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b974:	4613      	mov	r3, r2
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4413      	add	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	4413      	add	r3, r2
 800b984:	3304      	adds	r3, #4
 800b986:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b988:	7bbb      	ldrb	r3, [r7, #14]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d002      	beq.n	800b994 <USBD_StdEPReq+0x2d8>
 800b98e:	7bbb      	ldrb	r3, [r7, #14]
 800b990:	2b80      	cmp	r3, #128	; 0x80
 800b992:	d103      	bne.n	800b99c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	2200      	movs	r2, #0
 800b998:	601a      	str	r2, [r3, #0]
 800b99a:	e00e      	b.n	800b9ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b99c:	7bbb      	ldrb	r3, [r7, #14]
 800b99e:	4619      	mov	r1, r3
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f001 f88d 	bl	800cac0 <USBD_LL_IsStallEP>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d003      	beq.n	800b9b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	601a      	str	r2, [r3, #0]
 800b9b2:	e002      	b.n	800b9ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	2202      	movs	r2, #2
 800b9be:	4619      	mov	r1, r3
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fbd1 	bl	800c168 <USBD_CtlSendData>
              break;
 800b9c6:	e004      	b.n	800b9d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fb5b 	bl	800c086 <USBD_CtlError>
              break;
 800b9d0:	bf00      	nop
          }
          break;
 800b9d2:	e004      	b.n	800b9de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fb55 	bl	800c086 <USBD_CtlError>
          break;
 800b9dc:	bf00      	nop
      }
      break;
 800b9de:	e005      	b.n	800b9ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b9e0:	6839      	ldr	r1, [r7, #0]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fb4f 	bl	800c086 <USBD_CtlError>
      break;
 800b9e8:	e000      	b.n	800b9ec <USBD_StdEPReq+0x330>
      break;
 800b9ea:	bf00      	nop
  }

  return ret;
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
	...

0800b9f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba02:	2300      	movs	r3, #0
 800ba04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ba06:	2300      	movs	r3, #0
 800ba08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	885b      	ldrh	r3, [r3, #2]
 800ba12:	0a1b      	lsrs	r3, r3, #8
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	3b01      	subs	r3, #1
 800ba18:	2b06      	cmp	r3, #6
 800ba1a:	f200 8128 	bhi.w	800bc6e <USBD_GetDescriptor+0x276>
 800ba1e:	a201      	add	r2, pc, #4	; (adr r2, 800ba24 <USBD_GetDescriptor+0x2c>)
 800ba20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba24:	0800ba41 	.word	0x0800ba41
 800ba28:	0800ba59 	.word	0x0800ba59
 800ba2c:	0800ba99 	.word	0x0800ba99
 800ba30:	0800bc6f 	.word	0x0800bc6f
 800ba34:	0800bc6f 	.word	0x0800bc6f
 800ba38:	0800bc0f 	.word	0x0800bc0f
 800ba3c:	0800bc3b 	.word	0x0800bc3b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	7c12      	ldrb	r2, [r2, #16]
 800ba4c:	f107 0108 	add.w	r1, r7, #8
 800ba50:	4610      	mov	r0, r2
 800ba52:	4798      	blx	r3
 800ba54:	60f8      	str	r0, [r7, #12]
      break;
 800ba56:	e112      	b.n	800bc7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	7c1b      	ldrb	r3, [r3, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10d      	bne.n	800ba7c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba68:	f107 0208 	add.w	r2, r7, #8
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	4798      	blx	r3
 800ba70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	3301      	adds	r3, #1
 800ba76:	2202      	movs	r2, #2
 800ba78:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ba7a:	e100      	b.n	800bc7e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba84:	f107 0208 	add.w	r2, r7, #8
 800ba88:	4610      	mov	r0, r2
 800ba8a:	4798      	blx	r3
 800ba8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3301      	adds	r3, #1
 800ba92:	2202      	movs	r2, #2
 800ba94:	701a      	strb	r2, [r3, #0]
      break;
 800ba96:	e0f2      	b.n	800bc7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	885b      	ldrh	r3, [r3, #2]
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b05      	cmp	r3, #5
 800baa0:	f200 80ac 	bhi.w	800bbfc <USBD_GetDescriptor+0x204>
 800baa4:	a201      	add	r2, pc, #4	; (adr r2, 800baac <USBD_GetDescriptor+0xb4>)
 800baa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baaa:	bf00      	nop
 800baac:	0800bac5 	.word	0x0800bac5
 800bab0:	0800baf9 	.word	0x0800baf9
 800bab4:	0800bb2d 	.word	0x0800bb2d
 800bab8:	0800bb61 	.word	0x0800bb61
 800babc:	0800bb95 	.word	0x0800bb95
 800bac0:	0800bbc9 	.word	0x0800bbc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00b      	beq.n	800bae8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	7c12      	ldrb	r2, [r2, #16]
 800badc:	f107 0108 	add.w	r1, r7, #8
 800bae0:	4610      	mov	r0, r2
 800bae2:	4798      	blx	r3
 800bae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bae6:	e091      	b.n	800bc0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 facb 	bl	800c086 <USBD_CtlError>
            err++;
 800baf0:	7afb      	ldrb	r3, [r7, #11]
 800baf2:	3301      	adds	r3, #1
 800baf4:	72fb      	strb	r3, [r7, #11]
          break;
 800baf6:	e089      	b.n	800bc0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00b      	beq.n	800bb1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	7c12      	ldrb	r2, [r2, #16]
 800bb10:	f107 0108 	add.w	r1, r7, #8
 800bb14:	4610      	mov	r0, r2
 800bb16:	4798      	blx	r3
 800bb18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb1a:	e077      	b.n	800bc0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fab1 	bl	800c086 <USBD_CtlError>
            err++;
 800bb24:	7afb      	ldrb	r3, [r7, #11]
 800bb26:	3301      	adds	r3, #1
 800bb28:	72fb      	strb	r3, [r7, #11]
          break;
 800bb2a:	e06f      	b.n	800bc0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00b      	beq.n	800bb50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	7c12      	ldrb	r2, [r2, #16]
 800bb44:	f107 0108 	add.w	r1, r7, #8
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4798      	blx	r3
 800bb4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb4e:	e05d      	b.n	800bc0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 fa97 	bl	800c086 <USBD_CtlError>
            err++;
 800bb58:	7afb      	ldrb	r3, [r7, #11]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb5e:	e055      	b.n	800bc0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb66:	691b      	ldr	r3, [r3, #16]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00b      	beq.n	800bb84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb72:	691b      	ldr	r3, [r3, #16]
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	7c12      	ldrb	r2, [r2, #16]
 800bb78:	f107 0108 	add.w	r1, r7, #8
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	4798      	blx	r3
 800bb80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb82:	e043      	b.n	800bc0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb84:	6839      	ldr	r1, [r7, #0]
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 fa7d 	bl	800c086 <USBD_CtlError>
            err++;
 800bb8c:	7afb      	ldrb	r3, [r7, #11]
 800bb8e:	3301      	adds	r3, #1
 800bb90:	72fb      	strb	r3, [r7, #11]
          break;
 800bb92:	e03b      	b.n	800bc0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00b      	beq.n	800bbb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba6:	695b      	ldr	r3, [r3, #20]
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	7c12      	ldrb	r2, [r2, #16]
 800bbac:	f107 0108 	add.w	r1, r7, #8
 800bbb0:	4610      	mov	r0, r2
 800bbb2:	4798      	blx	r3
 800bbb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbb6:	e029      	b.n	800bc0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fa63 	bl	800c086 <USBD_CtlError>
            err++;
 800bbc0:	7afb      	ldrb	r3, [r7, #11]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	72fb      	strb	r3, [r7, #11]
          break;
 800bbc6:	e021      	b.n	800bc0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbce:	699b      	ldr	r3, [r3, #24]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00b      	beq.n	800bbec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	7c12      	ldrb	r2, [r2, #16]
 800bbe0:	f107 0108 	add.w	r1, r7, #8
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	4798      	blx	r3
 800bbe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbea:	e00f      	b.n	800bc0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fa49 	bl	800c086 <USBD_CtlError>
            err++;
 800bbf4:	7afb      	ldrb	r3, [r7, #11]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	72fb      	strb	r3, [r7, #11]
          break;
 800bbfa:	e007      	b.n	800bc0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 fa41 	bl	800c086 <USBD_CtlError>
          err++;
 800bc04:	7afb      	ldrb	r3, [r7, #11]
 800bc06:	3301      	adds	r3, #1
 800bc08:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bc0a:	bf00      	nop
      }
      break;
 800bc0c:	e037      	b.n	800bc7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	7c1b      	ldrb	r3, [r3, #16]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d109      	bne.n	800bc2a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc1e:	f107 0208 	add.w	r2, r7, #8
 800bc22:	4610      	mov	r0, r2
 800bc24:	4798      	blx	r3
 800bc26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc28:	e029      	b.n	800bc7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fa2a 	bl	800c086 <USBD_CtlError>
        err++;
 800bc32:	7afb      	ldrb	r3, [r7, #11]
 800bc34:	3301      	adds	r3, #1
 800bc36:	72fb      	strb	r3, [r7, #11]
      break;
 800bc38:	e021      	b.n	800bc7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	7c1b      	ldrb	r3, [r3, #16]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10d      	bne.n	800bc5e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc4a:	f107 0208 	add.w	r2, r7, #8
 800bc4e:	4610      	mov	r0, r2
 800bc50:	4798      	blx	r3
 800bc52:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	3301      	adds	r3, #1
 800bc58:	2207      	movs	r2, #7
 800bc5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc5c:	e00f      	b.n	800bc7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fa10 	bl	800c086 <USBD_CtlError>
        err++;
 800bc66:	7afb      	ldrb	r3, [r7, #11]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	72fb      	strb	r3, [r7, #11]
      break;
 800bc6c:	e007      	b.n	800bc7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bc6e:	6839      	ldr	r1, [r7, #0]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 fa08 	bl	800c086 <USBD_CtlError>
      err++;
 800bc76:	7afb      	ldrb	r3, [r7, #11]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	72fb      	strb	r3, [r7, #11]
      break;
 800bc7c:	bf00      	nop
  }

  if (err != 0U)
 800bc7e:	7afb      	ldrb	r3, [r7, #11]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d11e      	bne.n	800bcc2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	88db      	ldrh	r3, [r3, #6]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d016      	beq.n	800bcba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bc8c:	893b      	ldrh	r3, [r7, #8]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00e      	beq.n	800bcb0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	88da      	ldrh	r2, [r3, #6]
 800bc96:	893b      	ldrh	r3, [r7, #8]
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	bf28      	it	cs
 800bc9c:	4613      	movcs	r3, r2
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bca2:	893b      	ldrh	r3, [r7, #8]
 800bca4:	461a      	mov	r2, r3
 800bca6:	68f9      	ldr	r1, [r7, #12]
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 fa5d 	bl	800c168 <USBD_CtlSendData>
 800bcae:	e009      	b.n	800bcc4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f9e7 	bl	800c086 <USBD_CtlError>
 800bcb8:	e004      	b.n	800bcc4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 faae 	bl	800c21c <USBD_CtlSendStatus>
 800bcc0:	e000      	b.n	800bcc4 <USBD_GetDescriptor+0x2cc>
    return;
 800bcc2:	bf00      	nop
  }
}
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop

0800bccc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	889b      	ldrh	r3, [r3, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d131      	bne.n	800bd42 <USBD_SetAddress+0x76>
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	88db      	ldrh	r3, [r3, #6]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d12d      	bne.n	800bd42 <USBD_SetAddress+0x76>
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	885b      	ldrh	r3, [r3, #2]
 800bcea:	2b7f      	cmp	r3, #127	; 0x7f
 800bcec:	d829      	bhi.n	800bd42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	885b      	ldrh	r3, [r3, #2]
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	d104      	bne.n	800bd10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f9bc 	bl	800c086 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd0e:	e01d      	b.n	800bd4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	7bfa      	ldrb	r2, [r7, #15]
 800bd14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bd18:	7bfb      	ldrb	r3, [r7, #15]
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 fefb 	bl	800cb18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 fa7a 	bl	800c21c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d004      	beq.n	800bd38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2202      	movs	r2, #2
 800bd32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd36:	e009      	b.n	800bd4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd40:	e004      	b.n	800bd4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bd42:	6839      	ldr	r1, [r7, #0]
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 f99e 	bl	800c086 <USBD_CtlError>
  }
}
 800bd4a:	bf00      	nop
 800bd4c:	bf00      	nop
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	885b      	ldrh	r3, [r3, #2]
 800bd66:	b2da      	uxtb	r2, r3
 800bd68:	4b4e      	ldr	r3, [pc, #312]	; (800bea4 <USBD_SetConfig+0x150>)
 800bd6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bd6c:	4b4d      	ldr	r3, [pc, #308]	; (800bea4 <USBD_SetConfig+0x150>)
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d905      	bls.n	800bd80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f985 	bl	800c086 <USBD_CtlError>
    return USBD_FAIL;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	e08c      	b.n	800be9a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d002      	beq.n	800bd92 <USBD_SetConfig+0x3e>
 800bd8c:	2b03      	cmp	r3, #3
 800bd8e:	d029      	beq.n	800bde4 <USBD_SetConfig+0x90>
 800bd90:	e075      	b.n	800be7e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bd92:	4b44      	ldr	r3, [pc, #272]	; (800bea4 <USBD_SetConfig+0x150>)
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d020      	beq.n	800bddc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bd9a:	4b42      	ldr	r3, [pc, #264]	; (800bea4 <USBD_SetConfig+0x150>)
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bda4:	4b3f      	ldr	r3, [pc, #252]	; (800bea4 <USBD_SetConfig+0x150>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	4619      	mov	r1, r3
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f7fe ffe7 	bl	800ad7e <USBD_SetClassConfig>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bdb4:	7bfb      	ldrb	r3, [r7, #15]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d008      	beq.n	800bdcc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 f962 	bl	800c086 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2202      	movs	r2, #2
 800bdc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bdca:	e065      	b.n	800be98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fa25 	bl	800c21c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2203      	movs	r2, #3
 800bdd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bdda:	e05d      	b.n	800be98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 fa1d 	bl	800c21c <USBD_CtlSendStatus>
      break;
 800bde2:	e059      	b.n	800be98 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bde4:	4b2f      	ldr	r3, [pc, #188]	; (800bea4 <USBD_SetConfig+0x150>)
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d112      	bne.n	800be12 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2202      	movs	r2, #2
 800bdf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bdf4:	4b2b      	ldr	r3, [pc, #172]	; (800bea4 <USBD_SetConfig+0x150>)
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bdfe:	4b29      	ldr	r3, [pc, #164]	; (800bea4 <USBD_SetConfig+0x150>)
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	4619      	mov	r1, r3
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f7fe ffd6 	bl	800adb6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fa06 	bl	800c21c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800be10:	e042      	b.n	800be98 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800be12:	4b24      	ldr	r3, [pc, #144]	; (800bea4 <USBD_SetConfig+0x150>)
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	461a      	mov	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d02a      	beq.n	800be76 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	b2db      	uxtb	r3, r3
 800be26:	4619      	mov	r1, r3
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7fe ffc4 	bl	800adb6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800be2e:	4b1d      	ldr	r3, [pc, #116]	; (800bea4 <USBD_SetConfig+0x150>)
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	461a      	mov	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be38:	4b1a      	ldr	r3, [pc, #104]	; (800bea4 <USBD_SetConfig+0x150>)
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7fe ff9d 	bl	800ad7e <USBD_SetClassConfig>
 800be44:	4603      	mov	r3, r0
 800be46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800be48:	7bfb      	ldrb	r3, [r7, #15]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00f      	beq.n	800be6e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 f918 	bl	800c086 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	4619      	mov	r1, r3
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f7fe ffa9 	bl	800adb6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2202      	movs	r2, #2
 800be68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800be6c:	e014      	b.n	800be98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f9d4 	bl	800c21c <USBD_CtlSendStatus>
      break;
 800be74:	e010      	b.n	800be98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f9d0 	bl	800c21c <USBD_CtlSendStatus>
      break;
 800be7c:	e00c      	b.n	800be98 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800be7e:	6839      	ldr	r1, [r7, #0]
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 f900 	bl	800c086 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be86:	4b07      	ldr	r3, [pc, #28]	; (800bea4 <USBD_SetConfig+0x150>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	4619      	mov	r1, r3
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7fe ff92 	bl	800adb6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800be92:	2303      	movs	r3, #3
 800be94:	73fb      	strb	r3, [r7, #15]
      break;
 800be96:	bf00      	nop
  }

  return ret;
 800be98:	7bfb      	ldrb	r3, [r7, #15]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	200005a8 	.word	0x200005a8

0800bea8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	88db      	ldrh	r3, [r3, #6]
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d004      	beq.n	800bec4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800beba:	6839      	ldr	r1, [r7, #0]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f8e2 	bl	800c086 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bec2:	e023      	b.n	800bf0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b02      	cmp	r3, #2
 800bece:	dc02      	bgt.n	800bed6 <USBD_GetConfig+0x2e>
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	dc03      	bgt.n	800bedc <USBD_GetConfig+0x34>
 800bed4:	e015      	b.n	800bf02 <USBD_GetConfig+0x5a>
 800bed6:	2b03      	cmp	r3, #3
 800bed8:	d00b      	beq.n	800bef2 <USBD_GetConfig+0x4a>
 800beda:	e012      	b.n	800bf02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	3308      	adds	r3, #8
 800bee6:	2201      	movs	r2, #1
 800bee8:	4619      	mov	r1, r3
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f93c 	bl	800c168 <USBD_CtlSendData>
        break;
 800bef0:	e00c      	b.n	800bf0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	3304      	adds	r3, #4
 800bef6:	2201      	movs	r2, #1
 800bef8:	4619      	mov	r1, r3
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 f934 	bl	800c168 <USBD_CtlSendData>
        break;
 800bf00:	e004      	b.n	800bf0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bf02:	6839      	ldr	r1, [r7, #0]
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 f8be 	bl	800c086 <USBD_CtlError>
        break;
 800bf0a:	bf00      	nop
}
 800bf0c:	bf00      	nop
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	3b01      	subs	r3, #1
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d81e      	bhi.n	800bf6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	88db      	ldrh	r3, [r3, #6]
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	d004      	beq.n	800bf3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bf34:	6839      	ldr	r1, [r7, #0]
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 f8a5 	bl	800c086 <USBD_CtlError>
        break;
 800bf3c:	e01a      	b.n	800bf74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2201      	movs	r2, #1
 800bf42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d005      	beq.n	800bf5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	f043 0202 	orr.w	r2, r3, #2
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	330c      	adds	r3, #12
 800bf5e:	2202      	movs	r2, #2
 800bf60:	4619      	mov	r1, r3
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 f900 	bl	800c168 <USBD_CtlSendData>
      break;
 800bf68:	e004      	b.n	800bf74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bf6a:	6839      	ldr	r1, [r7, #0]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 f88a 	bl	800c086 <USBD_CtlError>
      break;
 800bf72:	bf00      	nop
  }
}
 800bf74:	bf00      	nop
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	885b      	ldrh	r3, [r3, #2]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d107      	bne.n	800bf9e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2201      	movs	r2, #1
 800bf92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 f940 	bl	800c21c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bf9c:	e013      	b.n	800bfc6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	885b      	ldrh	r3, [r3, #2]
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	d10b      	bne.n	800bfbe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	889b      	ldrh	r3, [r3, #4]
 800bfaa:	0a1b      	lsrs	r3, r3, #8
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f930 	bl	800c21c <USBD_CtlSendStatus>
}
 800bfbc:	e003      	b.n	800bfc6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 f860 	bl	800c086 <USBD_CtlError>
}
 800bfc6:	bf00      	nop
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b082      	sub	sp, #8
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d80b      	bhi.n	800bffe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	885b      	ldrh	r3, [r3, #2]
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d10c      	bne.n	800c008 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f910 	bl	800c21c <USBD_CtlSendStatus>
      }
      break;
 800bffc:	e004      	b.n	800c008 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 f840 	bl	800c086 <USBD_CtlError>
      break;
 800c006:	e000      	b.n	800c00a <USBD_ClrFeature+0x3c>
      break;
 800c008:	bf00      	nop
  }
}
 800c00a:	bf00      	nop
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b084      	sub	sp, #16
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	781a      	ldrb	r2, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	3301      	adds	r3, #1
 800c02c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	781a      	ldrb	r2, [r3, #0]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	3301      	adds	r3, #1
 800c03a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f7ff fa41 	bl	800b4c4 <SWAPBYTE>
 800c042:	4603      	mov	r3, r0
 800c044:	461a      	mov	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	3301      	adds	r3, #1
 800c04e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	3301      	adds	r3, #1
 800c054:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f7ff fa34 	bl	800b4c4 <SWAPBYTE>
 800c05c:	4603      	mov	r3, r0
 800c05e:	461a      	mov	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	3301      	adds	r3, #1
 800c068:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	3301      	adds	r3, #1
 800c06e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f7ff fa27 	bl	800b4c4 <SWAPBYTE>
 800c076:	4603      	mov	r3, r0
 800c078:	461a      	mov	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	80da      	strh	r2, [r3, #6]
}
 800c07e:	bf00      	nop
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b082      	sub	sp, #8
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c090:	2180      	movs	r1, #128	; 0x80
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fcd6 	bl	800ca44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c098:	2100      	movs	r1, #0
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fcd2 	bl	800ca44 <USBD_LL_StallEP>
}
 800c0a0:	bf00      	nop
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d036      	beq.n	800c12c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c0c2:	6938      	ldr	r0, [r7, #16]
 800c0c4:	f000 f836 	bl	800c134 <USBD_GetLen>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	005b      	lsls	r3, r3, #1
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c0d6:	7dfb      	ldrb	r3, [r7, #23]
 800c0d8:	68ba      	ldr	r2, [r7, #8]
 800c0da:	4413      	add	r3, r2
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	7812      	ldrb	r2, [r2, #0]
 800c0e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c0e2:	7dfb      	ldrb	r3, [r7, #23]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c0e8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ea:	68ba      	ldr	r2, [r7, #8]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	2203      	movs	r2, #3
 800c0f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c0f2:	7dfb      	ldrb	r3, [r7, #23]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c0f8:	e013      	b.n	800c122 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c0fa:	7dfb      	ldrb	r3, [r7, #23]
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	4413      	add	r3, r2
 800c100:	693a      	ldr	r2, [r7, #16]
 800c102:	7812      	ldrb	r2, [r2, #0]
 800c104:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	3301      	adds	r3, #1
 800c10a:	613b      	str	r3, [r7, #16]
    idx++;
 800c10c:	7dfb      	ldrb	r3, [r7, #23]
 800c10e:	3301      	adds	r3, #1
 800c110:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c112:	7dfb      	ldrb	r3, [r7, #23]
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	4413      	add	r3, r2
 800c118:	2200      	movs	r2, #0
 800c11a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c11c:	7dfb      	ldrb	r3, [r7, #23]
 800c11e:	3301      	adds	r3, #1
 800c120:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1e7      	bne.n	800c0fa <USBD_GetString+0x52>
 800c12a:	e000      	b.n	800c12e <USBD_GetString+0x86>
    return;
 800c12c:	bf00      	nop
  }
}
 800c12e:	3718      	adds	r7, #24
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c13c:	2300      	movs	r3, #0
 800c13e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c144:	e005      	b.n	800c152 <USBD_GetLen+0x1e>
  {
    len++;
 800c146:	7bfb      	ldrb	r3, [r7, #15]
 800c148:	3301      	adds	r3, #1
 800c14a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	3301      	adds	r3, #1
 800c150:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1f5      	bne.n	800c146 <USBD_GetLen+0x12>
  }

  return len;
 800c15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3714      	adds	r7, #20
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr

0800c168 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2202      	movs	r2, #2
 800c178:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	2100      	movs	r1, #0
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f000 fce1 	bl	800cb56 <USBD_LL_Transmit>

  return USBD_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	60f8      	str	r0, [r7, #12]
 800c1a6:	60b9      	str	r1, [r7, #8]
 800c1a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	68ba      	ldr	r2, [r7, #8]
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	68f8      	ldr	r0, [r7, #12]
 800c1b2:	f000 fcd0 	bl	800cb56 <USBD_LL_Transmit>

  return USBD_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2203      	movs	r2, #3
 800c1d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	2100      	movs	r1, #0
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f000 fcd4 	bl	800cb98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	60f8      	str	r0, [r7, #12]
 800c202:	60b9      	str	r1, [r7, #8]
 800c204:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	2100      	movs	r1, #0
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f000 fcc3 	bl	800cb98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2204      	movs	r2, #4
 800c228:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c22c:	2300      	movs	r3, #0
 800c22e:	2200      	movs	r2, #0
 800c230:	2100      	movs	r1, #0
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fc8f 	bl	800cb56 <USBD_LL_Transmit>

  return USBD_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b082      	sub	sp, #8
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2205      	movs	r2, #5
 800c24e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c252:	2300      	movs	r3, #0
 800c254:	2200      	movs	r2, #0
 800c256:	2100      	movs	r1, #0
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 fc9d 	bl	800cb98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c26c:	2200      	movs	r2, #0
 800c26e:	4912      	ldr	r1, [pc, #72]	; (800c2b8 <MX_USB_DEVICE_Init+0x50>)
 800c270:	4812      	ldr	r0, [pc, #72]	; (800c2bc <MX_USB_DEVICE_Init+0x54>)
 800c272:	f7fe fd07 	bl	800ac84 <USBD_Init>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d001      	beq.n	800c280 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c27c:	f7f5 fcda 	bl	8001c34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c280:	490f      	ldr	r1, [pc, #60]	; (800c2c0 <MX_USB_DEVICE_Init+0x58>)
 800c282:	480e      	ldr	r0, [pc, #56]	; (800c2bc <MX_USB_DEVICE_Init+0x54>)
 800c284:	f7fe fd2e 	bl	800ace4 <USBD_RegisterClass>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d001      	beq.n	800c292 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c28e:	f7f5 fcd1 	bl	8001c34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c292:	490c      	ldr	r1, [pc, #48]	; (800c2c4 <MX_USB_DEVICE_Init+0x5c>)
 800c294:	4809      	ldr	r0, [pc, #36]	; (800c2bc <MX_USB_DEVICE_Init+0x54>)
 800c296:	f7fe fc1f 	bl	800aad8 <USBD_CDC_RegisterInterface>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d001      	beq.n	800c2a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c2a0:	f7f5 fcc8 	bl	8001c34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c2a4:	4805      	ldr	r0, [pc, #20]	; (800c2bc <MX_USB_DEVICE_Init+0x54>)
 800c2a6:	f7fe fd53 	bl	800ad50 <USBD_Start>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d001      	beq.n	800c2b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c2b0:	f7f5 fcc0 	bl	8001c34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c2b4:	bf00      	nop
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	200000bc 	.word	0x200000bc
 800c2bc:	200005ac 	.word	0x200005ac
 800c2c0:	20000028 	.word	0x20000028
 800c2c4:	200000a8 	.word	0x200000a8

0800c2c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	4905      	ldr	r1, [pc, #20]	; (800c2e4 <CDC_Init_FS+0x1c>)
 800c2d0:	4805      	ldr	r0, [pc, #20]	; (800c2e8 <CDC_Init_FS+0x20>)
 800c2d2:	f7fe fc1b 	bl	800ab0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c2d6:	4905      	ldr	r1, [pc, #20]	; (800c2ec <CDC_Init_FS+0x24>)
 800c2d8:	4803      	ldr	r0, [pc, #12]	; (800c2e8 <CDC_Init_FS+0x20>)
 800c2da:	f7fe fc39 	bl	800ab50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c2de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	20001088 	.word	0x20001088
 800c2e8:	200005ac 	.word	0x200005ac
 800c2ec:	20000888 	.word	0x20000888

0800c2f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c2f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	4603      	mov	r3, r0
 800c308:	6039      	str	r1, [r7, #0]
 800c30a:	71fb      	strb	r3, [r7, #7]
 800c30c:	4613      	mov	r3, r2
 800c30e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c310:	79fb      	ldrb	r3, [r7, #7]
 800c312:	2b23      	cmp	r3, #35	; 0x23
 800c314:	d84a      	bhi.n	800c3ac <CDC_Control_FS+0xac>
 800c316:	a201      	add	r2, pc, #4	; (adr r2, 800c31c <CDC_Control_FS+0x1c>)
 800c318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c31c:	0800c3ad 	.word	0x0800c3ad
 800c320:	0800c3ad 	.word	0x0800c3ad
 800c324:	0800c3ad 	.word	0x0800c3ad
 800c328:	0800c3ad 	.word	0x0800c3ad
 800c32c:	0800c3ad 	.word	0x0800c3ad
 800c330:	0800c3ad 	.word	0x0800c3ad
 800c334:	0800c3ad 	.word	0x0800c3ad
 800c338:	0800c3ad 	.word	0x0800c3ad
 800c33c:	0800c3ad 	.word	0x0800c3ad
 800c340:	0800c3ad 	.word	0x0800c3ad
 800c344:	0800c3ad 	.word	0x0800c3ad
 800c348:	0800c3ad 	.word	0x0800c3ad
 800c34c:	0800c3ad 	.word	0x0800c3ad
 800c350:	0800c3ad 	.word	0x0800c3ad
 800c354:	0800c3ad 	.word	0x0800c3ad
 800c358:	0800c3ad 	.word	0x0800c3ad
 800c35c:	0800c3ad 	.word	0x0800c3ad
 800c360:	0800c3ad 	.word	0x0800c3ad
 800c364:	0800c3ad 	.word	0x0800c3ad
 800c368:	0800c3ad 	.word	0x0800c3ad
 800c36c:	0800c3ad 	.word	0x0800c3ad
 800c370:	0800c3ad 	.word	0x0800c3ad
 800c374:	0800c3ad 	.word	0x0800c3ad
 800c378:	0800c3ad 	.word	0x0800c3ad
 800c37c:	0800c3ad 	.word	0x0800c3ad
 800c380:	0800c3ad 	.word	0x0800c3ad
 800c384:	0800c3ad 	.word	0x0800c3ad
 800c388:	0800c3ad 	.word	0x0800c3ad
 800c38c:	0800c3ad 	.word	0x0800c3ad
 800c390:	0800c3ad 	.word	0x0800c3ad
 800c394:	0800c3ad 	.word	0x0800c3ad
 800c398:	0800c3ad 	.word	0x0800c3ad
 800c39c:	0800c3ad 	.word	0x0800c3ad
 800c3a0:	0800c3ad 	.word	0x0800c3ad
 800c3a4:	0800c3ad 	.word	0x0800c3ad
 800c3a8:	0800c3ad 	.word	0x0800c3ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c3ac:	bf00      	nop
  }

  return (USBD_OK);
 800c3ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c3c6:	6879      	ldr	r1, [r7, #4]
 800c3c8:	4805      	ldr	r0, [pc, #20]	; (800c3e0 <CDC_Receive_FS+0x24>)
 800c3ca:	f7fe fbc1 	bl	800ab50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c3ce:	4804      	ldr	r0, [pc, #16]	; (800c3e0 <CDC_Receive_FS+0x24>)
 800c3d0:	f7fe fc22 	bl	800ac18 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c3d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	200005ac 	.word	0x200005ac

0800c3e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c3f4:	4b0d      	ldr	r3, [pc, #52]	; (800c42c <CDC_Transmit_FS+0x48>)
 800c3f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c406:	2301      	movs	r3, #1
 800c408:	e00b      	b.n	800c422 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c40a:	887b      	ldrh	r3, [r7, #2]
 800c40c:	461a      	mov	r2, r3
 800c40e:	6879      	ldr	r1, [r7, #4]
 800c410:	4806      	ldr	r0, [pc, #24]	; (800c42c <CDC_Transmit_FS+0x48>)
 800c412:	f7fe fb7b 	bl	800ab0c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c416:	4805      	ldr	r0, [pc, #20]	; (800c42c <CDC_Transmit_FS+0x48>)
 800c418:	f7fe fbb8 	bl	800ab8c <USBD_CDC_TransmitPacket>
 800c41c:	4603      	mov	r3, r0
 800c41e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c420:	7bfb      	ldrb	r3, [r7, #15]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	200005ac 	.word	0x200005ac

0800c430 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c430:	b480      	push	{r7}
 800c432:	b087      	sub	sp, #28
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	4613      	mov	r3, r2
 800c43c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c43e:	2300      	movs	r3, #0
 800c440:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c442:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c446:	4618      	mov	r0, r3
 800c448:	371c      	adds	r7, #28
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
	...

0800c454 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	4603      	mov	r3, r0
 800c45c:	6039      	str	r1, [r7, #0]
 800c45e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2212      	movs	r2, #18
 800c464:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c466:	4b03      	ldr	r3, [pc, #12]	; (800c474 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c468:	4618      	mov	r0, r3
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	200000d8 	.word	0x200000d8

0800c478 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	4603      	mov	r3, r0
 800c480:	6039      	str	r1, [r7, #0]
 800c482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	2204      	movs	r2, #4
 800c488:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c48a:	4b03      	ldr	r3, [pc, #12]	; (800c498 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	370c      	adds	r7, #12
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr
 800c498:	200000ec 	.word	0x200000ec

0800c49c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	6039      	str	r1, [r7, #0]
 800c4a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4a8:	79fb      	ldrb	r3, [r7, #7]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d105      	bne.n	800c4ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	4907      	ldr	r1, [pc, #28]	; (800c4d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4b2:	4808      	ldr	r0, [pc, #32]	; (800c4d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c4b4:	f7ff fdf8 	bl	800c0a8 <USBD_GetString>
 800c4b8:	e004      	b.n	800c4c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	4904      	ldr	r1, [pc, #16]	; (800c4d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4be:	4805      	ldr	r0, [pc, #20]	; (800c4d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c4c0:	f7ff fdf2 	bl	800c0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4c4:	4b02      	ldr	r3, [pc, #8]	; (800c4d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	20001888 	.word	0x20001888
 800c4d4:	08010228 	.word	0x08010228

0800c4d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	4603      	mov	r3, r0
 800c4e0:	6039      	str	r1, [r7, #0]
 800c4e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c4e4:	683a      	ldr	r2, [r7, #0]
 800c4e6:	4904      	ldr	r1, [pc, #16]	; (800c4f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c4e8:	4804      	ldr	r0, [pc, #16]	; (800c4fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c4ea:	f7ff fddd 	bl	800c0a8 <USBD_GetString>
  return USBD_StrDesc;
 800c4ee:	4b02      	ldr	r3, [pc, #8]	; (800c4f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	20001888 	.word	0x20001888
 800c4fc:	08010240 	.word	0x08010240

0800c500 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	4603      	mov	r3, r0
 800c508:	6039      	str	r1, [r7, #0]
 800c50a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	221a      	movs	r2, #26
 800c510:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c512:	f000 f843 	bl	800c59c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c516:	4b02      	ldr	r3, [pc, #8]	; (800c520 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	200000f0 	.word	0x200000f0

0800c524 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	6039      	str	r1, [r7, #0]
 800c52e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c530:	79fb      	ldrb	r3, [r7, #7]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d105      	bne.n	800c542 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	4907      	ldr	r1, [pc, #28]	; (800c558 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c53a:	4808      	ldr	r0, [pc, #32]	; (800c55c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c53c:	f7ff fdb4 	bl	800c0a8 <USBD_GetString>
 800c540:	e004      	b.n	800c54c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	4904      	ldr	r1, [pc, #16]	; (800c558 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c546:	4805      	ldr	r0, [pc, #20]	; (800c55c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c548:	f7ff fdae 	bl	800c0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c54c:	4b02      	ldr	r3, [pc, #8]	; (800c558 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	20001888 	.word	0x20001888
 800c55c:	08010254 	.word	0x08010254

0800c560 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	6039      	str	r1, [r7, #0]
 800c56a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c56c:	79fb      	ldrb	r3, [r7, #7]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d105      	bne.n	800c57e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	4907      	ldr	r1, [pc, #28]	; (800c594 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c576:	4808      	ldr	r0, [pc, #32]	; (800c598 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c578:	f7ff fd96 	bl	800c0a8 <USBD_GetString>
 800c57c:	e004      	b.n	800c588 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	4904      	ldr	r1, [pc, #16]	; (800c594 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c582:	4805      	ldr	r0, [pc, #20]	; (800c598 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c584:	f7ff fd90 	bl	800c0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c588:	4b02      	ldr	r3, [pc, #8]	; (800c594 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	20001888 	.word	0x20001888
 800c598:	08010260 	.word	0x08010260

0800c59c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c5a2:	4b0f      	ldr	r3, [pc, #60]	; (800c5e0 <Get_SerialNum+0x44>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c5a8:	4b0e      	ldr	r3, [pc, #56]	; (800c5e4 <Get_SerialNum+0x48>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c5ae:	4b0e      	ldr	r3, [pc, #56]	; (800c5e8 <Get_SerialNum+0x4c>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d009      	beq.n	800c5d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c5c2:	2208      	movs	r2, #8
 800c5c4:	4909      	ldr	r1, [pc, #36]	; (800c5ec <Get_SerialNum+0x50>)
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f000 f814 	bl	800c5f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c5cc:	2204      	movs	r2, #4
 800c5ce:	4908      	ldr	r1, [pc, #32]	; (800c5f0 <Get_SerialNum+0x54>)
 800c5d0:	68b8      	ldr	r0, [r7, #8]
 800c5d2:	f000 f80f 	bl	800c5f4 <IntToUnicode>
  }
}
 800c5d6:	bf00      	nop
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	1fff7a10 	.word	0x1fff7a10
 800c5e4:	1fff7a14 	.word	0x1fff7a14
 800c5e8:	1fff7a18 	.word	0x1fff7a18
 800c5ec:	200000f2 	.word	0x200000f2
 800c5f0:	20000102 	.word	0x20000102

0800c5f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	4613      	mov	r3, r2
 800c600:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c606:	2300      	movs	r3, #0
 800c608:	75fb      	strb	r3, [r7, #23]
 800c60a:	e027      	b.n	800c65c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	0f1b      	lsrs	r3, r3, #28
 800c610:	2b09      	cmp	r3, #9
 800c612:	d80b      	bhi.n	800c62c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	0f1b      	lsrs	r3, r3, #28
 800c618:	b2da      	uxtb	r2, r3
 800c61a:	7dfb      	ldrb	r3, [r7, #23]
 800c61c:	005b      	lsls	r3, r3, #1
 800c61e:	4619      	mov	r1, r3
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	440b      	add	r3, r1
 800c624:	3230      	adds	r2, #48	; 0x30
 800c626:	b2d2      	uxtb	r2, r2
 800c628:	701a      	strb	r2, [r3, #0]
 800c62a:	e00a      	b.n	800c642 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	0f1b      	lsrs	r3, r3, #28
 800c630:	b2da      	uxtb	r2, r3
 800c632:	7dfb      	ldrb	r3, [r7, #23]
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	4619      	mov	r1, r3
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	440b      	add	r3, r1
 800c63c:	3237      	adds	r2, #55	; 0x37
 800c63e:	b2d2      	uxtb	r2, r2
 800c640:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	011b      	lsls	r3, r3, #4
 800c646:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c648:	7dfb      	ldrb	r3, [r7, #23]
 800c64a:	005b      	lsls	r3, r3, #1
 800c64c:	3301      	adds	r3, #1
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	4413      	add	r3, r2
 800c652:	2200      	movs	r2, #0
 800c654:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c656:	7dfb      	ldrb	r3, [r7, #23]
 800c658:	3301      	adds	r3, #1
 800c65a:	75fb      	strb	r3, [r7, #23]
 800c65c:	7dfa      	ldrb	r2, [r7, #23]
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	429a      	cmp	r2, r3
 800c662:	d3d3      	bcc.n	800c60c <IntToUnicode+0x18>
  }
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop
 800c668:	371c      	adds	r7, #28
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
	...

0800c674 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b08a      	sub	sp, #40	; 0x28
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c67c:	f107 0314 	add.w	r3, r7, #20
 800c680:	2200      	movs	r2, #0
 800c682:	601a      	str	r2, [r3, #0]
 800c684:	605a      	str	r2, [r3, #4]
 800c686:	609a      	str	r2, [r3, #8]
 800c688:	60da      	str	r2, [r3, #12]
 800c68a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c694:	d13a      	bne.n	800c70c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c696:	2300      	movs	r3, #0
 800c698:	613b      	str	r3, [r7, #16]
 800c69a:	4b1e      	ldr	r3, [pc, #120]	; (800c714 <HAL_PCD_MspInit+0xa0>)
 800c69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c69e:	4a1d      	ldr	r2, [pc, #116]	; (800c714 <HAL_PCD_MspInit+0xa0>)
 800c6a0:	f043 0301 	orr.w	r3, r3, #1
 800c6a4:	6313      	str	r3, [r2, #48]	; 0x30
 800c6a6:	4b1b      	ldr	r3, [pc, #108]	; (800c714 <HAL_PCD_MspInit+0xa0>)
 800c6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6aa:	f003 0301 	and.w	r3, r3, #1
 800c6ae:	613b      	str	r3, [r7, #16]
 800c6b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c6b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c6b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6b8:	2302      	movs	r3, #2
 800c6ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6c0:	2303      	movs	r3, #3
 800c6c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c6c4:	230a      	movs	r3, #10
 800c6c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6c8:	f107 0314 	add.w	r3, r7, #20
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	4812      	ldr	r0, [pc, #72]	; (800c718 <HAL_PCD_MspInit+0xa4>)
 800c6d0:	f7f6 ff4a 	bl	8003568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c6d4:	4b0f      	ldr	r3, [pc, #60]	; (800c714 <HAL_PCD_MspInit+0xa0>)
 800c6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d8:	4a0e      	ldr	r2, [pc, #56]	; (800c714 <HAL_PCD_MspInit+0xa0>)
 800c6da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6de:	6353      	str	r3, [r2, #52]	; 0x34
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	60fb      	str	r3, [r7, #12]
 800c6e4:	4b0b      	ldr	r3, [pc, #44]	; (800c714 <HAL_PCD_MspInit+0xa0>)
 800c6e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6e8:	4a0a      	ldr	r2, [pc, #40]	; (800c714 <HAL_PCD_MspInit+0xa0>)
 800c6ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c6ee:	6453      	str	r3, [r2, #68]	; 0x44
 800c6f0:	4b08      	ldr	r3, [pc, #32]	; (800c714 <HAL_PCD_MspInit+0xa0>)
 800c6f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6f8:	60fb      	str	r3, [r7, #12]
 800c6fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	2100      	movs	r1, #0
 800c700:	2043      	movs	r0, #67	; 0x43
 800c702:	f7f6 fb4e 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c706:	2043      	movs	r0, #67	; 0x43
 800c708:	f7f6 fb67 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c70c:	bf00      	nop
 800c70e:	3728      	adds	r7, #40	; 0x28
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	40023800 	.word	0x40023800
 800c718:	40020000 	.word	0x40020000

0800c71c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c730:	4619      	mov	r1, r3
 800c732:	4610      	mov	r0, r2
 800c734:	f7fe fb59 	bl	800adea <USBD_LL_SetupStage>
}
 800c738:	bf00      	nop
 800c73a:	3708      	adds	r7, #8
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	460b      	mov	r3, r1
 800c74a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c752:	78fa      	ldrb	r2, [r7, #3]
 800c754:	6879      	ldr	r1, [r7, #4]
 800c756:	4613      	mov	r3, r2
 800c758:	00db      	lsls	r3, r3, #3
 800c75a:	4413      	add	r3, r2
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	440b      	add	r3, r1
 800c760:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	78fb      	ldrb	r3, [r7, #3]
 800c768:	4619      	mov	r1, r3
 800c76a:	f7fe fb93 	bl	800ae94 <USBD_LL_DataOutStage>
}
 800c76e:	bf00      	nop
 800c770:	3708      	adds	r7, #8
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b082      	sub	sp, #8
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
 800c77e:	460b      	mov	r3, r1
 800c780:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c788:	78fa      	ldrb	r2, [r7, #3]
 800c78a:	6879      	ldr	r1, [r7, #4]
 800c78c:	4613      	mov	r3, r2
 800c78e:	00db      	lsls	r3, r3, #3
 800c790:	4413      	add	r3, r2
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	440b      	add	r3, r1
 800c796:	334c      	adds	r3, #76	; 0x4c
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	78fb      	ldrb	r3, [r7, #3]
 800c79c:	4619      	mov	r1, r3
 800c79e:	f7fe fc2c 	bl	800affa <USBD_LL_DataInStage>
}
 800c7a2:	bf00      	nop
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b082      	sub	sp, #8
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe fd60 	bl	800b27e <USBD_LL_SOF>
}
 800c7be:	bf00      	nop
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b084      	sub	sp, #16
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	d001      	beq.n	800c7de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c7da:	f7f5 fa2b 	bl	8001c34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c7e4:	7bfa      	ldrb	r2, [r7, #15]
 800c7e6:	4611      	mov	r1, r2
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7fe fd0a 	bl	800b202 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fe fcb2 	bl	800b15e <USBD_LL_Reset>
}
 800c7fa:	bf00      	nop
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
	...

0800c804 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c812:	4618      	mov	r0, r3
 800c814:	f7fe fd05 	bl	800b222 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	6812      	ldr	r2, [r2, #0]
 800c826:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c82a:	f043 0301 	orr.w	r3, r3, #1
 800c82e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6a1b      	ldr	r3, [r3, #32]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d005      	beq.n	800c844 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c838:	4b04      	ldr	r3, [pc, #16]	; (800c84c <HAL_PCD_SuspendCallback+0x48>)
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	4a03      	ldr	r2, [pc, #12]	; (800c84c <HAL_PCD_SuspendCallback+0x48>)
 800c83e:	f043 0306 	orr.w	r3, r3, #6
 800c842:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	e000ed00 	.word	0xe000ed00

0800c850 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c85e:	4618      	mov	r0, r3
 800c860:	f7fe fcf5 	bl	800b24e <USBD_LL_Resume>
}
 800c864:	bf00      	nop
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	460b      	mov	r3, r1
 800c876:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c87e:	78fa      	ldrb	r2, [r7, #3]
 800c880:	4611      	mov	r1, r2
 800c882:	4618      	mov	r0, r3
 800c884:	f7fe fd4d 	bl	800b322 <USBD_LL_IsoOUTIncomplete>
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	460b      	mov	r3, r1
 800c89a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c8a2:	78fa      	ldrb	r2, [r7, #3]
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fe fd09 	bl	800b2be <USBD_LL_IsoINIncomplete>
}
 800c8ac:	bf00      	nop
 800c8ae:	3708      	adds	r7, #8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fe fd5f 	bl	800b386 <USBD_LL_DevConnected>
}
 800c8c8:	bf00      	nop
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fe fd5c 	bl	800b39c <USBD_LL_DevDisconnected>
}
 800c8e4:	bf00      	nop
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d13c      	bne.n	800c976 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c8fc:	4a20      	ldr	r2, [pc, #128]	; (800c980 <USBD_LL_Init+0x94>)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4a1e      	ldr	r2, [pc, #120]	; (800c980 <USBD_LL_Init+0x94>)
 800c908:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c90c:	4b1c      	ldr	r3, [pc, #112]	; (800c980 <USBD_LL_Init+0x94>)
 800c90e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c912:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c914:	4b1a      	ldr	r3, [pc, #104]	; (800c980 <USBD_LL_Init+0x94>)
 800c916:	2204      	movs	r2, #4
 800c918:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c91a:	4b19      	ldr	r3, [pc, #100]	; (800c980 <USBD_LL_Init+0x94>)
 800c91c:	2202      	movs	r2, #2
 800c91e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c920:	4b17      	ldr	r3, [pc, #92]	; (800c980 <USBD_LL_Init+0x94>)
 800c922:	2200      	movs	r2, #0
 800c924:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c926:	4b16      	ldr	r3, [pc, #88]	; (800c980 <USBD_LL_Init+0x94>)
 800c928:	2202      	movs	r2, #2
 800c92a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c92c:	4b14      	ldr	r3, [pc, #80]	; (800c980 <USBD_LL_Init+0x94>)
 800c92e:	2200      	movs	r2, #0
 800c930:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c932:	4b13      	ldr	r3, [pc, #76]	; (800c980 <USBD_LL_Init+0x94>)
 800c934:	2200      	movs	r2, #0
 800c936:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c938:	4b11      	ldr	r3, [pc, #68]	; (800c980 <USBD_LL_Init+0x94>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c93e:	4b10      	ldr	r3, [pc, #64]	; (800c980 <USBD_LL_Init+0x94>)
 800c940:	2200      	movs	r2, #0
 800c942:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c944:	4b0e      	ldr	r3, [pc, #56]	; (800c980 <USBD_LL_Init+0x94>)
 800c946:	2200      	movs	r2, #0
 800c948:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c94a:	480d      	ldr	r0, [pc, #52]	; (800c980 <USBD_LL_Init+0x94>)
 800c94c:	f7f9 fede 	bl	800670c <HAL_PCD_Init>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d001      	beq.n	800c95a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c956:	f7f5 f96d 	bl	8001c34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c95a:	2180      	movs	r1, #128	; 0x80
 800c95c:	4808      	ldr	r0, [pc, #32]	; (800c980 <USBD_LL_Init+0x94>)
 800c95e:	f7fb f936 	bl	8007bce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c962:	2240      	movs	r2, #64	; 0x40
 800c964:	2100      	movs	r1, #0
 800c966:	4806      	ldr	r0, [pc, #24]	; (800c980 <USBD_LL_Init+0x94>)
 800c968:	f7fb f8ea 	bl	8007b40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c96c:	2280      	movs	r2, #128	; 0x80
 800c96e:	2101      	movs	r1, #1
 800c970:	4803      	ldr	r0, [pc, #12]	; (800c980 <USBD_LL_Init+0x94>)
 800c972:	f7fb f8e5 	bl	8007b40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	20001a88 	.word	0x20001a88

0800c984 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c990:	2300      	movs	r3, #0
 800c992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7f9 ffd3 	bl	8006946 <HAL_PCD_Start>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9a4:	7bfb      	ldrb	r3, [r7, #15]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 f942 	bl	800cc30 <USBD_Get_USB_Status>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b084      	sub	sp, #16
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	4608      	mov	r0, r1
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	70fb      	strb	r3, [r7, #3]
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	70bb      	strb	r3, [r7, #2]
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c9e2:	78bb      	ldrb	r3, [r7, #2]
 800c9e4:	883a      	ldrh	r2, [r7, #0]
 800c9e6:	78f9      	ldrb	r1, [r7, #3]
 800c9e8:	f7fa fca4 	bl	8007334 <HAL_PCD_EP_Open>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f000 f91c 	bl	800cc30 <USBD_Get_USB_Status>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b084      	sub	sp, #16
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
 800ca0e:	460b      	mov	r3, r1
 800ca10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca12:	2300      	movs	r3, #0
 800ca14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca16:	2300      	movs	r3, #0
 800ca18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca20:	78fa      	ldrb	r2, [r7, #3]
 800ca22:	4611      	mov	r1, r2
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7fa fced 	bl	8007404 <HAL_PCD_EP_Close>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca2e:	7bfb      	ldrb	r3, [r7, #15]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f000 f8fd 	bl	800cc30 <USBD_Get_USB_Status>
 800ca36:	4603      	mov	r3, r0
 800ca38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca50:	2300      	movs	r3, #0
 800ca52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca54:	2300      	movs	r3, #0
 800ca56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca5e:	78fa      	ldrb	r2, [r7, #3]
 800ca60:	4611      	mov	r1, r2
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fa fdc5 	bl	80075f2 <HAL_PCD_EP_SetStall>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca6c:	7bfb      	ldrb	r3, [r7, #15]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 f8de 	bl	800cc30 <USBD_Get_USB_Status>
 800ca74:	4603      	mov	r3, r0
 800ca76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3710      	adds	r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b084      	sub	sp, #16
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca92:	2300      	movs	r3, #0
 800ca94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca9c:	78fa      	ldrb	r2, [r7, #3]
 800ca9e:	4611      	mov	r1, r2
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fa fe0a 	bl	80076ba <HAL_PCD_EP_ClrStall>
 800caa6:	4603      	mov	r3, r0
 800caa8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caaa:	7bfb      	ldrb	r3, [r7, #15]
 800caac:	4618      	mov	r0, r3
 800caae:	f000 f8bf 	bl	800cc30 <USBD_Get_USB_Status>
 800cab2:	4603      	mov	r3, r0
 800cab4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cab6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	460b      	mov	r3, r1
 800caca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cad2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	da0b      	bge.n	800caf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cadc:	78fb      	ldrb	r3, [r7, #3]
 800cade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cae2:	68f9      	ldr	r1, [r7, #12]
 800cae4:	4613      	mov	r3, r2
 800cae6:	00db      	lsls	r3, r3, #3
 800cae8:	4413      	add	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	440b      	add	r3, r1
 800caee:	333e      	adds	r3, #62	; 0x3e
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	e00b      	b.n	800cb0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800caf4:	78fb      	ldrb	r3, [r7, #3]
 800caf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cafa:	68f9      	ldr	r1, [r7, #12]
 800cafc:	4613      	mov	r3, r2
 800cafe:	00db      	lsls	r3, r3, #3
 800cb00:	4413      	add	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	440b      	add	r3, r1
 800cb06:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800cb0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3714      	adds	r7, #20
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr

0800cb18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	460b      	mov	r3, r1
 800cb22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb24:	2300      	movs	r3, #0
 800cb26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb32:	78fa      	ldrb	r2, [r7, #3]
 800cb34:	4611      	mov	r1, r2
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7fa fbd7 	bl	80072ea <HAL_PCD_SetAddress>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb40:	7bfb      	ldrb	r3, [r7, #15]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f000 f874 	bl	800cc30 <USBD_Get_USB_Status>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b086      	sub	sp, #24
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	60f8      	str	r0, [r7, #12]
 800cb5e:	607a      	str	r2, [r7, #4]
 800cb60:	603b      	str	r3, [r7, #0]
 800cb62:	460b      	mov	r3, r1
 800cb64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb66:	2300      	movs	r3, #0
 800cb68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cb74:	7af9      	ldrb	r1, [r7, #11]
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	f7fa fcf0 	bl	800755e <HAL_PCD_EP_Transmit>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb82:	7dfb      	ldrb	r3, [r7, #23]
 800cb84:	4618      	mov	r0, r3
 800cb86:	f000 f853 	bl	800cc30 <USBD_Get_USB_Status>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb8e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3718      	adds	r7, #24
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b086      	sub	sp, #24
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	607a      	str	r2, [r7, #4]
 800cba2:	603b      	str	r3, [r7, #0]
 800cba4:	460b      	mov	r3, r1
 800cba6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cbb6:	7af9      	ldrb	r1, [r7, #11]
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	f7fa fc6c 	bl	8007498 <HAL_PCD_EP_Receive>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbc4:	7dfb      	ldrb	r3, [r7, #23]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f000 f832 	bl	800cc30 <USBD_Get_USB_Status>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cbd0:	7dbb      	ldrb	r3, [r7, #22]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3718      	adds	r7, #24
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}

0800cbda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b082      	sub	sp, #8
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbec:	78fa      	ldrb	r2, [r7, #3]
 800cbee:	4611      	mov	r1, r2
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fa fc9c 	bl	800752e <HAL_PCD_EP_GetRxCount>
 800cbf6:	4603      	mov	r3, r0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cc08:	4b03      	ldr	r3, [pc, #12]	; (800cc18 <USBD_static_malloc+0x18>)
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	370c      	adds	r7, #12
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	20001f94 	.word	0x20001f94

0800cc1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]

}
 800cc24:	bf00      	nop
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	4603      	mov	r3, r0
 800cc38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc3e:	79fb      	ldrb	r3, [r7, #7]
 800cc40:	2b03      	cmp	r3, #3
 800cc42:	d817      	bhi.n	800cc74 <USBD_Get_USB_Status+0x44>
 800cc44:	a201      	add	r2, pc, #4	; (adr r2, 800cc4c <USBD_Get_USB_Status+0x1c>)
 800cc46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc4a:	bf00      	nop
 800cc4c:	0800cc5d 	.word	0x0800cc5d
 800cc50:	0800cc63 	.word	0x0800cc63
 800cc54:	0800cc69 	.word	0x0800cc69
 800cc58:	0800cc6f 	.word	0x0800cc6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc60:	e00b      	b.n	800cc7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc62:	2303      	movs	r3, #3
 800cc64:	73fb      	strb	r3, [r7, #15]
    break;
 800cc66:	e008      	b.n	800cc7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc6c:	e005      	b.n	800cc7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc6e:	2303      	movs	r3, #3
 800cc70:	73fb      	strb	r3, [r7, #15]
    break;
 800cc72:	e002      	b.n	800cc7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cc74:	2303      	movs	r3, #3
 800cc76:	73fb      	strb	r3, [r7, #15]
    break;
 800cc78:	bf00      	nop
  }
  return usb_status;
 800cc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3714      	adds	r7, #20
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <__errno>:
 800cc88:	4b01      	ldr	r3, [pc, #4]	; (800cc90 <__errno+0x8>)
 800cc8a:	6818      	ldr	r0, [r3, #0]
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	2000010c 	.word	0x2000010c

0800cc94 <__libc_init_array>:
 800cc94:	b570      	push	{r4, r5, r6, lr}
 800cc96:	4d0d      	ldr	r5, [pc, #52]	; (800cccc <__libc_init_array+0x38>)
 800cc98:	4c0d      	ldr	r4, [pc, #52]	; (800ccd0 <__libc_init_array+0x3c>)
 800cc9a:	1b64      	subs	r4, r4, r5
 800cc9c:	10a4      	asrs	r4, r4, #2
 800cc9e:	2600      	movs	r6, #0
 800cca0:	42a6      	cmp	r6, r4
 800cca2:	d109      	bne.n	800ccb8 <__libc_init_array+0x24>
 800cca4:	4d0b      	ldr	r5, [pc, #44]	; (800ccd4 <__libc_init_array+0x40>)
 800cca6:	4c0c      	ldr	r4, [pc, #48]	; (800ccd8 <__libc_init_array+0x44>)
 800cca8:	f003 fa58 	bl	801015c <_init>
 800ccac:	1b64      	subs	r4, r4, r5
 800ccae:	10a4      	asrs	r4, r4, #2
 800ccb0:	2600      	movs	r6, #0
 800ccb2:	42a6      	cmp	r6, r4
 800ccb4:	d105      	bne.n	800ccc2 <__libc_init_array+0x2e>
 800ccb6:	bd70      	pop	{r4, r5, r6, pc}
 800ccb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccbc:	4798      	blx	r3
 800ccbe:	3601      	adds	r6, #1
 800ccc0:	e7ee      	b.n	800cca0 <__libc_init_array+0xc>
 800ccc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccc6:	4798      	blx	r3
 800ccc8:	3601      	adds	r6, #1
 800ccca:	e7f2      	b.n	800ccb2 <__libc_init_array+0x1e>
 800cccc:	080106e8 	.word	0x080106e8
 800ccd0:	080106e8 	.word	0x080106e8
 800ccd4:	080106e8 	.word	0x080106e8
 800ccd8:	080106ec 	.word	0x080106ec

0800ccdc <memset>:
 800ccdc:	4402      	add	r2, r0
 800ccde:	4603      	mov	r3, r0
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d100      	bne.n	800cce6 <memset+0xa>
 800cce4:	4770      	bx	lr
 800cce6:	f803 1b01 	strb.w	r1, [r3], #1
 800ccea:	e7f9      	b.n	800cce0 <memset+0x4>

0800ccec <__cvt>:
 800ccec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccf0:	ec55 4b10 	vmov	r4, r5, d0
 800ccf4:	2d00      	cmp	r5, #0
 800ccf6:	460e      	mov	r6, r1
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	462b      	mov	r3, r5
 800ccfc:	bfbb      	ittet	lt
 800ccfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cd02:	461d      	movlt	r5, r3
 800cd04:	2300      	movge	r3, #0
 800cd06:	232d      	movlt	r3, #45	; 0x2d
 800cd08:	700b      	strb	r3, [r1, #0]
 800cd0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cd10:	4691      	mov	r9, r2
 800cd12:	f023 0820 	bic.w	r8, r3, #32
 800cd16:	bfbc      	itt	lt
 800cd18:	4622      	movlt	r2, r4
 800cd1a:	4614      	movlt	r4, r2
 800cd1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd20:	d005      	beq.n	800cd2e <__cvt+0x42>
 800cd22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cd26:	d100      	bne.n	800cd2a <__cvt+0x3e>
 800cd28:	3601      	adds	r6, #1
 800cd2a:	2102      	movs	r1, #2
 800cd2c:	e000      	b.n	800cd30 <__cvt+0x44>
 800cd2e:	2103      	movs	r1, #3
 800cd30:	ab03      	add	r3, sp, #12
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	ab02      	add	r3, sp, #8
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	ec45 4b10 	vmov	d0, r4, r5
 800cd3c:	4653      	mov	r3, sl
 800cd3e:	4632      	mov	r2, r6
 800cd40:	f000 fcea 	bl	800d718 <_dtoa_r>
 800cd44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cd48:	4607      	mov	r7, r0
 800cd4a:	d102      	bne.n	800cd52 <__cvt+0x66>
 800cd4c:	f019 0f01 	tst.w	r9, #1
 800cd50:	d022      	beq.n	800cd98 <__cvt+0xac>
 800cd52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd56:	eb07 0906 	add.w	r9, r7, r6
 800cd5a:	d110      	bne.n	800cd7e <__cvt+0x92>
 800cd5c:	783b      	ldrb	r3, [r7, #0]
 800cd5e:	2b30      	cmp	r3, #48	; 0x30
 800cd60:	d10a      	bne.n	800cd78 <__cvt+0x8c>
 800cd62:	2200      	movs	r2, #0
 800cd64:	2300      	movs	r3, #0
 800cd66:	4620      	mov	r0, r4
 800cd68:	4629      	mov	r1, r5
 800cd6a:	f7f3 feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd6e:	b918      	cbnz	r0, 800cd78 <__cvt+0x8c>
 800cd70:	f1c6 0601 	rsb	r6, r6, #1
 800cd74:	f8ca 6000 	str.w	r6, [sl]
 800cd78:	f8da 3000 	ldr.w	r3, [sl]
 800cd7c:	4499      	add	r9, r3
 800cd7e:	2200      	movs	r2, #0
 800cd80:	2300      	movs	r3, #0
 800cd82:	4620      	mov	r0, r4
 800cd84:	4629      	mov	r1, r5
 800cd86:	f7f3 fea7 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd8a:	b108      	cbz	r0, 800cd90 <__cvt+0xa4>
 800cd8c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cd90:	2230      	movs	r2, #48	; 0x30
 800cd92:	9b03      	ldr	r3, [sp, #12]
 800cd94:	454b      	cmp	r3, r9
 800cd96:	d307      	bcc.n	800cda8 <__cvt+0xbc>
 800cd98:	9b03      	ldr	r3, [sp, #12]
 800cd9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd9c:	1bdb      	subs	r3, r3, r7
 800cd9e:	4638      	mov	r0, r7
 800cda0:	6013      	str	r3, [r2, #0]
 800cda2:	b004      	add	sp, #16
 800cda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda8:	1c59      	adds	r1, r3, #1
 800cdaa:	9103      	str	r1, [sp, #12]
 800cdac:	701a      	strb	r2, [r3, #0]
 800cdae:	e7f0      	b.n	800cd92 <__cvt+0xa6>

0800cdb0 <__exponent>:
 800cdb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2900      	cmp	r1, #0
 800cdb6:	bfb8      	it	lt
 800cdb8:	4249      	neglt	r1, r1
 800cdba:	f803 2b02 	strb.w	r2, [r3], #2
 800cdbe:	bfb4      	ite	lt
 800cdc0:	222d      	movlt	r2, #45	; 0x2d
 800cdc2:	222b      	movge	r2, #43	; 0x2b
 800cdc4:	2909      	cmp	r1, #9
 800cdc6:	7042      	strb	r2, [r0, #1]
 800cdc8:	dd2a      	ble.n	800ce20 <__exponent+0x70>
 800cdca:	f10d 0407 	add.w	r4, sp, #7
 800cdce:	46a4      	mov	ip, r4
 800cdd0:	270a      	movs	r7, #10
 800cdd2:	46a6      	mov	lr, r4
 800cdd4:	460a      	mov	r2, r1
 800cdd6:	fb91 f6f7 	sdiv	r6, r1, r7
 800cdda:	fb07 1516 	mls	r5, r7, r6, r1
 800cdde:	3530      	adds	r5, #48	; 0x30
 800cde0:	2a63      	cmp	r2, #99	; 0x63
 800cde2:	f104 34ff 	add.w	r4, r4, #4294967295
 800cde6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cdea:	4631      	mov	r1, r6
 800cdec:	dcf1      	bgt.n	800cdd2 <__exponent+0x22>
 800cdee:	3130      	adds	r1, #48	; 0x30
 800cdf0:	f1ae 0502 	sub.w	r5, lr, #2
 800cdf4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cdf8:	1c44      	adds	r4, r0, #1
 800cdfa:	4629      	mov	r1, r5
 800cdfc:	4561      	cmp	r1, ip
 800cdfe:	d30a      	bcc.n	800ce16 <__exponent+0x66>
 800ce00:	f10d 0209 	add.w	r2, sp, #9
 800ce04:	eba2 020e 	sub.w	r2, r2, lr
 800ce08:	4565      	cmp	r5, ip
 800ce0a:	bf88      	it	hi
 800ce0c:	2200      	movhi	r2, #0
 800ce0e:	4413      	add	r3, r2
 800ce10:	1a18      	subs	r0, r3, r0
 800ce12:	b003      	add	sp, #12
 800ce14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ce1e:	e7ed      	b.n	800cdfc <__exponent+0x4c>
 800ce20:	2330      	movs	r3, #48	; 0x30
 800ce22:	3130      	adds	r1, #48	; 0x30
 800ce24:	7083      	strb	r3, [r0, #2]
 800ce26:	70c1      	strb	r1, [r0, #3]
 800ce28:	1d03      	adds	r3, r0, #4
 800ce2a:	e7f1      	b.n	800ce10 <__exponent+0x60>

0800ce2c <_printf_float>:
 800ce2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce30:	ed2d 8b02 	vpush	{d8}
 800ce34:	b08d      	sub	sp, #52	; 0x34
 800ce36:	460c      	mov	r4, r1
 800ce38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ce3c:	4616      	mov	r6, r2
 800ce3e:	461f      	mov	r7, r3
 800ce40:	4605      	mov	r5, r0
 800ce42:	f001 fa57 	bl	800e2f4 <_localeconv_r>
 800ce46:	f8d0 a000 	ldr.w	sl, [r0]
 800ce4a:	4650      	mov	r0, sl
 800ce4c:	f7f3 f9c8 	bl	80001e0 <strlen>
 800ce50:	2300      	movs	r3, #0
 800ce52:	930a      	str	r3, [sp, #40]	; 0x28
 800ce54:	6823      	ldr	r3, [r4, #0]
 800ce56:	9305      	str	r3, [sp, #20]
 800ce58:	f8d8 3000 	ldr.w	r3, [r8]
 800ce5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ce60:	3307      	adds	r3, #7
 800ce62:	f023 0307 	bic.w	r3, r3, #7
 800ce66:	f103 0208 	add.w	r2, r3, #8
 800ce6a:	f8c8 2000 	str.w	r2, [r8]
 800ce6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ce76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ce7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce7e:	9307      	str	r3, [sp, #28]
 800ce80:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce84:	ee08 0a10 	vmov	s16, r0
 800ce88:	4b9f      	ldr	r3, [pc, #636]	; (800d108 <_printf_float+0x2dc>)
 800ce8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce92:	f7f3 fe53 	bl	8000b3c <__aeabi_dcmpun>
 800ce96:	bb88      	cbnz	r0, 800cefc <_printf_float+0xd0>
 800ce98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce9c:	4b9a      	ldr	r3, [pc, #616]	; (800d108 <_printf_float+0x2dc>)
 800ce9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cea2:	f7f3 fe2d 	bl	8000b00 <__aeabi_dcmple>
 800cea6:	bb48      	cbnz	r0, 800cefc <_printf_float+0xd0>
 800cea8:	2200      	movs	r2, #0
 800ceaa:	2300      	movs	r3, #0
 800ceac:	4640      	mov	r0, r8
 800ceae:	4649      	mov	r1, r9
 800ceb0:	f7f3 fe1c 	bl	8000aec <__aeabi_dcmplt>
 800ceb4:	b110      	cbz	r0, 800cebc <_printf_float+0x90>
 800ceb6:	232d      	movs	r3, #45	; 0x2d
 800ceb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cebc:	4b93      	ldr	r3, [pc, #588]	; (800d10c <_printf_float+0x2e0>)
 800cebe:	4894      	ldr	r0, [pc, #592]	; (800d110 <_printf_float+0x2e4>)
 800cec0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cec4:	bf94      	ite	ls
 800cec6:	4698      	movls	r8, r3
 800cec8:	4680      	movhi	r8, r0
 800ceca:	2303      	movs	r3, #3
 800cecc:	6123      	str	r3, [r4, #16]
 800cece:	9b05      	ldr	r3, [sp, #20]
 800ced0:	f023 0204 	bic.w	r2, r3, #4
 800ced4:	6022      	str	r2, [r4, #0]
 800ced6:	f04f 0900 	mov.w	r9, #0
 800ceda:	9700      	str	r7, [sp, #0]
 800cedc:	4633      	mov	r3, r6
 800cede:	aa0b      	add	r2, sp, #44	; 0x2c
 800cee0:	4621      	mov	r1, r4
 800cee2:	4628      	mov	r0, r5
 800cee4:	f000 f9d8 	bl	800d298 <_printf_common>
 800cee8:	3001      	adds	r0, #1
 800ceea:	f040 8090 	bne.w	800d00e <_printf_float+0x1e2>
 800ceee:	f04f 30ff 	mov.w	r0, #4294967295
 800cef2:	b00d      	add	sp, #52	; 0x34
 800cef4:	ecbd 8b02 	vpop	{d8}
 800cef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefc:	4642      	mov	r2, r8
 800cefe:	464b      	mov	r3, r9
 800cf00:	4640      	mov	r0, r8
 800cf02:	4649      	mov	r1, r9
 800cf04:	f7f3 fe1a 	bl	8000b3c <__aeabi_dcmpun>
 800cf08:	b140      	cbz	r0, 800cf1c <_printf_float+0xf0>
 800cf0a:	464b      	mov	r3, r9
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	bfbc      	itt	lt
 800cf10:	232d      	movlt	r3, #45	; 0x2d
 800cf12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cf16:	487f      	ldr	r0, [pc, #508]	; (800d114 <_printf_float+0x2e8>)
 800cf18:	4b7f      	ldr	r3, [pc, #508]	; (800d118 <_printf_float+0x2ec>)
 800cf1a:	e7d1      	b.n	800cec0 <_printf_float+0x94>
 800cf1c:	6863      	ldr	r3, [r4, #4]
 800cf1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cf22:	9206      	str	r2, [sp, #24]
 800cf24:	1c5a      	adds	r2, r3, #1
 800cf26:	d13f      	bne.n	800cfa8 <_printf_float+0x17c>
 800cf28:	2306      	movs	r3, #6
 800cf2a:	6063      	str	r3, [r4, #4]
 800cf2c:	9b05      	ldr	r3, [sp, #20]
 800cf2e:	6861      	ldr	r1, [r4, #4]
 800cf30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cf34:	2300      	movs	r3, #0
 800cf36:	9303      	str	r3, [sp, #12]
 800cf38:	ab0a      	add	r3, sp, #40	; 0x28
 800cf3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cf3e:	ab09      	add	r3, sp, #36	; 0x24
 800cf40:	ec49 8b10 	vmov	d0, r8, r9
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	6022      	str	r2, [r4, #0]
 800cf48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	f7ff fecd 	bl	800ccec <__cvt>
 800cf52:	9b06      	ldr	r3, [sp, #24]
 800cf54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf56:	2b47      	cmp	r3, #71	; 0x47
 800cf58:	4680      	mov	r8, r0
 800cf5a:	d108      	bne.n	800cf6e <_printf_float+0x142>
 800cf5c:	1cc8      	adds	r0, r1, #3
 800cf5e:	db02      	blt.n	800cf66 <_printf_float+0x13a>
 800cf60:	6863      	ldr	r3, [r4, #4]
 800cf62:	4299      	cmp	r1, r3
 800cf64:	dd41      	ble.n	800cfea <_printf_float+0x1be>
 800cf66:	f1ab 0b02 	sub.w	fp, fp, #2
 800cf6a:	fa5f fb8b 	uxtb.w	fp, fp
 800cf6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cf72:	d820      	bhi.n	800cfb6 <_printf_float+0x18a>
 800cf74:	3901      	subs	r1, #1
 800cf76:	465a      	mov	r2, fp
 800cf78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cf7c:	9109      	str	r1, [sp, #36]	; 0x24
 800cf7e:	f7ff ff17 	bl	800cdb0 <__exponent>
 800cf82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf84:	1813      	adds	r3, r2, r0
 800cf86:	2a01      	cmp	r2, #1
 800cf88:	4681      	mov	r9, r0
 800cf8a:	6123      	str	r3, [r4, #16]
 800cf8c:	dc02      	bgt.n	800cf94 <_printf_float+0x168>
 800cf8e:	6822      	ldr	r2, [r4, #0]
 800cf90:	07d2      	lsls	r2, r2, #31
 800cf92:	d501      	bpl.n	800cf98 <_printf_float+0x16c>
 800cf94:	3301      	adds	r3, #1
 800cf96:	6123      	str	r3, [r4, #16]
 800cf98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d09c      	beq.n	800ceda <_printf_float+0xae>
 800cfa0:	232d      	movs	r3, #45	; 0x2d
 800cfa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfa6:	e798      	b.n	800ceda <_printf_float+0xae>
 800cfa8:	9a06      	ldr	r2, [sp, #24]
 800cfaa:	2a47      	cmp	r2, #71	; 0x47
 800cfac:	d1be      	bne.n	800cf2c <_printf_float+0x100>
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d1bc      	bne.n	800cf2c <_printf_float+0x100>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e7b9      	b.n	800cf2a <_printf_float+0xfe>
 800cfb6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cfba:	d118      	bne.n	800cfee <_printf_float+0x1c2>
 800cfbc:	2900      	cmp	r1, #0
 800cfbe:	6863      	ldr	r3, [r4, #4]
 800cfc0:	dd0b      	ble.n	800cfda <_printf_float+0x1ae>
 800cfc2:	6121      	str	r1, [r4, #16]
 800cfc4:	b913      	cbnz	r3, 800cfcc <_printf_float+0x1a0>
 800cfc6:	6822      	ldr	r2, [r4, #0]
 800cfc8:	07d0      	lsls	r0, r2, #31
 800cfca:	d502      	bpl.n	800cfd2 <_printf_float+0x1a6>
 800cfcc:	3301      	adds	r3, #1
 800cfce:	440b      	add	r3, r1
 800cfd0:	6123      	str	r3, [r4, #16]
 800cfd2:	65a1      	str	r1, [r4, #88]	; 0x58
 800cfd4:	f04f 0900 	mov.w	r9, #0
 800cfd8:	e7de      	b.n	800cf98 <_printf_float+0x16c>
 800cfda:	b913      	cbnz	r3, 800cfe2 <_printf_float+0x1b6>
 800cfdc:	6822      	ldr	r2, [r4, #0]
 800cfde:	07d2      	lsls	r2, r2, #31
 800cfe0:	d501      	bpl.n	800cfe6 <_printf_float+0x1ba>
 800cfe2:	3302      	adds	r3, #2
 800cfe4:	e7f4      	b.n	800cfd0 <_printf_float+0x1a4>
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e7f2      	b.n	800cfd0 <_printf_float+0x1a4>
 800cfea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cfee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cff0:	4299      	cmp	r1, r3
 800cff2:	db05      	blt.n	800d000 <_printf_float+0x1d4>
 800cff4:	6823      	ldr	r3, [r4, #0]
 800cff6:	6121      	str	r1, [r4, #16]
 800cff8:	07d8      	lsls	r0, r3, #31
 800cffa:	d5ea      	bpl.n	800cfd2 <_printf_float+0x1a6>
 800cffc:	1c4b      	adds	r3, r1, #1
 800cffe:	e7e7      	b.n	800cfd0 <_printf_float+0x1a4>
 800d000:	2900      	cmp	r1, #0
 800d002:	bfd4      	ite	le
 800d004:	f1c1 0202 	rsble	r2, r1, #2
 800d008:	2201      	movgt	r2, #1
 800d00a:	4413      	add	r3, r2
 800d00c:	e7e0      	b.n	800cfd0 <_printf_float+0x1a4>
 800d00e:	6823      	ldr	r3, [r4, #0]
 800d010:	055a      	lsls	r2, r3, #21
 800d012:	d407      	bmi.n	800d024 <_printf_float+0x1f8>
 800d014:	6923      	ldr	r3, [r4, #16]
 800d016:	4642      	mov	r2, r8
 800d018:	4631      	mov	r1, r6
 800d01a:	4628      	mov	r0, r5
 800d01c:	47b8      	blx	r7
 800d01e:	3001      	adds	r0, #1
 800d020:	d12c      	bne.n	800d07c <_printf_float+0x250>
 800d022:	e764      	b.n	800ceee <_printf_float+0xc2>
 800d024:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d028:	f240 80e0 	bls.w	800d1ec <_printf_float+0x3c0>
 800d02c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d030:	2200      	movs	r2, #0
 800d032:	2300      	movs	r3, #0
 800d034:	f7f3 fd50 	bl	8000ad8 <__aeabi_dcmpeq>
 800d038:	2800      	cmp	r0, #0
 800d03a:	d034      	beq.n	800d0a6 <_printf_float+0x27a>
 800d03c:	4a37      	ldr	r2, [pc, #220]	; (800d11c <_printf_float+0x2f0>)
 800d03e:	2301      	movs	r3, #1
 800d040:	4631      	mov	r1, r6
 800d042:	4628      	mov	r0, r5
 800d044:	47b8      	blx	r7
 800d046:	3001      	adds	r0, #1
 800d048:	f43f af51 	beq.w	800ceee <_printf_float+0xc2>
 800d04c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d050:	429a      	cmp	r2, r3
 800d052:	db02      	blt.n	800d05a <_printf_float+0x22e>
 800d054:	6823      	ldr	r3, [r4, #0]
 800d056:	07d8      	lsls	r0, r3, #31
 800d058:	d510      	bpl.n	800d07c <_printf_float+0x250>
 800d05a:	ee18 3a10 	vmov	r3, s16
 800d05e:	4652      	mov	r2, sl
 800d060:	4631      	mov	r1, r6
 800d062:	4628      	mov	r0, r5
 800d064:	47b8      	blx	r7
 800d066:	3001      	adds	r0, #1
 800d068:	f43f af41 	beq.w	800ceee <_printf_float+0xc2>
 800d06c:	f04f 0800 	mov.w	r8, #0
 800d070:	f104 091a 	add.w	r9, r4, #26
 800d074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d076:	3b01      	subs	r3, #1
 800d078:	4543      	cmp	r3, r8
 800d07a:	dc09      	bgt.n	800d090 <_printf_float+0x264>
 800d07c:	6823      	ldr	r3, [r4, #0]
 800d07e:	079b      	lsls	r3, r3, #30
 800d080:	f100 8105 	bmi.w	800d28e <_printf_float+0x462>
 800d084:	68e0      	ldr	r0, [r4, #12]
 800d086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d088:	4298      	cmp	r0, r3
 800d08a:	bfb8      	it	lt
 800d08c:	4618      	movlt	r0, r3
 800d08e:	e730      	b.n	800cef2 <_printf_float+0xc6>
 800d090:	2301      	movs	r3, #1
 800d092:	464a      	mov	r2, r9
 800d094:	4631      	mov	r1, r6
 800d096:	4628      	mov	r0, r5
 800d098:	47b8      	blx	r7
 800d09a:	3001      	adds	r0, #1
 800d09c:	f43f af27 	beq.w	800ceee <_printf_float+0xc2>
 800d0a0:	f108 0801 	add.w	r8, r8, #1
 800d0a4:	e7e6      	b.n	800d074 <_printf_float+0x248>
 800d0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	dc39      	bgt.n	800d120 <_printf_float+0x2f4>
 800d0ac:	4a1b      	ldr	r2, [pc, #108]	; (800d11c <_printf_float+0x2f0>)
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	4631      	mov	r1, r6
 800d0b2:	4628      	mov	r0, r5
 800d0b4:	47b8      	blx	r7
 800d0b6:	3001      	adds	r0, #1
 800d0b8:	f43f af19 	beq.w	800ceee <_printf_float+0xc2>
 800d0bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	d102      	bne.n	800d0ca <_printf_float+0x29e>
 800d0c4:	6823      	ldr	r3, [r4, #0]
 800d0c6:	07d9      	lsls	r1, r3, #31
 800d0c8:	d5d8      	bpl.n	800d07c <_printf_float+0x250>
 800d0ca:	ee18 3a10 	vmov	r3, s16
 800d0ce:	4652      	mov	r2, sl
 800d0d0:	4631      	mov	r1, r6
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	47b8      	blx	r7
 800d0d6:	3001      	adds	r0, #1
 800d0d8:	f43f af09 	beq.w	800ceee <_printf_float+0xc2>
 800d0dc:	f04f 0900 	mov.w	r9, #0
 800d0e0:	f104 0a1a 	add.w	sl, r4, #26
 800d0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e6:	425b      	negs	r3, r3
 800d0e8:	454b      	cmp	r3, r9
 800d0ea:	dc01      	bgt.n	800d0f0 <_printf_float+0x2c4>
 800d0ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ee:	e792      	b.n	800d016 <_printf_float+0x1ea>
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	4652      	mov	r2, sl
 800d0f4:	4631      	mov	r1, r6
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	47b8      	blx	r7
 800d0fa:	3001      	adds	r0, #1
 800d0fc:	f43f aef7 	beq.w	800ceee <_printf_float+0xc2>
 800d100:	f109 0901 	add.w	r9, r9, #1
 800d104:	e7ee      	b.n	800d0e4 <_printf_float+0x2b8>
 800d106:	bf00      	nop
 800d108:	7fefffff 	.word	0x7fefffff
 800d10c:	08010294 	.word	0x08010294
 800d110:	08010298 	.word	0x08010298
 800d114:	080102a0 	.word	0x080102a0
 800d118:	0801029c 	.word	0x0801029c
 800d11c:	080102a4 	.word	0x080102a4
 800d120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d122:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d124:	429a      	cmp	r2, r3
 800d126:	bfa8      	it	ge
 800d128:	461a      	movge	r2, r3
 800d12a:	2a00      	cmp	r2, #0
 800d12c:	4691      	mov	r9, r2
 800d12e:	dc37      	bgt.n	800d1a0 <_printf_float+0x374>
 800d130:	f04f 0b00 	mov.w	fp, #0
 800d134:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d138:	f104 021a 	add.w	r2, r4, #26
 800d13c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d13e:	9305      	str	r3, [sp, #20]
 800d140:	eba3 0309 	sub.w	r3, r3, r9
 800d144:	455b      	cmp	r3, fp
 800d146:	dc33      	bgt.n	800d1b0 <_printf_float+0x384>
 800d148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d14c:	429a      	cmp	r2, r3
 800d14e:	db3b      	blt.n	800d1c8 <_printf_float+0x39c>
 800d150:	6823      	ldr	r3, [r4, #0]
 800d152:	07da      	lsls	r2, r3, #31
 800d154:	d438      	bmi.n	800d1c8 <_printf_float+0x39c>
 800d156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d158:	9a05      	ldr	r2, [sp, #20]
 800d15a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d15c:	1a9a      	subs	r2, r3, r2
 800d15e:	eba3 0901 	sub.w	r9, r3, r1
 800d162:	4591      	cmp	r9, r2
 800d164:	bfa8      	it	ge
 800d166:	4691      	movge	r9, r2
 800d168:	f1b9 0f00 	cmp.w	r9, #0
 800d16c:	dc35      	bgt.n	800d1da <_printf_float+0x3ae>
 800d16e:	f04f 0800 	mov.w	r8, #0
 800d172:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d176:	f104 0a1a 	add.w	sl, r4, #26
 800d17a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d17e:	1a9b      	subs	r3, r3, r2
 800d180:	eba3 0309 	sub.w	r3, r3, r9
 800d184:	4543      	cmp	r3, r8
 800d186:	f77f af79 	ble.w	800d07c <_printf_float+0x250>
 800d18a:	2301      	movs	r3, #1
 800d18c:	4652      	mov	r2, sl
 800d18e:	4631      	mov	r1, r6
 800d190:	4628      	mov	r0, r5
 800d192:	47b8      	blx	r7
 800d194:	3001      	adds	r0, #1
 800d196:	f43f aeaa 	beq.w	800ceee <_printf_float+0xc2>
 800d19a:	f108 0801 	add.w	r8, r8, #1
 800d19e:	e7ec      	b.n	800d17a <_printf_float+0x34e>
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	4631      	mov	r1, r6
 800d1a4:	4642      	mov	r2, r8
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	47b8      	blx	r7
 800d1aa:	3001      	adds	r0, #1
 800d1ac:	d1c0      	bne.n	800d130 <_printf_float+0x304>
 800d1ae:	e69e      	b.n	800ceee <_printf_float+0xc2>
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	4631      	mov	r1, r6
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	9205      	str	r2, [sp, #20]
 800d1b8:	47b8      	blx	r7
 800d1ba:	3001      	adds	r0, #1
 800d1bc:	f43f ae97 	beq.w	800ceee <_printf_float+0xc2>
 800d1c0:	9a05      	ldr	r2, [sp, #20]
 800d1c2:	f10b 0b01 	add.w	fp, fp, #1
 800d1c6:	e7b9      	b.n	800d13c <_printf_float+0x310>
 800d1c8:	ee18 3a10 	vmov	r3, s16
 800d1cc:	4652      	mov	r2, sl
 800d1ce:	4631      	mov	r1, r6
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	47b8      	blx	r7
 800d1d4:	3001      	adds	r0, #1
 800d1d6:	d1be      	bne.n	800d156 <_printf_float+0x32a>
 800d1d8:	e689      	b.n	800ceee <_printf_float+0xc2>
 800d1da:	9a05      	ldr	r2, [sp, #20]
 800d1dc:	464b      	mov	r3, r9
 800d1de:	4442      	add	r2, r8
 800d1e0:	4631      	mov	r1, r6
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	47b8      	blx	r7
 800d1e6:	3001      	adds	r0, #1
 800d1e8:	d1c1      	bne.n	800d16e <_printf_float+0x342>
 800d1ea:	e680      	b.n	800ceee <_printf_float+0xc2>
 800d1ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1ee:	2a01      	cmp	r2, #1
 800d1f0:	dc01      	bgt.n	800d1f6 <_printf_float+0x3ca>
 800d1f2:	07db      	lsls	r3, r3, #31
 800d1f4:	d538      	bpl.n	800d268 <_printf_float+0x43c>
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	4642      	mov	r2, r8
 800d1fa:	4631      	mov	r1, r6
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	47b8      	blx	r7
 800d200:	3001      	adds	r0, #1
 800d202:	f43f ae74 	beq.w	800ceee <_printf_float+0xc2>
 800d206:	ee18 3a10 	vmov	r3, s16
 800d20a:	4652      	mov	r2, sl
 800d20c:	4631      	mov	r1, r6
 800d20e:	4628      	mov	r0, r5
 800d210:	47b8      	blx	r7
 800d212:	3001      	adds	r0, #1
 800d214:	f43f ae6b 	beq.w	800ceee <_printf_float+0xc2>
 800d218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d21c:	2200      	movs	r2, #0
 800d21e:	2300      	movs	r3, #0
 800d220:	f7f3 fc5a 	bl	8000ad8 <__aeabi_dcmpeq>
 800d224:	b9d8      	cbnz	r0, 800d25e <_printf_float+0x432>
 800d226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d228:	f108 0201 	add.w	r2, r8, #1
 800d22c:	3b01      	subs	r3, #1
 800d22e:	4631      	mov	r1, r6
 800d230:	4628      	mov	r0, r5
 800d232:	47b8      	blx	r7
 800d234:	3001      	adds	r0, #1
 800d236:	d10e      	bne.n	800d256 <_printf_float+0x42a>
 800d238:	e659      	b.n	800ceee <_printf_float+0xc2>
 800d23a:	2301      	movs	r3, #1
 800d23c:	4652      	mov	r2, sl
 800d23e:	4631      	mov	r1, r6
 800d240:	4628      	mov	r0, r5
 800d242:	47b8      	blx	r7
 800d244:	3001      	adds	r0, #1
 800d246:	f43f ae52 	beq.w	800ceee <_printf_float+0xc2>
 800d24a:	f108 0801 	add.w	r8, r8, #1
 800d24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d250:	3b01      	subs	r3, #1
 800d252:	4543      	cmp	r3, r8
 800d254:	dcf1      	bgt.n	800d23a <_printf_float+0x40e>
 800d256:	464b      	mov	r3, r9
 800d258:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d25c:	e6dc      	b.n	800d018 <_printf_float+0x1ec>
 800d25e:	f04f 0800 	mov.w	r8, #0
 800d262:	f104 0a1a 	add.w	sl, r4, #26
 800d266:	e7f2      	b.n	800d24e <_printf_float+0x422>
 800d268:	2301      	movs	r3, #1
 800d26a:	4642      	mov	r2, r8
 800d26c:	e7df      	b.n	800d22e <_printf_float+0x402>
 800d26e:	2301      	movs	r3, #1
 800d270:	464a      	mov	r2, r9
 800d272:	4631      	mov	r1, r6
 800d274:	4628      	mov	r0, r5
 800d276:	47b8      	blx	r7
 800d278:	3001      	adds	r0, #1
 800d27a:	f43f ae38 	beq.w	800ceee <_printf_float+0xc2>
 800d27e:	f108 0801 	add.w	r8, r8, #1
 800d282:	68e3      	ldr	r3, [r4, #12]
 800d284:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d286:	1a5b      	subs	r3, r3, r1
 800d288:	4543      	cmp	r3, r8
 800d28a:	dcf0      	bgt.n	800d26e <_printf_float+0x442>
 800d28c:	e6fa      	b.n	800d084 <_printf_float+0x258>
 800d28e:	f04f 0800 	mov.w	r8, #0
 800d292:	f104 0919 	add.w	r9, r4, #25
 800d296:	e7f4      	b.n	800d282 <_printf_float+0x456>

0800d298 <_printf_common>:
 800d298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d29c:	4616      	mov	r6, r2
 800d29e:	4699      	mov	r9, r3
 800d2a0:	688a      	ldr	r2, [r1, #8]
 800d2a2:	690b      	ldr	r3, [r1, #16]
 800d2a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	bfb8      	it	lt
 800d2ac:	4613      	movlt	r3, r2
 800d2ae:	6033      	str	r3, [r6, #0]
 800d2b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d2b4:	4607      	mov	r7, r0
 800d2b6:	460c      	mov	r4, r1
 800d2b8:	b10a      	cbz	r2, 800d2be <_printf_common+0x26>
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	6033      	str	r3, [r6, #0]
 800d2be:	6823      	ldr	r3, [r4, #0]
 800d2c0:	0699      	lsls	r1, r3, #26
 800d2c2:	bf42      	ittt	mi
 800d2c4:	6833      	ldrmi	r3, [r6, #0]
 800d2c6:	3302      	addmi	r3, #2
 800d2c8:	6033      	strmi	r3, [r6, #0]
 800d2ca:	6825      	ldr	r5, [r4, #0]
 800d2cc:	f015 0506 	ands.w	r5, r5, #6
 800d2d0:	d106      	bne.n	800d2e0 <_printf_common+0x48>
 800d2d2:	f104 0a19 	add.w	sl, r4, #25
 800d2d6:	68e3      	ldr	r3, [r4, #12]
 800d2d8:	6832      	ldr	r2, [r6, #0]
 800d2da:	1a9b      	subs	r3, r3, r2
 800d2dc:	42ab      	cmp	r3, r5
 800d2de:	dc26      	bgt.n	800d32e <_printf_common+0x96>
 800d2e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2e4:	1e13      	subs	r3, r2, #0
 800d2e6:	6822      	ldr	r2, [r4, #0]
 800d2e8:	bf18      	it	ne
 800d2ea:	2301      	movne	r3, #1
 800d2ec:	0692      	lsls	r2, r2, #26
 800d2ee:	d42b      	bmi.n	800d348 <_printf_common+0xb0>
 800d2f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2f4:	4649      	mov	r1, r9
 800d2f6:	4638      	mov	r0, r7
 800d2f8:	47c0      	blx	r8
 800d2fa:	3001      	adds	r0, #1
 800d2fc:	d01e      	beq.n	800d33c <_printf_common+0xa4>
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	68e5      	ldr	r5, [r4, #12]
 800d302:	6832      	ldr	r2, [r6, #0]
 800d304:	f003 0306 	and.w	r3, r3, #6
 800d308:	2b04      	cmp	r3, #4
 800d30a:	bf08      	it	eq
 800d30c:	1aad      	subeq	r5, r5, r2
 800d30e:	68a3      	ldr	r3, [r4, #8]
 800d310:	6922      	ldr	r2, [r4, #16]
 800d312:	bf0c      	ite	eq
 800d314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d318:	2500      	movne	r5, #0
 800d31a:	4293      	cmp	r3, r2
 800d31c:	bfc4      	itt	gt
 800d31e:	1a9b      	subgt	r3, r3, r2
 800d320:	18ed      	addgt	r5, r5, r3
 800d322:	2600      	movs	r6, #0
 800d324:	341a      	adds	r4, #26
 800d326:	42b5      	cmp	r5, r6
 800d328:	d11a      	bne.n	800d360 <_printf_common+0xc8>
 800d32a:	2000      	movs	r0, #0
 800d32c:	e008      	b.n	800d340 <_printf_common+0xa8>
 800d32e:	2301      	movs	r3, #1
 800d330:	4652      	mov	r2, sl
 800d332:	4649      	mov	r1, r9
 800d334:	4638      	mov	r0, r7
 800d336:	47c0      	blx	r8
 800d338:	3001      	adds	r0, #1
 800d33a:	d103      	bne.n	800d344 <_printf_common+0xac>
 800d33c:	f04f 30ff 	mov.w	r0, #4294967295
 800d340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d344:	3501      	adds	r5, #1
 800d346:	e7c6      	b.n	800d2d6 <_printf_common+0x3e>
 800d348:	18e1      	adds	r1, r4, r3
 800d34a:	1c5a      	adds	r2, r3, #1
 800d34c:	2030      	movs	r0, #48	; 0x30
 800d34e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d352:	4422      	add	r2, r4
 800d354:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d358:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d35c:	3302      	adds	r3, #2
 800d35e:	e7c7      	b.n	800d2f0 <_printf_common+0x58>
 800d360:	2301      	movs	r3, #1
 800d362:	4622      	mov	r2, r4
 800d364:	4649      	mov	r1, r9
 800d366:	4638      	mov	r0, r7
 800d368:	47c0      	blx	r8
 800d36a:	3001      	adds	r0, #1
 800d36c:	d0e6      	beq.n	800d33c <_printf_common+0xa4>
 800d36e:	3601      	adds	r6, #1
 800d370:	e7d9      	b.n	800d326 <_printf_common+0x8e>
	...

0800d374 <_printf_i>:
 800d374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d378:	7e0f      	ldrb	r7, [r1, #24]
 800d37a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d37c:	2f78      	cmp	r7, #120	; 0x78
 800d37e:	4691      	mov	r9, r2
 800d380:	4680      	mov	r8, r0
 800d382:	460c      	mov	r4, r1
 800d384:	469a      	mov	sl, r3
 800d386:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d38a:	d807      	bhi.n	800d39c <_printf_i+0x28>
 800d38c:	2f62      	cmp	r7, #98	; 0x62
 800d38e:	d80a      	bhi.n	800d3a6 <_printf_i+0x32>
 800d390:	2f00      	cmp	r7, #0
 800d392:	f000 80d8 	beq.w	800d546 <_printf_i+0x1d2>
 800d396:	2f58      	cmp	r7, #88	; 0x58
 800d398:	f000 80a3 	beq.w	800d4e2 <_printf_i+0x16e>
 800d39c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d3a4:	e03a      	b.n	800d41c <_printf_i+0xa8>
 800d3a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3aa:	2b15      	cmp	r3, #21
 800d3ac:	d8f6      	bhi.n	800d39c <_printf_i+0x28>
 800d3ae:	a101      	add	r1, pc, #4	; (adr r1, 800d3b4 <_printf_i+0x40>)
 800d3b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3b4:	0800d40d 	.word	0x0800d40d
 800d3b8:	0800d421 	.word	0x0800d421
 800d3bc:	0800d39d 	.word	0x0800d39d
 800d3c0:	0800d39d 	.word	0x0800d39d
 800d3c4:	0800d39d 	.word	0x0800d39d
 800d3c8:	0800d39d 	.word	0x0800d39d
 800d3cc:	0800d421 	.word	0x0800d421
 800d3d0:	0800d39d 	.word	0x0800d39d
 800d3d4:	0800d39d 	.word	0x0800d39d
 800d3d8:	0800d39d 	.word	0x0800d39d
 800d3dc:	0800d39d 	.word	0x0800d39d
 800d3e0:	0800d52d 	.word	0x0800d52d
 800d3e4:	0800d451 	.word	0x0800d451
 800d3e8:	0800d50f 	.word	0x0800d50f
 800d3ec:	0800d39d 	.word	0x0800d39d
 800d3f0:	0800d39d 	.word	0x0800d39d
 800d3f4:	0800d54f 	.word	0x0800d54f
 800d3f8:	0800d39d 	.word	0x0800d39d
 800d3fc:	0800d451 	.word	0x0800d451
 800d400:	0800d39d 	.word	0x0800d39d
 800d404:	0800d39d 	.word	0x0800d39d
 800d408:	0800d517 	.word	0x0800d517
 800d40c:	682b      	ldr	r3, [r5, #0]
 800d40e:	1d1a      	adds	r2, r3, #4
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	602a      	str	r2, [r5, #0]
 800d414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d41c:	2301      	movs	r3, #1
 800d41e:	e0a3      	b.n	800d568 <_printf_i+0x1f4>
 800d420:	6820      	ldr	r0, [r4, #0]
 800d422:	6829      	ldr	r1, [r5, #0]
 800d424:	0606      	lsls	r6, r0, #24
 800d426:	f101 0304 	add.w	r3, r1, #4
 800d42a:	d50a      	bpl.n	800d442 <_printf_i+0xce>
 800d42c:	680e      	ldr	r6, [r1, #0]
 800d42e:	602b      	str	r3, [r5, #0]
 800d430:	2e00      	cmp	r6, #0
 800d432:	da03      	bge.n	800d43c <_printf_i+0xc8>
 800d434:	232d      	movs	r3, #45	; 0x2d
 800d436:	4276      	negs	r6, r6
 800d438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d43c:	485e      	ldr	r0, [pc, #376]	; (800d5b8 <_printf_i+0x244>)
 800d43e:	230a      	movs	r3, #10
 800d440:	e019      	b.n	800d476 <_printf_i+0x102>
 800d442:	680e      	ldr	r6, [r1, #0]
 800d444:	602b      	str	r3, [r5, #0]
 800d446:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d44a:	bf18      	it	ne
 800d44c:	b236      	sxthne	r6, r6
 800d44e:	e7ef      	b.n	800d430 <_printf_i+0xbc>
 800d450:	682b      	ldr	r3, [r5, #0]
 800d452:	6820      	ldr	r0, [r4, #0]
 800d454:	1d19      	adds	r1, r3, #4
 800d456:	6029      	str	r1, [r5, #0]
 800d458:	0601      	lsls	r1, r0, #24
 800d45a:	d501      	bpl.n	800d460 <_printf_i+0xec>
 800d45c:	681e      	ldr	r6, [r3, #0]
 800d45e:	e002      	b.n	800d466 <_printf_i+0xf2>
 800d460:	0646      	lsls	r6, r0, #25
 800d462:	d5fb      	bpl.n	800d45c <_printf_i+0xe8>
 800d464:	881e      	ldrh	r6, [r3, #0]
 800d466:	4854      	ldr	r0, [pc, #336]	; (800d5b8 <_printf_i+0x244>)
 800d468:	2f6f      	cmp	r7, #111	; 0x6f
 800d46a:	bf0c      	ite	eq
 800d46c:	2308      	moveq	r3, #8
 800d46e:	230a      	movne	r3, #10
 800d470:	2100      	movs	r1, #0
 800d472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d476:	6865      	ldr	r5, [r4, #4]
 800d478:	60a5      	str	r5, [r4, #8]
 800d47a:	2d00      	cmp	r5, #0
 800d47c:	bfa2      	ittt	ge
 800d47e:	6821      	ldrge	r1, [r4, #0]
 800d480:	f021 0104 	bicge.w	r1, r1, #4
 800d484:	6021      	strge	r1, [r4, #0]
 800d486:	b90e      	cbnz	r6, 800d48c <_printf_i+0x118>
 800d488:	2d00      	cmp	r5, #0
 800d48a:	d04d      	beq.n	800d528 <_printf_i+0x1b4>
 800d48c:	4615      	mov	r5, r2
 800d48e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d492:	fb03 6711 	mls	r7, r3, r1, r6
 800d496:	5dc7      	ldrb	r7, [r0, r7]
 800d498:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d49c:	4637      	mov	r7, r6
 800d49e:	42bb      	cmp	r3, r7
 800d4a0:	460e      	mov	r6, r1
 800d4a2:	d9f4      	bls.n	800d48e <_printf_i+0x11a>
 800d4a4:	2b08      	cmp	r3, #8
 800d4a6:	d10b      	bne.n	800d4c0 <_printf_i+0x14c>
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	07de      	lsls	r6, r3, #31
 800d4ac:	d508      	bpl.n	800d4c0 <_printf_i+0x14c>
 800d4ae:	6923      	ldr	r3, [r4, #16]
 800d4b0:	6861      	ldr	r1, [r4, #4]
 800d4b2:	4299      	cmp	r1, r3
 800d4b4:	bfde      	ittt	le
 800d4b6:	2330      	movle	r3, #48	; 0x30
 800d4b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d4bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d4c0:	1b52      	subs	r2, r2, r5
 800d4c2:	6122      	str	r2, [r4, #16]
 800d4c4:	f8cd a000 	str.w	sl, [sp]
 800d4c8:	464b      	mov	r3, r9
 800d4ca:	aa03      	add	r2, sp, #12
 800d4cc:	4621      	mov	r1, r4
 800d4ce:	4640      	mov	r0, r8
 800d4d0:	f7ff fee2 	bl	800d298 <_printf_common>
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	d14c      	bne.n	800d572 <_printf_i+0x1fe>
 800d4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4dc:	b004      	add	sp, #16
 800d4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e2:	4835      	ldr	r0, [pc, #212]	; (800d5b8 <_printf_i+0x244>)
 800d4e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d4e8:	6829      	ldr	r1, [r5, #0]
 800d4ea:	6823      	ldr	r3, [r4, #0]
 800d4ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800d4f0:	6029      	str	r1, [r5, #0]
 800d4f2:	061d      	lsls	r5, r3, #24
 800d4f4:	d514      	bpl.n	800d520 <_printf_i+0x1ac>
 800d4f6:	07df      	lsls	r7, r3, #31
 800d4f8:	bf44      	itt	mi
 800d4fa:	f043 0320 	orrmi.w	r3, r3, #32
 800d4fe:	6023      	strmi	r3, [r4, #0]
 800d500:	b91e      	cbnz	r6, 800d50a <_printf_i+0x196>
 800d502:	6823      	ldr	r3, [r4, #0]
 800d504:	f023 0320 	bic.w	r3, r3, #32
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	2310      	movs	r3, #16
 800d50c:	e7b0      	b.n	800d470 <_printf_i+0xfc>
 800d50e:	6823      	ldr	r3, [r4, #0]
 800d510:	f043 0320 	orr.w	r3, r3, #32
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	2378      	movs	r3, #120	; 0x78
 800d518:	4828      	ldr	r0, [pc, #160]	; (800d5bc <_printf_i+0x248>)
 800d51a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d51e:	e7e3      	b.n	800d4e8 <_printf_i+0x174>
 800d520:	0659      	lsls	r1, r3, #25
 800d522:	bf48      	it	mi
 800d524:	b2b6      	uxthmi	r6, r6
 800d526:	e7e6      	b.n	800d4f6 <_printf_i+0x182>
 800d528:	4615      	mov	r5, r2
 800d52a:	e7bb      	b.n	800d4a4 <_printf_i+0x130>
 800d52c:	682b      	ldr	r3, [r5, #0]
 800d52e:	6826      	ldr	r6, [r4, #0]
 800d530:	6961      	ldr	r1, [r4, #20]
 800d532:	1d18      	adds	r0, r3, #4
 800d534:	6028      	str	r0, [r5, #0]
 800d536:	0635      	lsls	r5, r6, #24
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	d501      	bpl.n	800d540 <_printf_i+0x1cc>
 800d53c:	6019      	str	r1, [r3, #0]
 800d53e:	e002      	b.n	800d546 <_printf_i+0x1d2>
 800d540:	0670      	lsls	r0, r6, #25
 800d542:	d5fb      	bpl.n	800d53c <_printf_i+0x1c8>
 800d544:	8019      	strh	r1, [r3, #0]
 800d546:	2300      	movs	r3, #0
 800d548:	6123      	str	r3, [r4, #16]
 800d54a:	4615      	mov	r5, r2
 800d54c:	e7ba      	b.n	800d4c4 <_printf_i+0x150>
 800d54e:	682b      	ldr	r3, [r5, #0]
 800d550:	1d1a      	adds	r2, r3, #4
 800d552:	602a      	str	r2, [r5, #0]
 800d554:	681d      	ldr	r5, [r3, #0]
 800d556:	6862      	ldr	r2, [r4, #4]
 800d558:	2100      	movs	r1, #0
 800d55a:	4628      	mov	r0, r5
 800d55c:	f7f2 fe48 	bl	80001f0 <memchr>
 800d560:	b108      	cbz	r0, 800d566 <_printf_i+0x1f2>
 800d562:	1b40      	subs	r0, r0, r5
 800d564:	6060      	str	r0, [r4, #4]
 800d566:	6863      	ldr	r3, [r4, #4]
 800d568:	6123      	str	r3, [r4, #16]
 800d56a:	2300      	movs	r3, #0
 800d56c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d570:	e7a8      	b.n	800d4c4 <_printf_i+0x150>
 800d572:	6923      	ldr	r3, [r4, #16]
 800d574:	462a      	mov	r2, r5
 800d576:	4649      	mov	r1, r9
 800d578:	4640      	mov	r0, r8
 800d57a:	47d0      	blx	sl
 800d57c:	3001      	adds	r0, #1
 800d57e:	d0ab      	beq.n	800d4d8 <_printf_i+0x164>
 800d580:	6823      	ldr	r3, [r4, #0]
 800d582:	079b      	lsls	r3, r3, #30
 800d584:	d413      	bmi.n	800d5ae <_printf_i+0x23a>
 800d586:	68e0      	ldr	r0, [r4, #12]
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	4298      	cmp	r0, r3
 800d58c:	bfb8      	it	lt
 800d58e:	4618      	movlt	r0, r3
 800d590:	e7a4      	b.n	800d4dc <_printf_i+0x168>
 800d592:	2301      	movs	r3, #1
 800d594:	4632      	mov	r2, r6
 800d596:	4649      	mov	r1, r9
 800d598:	4640      	mov	r0, r8
 800d59a:	47d0      	blx	sl
 800d59c:	3001      	adds	r0, #1
 800d59e:	d09b      	beq.n	800d4d8 <_printf_i+0x164>
 800d5a0:	3501      	adds	r5, #1
 800d5a2:	68e3      	ldr	r3, [r4, #12]
 800d5a4:	9903      	ldr	r1, [sp, #12]
 800d5a6:	1a5b      	subs	r3, r3, r1
 800d5a8:	42ab      	cmp	r3, r5
 800d5aa:	dcf2      	bgt.n	800d592 <_printf_i+0x21e>
 800d5ac:	e7eb      	b.n	800d586 <_printf_i+0x212>
 800d5ae:	2500      	movs	r5, #0
 800d5b0:	f104 0619 	add.w	r6, r4, #25
 800d5b4:	e7f5      	b.n	800d5a2 <_printf_i+0x22e>
 800d5b6:	bf00      	nop
 800d5b8:	080102a6 	.word	0x080102a6
 800d5bc:	080102b7 	.word	0x080102b7

0800d5c0 <siprintf>:
 800d5c0:	b40e      	push	{r1, r2, r3}
 800d5c2:	b500      	push	{lr}
 800d5c4:	b09c      	sub	sp, #112	; 0x70
 800d5c6:	ab1d      	add	r3, sp, #116	; 0x74
 800d5c8:	9002      	str	r0, [sp, #8]
 800d5ca:	9006      	str	r0, [sp, #24]
 800d5cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5d0:	4809      	ldr	r0, [pc, #36]	; (800d5f8 <siprintf+0x38>)
 800d5d2:	9107      	str	r1, [sp, #28]
 800d5d4:	9104      	str	r1, [sp, #16]
 800d5d6:	4909      	ldr	r1, [pc, #36]	; (800d5fc <siprintf+0x3c>)
 800d5d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5dc:	9105      	str	r1, [sp, #20]
 800d5de:	6800      	ldr	r0, [r0, #0]
 800d5e0:	9301      	str	r3, [sp, #4]
 800d5e2:	a902      	add	r1, sp, #8
 800d5e4:	f001 fb76 	bl	800ecd4 <_svfiprintf_r>
 800d5e8:	9b02      	ldr	r3, [sp, #8]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	701a      	strb	r2, [r3, #0]
 800d5ee:	b01c      	add	sp, #112	; 0x70
 800d5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5f4:	b003      	add	sp, #12
 800d5f6:	4770      	bx	lr
 800d5f8:	2000010c 	.word	0x2000010c
 800d5fc:	ffff0208 	.word	0xffff0208

0800d600 <quorem>:
 800d600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d604:	6903      	ldr	r3, [r0, #16]
 800d606:	690c      	ldr	r4, [r1, #16]
 800d608:	42a3      	cmp	r3, r4
 800d60a:	4607      	mov	r7, r0
 800d60c:	f2c0 8081 	blt.w	800d712 <quorem+0x112>
 800d610:	3c01      	subs	r4, #1
 800d612:	f101 0814 	add.w	r8, r1, #20
 800d616:	f100 0514 	add.w	r5, r0, #20
 800d61a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d61e:	9301      	str	r3, [sp, #4]
 800d620:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d628:	3301      	adds	r3, #1
 800d62a:	429a      	cmp	r2, r3
 800d62c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d630:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d634:	fbb2 f6f3 	udiv	r6, r2, r3
 800d638:	d331      	bcc.n	800d69e <quorem+0x9e>
 800d63a:	f04f 0e00 	mov.w	lr, #0
 800d63e:	4640      	mov	r0, r8
 800d640:	46ac      	mov	ip, r5
 800d642:	46f2      	mov	sl, lr
 800d644:	f850 2b04 	ldr.w	r2, [r0], #4
 800d648:	b293      	uxth	r3, r2
 800d64a:	fb06 e303 	mla	r3, r6, r3, lr
 800d64e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d652:	b29b      	uxth	r3, r3
 800d654:	ebaa 0303 	sub.w	r3, sl, r3
 800d658:	f8dc a000 	ldr.w	sl, [ip]
 800d65c:	0c12      	lsrs	r2, r2, #16
 800d65e:	fa13 f38a 	uxtah	r3, r3, sl
 800d662:	fb06 e202 	mla	r2, r6, r2, lr
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	9b00      	ldr	r3, [sp, #0]
 800d66a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d66e:	b292      	uxth	r2, r2
 800d670:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d674:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d678:	f8bd 3000 	ldrh.w	r3, [sp]
 800d67c:	4581      	cmp	r9, r0
 800d67e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d682:	f84c 3b04 	str.w	r3, [ip], #4
 800d686:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d68a:	d2db      	bcs.n	800d644 <quorem+0x44>
 800d68c:	f855 300b 	ldr.w	r3, [r5, fp]
 800d690:	b92b      	cbnz	r3, 800d69e <quorem+0x9e>
 800d692:	9b01      	ldr	r3, [sp, #4]
 800d694:	3b04      	subs	r3, #4
 800d696:	429d      	cmp	r5, r3
 800d698:	461a      	mov	r2, r3
 800d69a:	d32e      	bcc.n	800d6fa <quorem+0xfa>
 800d69c:	613c      	str	r4, [r7, #16]
 800d69e:	4638      	mov	r0, r7
 800d6a0:	f001 f8c4 	bl	800e82c <__mcmp>
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	db24      	blt.n	800d6f2 <quorem+0xf2>
 800d6a8:	3601      	adds	r6, #1
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	f04f 0c00 	mov.w	ip, #0
 800d6b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6b4:	f8d0 e000 	ldr.w	lr, [r0]
 800d6b8:	b293      	uxth	r3, r2
 800d6ba:	ebac 0303 	sub.w	r3, ip, r3
 800d6be:	0c12      	lsrs	r2, r2, #16
 800d6c0:	fa13 f38e 	uxtah	r3, r3, lr
 800d6c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d6c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6d2:	45c1      	cmp	r9, r8
 800d6d4:	f840 3b04 	str.w	r3, [r0], #4
 800d6d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d6dc:	d2e8      	bcs.n	800d6b0 <quorem+0xb0>
 800d6de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6e6:	b922      	cbnz	r2, 800d6f2 <quorem+0xf2>
 800d6e8:	3b04      	subs	r3, #4
 800d6ea:	429d      	cmp	r5, r3
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	d30a      	bcc.n	800d706 <quorem+0x106>
 800d6f0:	613c      	str	r4, [r7, #16]
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	b003      	add	sp, #12
 800d6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6fa:	6812      	ldr	r2, [r2, #0]
 800d6fc:	3b04      	subs	r3, #4
 800d6fe:	2a00      	cmp	r2, #0
 800d700:	d1cc      	bne.n	800d69c <quorem+0x9c>
 800d702:	3c01      	subs	r4, #1
 800d704:	e7c7      	b.n	800d696 <quorem+0x96>
 800d706:	6812      	ldr	r2, [r2, #0]
 800d708:	3b04      	subs	r3, #4
 800d70a:	2a00      	cmp	r2, #0
 800d70c:	d1f0      	bne.n	800d6f0 <quorem+0xf0>
 800d70e:	3c01      	subs	r4, #1
 800d710:	e7eb      	b.n	800d6ea <quorem+0xea>
 800d712:	2000      	movs	r0, #0
 800d714:	e7ee      	b.n	800d6f4 <quorem+0xf4>
	...

0800d718 <_dtoa_r>:
 800d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71c:	ed2d 8b04 	vpush	{d8-d9}
 800d720:	ec57 6b10 	vmov	r6, r7, d0
 800d724:	b093      	sub	sp, #76	; 0x4c
 800d726:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d728:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d72c:	9106      	str	r1, [sp, #24]
 800d72e:	ee10 aa10 	vmov	sl, s0
 800d732:	4604      	mov	r4, r0
 800d734:	9209      	str	r2, [sp, #36]	; 0x24
 800d736:	930c      	str	r3, [sp, #48]	; 0x30
 800d738:	46bb      	mov	fp, r7
 800d73a:	b975      	cbnz	r5, 800d75a <_dtoa_r+0x42>
 800d73c:	2010      	movs	r0, #16
 800d73e:	f000 fddd 	bl	800e2fc <malloc>
 800d742:	4602      	mov	r2, r0
 800d744:	6260      	str	r0, [r4, #36]	; 0x24
 800d746:	b920      	cbnz	r0, 800d752 <_dtoa_r+0x3a>
 800d748:	4ba7      	ldr	r3, [pc, #668]	; (800d9e8 <_dtoa_r+0x2d0>)
 800d74a:	21ea      	movs	r1, #234	; 0xea
 800d74c:	48a7      	ldr	r0, [pc, #668]	; (800d9ec <_dtoa_r+0x2d4>)
 800d74e:	f001 fbd1 	bl	800eef4 <__assert_func>
 800d752:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d756:	6005      	str	r5, [r0, #0]
 800d758:	60c5      	str	r5, [r0, #12]
 800d75a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d75c:	6819      	ldr	r1, [r3, #0]
 800d75e:	b151      	cbz	r1, 800d776 <_dtoa_r+0x5e>
 800d760:	685a      	ldr	r2, [r3, #4]
 800d762:	604a      	str	r2, [r1, #4]
 800d764:	2301      	movs	r3, #1
 800d766:	4093      	lsls	r3, r2
 800d768:	608b      	str	r3, [r1, #8]
 800d76a:	4620      	mov	r0, r4
 800d76c:	f000 fe1c 	bl	800e3a8 <_Bfree>
 800d770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d772:	2200      	movs	r2, #0
 800d774:	601a      	str	r2, [r3, #0]
 800d776:	1e3b      	subs	r3, r7, #0
 800d778:	bfaa      	itet	ge
 800d77a:	2300      	movge	r3, #0
 800d77c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d780:	f8c8 3000 	strge.w	r3, [r8]
 800d784:	4b9a      	ldr	r3, [pc, #616]	; (800d9f0 <_dtoa_r+0x2d8>)
 800d786:	bfbc      	itt	lt
 800d788:	2201      	movlt	r2, #1
 800d78a:	f8c8 2000 	strlt.w	r2, [r8]
 800d78e:	ea33 030b 	bics.w	r3, r3, fp
 800d792:	d11b      	bne.n	800d7cc <_dtoa_r+0xb4>
 800d794:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d796:	f242 730f 	movw	r3, #9999	; 0x270f
 800d79a:	6013      	str	r3, [r2, #0]
 800d79c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7a0:	4333      	orrs	r3, r6
 800d7a2:	f000 8592 	beq.w	800e2ca <_dtoa_r+0xbb2>
 800d7a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7a8:	b963      	cbnz	r3, 800d7c4 <_dtoa_r+0xac>
 800d7aa:	4b92      	ldr	r3, [pc, #584]	; (800d9f4 <_dtoa_r+0x2dc>)
 800d7ac:	e022      	b.n	800d7f4 <_dtoa_r+0xdc>
 800d7ae:	4b92      	ldr	r3, [pc, #584]	; (800d9f8 <_dtoa_r+0x2e0>)
 800d7b0:	9301      	str	r3, [sp, #4]
 800d7b2:	3308      	adds	r3, #8
 800d7b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d7b6:	6013      	str	r3, [r2, #0]
 800d7b8:	9801      	ldr	r0, [sp, #4]
 800d7ba:	b013      	add	sp, #76	; 0x4c
 800d7bc:	ecbd 8b04 	vpop	{d8-d9}
 800d7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c4:	4b8b      	ldr	r3, [pc, #556]	; (800d9f4 <_dtoa_r+0x2dc>)
 800d7c6:	9301      	str	r3, [sp, #4]
 800d7c8:	3303      	adds	r3, #3
 800d7ca:	e7f3      	b.n	800d7b4 <_dtoa_r+0x9c>
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	4650      	mov	r0, sl
 800d7d2:	4659      	mov	r1, fp
 800d7d4:	f7f3 f980 	bl	8000ad8 <__aeabi_dcmpeq>
 800d7d8:	ec4b ab19 	vmov	d9, sl, fp
 800d7dc:	4680      	mov	r8, r0
 800d7de:	b158      	cbz	r0, 800d7f8 <_dtoa_r+0xe0>
 800d7e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	6013      	str	r3, [r2, #0]
 800d7e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f000 856b 	beq.w	800e2c4 <_dtoa_r+0xbac>
 800d7ee:	4883      	ldr	r0, [pc, #524]	; (800d9fc <_dtoa_r+0x2e4>)
 800d7f0:	6018      	str	r0, [r3, #0]
 800d7f2:	1e43      	subs	r3, r0, #1
 800d7f4:	9301      	str	r3, [sp, #4]
 800d7f6:	e7df      	b.n	800d7b8 <_dtoa_r+0xa0>
 800d7f8:	ec4b ab10 	vmov	d0, sl, fp
 800d7fc:	aa10      	add	r2, sp, #64	; 0x40
 800d7fe:	a911      	add	r1, sp, #68	; 0x44
 800d800:	4620      	mov	r0, r4
 800d802:	f001 f8b9 	bl	800e978 <__d2b>
 800d806:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d80a:	ee08 0a10 	vmov	s16, r0
 800d80e:	2d00      	cmp	r5, #0
 800d810:	f000 8084 	beq.w	800d91c <_dtoa_r+0x204>
 800d814:	ee19 3a90 	vmov	r3, s19
 800d818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d81c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d820:	4656      	mov	r6, sl
 800d822:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d82a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d82e:	4b74      	ldr	r3, [pc, #464]	; (800da00 <_dtoa_r+0x2e8>)
 800d830:	2200      	movs	r2, #0
 800d832:	4630      	mov	r0, r6
 800d834:	4639      	mov	r1, r7
 800d836:	f7f2 fd2f 	bl	8000298 <__aeabi_dsub>
 800d83a:	a365      	add	r3, pc, #404	; (adr r3, 800d9d0 <_dtoa_r+0x2b8>)
 800d83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d840:	f7f2 fee2 	bl	8000608 <__aeabi_dmul>
 800d844:	a364      	add	r3, pc, #400	; (adr r3, 800d9d8 <_dtoa_r+0x2c0>)
 800d846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84a:	f7f2 fd27 	bl	800029c <__adddf3>
 800d84e:	4606      	mov	r6, r0
 800d850:	4628      	mov	r0, r5
 800d852:	460f      	mov	r7, r1
 800d854:	f7f2 fe6e 	bl	8000534 <__aeabi_i2d>
 800d858:	a361      	add	r3, pc, #388	; (adr r3, 800d9e0 <_dtoa_r+0x2c8>)
 800d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85e:	f7f2 fed3 	bl	8000608 <__aeabi_dmul>
 800d862:	4602      	mov	r2, r0
 800d864:	460b      	mov	r3, r1
 800d866:	4630      	mov	r0, r6
 800d868:	4639      	mov	r1, r7
 800d86a:	f7f2 fd17 	bl	800029c <__adddf3>
 800d86e:	4606      	mov	r6, r0
 800d870:	460f      	mov	r7, r1
 800d872:	f7f3 f979 	bl	8000b68 <__aeabi_d2iz>
 800d876:	2200      	movs	r2, #0
 800d878:	9000      	str	r0, [sp, #0]
 800d87a:	2300      	movs	r3, #0
 800d87c:	4630      	mov	r0, r6
 800d87e:	4639      	mov	r1, r7
 800d880:	f7f3 f934 	bl	8000aec <__aeabi_dcmplt>
 800d884:	b150      	cbz	r0, 800d89c <_dtoa_r+0x184>
 800d886:	9800      	ldr	r0, [sp, #0]
 800d888:	f7f2 fe54 	bl	8000534 <__aeabi_i2d>
 800d88c:	4632      	mov	r2, r6
 800d88e:	463b      	mov	r3, r7
 800d890:	f7f3 f922 	bl	8000ad8 <__aeabi_dcmpeq>
 800d894:	b910      	cbnz	r0, 800d89c <_dtoa_r+0x184>
 800d896:	9b00      	ldr	r3, [sp, #0]
 800d898:	3b01      	subs	r3, #1
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	9b00      	ldr	r3, [sp, #0]
 800d89e:	2b16      	cmp	r3, #22
 800d8a0:	d85a      	bhi.n	800d958 <_dtoa_r+0x240>
 800d8a2:	9a00      	ldr	r2, [sp, #0]
 800d8a4:	4b57      	ldr	r3, [pc, #348]	; (800da04 <_dtoa_r+0x2ec>)
 800d8a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ae:	ec51 0b19 	vmov	r0, r1, d9
 800d8b2:	f7f3 f91b 	bl	8000aec <__aeabi_dcmplt>
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	d050      	beq.n	800d95c <_dtoa_r+0x244>
 800d8ba:	9b00      	ldr	r3, [sp, #0]
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8c6:	1b5d      	subs	r5, r3, r5
 800d8c8:	1e6b      	subs	r3, r5, #1
 800d8ca:	9305      	str	r3, [sp, #20]
 800d8cc:	bf45      	ittet	mi
 800d8ce:	f1c5 0301 	rsbmi	r3, r5, #1
 800d8d2:	9304      	strmi	r3, [sp, #16]
 800d8d4:	2300      	movpl	r3, #0
 800d8d6:	2300      	movmi	r3, #0
 800d8d8:	bf4c      	ite	mi
 800d8da:	9305      	strmi	r3, [sp, #20]
 800d8dc:	9304      	strpl	r3, [sp, #16]
 800d8de:	9b00      	ldr	r3, [sp, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	db3d      	blt.n	800d960 <_dtoa_r+0x248>
 800d8e4:	9b05      	ldr	r3, [sp, #20]
 800d8e6:	9a00      	ldr	r2, [sp, #0]
 800d8e8:	920a      	str	r2, [sp, #40]	; 0x28
 800d8ea:	4413      	add	r3, r2
 800d8ec:	9305      	str	r3, [sp, #20]
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	9307      	str	r3, [sp, #28]
 800d8f2:	9b06      	ldr	r3, [sp, #24]
 800d8f4:	2b09      	cmp	r3, #9
 800d8f6:	f200 8089 	bhi.w	800da0c <_dtoa_r+0x2f4>
 800d8fa:	2b05      	cmp	r3, #5
 800d8fc:	bfc4      	itt	gt
 800d8fe:	3b04      	subgt	r3, #4
 800d900:	9306      	strgt	r3, [sp, #24]
 800d902:	9b06      	ldr	r3, [sp, #24]
 800d904:	f1a3 0302 	sub.w	r3, r3, #2
 800d908:	bfcc      	ite	gt
 800d90a:	2500      	movgt	r5, #0
 800d90c:	2501      	movle	r5, #1
 800d90e:	2b03      	cmp	r3, #3
 800d910:	f200 8087 	bhi.w	800da22 <_dtoa_r+0x30a>
 800d914:	e8df f003 	tbb	[pc, r3]
 800d918:	59383a2d 	.word	0x59383a2d
 800d91c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d920:	441d      	add	r5, r3
 800d922:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d926:	2b20      	cmp	r3, #32
 800d928:	bfc1      	itttt	gt
 800d92a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d92e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d932:	fa0b f303 	lslgt.w	r3, fp, r3
 800d936:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d93a:	bfda      	itte	le
 800d93c:	f1c3 0320 	rsble	r3, r3, #32
 800d940:	fa06 f003 	lslle.w	r0, r6, r3
 800d944:	4318      	orrgt	r0, r3
 800d946:	f7f2 fde5 	bl	8000514 <__aeabi_ui2d>
 800d94a:	2301      	movs	r3, #1
 800d94c:	4606      	mov	r6, r0
 800d94e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d952:	3d01      	subs	r5, #1
 800d954:	930e      	str	r3, [sp, #56]	; 0x38
 800d956:	e76a      	b.n	800d82e <_dtoa_r+0x116>
 800d958:	2301      	movs	r3, #1
 800d95a:	e7b2      	b.n	800d8c2 <_dtoa_r+0x1aa>
 800d95c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d95e:	e7b1      	b.n	800d8c4 <_dtoa_r+0x1ac>
 800d960:	9b04      	ldr	r3, [sp, #16]
 800d962:	9a00      	ldr	r2, [sp, #0]
 800d964:	1a9b      	subs	r3, r3, r2
 800d966:	9304      	str	r3, [sp, #16]
 800d968:	4253      	negs	r3, r2
 800d96a:	9307      	str	r3, [sp, #28]
 800d96c:	2300      	movs	r3, #0
 800d96e:	930a      	str	r3, [sp, #40]	; 0x28
 800d970:	e7bf      	b.n	800d8f2 <_dtoa_r+0x1da>
 800d972:	2300      	movs	r3, #0
 800d974:	9308      	str	r3, [sp, #32]
 800d976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d978:	2b00      	cmp	r3, #0
 800d97a:	dc55      	bgt.n	800da28 <_dtoa_r+0x310>
 800d97c:	2301      	movs	r3, #1
 800d97e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d982:	461a      	mov	r2, r3
 800d984:	9209      	str	r2, [sp, #36]	; 0x24
 800d986:	e00c      	b.n	800d9a2 <_dtoa_r+0x28a>
 800d988:	2301      	movs	r3, #1
 800d98a:	e7f3      	b.n	800d974 <_dtoa_r+0x25c>
 800d98c:	2300      	movs	r3, #0
 800d98e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d990:	9308      	str	r3, [sp, #32]
 800d992:	9b00      	ldr	r3, [sp, #0]
 800d994:	4413      	add	r3, r2
 800d996:	9302      	str	r3, [sp, #8]
 800d998:	3301      	adds	r3, #1
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	9303      	str	r3, [sp, #12]
 800d99e:	bfb8      	it	lt
 800d9a0:	2301      	movlt	r3, #1
 800d9a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	6042      	str	r2, [r0, #4]
 800d9a8:	2204      	movs	r2, #4
 800d9aa:	f102 0614 	add.w	r6, r2, #20
 800d9ae:	429e      	cmp	r6, r3
 800d9b0:	6841      	ldr	r1, [r0, #4]
 800d9b2:	d93d      	bls.n	800da30 <_dtoa_r+0x318>
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f000 fcb7 	bl	800e328 <_Balloc>
 800d9ba:	9001      	str	r0, [sp, #4]
 800d9bc:	2800      	cmp	r0, #0
 800d9be:	d13b      	bne.n	800da38 <_dtoa_r+0x320>
 800d9c0:	4b11      	ldr	r3, [pc, #68]	; (800da08 <_dtoa_r+0x2f0>)
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d9c8:	e6c0      	b.n	800d74c <_dtoa_r+0x34>
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e7df      	b.n	800d98e <_dtoa_r+0x276>
 800d9ce:	bf00      	nop
 800d9d0:	636f4361 	.word	0x636f4361
 800d9d4:	3fd287a7 	.word	0x3fd287a7
 800d9d8:	8b60c8b3 	.word	0x8b60c8b3
 800d9dc:	3fc68a28 	.word	0x3fc68a28
 800d9e0:	509f79fb 	.word	0x509f79fb
 800d9e4:	3fd34413 	.word	0x3fd34413
 800d9e8:	080102d5 	.word	0x080102d5
 800d9ec:	080102ec 	.word	0x080102ec
 800d9f0:	7ff00000 	.word	0x7ff00000
 800d9f4:	080102d1 	.word	0x080102d1
 800d9f8:	080102c8 	.word	0x080102c8
 800d9fc:	080102a5 	.word	0x080102a5
 800da00:	3ff80000 	.word	0x3ff80000
 800da04:	080103e0 	.word	0x080103e0
 800da08:	08010347 	.word	0x08010347
 800da0c:	2501      	movs	r5, #1
 800da0e:	2300      	movs	r3, #0
 800da10:	9306      	str	r3, [sp, #24]
 800da12:	9508      	str	r5, [sp, #32]
 800da14:	f04f 33ff 	mov.w	r3, #4294967295
 800da18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da1c:	2200      	movs	r2, #0
 800da1e:	2312      	movs	r3, #18
 800da20:	e7b0      	b.n	800d984 <_dtoa_r+0x26c>
 800da22:	2301      	movs	r3, #1
 800da24:	9308      	str	r3, [sp, #32]
 800da26:	e7f5      	b.n	800da14 <_dtoa_r+0x2fc>
 800da28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da2e:	e7b8      	b.n	800d9a2 <_dtoa_r+0x28a>
 800da30:	3101      	adds	r1, #1
 800da32:	6041      	str	r1, [r0, #4]
 800da34:	0052      	lsls	r2, r2, #1
 800da36:	e7b8      	b.n	800d9aa <_dtoa_r+0x292>
 800da38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da3a:	9a01      	ldr	r2, [sp, #4]
 800da3c:	601a      	str	r2, [r3, #0]
 800da3e:	9b03      	ldr	r3, [sp, #12]
 800da40:	2b0e      	cmp	r3, #14
 800da42:	f200 809d 	bhi.w	800db80 <_dtoa_r+0x468>
 800da46:	2d00      	cmp	r5, #0
 800da48:	f000 809a 	beq.w	800db80 <_dtoa_r+0x468>
 800da4c:	9b00      	ldr	r3, [sp, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	dd32      	ble.n	800dab8 <_dtoa_r+0x3a0>
 800da52:	4ab7      	ldr	r2, [pc, #732]	; (800dd30 <_dtoa_r+0x618>)
 800da54:	f003 030f 	and.w	r3, r3, #15
 800da58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da60:	9b00      	ldr	r3, [sp, #0]
 800da62:	05d8      	lsls	r0, r3, #23
 800da64:	ea4f 1723 	mov.w	r7, r3, asr #4
 800da68:	d516      	bpl.n	800da98 <_dtoa_r+0x380>
 800da6a:	4bb2      	ldr	r3, [pc, #712]	; (800dd34 <_dtoa_r+0x61c>)
 800da6c:	ec51 0b19 	vmov	r0, r1, d9
 800da70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da74:	f7f2 fef2 	bl	800085c <__aeabi_ddiv>
 800da78:	f007 070f 	and.w	r7, r7, #15
 800da7c:	4682      	mov	sl, r0
 800da7e:	468b      	mov	fp, r1
 800da80:	2503      	movs	r5, #3
 800da82:	4eac      	ldr	r6, [pc, #688]	; (800dd34 <_dtoa_r+0x61c>)
 800da84:	b957      	cbnz	r7, 800da9c <_dtoa_r+0x384>
 800da86:	4642      	mov	r2, r8
 800da88:	464b      	mov	r3, r9
 800da8a:	4650      	mov	r0, sl
 800da8c:	4659      	mov	r1, fp
 800da8e:	f7f2 fee5 	bl	800085c <__aeabi_ddiv>
 800da92:	4682      	mov	sl, r0
 800da94:	468b      	mov	fp, r1
 800da96:	e028      	b.n	800daea <_dtoa_r+0x3d2>
 800da98:	2502      	movs	r5, #2
 800da9a:	e7f2      	b.n	800da82 <_dtoa_r+0x36a>
 800da9c:	07f9      	lsls	r1, r7, #31
 800da9e:	d508      	bpl.n	800dab2 <_dtoa_r+0x39a>
 800daa0:	4640      	mov	r0, r8
 800daa2:	4649      	mov	r1, r9
 800daa4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800daa8:	f7f2 fdae 	bl	8000608 <__aeabi_dmul>
 800daac:	3501      	adds	r5, #1
 800daae:	4680      	mov	r8, r0
 800dab0:	4689      	mov	r9, r1
 800dab2:	107f      	asrs	r7, r7, #1
 800dab4:	3608      	adds	r6, #8
 800dab6:	e7e5      	b.n	800da84 <_dtoa_r+0x36c>
 800dab8:	f000 809b 	beq.w	800dbf2 <_dtoa_r+0x4da>
 800dabc:	9b00      	ldr	r3, [sp, #0]
 800dabe:	4f9d      	ldr	r7, [pc, #628]	; (800dd34 <_dtoa_r+0x61c>)
 800dac0:	425e      	negs	r6, r3
 800dac2:	4b9b      	ldr	r3, [pc, #620]	; (800dd30 <_dtoa_r+0x618>)
 800dac4:	f006 020f 	and.w	r2, r6, #15
 800dac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad0:	ec51 0b19 	vmov	r0, r1, d9
 800dad4:	f7f2 fd98 	bl	8000608 <__aeabi_dmul>
 800dad8:	1136      	asrs	r6, r6, #4
 800dada:	4682      	mov	sl, r0
 800dadc:	468b      	mov	fp, r1
 800dade:	2300      	movs	r3, #0
 800dae0:	2502      	movs	r5, #2
 800dae2:	2e00      	cmp	r6, #0
 800dae4:	d17a      	bne.n	800dbdc <_dtoa_r+0x4c4>
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1d3      	bne.n	800da92 <_dtoa_r+0x37a>
 800daea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daec:	2b00      	cmp	r3, #0
 800daee:	f000 8082 	beq.w	800dbf6 <_dtoa_r+0x4de>
 800daf2:	4b91      	ldr	r3, [pc, #580]	; (800dd38 <_dtoa_r+0x620>)
 800daf4:	2200      	movs	r2, #0
 800daf6:	4650      	mov	r0, sl
 800daf8:	4659      	mov	r1, fp
 800dafa:	f7f2 fff7 	bl	8000aec <__aeabi_dcmplt>
 800dafe:	2800      	cmp	r0, #0
 800db00:	d079      	beq.n	800dbf6 <_dtoa_r+0x4de>
 800db02:	9b03      	ldr	r3, [sp, #12]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d076      	beq.n	800dbf6 <_dtoa_r+0x4de>
 800db08:	9b02      	ldr	r3, [sp, #8]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	dd36      	ble.n	800db7c <_dtoa_r+0x464>
 800db0e:	9b00      	ldr	r3, [sp, #0]
 800db10:	4650      	mov	r0, sl
 800db12:	4659      	mov	r1, fp
 800db14:	1e5f      	subs	r7, r3, #1
 800db16:	2200      	movs	r2, #0
 800db18:	4b88      	ldr	r3, [pc, #544]	; (800dd3c <_dtoa_r+0x624>)
 800db1a:	f7f2 fd75 	bl	8000608 <__aeabi_dmul>
 800db1e:	9e02      	ldr	r6, [sp, #8]
 800db20:	4682      	mov	sl, r0
 800db22:	468b      	mov	fp, r1
 800db24:	3501      	adds	r5, #1
 800db26:	4628      	mov	r0, r5
 800db28:	f7f2 fd04 	bl	8000534 <__aeabi_i2d>
 800db2c:	4652      	mov	r2, sl
 800db2e:	465b      	mov	r3, fp
 800db30:	f7f2 fd6a 	bl	8000608 <__aeabi_dmul>
 800db34:	4b82      	ldr	r3, [pc, #520]	; (800dd40 <_dtoa_r+0x628>)
 800db36:	2200      	movs	r2, #0
 800db38:	f7f2 fbb0 	bl	800029c <__adddf3>
 800db3c:	46d0      	mov	r8, sl
 800db3e:	46d9      	mov	r9, fp
 800db40:	4682      	mov	sl, r0
 800db42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800db46:	2e00      	cmp	r6, #0
 800db48:	d158      	bne.n	800dbfc <_dtoa_r+0x4e4>
 800db4a:	4b7e      	ldr	r3, [pc, #504]	; (800dd44 <_dtoa_r+0x62c>)
 800db4c:	2200      	movs	r2, #0
 800db4e:	4640      	mov	r0, r8
 800db50:	4649      	mov	r1, r9
 800db52:	f7f2 fba1 	bl	8000298 <__aeabi_dsub>
 800db56:	4652      	mov	r2, sl
 800db58:	465b      	mov	r3, fp
 800db5a:	4680      	mov	r8, r0
 800db5c:	4689      	mov	r9, r1
 800db5e:	f7f2 ffe3 	bl	8000b28 <__aeabi_dcmpgt>
 800db62:	2800      	cmp	r0, #0
 800db64:	f040 8295 	bne.w	800e092 <_dtoa_r+0x97a>
 800db68:	4652      	mov	r2, sl
 800db6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800db6e:	4640      	mov	r0, r8
 800db70:	4649      	mov	r1, r9
 800db72:	f7f2 ffbb 	bl	8000aec <__aeabi_dcmplt>
 800db76:	2800      	cmp	r0, #0
 800db78:	f040 8289 	bne.w	800e08e <_dtoa_r+0x976>
 800db7c:	ec5b ab19 	vmov	sl, fp, d9
 800db80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db82:	2b00      	cmp	r3, #0
 800db84:	f2c0 8148 	blt.w	800de18 <_dtoa_r+0x700>
 800db88:	9a00      	ldr	r2, [sp, #0]
 800db8a:	2a0e      	cmp	r2, #14
 800db8c:	f300 8144 	bgt.w	800de18 <_dtoa_r+0x700>
 800db90:	4b67      	ldr	r3, [pc, #412]	; (800dd30 <_dtoa_r+0x618>)
 800db92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db96:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f280 80d5 	bge.w	800dd4c <_dtoa_r+0x634>
 800dba2:	9b03      	ldr	r3, [sp, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f300 80d1 	bgt.w	800dd4c <_dtoa_r+0x634>
 800dbaa:	f040 826f 	bne.w	800e08c <_dtoa_r+0x974>
 800dbae:	4b65      	ldr	r3, [pc, #404]	; (800dd44 <_dtoa_r+0x62c>)
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	4640      	mov	r0, r8
 800dbb4:	4649      	mov	r1, r9
 800dbb6:	f7f2 fd27 	bl	8000608 <__aeabi_dmul>
 800dbba:	4652      	mov	r2, sl
 800dbbc:	465b      	mov	r3, fp
 800dbbe:	f7f2 ffa9 	bl	8000b14 <__aeabi_dcmpge>
 800dbc2:	9e03      	ldr	r6, [sp, #12]
 800dbc4:	4637      	mov	r7, r6
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	f040 8245 	bne.w	800e056 <_dtoa_r+0x93e>
 800dbcc:	9d01      	ldr	r5, [sp, #4]
 800dbce:	2331      	movs	r3, #49	; 0x31
 800dbd0:	f805 3b01 	strb.w	r3, [r5], #1
 800dbd4:	9b00      	ldr	r3, [sp, #0]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	e240      	b.n	800e05e <_dtoa_r+0x946>
 800dbdc:	07f2      	lsls	r2, r6, #31
 800dbde:	d505      	bpl.n	800dbec <_dtoa_r+0x4d4>
 800dbe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbe4:	f7f2 fd10 	bl	8000608 <__aeabi_dmul>
 800dbe8:	3501      	adds	r5, #1
 800dbea:	2301      	movs	r3, #1
 800dbec:	1076      	asrs	r6, r6, #1
 800dbee:	3708      	adds	r7, #8
 800dbf0:	e777      	b.n	800dae2 <_dtoa_r+0x3ca>
 800dbf2:	2502      	movs	r5, #2
 800dbf4:	e779      	b.n	800daea <_dtoa_r+0x3d2>
 800dbf6:	9f00      	ldr	r7, [sp, #0]
 800dbf8:	9e03      	ldr	r6, [sp, #12]
 800dbfa:	e794      	b.n	800db26 <_dtoa_r+0x40e>
 800dbfc:	9901      	ldr	r1, [sp, #4]
 800dbfe:	4b4c      	ldr	r3, [pc, #304]	; (800dd30 <_dtoa_r+0x618>)
 800dc00:	4431      	add	r1, r6
 800dc02:	910d      	str	r1, [sp, #52]	; 0x34
 800dc04:	9908      	ldr	r1, [sp, #32]
 800dc06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dc0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc0e:	2900      	cmp	r1, #0
 800dc10:	d043      	beq.n	800dc9a <_dtoa_r+0x582>
 800dc12:	494d      	ldr	r1, [pc, #308]	; (800dd48 <_dtoa_r+0x630>)
 800dc14:	2000      	movs	r0, #0
 800dc16:	f7f2 fe21 	bl	800085c <__aeabi_ddiv>
 800dc1a:	4652      	mov	r2, sl
 800dc1c:	465b      	mov	r3, fp
 800dc1e:	f7f2 fb3b 	bl	8000298 <__aeabi_dsub>
 800dc22:	9d01      	ldr	r5, [sp, #4]
 800dc24:	4682      	mov	sl, r0
 800dc26:	468b      	mov	fp, r1
 800dc28:	4649      	mov	r1, r9
 800dc2a:	4640      	mov	r0, r8
 800dc2c:	f7f2 ff9c 	bl	8000b68 <__aeabi_d2iz>
 800dc30:	4606      	mov	r6, r0
 800dc32:	f7f2 fc7f 	bl	8000534 <__aeabi_i2d>
 800dc36:	4602      	mov	r2, r0
 800dc38:	460b      	mov	r3, r1
 800dc3a:	4640      	mov	r0, r8
 800dc3c:	4649      	mov	r1, r9
 800dc3e:	f7f2 fb2b 	bl	8000298 <__aeabi_dsub>
 800dc42:	3630      	adds	r6, #48	; 0x30
 800dc44:	f805 6b01 	strb.w	r6, [r5], #1
 800dc48:	4652      	mov	r2, sl
 800dc4a:	465b      	mov	r3, fp
 800dc4c:	4680      	mov	r8, r0
 800dc4e:	4689      	mov	r9, r1
 800dc50:	f7f2 ff4c 	bl	8000aec <__aeabi_dcmplt>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d163      	bne.n	800dd20 <_dtoa_r+0x608>
 800dc58:	4642      	mov	r2, r8
 800dc5a:	464b      	mov	r3, r9
 800dc5c:	4936      	ldr	r1, [pc, #216]	; (800dd38 <_dtoa_r+0x620>)
 800dc5e:	2000      	movs	r0, #0
 800dc60:	f7f2 fb1a 	bl	8000298 <__aeabi_dsub>
 800dc64:	4652      	mov	r2, sl
 800dc66:	465b      	mov	r3, fp
 800dc68:	f7f2 ff40 	bl	8000aec <__aeabi_dcmplt>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	f040 80b5 	bne.w	800dddc <_dtoa_r+0x6c4>
 800dc72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc74:	429d      	cmp	r5, r3
 800dc76:	d081      	beq.n	800db7c <_dtoa_r+0x464>
 800dc78:	4b30      	ldr	r3, [pc, #192]	; (800dd3c <_dtoa_r+0x624>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	4650      	mov	r0, sl
 800dc7e:	4659      	mov	r1, fp
 800dc80:	f7f2 fcc2 	bl	8000608 <__aeabi_dmul>
 800dc84:	4b2d      	ldr	r3, [pc, #180]	; (800dd3c <_dtoa_r+0x624>)
 800dc86:	4682      	mov	sl, r0
 800dc88:	468b      	mov	fp, r1
 800dc8a:	4640      	mov	r0, r8
 800dc8c:	4649      	mov	r1, r9
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f7f2 fcba 	bl	8000608 <__aeabi_dmul>
 800dc94:	4680      	mov	r8, r0
 800dc96:	4689      	mov	r9, r1
 800dc98:	e7c6      	b.n	800dc28 <_dtoa_r+0x510>
 800dc9a:	4650      	mov	r0, sl
 800dc9c:	4659      	mov	r1, fp
 800dc9e:	f7f2 fcb3 	bl	8000608 <__aeabi_dmul>
 800dca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dca4:	9d01      	ldr	r5, [sp, #4]
 800dca6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dca8:	4682      	mov	sl, r0
 800dcaa:	468b      	mov	fp, r1
 800dcac:	4649      	mov	r1, r9
 800dcae:	4640      	mov	r0, r8
 800dcb0:	f7f2 ff5a 	bl	8000b68 <__aeabi_d2iz>
 800dcb4:	4606      	mov	r6, r0
 800dcb6:	f7f2 fc3d 	bl	8000534 <__aeabi_i2d>
 800dcba:	3630      	adds	r6, #48	; 0x30
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	4640      	mov	r0, r8
 800dcc2:	4649      	mov	r1, r9
 800dcc4:	f7f2 fae8 	bl	8000298 <__aeabi_dsub>
 800dcc8:	f805 6b01 	strb.w	r6, [r5], #1
 800dccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcce:	429d      	cmp	r5, r3
 800dcd0:	4680      	mov	r8, r0
 800dcd2:	4689      	mov	r9, r1
 800dcd4:	f04f 0200 	mov.w	r2, #0
 800dcd8:	d124      	bne.n	800dd24 <_dtoa_r+0x60c>
 800dcda:	4b1b      	ldr	r3, [pc, #108]	; (800dd48 <_dtoa_r+0x630>)
 800dcdc:	4650      	mov	r0, sl
 800dcde:	4659      	mov	r1, fp
 800dce0:	f7f2 fadc 	bl	800029c <__adddf3>
 800dce4:	4602      	mov	r2, r0
 800dce6:	460b      	mov	r3, r1
 800dce8:	4640      	mov	r0, r8
 800dcea:	4649      	mov	r1, r9
 800dcec:	f7f2 ff1c 	bl	8000b28 <__aeabi_dcmpgt>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d173      	bne.n	800dddc <_dtoa_r+0x6c4>
 800dcf4:	4652      	mov	r2, sl
 800dcf6:	465b      	mov	r3, fp
 800dcf8:	4913      	ldr	r1, [pc, #76]	; (800dd48 <_dtoa_r+0x630>)
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	f7f2 facc 	bl	8000298 <__aeabi_dsub>
 800dd00:	4602      	mov	r2, r0
 800dd02:	460b      	mov	r3, r1
 800dd04:	4640      	mov	r0, r8
 800dd06:	4649      	mov	r1, r9
 800dd08:	f7f2 fef0 	bl	8000aec <__aeabi_dcmplt>
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	f43f af35 	beq.w	800db7c <_dtoa_r+0x464>
 800dd12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dd14:	1e6b      	subs	r3, r5, #1
 800dd16:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd1c:	2b30      	cmp	r3, #48	; 0x30
 800dd1e:	d0f8      	beq.n	800dd12 <_dtoa_r+0x5fa>
 800dd20:	9700      	str	r7, [sp, #0]
 800dd22:	e049      	b.n	800ddb8 <_dtoa_r+0x6a0>
 800dd24:	4b05      	ldr	r3, [pc, #20]	; (800dd3c <_dtoa_r+0x624>)
 800dd26:	f7f2 fc6f 	bl	8000608 <__aeabi_dmul>
 800dd2a:	4680      	mov	r8, r0
 800dd2c:	4689      	mov	r9, r1
 800dd2e:	e7bd      	b.n	800dcac <_dtoa_r+0x594>
 800dd30:	080103e0 	.word	0x080103e0
 800dd34:	080103b8 	.word	0x080103b8
 800dd38:	3ff00000 	.word	0x3ff00000
 800dd3c:	40240000 	.word	0x40240000
 800dd40:	401c0000 	.word	0x401c0000
 800dd44:	40140000 	.word	0x40140000
 800dd48:	3fe00000 	.word	0x3fe00000
 800dd4c:	9d01      	ldr	r5, [sp, #4]
 800dd4e:	4656      	mov	r6, sl
 800dd50:	465f      	mov	r7, fp
 800dd52:	4642      	mov	r2, r8
 800dd54:	464b      	mov	r3, r9
 800dd56:	4630      	mov	r0, r6
 800dd58:	4639      	mov	r1, r7
 800dd5a:	f7f2 fd7f 	bl	800085c <__aeabi_ddiv>
 800dd5e:	f7f2 ff03 	bl	8000b68 <__aeabi_d2iz>
 800dd62:	4682      	mov	sl, r0
 800dd64:	f7f2 fbe6 	bl	8000534 <__aeabi_i2d>
 800dd68:	4642      	mov	r2, r8
 800dd6a:	464b      	mov	r3, r9
 800dd6c:	f7f2 fc4c 	bl	8000608 <__aeabi_dmul>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	4630      	mov	r0, r6
 800dd76:	4639      	mov	r1, r7
 800dd78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dd7c:	f7f2 fa8c 	bl	8000298 <__aeabi_dsub>
 800dd80:	f805 6b01 	strb.w	r6, [r5], #1
 800dd84:	9e01      	ldr	r6, [sp, #4]
 800dd86:	9f03      	ldr	r7, [sp, #12]
 800dd88:	1bae      	subs	r6, r5, r6
 800dd8a:	42b7      	cmp	r7, r6
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	d135      	bne.n	800ddfe <_dtoa_r+0x6e6>
 800dd92:	f7f2 fa83 	bl	800029c <__adddf3>
 800dd96:	4642      	mov	r2, r8
 800dd98:	464b      	mov	r3, r9
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	460f      	mov	r7, r1
 800dd9e:	f7f2 fec3 	bl	8000b28 <__aeabi_dcmpgt>
 800dda2:	b9d0      	cbnz	r0, 800ddda <_dtoa_r+0x6c2>
 800dda4:	4642      	mov	r2, r8
 800dda6:	464b      	mov	r3, r9
 800dda8:	4630      	mov	r0, r6
 800ddaa:	4639      	mov	r1, r7
 800ddac:	f7f2 fe94 	bl	8000ad8 <__aeabi_dcmpeq>
 800ddb0:	b110      	cbz	r0, 800ddb8 <_dtoa_r+0x6a0>
 800ddb2:	f01a 0f01 	tst.w	sl, #1
 800ddb6:	d110      	bne.n	800ddda <_dtoa_r+0x6c2>
 800ddb8:	4620      	mov	r0, r4
 800ddba:	ee18 1a10 	vmov	r1, s16
 800ddbe:	f000 faf3 	bl	800e3a8 <_Bfree>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	9800      	ldr	r0, [sp, #0]
 800ddc6:	702b      	strb	r3, [r5, #0]
 800ddc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddca:	3001      	adds	r0, #1
 800ddcc:	6018      	str	r0, [r3, #0]
 800ddce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f43f acf1 	beq.w	800d7b8 <_dtoa_r+0xa0>
 800ddd6:	601d      	str	r5, [r3, #0]
 800ddd8:	e4ee      	b.n	800d7b8 <_dtoa_r+0xa0>
 800ddda:	9f00      	ldr	r7, [sp, #0]
 800dddc:	462b      	mov	r3, r5
 800ddde:	461d      	mov	r5, r3
 800dde0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dde4:	2a39      	cmp	r2, #57	; 0x39
 800dde6:	d106      	bne.n	800ddf6 <_dtoa_r+0x6de>
 800dde8:	9a01      	ldr	r2, [sp, #4]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d1f7      	bne.n	800ddde <_dtoa_r+0x6c6>
 800ddee:	9901      	ldr	r1, [sp, #4]
 800ddf0:	2230      	movs	r2, #48	; 0x30
 800ddf2:	3701      	adds	r7, #1
 800ddf4:	700a      	strb	r2, [r1, #0]
 800ddf6:	781a      	ldrb	r2, [r3, #0]
 800ddf8:	3201      	adds	r2, #1
 800ddfa:	701a      	strb	r2, [r3, #0]
 800ddfc:	e790      	b.n	800dd20 <_dtoa_r+0x608>
 800ddfe:	4ba6      	ldr	r3, [pc, #664]	; (800e098 <_dtoa_r+0x980>)
 800de00:	2200      	movs	r2, #0
 800de02:	f7f2 fc01 	bl	8000608 <__aeabi_dmul>
 800de06:	2200      	movs	r2, #0
 800de08:	2300      	movs	r3, #0
 800de0a:	4606      	mov	r6, r0
 800de0c:	460f      	mov	r7, r1
 800de0e:	f7f2 fe63 	bl	8000ad8 <__aeabi_dcmpeq>
 800de12:	2800      	cmp	r0, #0
 800de14:	d09d      	beq.n	800dd52 <_dtoa_r+0x63a>
 800de16:	e7cf      	b.n	800ddb8 <_dtoa_r+0x6a0>
 800de18:	9a08      	ldr	r2, [sp, #32]
 800de1a:	2a00      	cmp	r2, #0
 800de1c:	f000 80d7 	beq.w	800dfce <_dtoa_r+0x8b6>
 800de20:	9a06      	ldr	r2, [sp, #24]
 800de22:	2a01      	cmp	r2, #1
 800de24:	f300 80ba 	bgt.w	800df9c <_dtoa_r+0x884>
 800de28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de2a:	2a00      	cmp	r2, #0
 800de2c:	f000 80b2 	beq.w	800df94 <_dtoa_r+0x87c>
 800de30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de34:	9e07      	ldr	r6, [sp, #28]
 800de36:	9d04      	ldr	r5, [sp, #16]
 800de38:	9a04      	ldr	r2, [sp, #16]
 800de3a:	441a      	add	r2, r3
 800de3c:	9204      	str	r2, [sp, #16]
 800de3e:	9a05      	ldr	r2, [sp, #20]
 800de40:	2101      	movs	r1, #1
 800de42:	441a      	add	r2, r3
 800de44:	4620      	mov	r0, r4
 800de46:	9205      	str	r2, [sp, #20]
 800de48:	f000 fb66 	bl	800e518 <__i2b>
 800de4c:	4607      	mov	r7, r0
 800de4e:	2d00      	cmp	r5, #0
 800de50:	dd0c      	ble.n	800de6c <_dtoa_r+0x754>
 800de52:	9b05      	ldr	r3, [sp, #20]
 800de54:	2b00      	cmp	r3, #0
 800de56:	dd09      	ble.n	800de6c <_dtoa_r+0x754>
 800de58:	42ab      	cmp	r3, r5
 800de5a:	9a04      	ldr	r2, [sp, #16]
 800de5c:	bfa8      	it	ge
 800de5e:	462b      	movge	r3, r5
 800de60:	1ad2      	subs	r2, r2, r3
 800de62:	9204      	str	r2, [sp, #16]
 800de64:	9a05      	ldr	r2, [sp, #20]
 800de66:	1aed      	subs	r5, r5, r3
 800de68:	1ad3      	subs	r3, r2, r3
 800de6a:	9305      	str	r3, [sp, #20]
 800de6c:	9b07      	ldr	r3, [sp, #28]
 800de6e:	b31b      	cbz	r3, 800deb8 <_dtoa_r+0x7a0>
 800de70:	9b08      	ldr	r3, [sp, #32]
 800de72:	2b00      	cmp	r3, #0
 800de74:	f000 80af 	beq.w	800dfd6 <_dtoa_r+0x8be>
 800de78:	2e00      	cmp	r6, #0
 800de7a:	dd13      	ble.n	800dea4 <_dtoa_r+0x78c>
 800de7c:	4639      	mov	r1, r7
 800de7e:	4632      	mov	r2, r6
 800de80:	4620      	mov	r0, r4
 800de82:	f000 fc09 	bl	800e698 <__pow5mult>
 800de86:	ee18 2a10 	vmov	r2, s16
 800de8a:	4601      	mov	r1, r0
 800de8c:	4607      	mov	r7, r0
 800de8e:	4620      	mov	r0, r4
 800de90:	f000 fb58 	bl	800e544 <__multiply>
 800de94:	ee18 1a10 	vmov	r1, s16
 800de98:	4680      	mov	r8, r0
 800de9a:	4620      	mov	r0, r4
 800de9c:	f000 fa84 	bl	800e3a8 <_Bfree>
 800dea0:	ee08 8a10 	vmov	s16, r8
 800dea4:	9b07      	ldr	r3, [sp, #28]
 800dea6:	1b9a      	subs	r2, r3, r6
 800dea8:	d006      	beq.n	800deb8 <_dtoa_r+0x7a0>
 800deaa:	ee18 1a10 	vmov	r1, s16
 800deae:	4620      	mov	r0, r4
 800deb0:	f000 fbf2 	bl	800e698 <__pow5mult>
 800deb4:	ee08 0a10 	vmov	s16, r0
 800deb8:	2101      	movs	r1, #1
 800deba:	4620      	mov	r0, r4
 800debc:	f000 fb2c 	bl	800e518 <__i2b>
 800dec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	4606      	mov	r6, r0
 800dec6:	f340 8088 	ble.w	800dfda <_dtoa_r+0x8c2>
 800deca:	461a      	mov	r2, r3
 800decc:	4601      	mov	r1, r0
 800dece:	4620      	mov	r0, r4
 800ded0:	f000 fbe2 	bl	800e698 <__pow5mult>
 800ded4:	9b06      	ldr	r3, [sp, #24]
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	4606      	mov	r6, r0
 800deda:	f340 8081 	ble.w	800dfe0 <_dtoa_r+0x8c8>
 800dede:	f04f 0800 	mov.w	r8, #0
 800dee2:	6933      	ldr	r3, [r6, #16]
 800dee4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dee8:	6918      	ldr	r0, [r3, #16]
 800deea:	f000 fac5 	bl	800e478 <__hi0bits>
 800deee:	f1c0 0020 	rsb	r0, r0, #32
 800def2:	9b05      	ldr	r3, [sp, #20]
 800def4:	4418      	add	r0, r3
 800def6:	f010 001f 	ands.w	r0, r0, #31
 800defa:	f000 8092 	beq.w	800e022 <_dtoa_r+0x90a>
 800defe:	f1c0 0320 	rsb	r3, r0, #32
 800df02:	2b04      	cmp	r3, #4
 800df04:	f340 808a 	ble.w	800e01c <_dtoa_r+0x904>
 800df08:	f1c0 001c 	rsb	r0, r0, #28
 800df0c:	9b04      	ldr	r3, [sp, #16]
 800df0e:	4403      	add	r3, r0
 800df10:	9304      	str	r3, [sp, #16]
 800df12:	9b05      	ldr	r3, [sp, #20]
 800df14:	4403      	add	r3, r0
 800df16:	4405      	add	r5, r0
 800df18:	9305      	str	r3, [sp, #20]
 800df1a:	9b04      	ldr	r3, [sp, #16]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	dd07      	ble.n	800df30 <_dtoa_r+0x818>
 800df20:	ee18 1a10 	vmov	r1, s16
 800df24:	461a      	mov	r2, r3
 800df26:	4620      	mov	r0, r4
 800df28:	f000 fc10 	bl	800e74c <__lshift>
 800df2c:	ee08 0a10 	vmov	s16, r0
 800df30:	9b05      	ldr	r3, [sp, #20]
 800df32:	2b00      	cmp	r3, #0
 800df34:	dd05      	ble.n	800df42 <_dtoa_r+0x82a>
 800df36:	4631      	mov	r1, r6
 800df38:	461a      	mov	r2, r3
 800df3a:	4620      	mov	r0, r4
 800df3c:	f000 fc06 	bl	800e74c <__lshift>
 800df40:	4606      	mov	r6, r0
 800df42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df44:	2b00      	cmp	r3, #0
 800df46:	d06e      	beq.n	800e026 <_dtoa_r+0x90e>
 800df48:	ee18 0a10 	vmov	r0, s16
 800df4c:	4631      	mov	r1, r6
 800df4e:	f000 fc6d 	bl	800e82c <__mcmp>
 800df52:	2800      	cmp	r0, #0
 800df54:	da67      	bge.n	800e026 <_dtoa_r+0x90e>
 800df56:	9b00      	ldr	r3, [sp, #0]
 800df58:	3b01      	subs	r3, #1
 800df5a:	ee18 1a10 	vmov	r1, s16
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	220a      	movs	r2, #10
 800df62:	2300      	movs	r3, #0
 800df64:	4620      	mov	r0, r4
 800df66:	f000 fa41 	bl	800e3ec <__multadd>
 800df6a:	9b08      	ldr	r3, [sp, #32]
 800df6c:	ee08 0a10 	vmov	s16, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	f000 81b1 	beq.w	800e2d8 <_dtoa_r+0xbc0>
 800df76:	2300      	movs	r3, #0
 800df78:	4639      	mov	r1, r7
 800df7a:	220a      	movs	r2, #10
 800df7c:	4620      	mov	r0, r4
 800df7e:	f000 fa35 	bl	800e3ec <__multadd>
 800df82:	9b02      	ldr	r3, [sp, #8]
 800df84:	2b00      	cmp	r3, #0
 800df86:	4607      	mov	r7, r0
 800df88:	f300 808e 	bgt.w	800e0a8 <_dtoa_r+0x990>
 800df8c:	9b06      	ldr	r3, [sp, #24]
 800df8e:	2b02      	cmp	r3, #2
 800df90:	dc51      	bgt.n	800e036 <_dtoa_r+0x91e>
 800df92:	e089      	b.n	800e0a8 <_dtoa_r+0x990>
 800df94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800df9a:	e74b      	b.n	800de34 <_dtoa_r+0x71c>
 800df9c:	9b03      	ldr	r3, [sp, #12]
 800df9e:	1e5e      	subs	r6, r3, #1
 800dfa0:	9b07      	ldr	r3, [sp, #28]
 800dfa2:	42b3      	cmp	r3, r6
 800dfa4:	bfbf      	itttt	lt
 800dfa6:	9b07      	ldrlt	r3, [sp, #28]
 800dfa8:	9607      	strlt	r6, [sp, #28]
 800dfaa:	1af2      	sublt	r2, r6, r3
 800dfac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dfae:	bfb6      	itet	lt
 800dfb0:	189b      	addlt	r3, r3, r2
 800dfb2:	1b9e      	subge	r6, r3, r6
 800dfb4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dfb6:	9b03      	ldr	r3, [sp, #12]
 800dfb8:	bfb8      	it	lt
 800dfba:	2600      	movlt	r6, #0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	bfb7      	itett	lt
 800dfc0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dfc4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dfc8:	1a9d      	sublt	r5, r3, r2
 800dfca:	2300      	movlt	r3, #0
 800dfcc:	e734      	b.n	800de38 <_dtoa_r+0x720>
 800dfce:	9e07      	ldr	r6, [sp, #28]
 800dfd0:	9d04      	ldr	r5, [sp, #16]
 800dfd2:	9f08      	ldr	r7, [sp, #32]
 800dfd4:	e73b      	b.n	800de4e <_dtoa_r+0x736>
 800dfd6:	9a07      	ldr	r2, [sp, #28]
 800dfd8:	e767      	b.n	800deaa <_dtoa_r+0x792>
 800dfda:	9b06      	ldr	r3, [sp, #24]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	dc18      	bgt.n	800e012 <_dtoa_r+0x8fa>
 800dfe0:	f1ba 0f00 	cmp.w	sl, #0
 800dfe4:	d115      	bne.n	800e012 <_dtoa_r+0x8fa>
 800dfe6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfea:	b993      	cbnz	r3, 800e012 <_dtoa_r+0x8fa>
 800dfec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dff0:	0d1b      	lsrs	r3, r3, #20
 800dff2:	051b      	lsls	r3, r3, #20
 800dff4:	b183      	cbz	r3, 800e018 <_dtoa_r+0x900>
 800dff6:	9b04      	ldr	r3, [sp, #16]
 800dff8:	3301      	adds	r3, #1
 800dffa:	9304      	str	r3, [sp, #16]
 800dffc:	9b05      	ldr	r3, [sp, #20]
 800dffe:	3301      	adds	r3, #1
 800e000:	9305      	str	r3, [sp, #20]
 800e002:	f04f 0801 	mov.w	r8, #1
 800e006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e008:	2b00      	cmp	r3, #0
 800e00a:	f47f af6a 	bne.w	800dee2 <_dtoa_r+0x7ca>
 800e00e:	2001      	movs	r0, #1
 800e010:	e76f      	b.n	800def2 <_dtoa_r+0x7da>
 800e012:	f04f 0800 	mov.w	r8, #0
 800e016:	e7f6      	b.n	800e006 <_dtoa_r+0x8ee>
 800e018:	4698      	mov	r8, r3
 800e01a:	e7f4      	b.n	800e006 <_dtoa_r+0x8ee>
 800e01c:	f43f af7d 	beq.w	800df1a <_dtoa_r+0x802>
 800e020:	4618      	mov	r0, r3
 800e022:	301c      	adds	r0, #28
 800e024:	e772      	b.n	800df0c <_dtoa_r+0x7f4>
 800e026:	9b03      	ldr	r3, [sp, #12]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	dc37      	bgt.n	800e09c <_dtoa_r+0x984>
 800e02c:	9b06      	ldr	r3, [sp, #24]
 800e02e:	2b02      	cmp	r3, #2
 800e030:	dd34      	ble.n	800e09c <_dtoa_r+0x984>
 800e032:	9b03      	ldr	r3, [sp, #12]
 800e034:	9302      	str	r3, [sp, #8]
 800e036:	9b02      	ldr	r3, [sp, #8]
 800e038:	b96b      	cbnz	r3, 800e056 <_dtoa_r+0x93e>
 800e03a:	4631      	mov	r1, r6
 800e03c:	2205      	movs	r2, #5
 800e03e:	4620      	mov	r0, r4
 800e040:	f000 f9d4 	bl	800e3ec <__multadd>
 800e044:	4601      	mov	r1, r0
 800e046:	4606      	mov	r6, r0
 800e048:	ee18 0a10 	vmov	r0, s16
 800e04c:	f000 fbee 	bl	800e82c <__mcmp>
 800e050:	2800      	cmp	r0, #0
 800e052:	f73f adbb 	bgt.w	800dbcc <_dtoa_r+0x4b4>
 800e056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e058:	9d01      	ldr	r5, [sp, #4]
 800e05a:	43db      	mvns	r3, r3
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	f04f 0800 	mov.w	r8, #0
 800e062:	4631      	mov	r1, r6
 800e064:	4620      	mov	r0, r4
 800e066:	f000 f99f 	bl	800e3a8 <_Bfree>
 800e06a:	2f00      	cmp	r7, #0
 800e06c:	f43f aea4 	beq.w	800ddb8 <_dtoa_r+0x6a0>
 800e070:	f1b8 0f00 	cmp.w	r8, #0
 800e074:	d005      	beq.n	800e082 <_dtoa_r+0x96a>
 800e076:	45b8      	cmp	r8, r7
 800e078:	d003      	beq.n	800e082 <_dtoa_r+0x96a>
 800e07a:	4641      	mov	r1, r8
 800e07c:	4620      	mov	r0, r4
 800e07e:	f000 f993 	bl	800e3a8 <_Bfree>
 800e082:	4639      	mov	r1, r7
 800e084:	4620      	mov	r0, r4
 800e086:	f000 f98f 	bl	800e3a8 <_Bfree>
 800e08a:	e695      	b.n	800ddb8 <_dtoa_r+0x6a0>
 800e08c:	2600      	movs	r6, #0
 800e08e:	4637      	mov	r7, r6
 800e090:	e7e1      	b.n	800e056 <_dtoa_r+0x93e>
 800e092:	9700      	str	r7, [sp, #0]
 800e094:	4637      	mov	r7, r6
 800e096:	e599      	b.n	800dbcc <_dtoa_r+0x4b4>
 800e098:	40240000 	.word	0x40240000
 800e09c:	9b08      	ldr	r3, [sp, #32]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f000 80ca 	beq.w	800e238 <_dtoa_r+0xb20>
 800e0a4:	9b03      	ldr	r3, [sp, #12]
 800e0a6:	9302      	str	r3, [sp, #8]
 800e0a8:	2d00      	cmp	r5, #0
 800e0aa:	dd05      	ble.n	800e0b8 <_dtoa_r+0x9a0>
 800e0ac:	4639      	mov	r1, r7
 800e0ae:	462a      	mov	r2, r5
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f000 fb4b 	bl	800e74c <__lshift>
 800e0b6:	4607      	mov	r7, r0
 800e0b8:	f1b8 0f00 	cmp.w	r8, #0
 800e0bc:	d05b      	beq.n	800e176 <_dtoa_r+0xa5e>
 800e0be:	6879      	ldr	r1, [r7, #4]
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	f000 f931 	bl	800e328 <_Balloc>
 800e0c6:	4605      	mov	r5, r0
 800e0c8:	b928      	cbnz	r0, 800e0d6 <_dtoa_r+0x9be>
 800e0ca:	4b87      	ldr	r3, [pc, #540]	; (800e2e8 <_dtoa_r+0xbd0>)
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e0d2:	f7ff bb3b 	b.w	800d74c <_dtoa_r+0x34>
 800e0d6:	693a      	ldr	r2, [r7, #16]
 800e0d8:	3202      	adds	r2, #2
 800e0da:	0092      	lsls	r2, r2, #2
 800e0dc:	f107 010c 	add.w	r1, r7, #12
 800e0e0:	300c      	adds	r0, #12
 800e0e2:	f000 f913 	bl	800e30c <memcpy>
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f000 fb2e 	bl	800e74c <__lshift>
 800e0f0:	9b01      	ldr	r3, [sp, #4]
 800e0f2:	f103 0901 	add.w	r9, r3, #1
 800e0f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	9305      	str	r3, [sp, #20]
 800e0fe:	f00a 0301 	and.w	r3, sl, #1
 800e102:	46b8      	mov	r8, r7
 800e104:	9304      	str	r3, [sp, #16]
 800e106:	4607      	mov	r7, r0
 800e108:	4631      	mov	r1, r6
 800e10a:	ee18 0a10 	vmov	r0, s16
 800e10e:	f7ff fa77 	bl	800d600 <quorem>
 800e112:	4641      	mov	r1, r8
 800e114:	9002      	str	r0, [sp, #8]
 800e116:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e11a:	ee18 0a10 	vmov	r0, s16
 800e11e:	f000 fb85 	bl	800e82c <__mcmp>
 800e122:	463a      	mov	r2, r7
 800e124:	9003      	str	r0, [sp, #12]
 800e126:	4631      	mov	r1, r6
 800e128:	4620      	mov	r0, r4
 800e12a:	f000 fb9b 	bl	800e864 <__mdiff>
 800e12e:	68c2      	ldr	r2, [r0, #12]
 800e130:	f109 3bff 	add.w	fp, r9, #4294967295
 800e134:	4605      	mov	r5, r0
 800e136:	bb02      	cbnz	r2, 800e17a <_dtoa_r+0xa62>
 800e138:	4601      	mov	r1, r0
 800e13a:	ee18 0a10 	vmov	r0, s16
 800e13e:	f000 fb75 	bl	800e82c <__mcmp>
 800e142:	4602      	mov	r2, r0
 800e144:	4629      	mov	r1, r5
 800e146:	4620      	mov	r0, r4
 800e148:	9207      	str	r2, [sp, #28]
 800e14a:	f000 f92d 	bl	800e3a8 <_Bfree>
 800e14e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e152:	ea43 0102 	orr.w	r1, r3, r2
 800e156:	9b04      	ldr	r3, [sp, #16]
 800e158:	430b      	orrs	r3, r1
 800e15a:	464d      	mov	r5, r9
 800e15c:	d10f      	bne.n	800e17e <_dtoa_r+0xa66>
 800e15e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e162:	d02a      	beq.n	800e1ba <_dtoa_r+0xaa2>
 800e164:	9b03      	ldr	r3, [sp, #12]
 800e166:	2b00      	cmp	r3, #0
 800e168:	dd02      	ble.n	800e170 <_dtoa_r+0xa58>
 800e16a:	9b02      	ldr	r3, [sp, #8]
 800e16c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e170:	f88b a000 	strb.w	sl, [fp]
 800e174:	e775      	b.n	800e062 <_dtoa_r+0x94a>
 800e176:	4638      	mov	r0, r7
 800e178:	e7ba      	b.n	800e0f0 <_dtoa_r+0x9d8>
 800e17a:	2201      	movs	r2, #1
 800e17c:	e7e2      	b.n	800e144 <_dtoa_r+0xa2c>
 800e17e:	9b03      	ldr	r3, [sp, #12]
 800e180:	2b00      	cmp	r3, #0
 800e182:	db04      	blt.n	800e18e <_dtoa_r+0xa76>
 800e184:	9906      	ldr	r1, [sp, #24]
 800e186:	430b      	orrs	r3, r1
 800e188:	9904      	ldr	r1, [sp, #16]
 800e18a:	430b      	orrs	r3, r1
 800e18c:	d122      	bne.n	800e1d4 <_dtoa_r+0xabc>
 800e18e:	2a00      	cmp	r2, #0
 800e190:	ddee      	ble.n	800e170 <_dtoa_r+0xa58>
 800e192:	ee18 1a10 	vmov	r1, s16
 800e196:	2201      	movs	r2, #1
 800e198:	4620      	mov	r0, r4
 800e19a:	f000 fad7 	bl	800e74c <__lshift>
 800e19e:	4631      	mov	r1, r6
 800e1a0:	ee08 0a10 	vmov	s16, r0
 800e1a4:	f000 fb42 	bl	800e82c <__mcmp>
 800e1a8:	2800      	cmp	r0, #0
 800e1aa:	dc03      	bgt.n	800e1b4 <_dtoa_r+0xa9c>
 800e1ac:	d1e0      	bne.n	800e170 <_dtoa_r+0xa58>
 800e1ae:	f01a 0f01 	tst.w	sl, #1
 800e1b2:	d0dd      	beq.n	800e170 <_dtoa_r+0xa58>
 800e1b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1b8:	d1d7      	bne.n	800e16a <_dtoa_r+0xa52>
 800e1ba:	2339      	movs	r3, #57	; 0x39
 800e1bc:	f88b 3000 	strb.w	r3, [fp]
 800e1c0:	462b      	mov	r3, r5
 800e1c2:	461d      	mov	r5, r3
 800e1c4:	3b01      	subs	r3, #1
 800e1c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e1ca:	2a39      	cmp	r2, #57	; 0x39
 800e1cc:	d071      	beq.n	800e2b2 <_dtoa_r+0xb9a>
 800e1ce:	3201      	adds	r2, #1
 800e1d0:	701a      	strb	r2, [r3, #0]
 800e1d2:	e746      	b.n	800e062 <_dtoa_r+0x94a>
 800e1d4:	2a00      	cmp	r2, #0
 800e1d6:	dd07      	ble.n	800e1e8 <_dtoa_r+0xad0>
 800e1d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1dc:	d0ed      	beq.n	800e1ba <_dtoa_r+0xaa2>
 800e1de:	f10a 0301 	add.w	r3, sl, #1
 800e1e2:	f88b 3000 	strb.w	r3, [fp]
 800e1e6:	e73c      	b.n	800e062 <_dtoa_r+0x94a>
 800e1e8:	9b05      	ldr	r3, [sp, #20]
 800e1ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e1ee:	4599      	cmp	r9, r3
 800e1f0:	d047      	beq.n	800e282 <_dtoa_r+0xb6a>
 800e1f2:	ee18 1a10 	vmov	r1, s16
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	220a      	movs	r2, #10
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f000 f8f6 	bl	800e3ec <__multadd>
 800e200:	45b8      	cmp	r8, r7
 800e202:	ee08 0a10 	vmov	s16, r0
 800e206:	f04f 0300 	mov.w	r3, #0
 800e20a:	f04f 020a 	mov.w	r2, #10
 800e20e:	4641      	mov	r1, r8
 800e210:	4620      	mov	r0, r4
 800e212:	d106      	bne.n	800e222 <_dtoa_r+0xb0a>
 800e214:	f000 f8ea 	bl	800e3ec <__multadd>
 800e218:	4680      	mov	r8, r0
 800e21a:	4607      	mov	r7, r0
 800e21c:	f109 0901 	add.w	r9, r9, #1
 800e220:	e772      	b.n	800e108 <_dtoa_r+0x9f0>
 800e222:	f000 f8e3 	bl	800e3ec <__multadd>
 800e226:	4639      	mov	r1, r7
 800e228:	4680      	mov	r8, r0
 800e22a:	2300      	movs	r3, #0
 800e22c:	220a      	movs	r2, #10
 800e22e:	4620      	mov	r0, r4
 800e230:	f000 f8dc 	bl	800e3ec <__multadd>
 800e234:	4607      	mov	r7, r0
 800e236:	e7f1      	b.n	800e21c <_dtoa_r+0xb04>
 800e238:	9b03      	ldr	r3, [sp, #12]
 800e23a:	9302      	str	r3, [sp, #8]
 800e23c:	9d01      	ldr	r5, [sp, #4]
 800e23e:	ee18 0a10 	vmov	r0, s16
 800e242:	4631      	mov	r1, r6
 800e244:	f7ff f9dc 	bl	800d600 <quorem>
 800e248:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e24c:	9b01      	ldr	r3, [sp, #4]
 800e24e:	f805 ab01 	strb.w	sl, [r5], #1
 800e252:	1aea      	subs	r2, r5, r3
 800e254:	9b02      	ldr	r3, [sp, #8]
 800e256:	4293      	cmp	r3, r2
 800e258:	dd09      	ble.n	800e26e <_dtoa_r+0xb56>
 800e25a:	ee18 1a10 	vmov	r1, s16
 800e25e:	2300      	movs	r3, #0
 800e260:	220a      	movs	r2, #10
 800e262:	4620      	mov	r0, r4
 800e264:	f000 f8c2 	bl	800e3ec <__multadd>
 800e268:	ee08 0a10 	vmov	s16, r0
 800e26c:	e7e7      	b.n	800e23e <_dtoa_r+0xb26>
 800e26e:	9b02      	ldr	r3, [sp, #8]
 800e270:	2b00      	cmp	r3, #0
 800e272:	bfc8      	it	gt
 800e274:	461d      	movgt	r5, r3
 800e276:	9b01      	ldr	r3, [sp, #4]
 800e278:	bfd8      	it	le
 800e27a:	2501      	movle	r5, #1
 800e27c:	441d      	add	r5, r3
 800e27e:	f04f 0800 	mov.w	r8, #0
 800e282:	ee18 1a10 	vmov	r1, s16
 800e286:	2201      	movs	r2, #1
 800e288:	4620      	mov	r0, r4
 800e28a:	f000 fa5f 	bl	800e74c <__lshift>
 800e28e:	4631      	mov	r1, r6
 800e290:	ee08 0a10 	vmov	s16, r0
 800e294:	f000 faca 	bl	800e82c <__mcmp>
 800e298:	2800      	cmp	r0, #0
 800e29a:	dc91      	bgt.n	800e1c0 <_dtoa_r+0xaa8>
 800e29c:	d102      	bne.n	800e2a4 <_dtoa_r+0xb8c>
 800e29e:	f01a 0f01 	tst.w	sl, #1
 800e2a2:	d18d      	bne.n	800e1c0 <_dtoa_r+0xaa8>
 800e2a4:	462b      	mov	r3, r5
 800e2a6:	461d      	mov	r5, r3
 800e2a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2ac:	2a30      	cmp	r2, #48	; 0x30
 800e2ae:	d0fa      	beq.n	800e2a6 <_dtoa_r+0xb8e>
 800e2b0:	e6d7      	b.n	800e062 <_dtoa_r+0x94a>
 800e2b2:	9a01      	ldr	r2, [sp, #4]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d184      	bne.n	800e1c2 <_dtoa_r+0xaaa>
 800e2b8:	9b00      	ldr	r3, [sp, #0]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	9300      	str	r3, [sp, #0]
 800e2be:	2331      	movs	r3, #49	; 0x31
 800e2c0:	7013      	strb	r3, [r2, #0]
 800e2c2:	e6ce      	b.n	800e062 <_dtoa_r+0x94a>
 800e2c4:	4b09      	ldr	r3, [pc, #36]	; (800e2ec <_dtoa_r+0xbd4>)
 800e2c6:	f7ff ba95 	b.w	800d7f4 <_dtoa_r+0xdc>
 800e2ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f47f aa6e 	bne.w	800d7ae <_dtoa_r+0x96>
 800e2d2:	4b07      	ldr	r3, [pc, #28]	; (800e2f0 <_dtoa_r+0xbd8>)
 800e2d4:	f7ff ba8e 	b.w	800d7f4 <_dtoa_r+0xdc>
 800e2d8:	9b02      	ldr	r3, [sp, #8]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	dcae      	bgt.n	800e23c <_dtoa_r+0xb24>
 800e2de:	9b06      	ldr	r3, [sp, #24]
 800e2e0:	2b02      	cmp	r3, #2
 800e2e2:	f73f aea8 	bgt.w	800e036 <_dtoa_r+0x91e>
 800e2e6:	e7a9      	b.n	800e23c <_dtoa_r+0xb24>
 800e2e8:	08010347 	.word	0x08010347
 800e2ec:	080102a4 	.word	0x080102a4
 800e2f0:	080102c8 	.word	0x080102c8

0800e2f4 <_localeconv_r>:
 800e2f4:	4800      	ldr	r0, [pc, #0]	; (800e2f8 <_localeconv_r+0x4>)
 800e2f6:	4770      	bx	lr
 800e2f8:	20000260 	.word	0x20000260

0800e2fc <malloc>:
 800e2fc:	4b02      	ldr	r3, [pc, #8]	; (800e308 <malloc+0xc>)
 800e2fe:	4601      	mov	r1, r0
 800e300:	6818      	ldr	r0, [r3, #0]
 800e302:	f000 bc17 	b.w	800eb34 <_malloc_r>
 800e306:	bf00      	nop
 800e308:	2000010c 	.word	0x2000010c

0800e30c <memcpy>:
 800e30c:	440a      	add	r2, r1
 800e30e:	4291      	cmp	r1, r2
 800e310:	f100 33ff 	add.w	r3, r0, #4294967295
 800e314:	d100      	bne.n	800e318 <memcpy+0xc>
 800e316:	4770      	bx	lr
 800e318:	b510      	push	{r4, lr}
 800e31a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e31e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e322:	4291      	cmp	r1, r2
 800e324:	d1f9      	bne.n	800e31a <memcpy+0xe>
 800e326:	bd10      	pop	{r4, pc}

0800e328 <_Balloc>:
 800e328:	b570      	push	{r4, r5, r6, lr}
 800e32a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e32c:	4604      	mov	r4, r0
 800e32e:	460d      	mov	r5, r1
 800e330:	b976      	cbnz	r6, 800e350 <_Balloc+0x28>
 800e332:	2010      	movs	r0, #16
 800e334:	f7ff ffe2 	bl	800e2fc <malloc>
 800e338:	4602      	mov	r2, r0
 800e33a:	6260      	str	r0, [r4, #36]	; 0x24
 800e33c:	b920      	cbnz	r0, 800e348 <_Balloc+0x20>
 800e33e:	4b18      	ldr	r3, [pc, #96]	; (800e3a0 <_Balloc+0x78>)
 800e340:	4818      	ldr	r0, [pc, #96]	; (800e3a4 <_Balloc+0x7c>)
 800e342:	2166      	movs	r1, #102	; 0x66
 800e344:	f000 fdd6 	bl	800eef4 <__assert_func>
 800e348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e34c:	6006      	str	r6, [r0, #0]
 800e34e:	60c6      	str	r6, [r0, #12]
 800e350:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e352:	68f3      	ldr	r3, [r6, #12]
 800e354:	b183      	cbz	r3, 800e378 <_Balloc+0x50>
 800e356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e35e:	b9b8      	cbnz	r0, 800e390 <_Balloc+0x68>
 800e360:	2101      	movs	r1, #1
 800e362:	fa01 f605 	lsl.w	r6, r1, r5
 800e366:	1d72      	adds	r2, r6, #5
 800e368:	0092      	lsls	r2, r2, #2
 800e36a:	4620      	mov	r0, r4
 800e36c:	f000 fb60 	bl	800ea30 <_calloc_r>
 800e370:	b160      	cbz	r0, 800e38c <_Balloc+0x64>
 800e372:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e376:	e00e      	b.n	800e396 <_Balloc+0x6e>
 800e378:	2221      	movs	r2, #33	; 0x21
 800e37a:	2104      	movs	r1, #4
 800e37c:	4620      	mov	r0, r4
 800e37e:	f000 fb57 	bl	800ea30 <_calloc_r>
 800e382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e384:	60f0      	str	r0, [r6, #12]
 800e386:	68db      	ldr	r3, [r3, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d1e4      	bne.n	800e356 <_Balloc+0x2e>
 800e38c:	2000      	movs	r0, #0
 800e38e:	bd70      	pop	{r4, r5, r6, pc}
 800e390:	6802      	ldr	r2, [r0, #0]
 800e392:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e396:	2300      	movs	r3, #0
 800e398:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e39c:	e7f7      	b.n	800e38e <_Balloc+0x66>
 800e39e:	bf00      	nop
 800e3a0:	080102d5 	.word	0x080102d5
 800e3a4:	08010358 	.word	0x08010358

0800e3a8 <_Bfree>:
 800e3a8:	b570      	push	{r4, r5, r6, lr}
 800e3aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e3ac:	4605      	mov	r5, r0
 800e3ae:	460c      	mov	r4, r1
 800e3b0:	b976      	cbnz	r6, 800e3d0 <_Bfree+0x28>
 800e3b2:	2010      	movs	r0, #16
 800e3b4:	f7ff ffa2 	bl	800e2fc <malloc>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	6268      	str	r0, [r5, #36]	; 0x24
 800e3bc:	b920      	cbnz	r0, 800e3c8 <_Bfree+0x20>
 800e3be:	4b09      	ldr	r3, [pc, #36]	; (800e3e4 <_Bfree+0x3c>)
 800e3c0:	4809      	ldr	r0, [pc, #36]	; (800e3e8 <_Bfree+0x40>)
 800e3c2:	218a      	movs	r1, #138	; 0x8a
 800e3c4:	f000 fd96 	bl	800eef4 <__assert_func>
 800e3c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3cc:	6006      	str	r6, [r0, #0]
 800e3ce:	60c6      	str	r6, [r0, #12]
 800e3d0:	b13c      	cbz	r4, 800e3e2 <_Bfree+0x3a>
 800e3d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e3d4:	6862      	ldr	r2, [r4, #4]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3dc:	6021      	str	r1, [r4, #0]
 800e3de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e3e2:	bd70      	pop	{r4, r5, r6, pc}
 800e3e4:	080102d5 	.word	0x080102d5
 800e3e8:	08010358 	.word	0x08010358

0800e3ec <__multadd>:
 800e3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f0:	690d      	ldr	r5, [r1, #16]
 800e3f2:	4607      	mov	r7, r0
 800e3f4:	460c      	mov	r4, r1
 800e3f6:	461e      	mov	r6, r3
 800e3f8:	f101 0c14 	add.w	ip, r1, #20
 800e3fc:	2000      	movs	r0, #0
 800e3fe:	f8dc 3000 	ldr.w	r3, [ip]
 800e402:	b299      	uxth	r1, r3
 800e404:	fb02 6101 	mla	r1, r2, r1, r6
 800e408:	0c1e      	lsrs	r6, r3, #16
 800e40a:	0c0b      	lsrs	r3, r1, #16
 800e40c:	fb02 3306 	mla	r3, r2, r6, r3
 800e410:	b289      	uxth	r1, r1
 800e412:	3001      	adds	r0, #1
 800e414:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e418:	4285      	cmp	r5, r0
 800e41a:	f84c 1b04 	str.w	r1, [ip], #4
 800e41e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e422:	dcec      	bgt.n	800e3fe <__multadd+0x12>
 800e424:	b30e      	cbz	r6, 800e46a <__multadd+0x7e>
 800e426:	68a3      	ldr	r3, [r4, #8]
 800e428:	42ab      	cmp	r3, r5
 800e42a:	dc19      	bgt.n	800e460 <__multadd+0x74>
 800e42c:	6861      	ldr	r1, [r4, #4]
 800e42e:	4638      	mov	r0, r7
 800e430:	3101      	adds	r1, #1
 800e432:	f7ff ff79 	bl	800e328 <_Balloc>
 800e436:	4680      	mov	r8, r0
 800e438:	b928      	cbnz	r0, 800e446 <__multadd+0x5a>
 800e43a:	4602      	mov	r2, r0
 800e43c:	4b0c      	ldr	r3, [pc, #48]	; (800e470 <__multadd+0x84>)
 800e43e:	480d      	ldr	r0, [pc, #52]	; (800e474 <__multadd+0x88>)
 800e440:	21b5      	movs	r1, #181	; 0xb5
 800e442:	f000 fd57 	bl	800eef4 <__assert_func>
 800e446:	6922      	ldr	r2, [r4, #16]
 800e448:	3202      	adds	r2, #2
 800e44a:	f104 010c 	add.w	r1, r4, #12
 800e44e:	0092      	lsls	r2, r2, #2
 800e450:	300c      	adds	r0, #12
 800e452:	f7ff ff5b 	bl	800e30c <memcpy>
 800e456:	4621      	mov	r1, r4
 800e458:	4638      	mov	r0, r7
 800e45a:	f7ff ffa5 	bl	800e3a8 <_Bfree>
 800e45e:	4644      	mov	r4, r8
 800e460:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e464:	3501      	adds	r5, #1
 800e466:	615e      	str	r6, [r3, #20]
 800e468:	6125      	str	r5, [r4, #16]
 800e46a:	4620      	mov	r0, r4
 800e46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e470:	08010347 	.word	0x08010347
 800e474:	08010358 	.word	0x08010358

0800e478 <__hi0bits>:
 800e478:	0c03      	lsrs	r3, r0, #16
 800e47a:	041b      	lsls	r3, r3, #16
 800e47c:	b9d3      	cbnz	r3, 800e4b4 <__hi0bits+0x3c>
 800e47e:	0400      	lsls	r0, r0, #16
 800e480:	2310      	movs	r3, #16
 800e482:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e486:	bf04      	itt	eq
 800e488:	0200      	lsleq	r0, r0, #8
 800e48a:	3308      	addeq	r3, #8
 800e48c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e490:	bf04      	itt	eq
 800e492:	0100      	lsleq	r0, r0, #4
 800e494:	3304      	addeq	r3, #4
 800e496:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e49a:	bf04      	itt	eq
 800e49c:	0080      	lsleq	r0, r0, #2
 800e49e:	3302      	addeq	r3, #2
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	db05      	blt.n	800e4b0 <__hi0bits+0x38>
 800e4a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e4a8:	f103 0301 	add.w	r3, r3, #1
 800e4ac:	bf08      	it	eq
 800e4ae:	2320      	moveq	r3, #32
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	4770      	bx	lr
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	e7e4      	b.n	800e482 <__hi0bits+0xa>

0800e4b8 <__lo0bits>:
 800e4b8:	6803      	ldr	r3, [r0, #0]
 800e4ba:	f013 0207 	ands.w	r2, r3, #7
 800e4be:	4601      	mov	r1, r0
 800e4c0:	d00b      	beq.n	800e4da <__lo0bits+0x22>
 800e4c2:	07da      	lsls	r2, r3, #31
 800e4c4:	d423      	bmi.n	800e50e <__lo0bits+0x56>
 800e4c6:	0798      	lsls	r0, r3, #30
 800e4c8:	bf49      	itett	mi
 800e4ca:	085b      	lsrmi	r3, r3, #1
 800e4cc:	089b      	lsrpl	r3, r3, #2
 800e4ce:	2001      	movmi	r0, #1
 800e4d0:	600b      	strmi	r3, [r1, #0]
 800e4d2:	bf5c      	itt	pl
 800e4d4:	600b      	strpl	r3, [r1, #0]
 800e4d6:	2002      	movpl	r0, #2
 800e4d8:	4770      	bx	lr
 800e4da:	b298      	uxth	r0, r3
 800e4dc:	b9a8      	cbnz	r0, 800e50a <__lo0bits+0x52>
 800e4de:	0c1b      	lsrs	r3, r3, #16
 800e4e0:	2010      	movs	r0, #16
 800e4e2:	b2da      	uxtb	r2, r3
 800e4e4:	b90a      	cbnz	r2, 800e4ea <__lo0bits+0x32>
 800e4e6:	3008      	adds	r0, #8
 800e4e8:	0a1b      	lsrs	r3, r3, #8
 800e4ea:	071a      	lsls	r2, r3, #28
 800e4ec:	bf04      	itt	eq
 800e4ee:	091b      	lsreq	r3, r3, #4
 800e4f0:	3004      	addeq	r0, #4
 800e4f2:	079a      	lsls	r2, r3, #30
 800e4f4:	bf04      	itt	eq
 800e4f6:	089b      	lsreq	r3, r3, #2
 800e4f8:	3002      	addeq	r0, #2
 800e4fa:	07da      	lsls	r2, r3, #31
 800e4fc:	d403      	bmi.n	800e506 <__lo0bits+0x4e>
 800e4fe:	085b      	lsrs	r3, r3, #1
 800e500:	f100 0001 	add.w	r0, r0, #1
 800e504:	d005      	beq.n	800e512 <__lo0bits+0x5a>
 800e506:	600b      	str	r3, [r1, #0]
 800e508:	4770      	bx	lr
 800e50a:	4610      	mov	r0, r2
 800e50c:	e7e9      	b.n	800e4e2 <__lo0bits+0x2a>
 800e50e:	2000      	movs	r0, #0
 800e510:	4770      	bx	lr
 800e512:	2020      	movs	r0, #32
 800e514:	4770      	bx	lr
	...

0800e518 <__i2b>:
 800e518:	b510      	push	{r4, lr}
 800e51a:	460c      	mov	r4, r1
 800e51c:	2101      	movs	r1, #1
 800e51e:	f7ff ff03 	bl	800e328 <_Balloc>
 800e522:	4602      	mov	r2, r0
 800e524:	b928      	cbnz	r0, 800e532 <__i2b+0x1a>
 800e526:	4b05      	ldr	r3, [pc, #20]	; (800e53c <__i2b+0x24>)
 800e528:	4805      	ldr	r0, [pc, #20]	; (800e540 <__i2b+0x28>)
 800e52a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e52e:	f000 fce1 	bl	800eef4 <__assert_func>
 800e532:	2301      	movs	r3, #1
 800e534:	6144      	str	r4, [r0, #20]
 800e536:	6103      	str	r3, [r0, #16]
 800e538:	bd10      	pop	{r4, pc}
 800e53a:	bf00      	nop
 800e53c:	08010347 	.word	0x08010347
 800e540:	08010358 	.word	0x08010358

0800e544 <__multiply>:
 800e544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e548:	4691      	mov	r9, r2
 800e54a:	690a      	ldr	r2, [r1, #16]
 800e54c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e550:	429a      	cmp	r2, r3
 800e552:	bfb8      	it	lt
 800e554:	460b      	movlt	r3, r1
 800e556:	460c      	mov	r4, r1
 800e558:	bfbc      	itt	lt
 800e55a:	464c      	movlt	r4, r9
 800e55c:	4699      	movlt	r9, r3
 800e55e:	6927      	ldr	r7, [r4, #16]
 800e560:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e564:	68a3      	ldr	r3, [r4, #8]
 800e566:	6861      	ldr	r1, [r4, #4]
 800e568:	eb07 060a 	add.w	r6, r7, sl
 800e56c:	42b3      	cmp	r3, r6
 800e56e:	b085      	sub	sp, #20
 800e570:	bfb8      	it	lt
 800e572:	3101      	addlt	r1, #1
 800e574:	f7ff fed8 	bl	800e328 <_Balloc>
 800e578:	b930      	cbnz	r0, 800e588 <__multiply+0x44>
 800e57a:	4602      	mov	r2, r0
 800e57c:	4b44      	ldr	r3, [pc, #272]	; (800e690 <__multiply+0x14c>)
 800e57e:	4845      	ldr	r0, [pc, #276]	; (800e694 <__multiply+0x150>)
 800e580:	f240 115d 	movw	r1, #349	; 0x15d
 800e584:	f000 fcb6 	bl	800eef4 <__assert_func>
 800e588:	f100 0514 	add.w	r5, r0, #20
 800e58c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e590:	462b      	mov	r3, r5
 800e592:	2200      	movs	r2, #0
 800e594:	4543      	cmp	r3, r8
 800e596:	d321      	bcc.n	800e5dc <__multiply+0x98>
 800e598:	f104 0314 	add.w	r3, r4, #20
 800e59c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e5a0:	f109 0314 	add.w	r3, r9, #20
 800e5a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e5a8:	9202      	str	r2, [sp, #8]
 800e5aa:	1b3a      	subs	r2, r7, r4
 800e5ac:	3a15      	subs	r2, #21
 800e5ae:	f022 0203 	bic.w	r2, r2, #3
 800e5b2:	3204      	adds	r2, #4
 800e5b4:	f104 0115 	add.w	r1, r4, #21
 800e5b8:	428f      	cmp	r7, r1
 800e5ba:	bf38      	it	cc
 800e5bc:	2204      	movcc	r2, #4
 800e5be:	9201      	str	r2, [sp, #4]
 800e5c0:	9a02      	ldr	r2, [sp, #8]
 800e5c2:	9303      	str	r3, [sp, #12]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d80c      	bhi.n	800e5e2 <__multiply+0x9e>
 800e5c8:	2e00      	cmp	r6, #0
 800e5ca:	dd03      	ble.n	800e5d4 <__multiply+0x90>
 800e5cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d05a      	beq.n	800e68a <__multiply+0x146>
 800e5d4:	6106      	str	r6, [r0, #16]
 800e5d6:	b005      	add	sp, #20
 800e5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5dc:	f843 2b04 	str.w	r2, [r3], #4
 800e5e0:	e7d8      	b.n	800e594 <__multiply+0x50>
 800e5e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e5e6:	f1ba 0f00 	cmp.w	sl, #0
 800e5ea:	d024      	beq.n	800e636 <__multiply+0xf2>
 800e5ec:	f104 0e14 	add.w	lr, r4, #20
 800e5f0:	46a9      	mov	r9, r5
 800e5f2:	f04f 0c00 	mov.w	ip, #0
 800e5f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e5fa:	f8d9 1000 	ldr.w	r1, [r9]
 800e5fe:	fa1f fb82 	uxth.w	fp, r2
 800e602:	b289      	uxth	r1, r1
 800e604:	fb0a 110b 	mla	r1, sl, fp, r1
 800e608:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e60c:	f8d9 2000 	ldr.w	r2, [r9]
 800e610:	4461      	add	r1, ip
 800e612:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e616:	fb0a c20b 	mla	r2, sl, fp, ip
 800e61a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e61e:	b289      	uxth	r1, r1
 800e620:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e624:	4577      	cmp	r7, lr
 800e626:	f849 1b04 	str.w	r1, [r9], #4
 800e62a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e62e:	d8e2      	bhi.n	800e5f6 <__multiply+0xb2>
 800e630:	9a01      	ldr	r2, [sp, #4]
 800e632:	f845 c002 	str.w	ip, [r5, r2]
 800e636:	9a03      	ldr	r2, [sp, #12]
 800e638:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e63c:	3304      	adds	r3, #4
 800e63e:	f1b9 0f00 	cmp.w	r9, #0
 800e642:	d020      	beq.n	800e686 <__multiply+0x142>
 800e644:	6829      	ldr	r1, [r5, #0]
 800e646:	f104 0c14 	add.w	ip, r4, #20
 800e64a:	46ae      	mov	lr, r5
 800e64c:	f04f 0a00 	mov.w	sl, #0
 800e650:	f8bc b000 	ldrh.w	fp, [ip]
 800e654:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e658:	fb09 220b 	mla	r2, r9, fp, r2
 800e65c:	4492      	add	sl, r2
 800e65e:	b289      	uxth	r1, r1
 800e660:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e664:	f84e 1b04 	str.w	r1, [lr], #4
 800e668:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e66c:	f8be 1000 	ldrh.w	r1, [lr]
 800e670:	0c12      	lsrs	r2, r2, #16
 800e672:	fb09 1102 	mla	r1, r9, r2, r1
 800e676:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e67a:	4567      	cmp	r7, ip
 800e67c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e680:	d8e6      	bhi.n	800e650 <__multiply+0x10c>
 800e682:	9a01      	ldr	r2, [sp, #4]
 800e684:	50a9      	str	r1, [r5, r2]
 800e686:	3504      	adds	r5, #4
 800e688:	e79a      	b.n	800e5c0 <__multiply+0x7c>
 800e68a:	3e01      	subs	r6, #1
 800e68c:	e79c      	b.n	800e5c8 <__multiply+0x84>
 800e68e:	bf00      	nop
 800e690:	08010347 	.word	0x08010347
 800e694:	08010358 	.word	0x08010358

0800e698 <__pow5mult>:
 800e698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e69c:	4615      	mov	r5, r2
 800e69e:	f012 0203 	ands.w	r2, r2, #3
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	460f      	mov	r7, r1
 800e6a6:	d007      	beq.n	800e6b8 <__pow5mult+0x20>
 800e6a8:	4c25      	ldr	r4, [pc, #148]	; (800e740 <__pow5mult+0xa8>)
 800e6aa:	3a01      	subs	r2, #1
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e6b2:	f7ff fe9b 	bl	800e3ec <__multadd>
 800e6b6:	4607      	mov	r7, r0
 800e6b8:	10ad      	asrs	r5, r5, #2
 800e6ba:	d03d      	beq.n	800e738 <__pow5mult+0xa0>
 800e6bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e6be:	b97c      	cbnz	r4, 800e6e0 <__pow5mult+0x48>
 800e6c0:	2010      	movs	r0, #16
 800e6c2:	f7ff fe1b 	bl	800e2fc <malloc>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	6270      	str	r0, [r6, #36]	; 0x24
 800e6ca:	b928      	cbnz	r0, 800e6d8 <__pow5mult+0x40>
 800e6cc:	4b1d      	ldr	r3, [pc, #116]	; (800e744 <__pow5mult+0xac>)
 800e6ce:	481e      	ldr	r0, [pc, #120]	; (800e748 <__pow5mult+0xb0>)
 800e6d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e6d4:	f000 fc0e 	bl	800eef4 <__assert_func>
 800e6d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6dc:	6004      	str	r4, [r0, #0]
 800e6de:	60c4      	str	r4, [r0, #12]
 800e6e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e6e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6e8:	b94c      	cbnz	r4, 800e6fe <__pow5mult+0x66>
 800e6ea:	f240 2171 	movw	r1, #625	; 0x271
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	f7ff ff12 	bl	800e518 <__i2b>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	6003      	str	r3, [r0, #0]
 800e6fe:	f04f 0900 	mov.w	r9, #0
 800e702:	07eb      	lsls	r3, r5, #31
 800e704:	d50a      	bpl.n	800e71c <__pow5mult+0x84>
 800e706:	4639      	mov	r1, r7
 800e708:	4622      	mov	r2, r4
 800e70a:	4630      	mov	r0, r6
 800e70c:	f7ff ff1a 	bl	800e544 <__multiply>
 800e710:	4639      	mov	r1, r7
 800e712:	4680      	mov	r8, r0
 800e714:	4630      	mov	r0, r6
 800e716:	f7ff fe47 	bl	800e3a8 <_Bfree>
 800e71a:	4647      	mov	r7, r8
 800e71c:	106d      	asrs	r5, r5, #1
 800e71e:	d00b      	beq.n	800e738 <__pow5mult+0xa0>
 800e720:	6820      	ldr	r0, [r4, #0]
 800e722:	b938      	cbnz	r0, 800e734 <__pow5mult+0x9c>
 800e724:	4622      	mov	r2, r4
 800e726:	4621      	mov	r1, r4
 800e728:	4630      	mov	r0, r6
 800e72a:	f7ff ff0b 	bl	800e544 <__multiply>
 800e72e:	6020      	str	r0, [r4, #0]
 800e730:	f8c0 9000 	str.w	r9, [r0]
 800e734:	4604      	mov	r4, r0
 800e736:	e7e4      	b.n	800e702 <__pow5mult+0x6a>
 800e738:	4638      	mov	r0, r7
 800e73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e73e:	bf00      	nop
 800e740:	080104a8 	.word	0x080104a8
 800e744:	080102d5 	.word	0x080102d5
 800e748:	08010358 	.word	0x08010358

0800e74c <__lshift>:
 800e74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e750:	460c      	mov	r4, r1
 800e752:	6849      	ldr	r1, [r1, #4]
 800e754:	6923      	ldr	r3, [r4, #16]
 800e756:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e75a:	68a3      	ldr	r3, [r4, #8]
 800e75c:	4607      	mov	r7, r0
 800e75e:	4691      	mov	r9, r2
 800e760:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e764:	f108 0601 	add.w	r6, r8, #1
 800e768:	42b3      	cmp	r3, r6
 800e76a:	db0b      	blt.n	800e784 <__lshift+0x38>
 800e76c:	4638      	mov	r0, r7
 800e76e:	f7ff fddb 	bl	800e328 <_Balloc>
 800e772:	4605      	mov	r5, r0
 800e774:	b948      	cbnz	r0, 800e78a <__lshift+0x3e>
 800e776:	4602      	mov	r2, r0
 800e778:	4b2a      	ldr	r3, [pc, #168]	; (800e824 <__lshift+0xd8>)
 800e77a:	482b      	ldr	r0, [pc, #172]	; (800e828 <__lshift+0xdc>)
 800e77c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e780:	f000 fbb8 	bl	800eef4 <__assert_func>
 800e784:	3101      	adds	r1, #1
 800e786:	005b      	lsls	r3, r3, #1
 800e788:	e7ee      	b.n	800e768 <__lshift+0x1c>
 800e78a:	2300      	movs	r3, #0
 800e78c:	f100 0114 	add.w	r1, r0, #20
 800e790:	f100 0210 	add.w	r2, r0, #16
 800e794:	4618      	mov	r0, r3
 800e796:	4553      	cmp	r3, sl
 800e798:	db37      	blt.n	800e80a <__lshift+0xbe>
 800e79a:	6920      	ldr	r0, [r4, #16]
 800e79c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e7a0:	f104 0314 	add.w	r3, r4, #20
 800e7a4:	f019 091f 	ands.w	r9, r9, #31
 800e7a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e7ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e7b0:	d02f      	beq.n	800e812 <__lshift+0xc6>
 800e7b2:	f1c9 0e20 	rsb	lr, r9, #32
 800e7b6:	468a      	mov	sl, r1
 800e7b8:	f04f 0c00 	mov.w	ip, #0
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	fa02 f209 	lsl.w	r2, r2, r9
 800e7c2:	ea42 020c 	orr.w	r2, r2, ip
 800e7c6:	f84a 2b04 	str.w	r2, [sl], #4
 800e7ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ce:	4298      	cmp	r0, r3
 800e7d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e7d4:	d8f2      	bhi.n	800e7bc <__lshift+0x70>
 800e7d6:	1b03      	subs	r3, r0, r4
 800e7d8:	3b15      	subs	r3, #21
 800e7da:	f023 0303 	bic.w	r3, r3, #3
 800e7de:	3304      	adds	r3, #4
 800e7e0:	f104 0215 	add.w	r2, r4, #21
 800e7e4:	4290      	cmp	r0, r2
 800e7e6:	bf38      	it	cc
 800e7e8:	2304      	movcc	r3, #4
 800e7ea:	f841 c003 	str.w	ip, [r1, r3]
 800e7ee:	f1bc 0f00 	cmp.w	ip, #0
 800e7f2:	d001      	beq.n	800e7f8 <__lshift+0xac>
 800e7f4:	f108 0602 	add.w	r6, r8, #2
 800e7f8:	3e01      	subs	r6, #1
 800e7fa:	4638      	mov	r0, r7
 800e7fc:	612e      	str	r6, [r5, #16]
 800e7fe:	4621      	mov	r1, r4
 800e800:	f7ff fdd2 	bl	800e3a8 <_Bfree>
 800e804:	4628      	mov	r0, r5
 800e806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e80a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e80e:	3301      	adds	r3, #1
 800e810:	e7c1      	b.n	800e796 <__lshift+0x4a>
 800e812:	3904      	subs	r1, #4
 800e814:	f853 2b04 	ldr.w	r2, [r3], #4
 800e818:	f841 2f04 	str.w	r2, [r1, #4]!
 800e81c:	4298      	cmp	r0, r3
 800e81e:	d8f9      	bhi.n	800e814 <__lshift+0xc8>
 800e820:	e7ea      	b.n	800e7f8 <__lshift+0xac>
 800e822:	bf00      	nop
 800e824:	08010347 	.word	0x08010347
 800e828:	08010358 	.word	0x08010358

0800e82c <__mcmp>:
 800e82c:	b530      	push	{r4, r5, lr}
 800e82e:	6902      	ldr	r2, [r0, #16]
 800e830:	690c      	ldr	r4, [r1, #16]
 800e832:	1b12      	subs	r2, r2, r4
 800e834:	d10e      	bne.n	800e854 <__mcmp+0x28>
 800e836:	f100 0314 	add.w	r3, r0, #20
 800e83a:	3114      	adds	r1, #20
 800e83c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e840:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e844:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e848:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e84c:	42a5      	cmp	r5, r4
 800e84e:	d003      	beq.n	800e858 <__mcmp+0x2c>
 800e850:	d305      	bcc.n	800e85e <__mcmp+0x32>
 800e852:	2201      	movs	r2, #1
 800e854:	4610      	mov	r0, r2
 800e856:	bd30      	pop	{r4, r5, pc}
 800e858:	4283      	cmp	r3, r0
 800e85a:	d3f3      	bcc.n	800e844 <__mcmp+0x18>
 800e85c:	e7fa      	b.n	800e854 <__mcmp+0x28>
 800e85e:	f04f 32ff 	mov.w	r2, #4294967295
 800e862:	e7f7      	b.n	800e854 <__mcmp+0x28>

0800e864 <__mdiff>:
 800e864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e868:	460c      	mov	r4, r1
 800e86a:	4606      	mov	r6, r0
 800e86c:	4611      	mov	r1, r2
 800e86e:	4620      	mov	r0, r4
 800e870:	4690      	mov	r8, r2
 800e872:	f7ff ffdb 	bl	800e82c <__mcmp>
 800e876:	1e05      	subs	r5, r0, #0
 800e878:	d110      	bne.n	800e89c <__mdiff+0x38>
 800e87a:	4629      	mov	r1, r5
 800e87c:	4630      	mov	r0, r6
 800e87e:	f7ff fd53 	bl	800e328 <_Balloc>
 800e882:	b930      	cbnz	r0, 800e892 <__mdiff+0x2e>
 800e884:	4b3a      	ldr	r3, [pc, #232]	; (800e970 <__mdiff+0x10c>)
 800e886:	4602      	mov	r2, r0
 800e888:	f240 2132 	movw	r1, #562	; 0x232
 800e88c:	4839      	ldr	r0, [pc, #228]	; (800e974 <__mdiff+0x110>)
 800e88e:	f000 fb31 	bl	800eef4 <__assert_func>
 800e892:	2301      	movs	r3, #1
 800e894:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89c:	bfa4      	itt	ge
 800e89e:	4643      	movge	r3, r8
 800e8a0:	46a0      	movge	r8, r4
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e8a8:	bfa6      	itte	ge
 800e8aa:	461c      	movge	r4, r3
 800e8ac:	2500      	movge	r5, #0
 800e8ae:	2501      	movlt	r5, #1
 800e8b0:	f7ff fd3a 	bl	800e328 <_Balloc>
 800e8b4:	b920      	cbnz	r0, 800e8c0 <__mdiff+0x5c>
 800e8b6:	4b2e      	ldr	r3, [pc, #184]	; (800e970 <__mdiff+0x10c>)
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e8be:	e7e5      	b.n	800e88c <__mdiff+0x28>
 800e8c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e8c4:	6926      	ldr	r6, [r4, #16]
 800e8c6:	60c5      	str	r5, [r0, #12]
 800e8c8:	f104 0914 	add.w	r9, r4, #20
 800e8cc:	f108 0514 	add.w	r5, r8, #20
 800e8d0:	f100 0e14 	add.w	lr, r0, #20
 800e8d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e8d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e8dc:	f108 0210 	add.w	r2, r8, #16
 800e8e0:	46f2      	mov	sl, lr
 800e8e2:	2100      	movs	r1, #0
 800e8e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e8e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e8ec:	fa1f f883 	uxth.w	r8, r3
 800e8f0:	fa11 f18b 	uxtah	r1, r1, fp
 800e8f4:	0c1b      	lsrs	r3, r3, #16
 800e8f6:	eba1 0808 	sub.w	r8, r1, r8
 800e8fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e8fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e902:	fa1f f888 	uxth.w	r8, r8
 800e906:	1419      	asrs	r1, r3, #16
 800e908:	454e      	cmp	r6, r9
 800e90a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e90e:	f84a 3b04 	str.w	r3, [sl], #4
 800e912:	d8e7      	bhi.n	800e8e4 <__mdiff+0x80>
 800e914:	1b33      	subs	r3, r6, r4
 800e916:	3b15      	subs	r3, #21
 800e918:	f023 0303 	bic.w	r3, r3, #3
 800e91c:	3304      	adds	r3, #4
 800e91e:	3415      	adds	r4, #21
 800e920:	42a6      	cmp	r6, r4
 800e922:	bf38      	it	cc
 800e924:	2304      	movcc	r3, #4
 800e926:	441d      	add	r5, r3
 800e928:	4473      	add	r3, lr
 800e92a:	469e      	mov	lr, r3
 800e92c:	462e      	mov	r6, r5
 800e92e:	4566      	cmp	r6, ip
 800e930:	d30e      	bcc.n	800e950 <__mdiff+0xec>
 800e932:	f10c 0203 	add.w	r2, ip, #3
 800e936:	1b52      	subs	r2, r2, r5
 800e938:	f022 0203 	bic.w	r2, r2, #3
 800e93c:	3d03      	subs	r5, #3
 800e93e:	45ac      	cmp	ip, r5
 800e940:	bf38      	it	cc
 800e942:	2200      	movcc	r2, #0
 800e944:	441a      	add	r2, r3
 800e946:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e94a:	b17b      	cbz	r3, 800e96c <__mdiff+0x108>
 800e94c:	6107      	str	r7, [r0, #16]
 800e94e:	e7a3      	b.n	800e898 <__mdiff+0x34>
 800e950:	f856 8b04 	ldr.w	r8, [r6], #4
 800e954:	fa11 f288 	uxtah	r2, r1, r8
 800e958:	1414      	asrs	r4, r2, #16
 800e95a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e95e:	b292      	uxth	r2, r2
 800e960:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e964:	f84e 2b04 	str.w	r2, [lr], #4
 800e968:	1421      	asrs	r1, r4, #16
 800e96a:	e7e0      	b.n	800e92e <__mdiff+0xca>
 800e96c:	3f01      	subs	r7, #1
 800e96e:	e7ea      	b.n	800e946 <__mdiff+0xe2>
 800e970:	08010347 	.word	0x08010347
 800e974:	08010358 	.word	0x08010358

0800e978 <__d2b>:
 800e978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e97c:	4689      	mov	r9, r1
 800e97e:	2101      	movs	r1, #1
 800e980:	ec57 6b10 	vmov	r6, r7, d0
 800e984:	4690      	mov	r8, r2
 800e986:	f7ff fccf 	bl	800e328 <_Balloc>
 800e98a:	4604      	mov	r4, r0
 800e98c:	b930      	cbnz	r0, 800e99c <__d2b+0x24>
 800e98e:	4602      	mov	r2, r0
 800e990:	4b25      	ldr	r3, [pc, #148]	; (800ea28 <__d2b+0xb0>)
 800e992:	4826      	ldr	r0, [pc, #152]	; (800ea2c <__d2b+0xb4>)
 800e994:	f240 310a 	movw	r1, #778	; 0x30a
 800e998:	f000 faac 	bl	800eef4 <__assert_func>
 800e99c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e9a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e9a4:	bb35      	cbnz	r5, 800e9f4 <__d2b+0x7c>
 800e9a6:	2e00      	cmp	r6, #0
 800e9a8:	9301      	str	r3, [sp, #4]
 800e9aa:	d028      	beq.n	800e9fe <__d2b+0x86>
 800e9ac:	4668      	mov	r0, sp
 800e9ae:	9600      	str	r6, [sp, #0]
 800e9b0:	f7ff fd82 	bl	800e4b8 <__lo0bits>
 800e9b4:	9900      	ldr	r1, [sp, #0]
 800e9b6:	b300      	cbz	r0, 800e9fa <__d2b+0x82>
 800e9b8:	9a01      	ldr	r2, [sp, #4]
 800e9ba:	f1c0 0320 	rsb	r3, r0, #32
 800e9be:	fa02 f303 	lsl.w	r3, r2, r3
 800e9c2:	430b      	orrs	r3, r1
 800e9c4:	40c2      	lsrs	r2, r0
 800e9c6:	6163      	str	r3, [r4, #20]
 800e9c8:	9201      	str	r2, [sp, #4]
 800e9ca:	9b01      	ldr	r3, [sp, #4]
 800e9cc:	61a3      	str	r3, [r4, #24]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	bf14      	ite	ne
 800e9d2:	2202      	movne	r2, #2
 800e9d4:	2201      	moveq	r2, #1
 800e9d6:	6122      	str	r2, [r4, #16]
 800e9d8:	b1d5      	cbz	r5, 800ea10 <__d2b+0x98>
 800e9da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e9de:	4405      	add	r5, r0
 800e9e0:	f8c9 5000 	str.w	r5, [r9]
 800e9e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e9e8:	f8c8 0000 	str.w	r0, [r8]
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	b003      	add	sp, #12
 800e9f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e9f8:	e7d5      	b.n	800e9a6 <__d2b+0x2e>
 800e9fa:	6161      	str	r1, [r4, #20]
 800e9fc:	e7e5      	b.n	800e9ca <__d2b+0x52>
 800e9fe:	a801      	add	r0, sp, #4
 800ea00:	f7ff fd5a 	bl	800e4b8 <__lo0bits>
 800ea04:	9b01      	ldr	r3, [sp, #4]
 800ea06:	6163      	str	r3, [r4, #20]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	6122      	str	r2, [r4, #16]
 800ea0c:	3020      	adds	r0, #32
 800ea0e:	e7e3      	b.n	800e9d8 <__d2b+0x60>
 800ea10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ea18:	f8c9 0000 	str.w	r0, [r9]
 800ea1c:	6918      	ldr	r0, [r3, #16]
 800ea1e:	f7ff fd2b 	bl	800e478 <__hi0bits>
 800ea22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea26:	e7df      	b.n	800e9e8 <__d2b+0x70>
 800ea28:	08010347 	.word	0x08010347
 800ea2c:	08010358 	.word	0x08010358

0800ea30 <_calloc_r>:
 800ea30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea32:	fba1 2402 	umull	r2, r4, r1, r2
 800ea36:	b94c      	cbnz	r4, 800ea4c <_calloc_r+0x1c>
 800ea38:	4611      	mov	r1, r2
 800ea3a:	9201      	str	r2, [sp, #4]
 800ea3c:	f000 f87a 	bl	800eb34 <_malloc_r>
 800ea40:	9a01      	ldr	r2, [sp, #4]
 800ea42:	4605      	mov	r5, r0
 800ea44:	b930      	cbnz	r0, 800ea54 <_calloc_r+0x24>
 800ea46:	4628      	mov	r0, r5
 800ea48:	b003      	add	sp, #12
 800ea4a:	bd30      	pop	{r4, r5, pc}
 800ea4c:	220c      	movs	r2, #12
 800ea4e:	6002      	str	r2, [r0, #0]
 800ea50:	2500      	movs	r5, #0
 800ea52:	e7f8      	b.n	800ea46 <_calloc_r+0x16>
 800ea54:	4621      	mov	r1, r4
 800ea56:	f7fe f941 	bl	800ccdc <memset>
 800ea5a:	e7f4      	b.n	800ea46 <_calloc_r+0x16>

0800ea5c <_free_r>:
 800ea5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea5e:	2900      	cmp	r1, #0
 800ea60:	d044      	beq.n	800eaec <_free_r+0x90>
 800ea62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea66:	9001      	str	r0, [sp, #4]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	f1a1 0404 	sub.w	r4, r1, #4
 800ea6e:	bfb8      	it	lt
 800ea70:	18e4      	addlt	r4, r4, r3
 800ea72:	f000 fa9b 	bl	800efac <__malloc_lock>
 800ea76:	4a1e      	ldr	r2, [pc, #120]	; (800eaf0 <_free_r+0x94>)
 800ea78:	9801      	ldr	r0, [sp, #4]
 800ea7a:	6813      	ldr	r3, [r2, #0]
 800ea7c:	b933      	cbnz	r3, 800ea8c <_free_r+0x30>
 800ea7e:	6063      	str	r3, [r4, #4]
 800ea80:	6014      	str	r4, [r2, #0]
 800ea82:	b003      	add	sp, #12
 800ea84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea88:	f000 ba96 	b.w	800efb8 <__malloc_unlock>
 800ea8c:	42a3      	cmp	r3, r4
 800ea8e:	d908      	bls.n	800eaa2 <_free_r+0x46>
 800ea90:	6825      	ldr	r5, [r4, #0]
 800ea92:	1961      	adds	r1, r4, r5
 800ea94:	428b      	cmp	r3, r1
 800ea96:	bf01      	itttt	eq
 800ea98:	6819      	ldreq	r1, [r3, #0]
 800ea9a:	685b      	ldreq	r3, [r3, #4]
 800ea9c:	1949      	addeq	r1, r1, r5
 800ea9e:	6021      	streq	r1, [r4, #0]
 800eaa0:	e7ed      	b.n	800ea7e <_free_r+0x22>
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	b10b      	cbz	r3, 800eaac <_free_r+0x50>
 800eaa8:	42a3      	cmp	r3, r4
 800eaaa:	d9fa      	bls.n	800eaa2 <_free_r+0x46>
 800eaac:	6811      	ldr	r1, [r2, #0]
 800eaae:	1855      	adds	r5, r2, r1
 800eab0:	42a5      	cmp	r5, r4
 800eab2:	d10b      	bne.n	800eacc <_free_r+0x70>
 800eab4:	6824      	ldr	r4, [r4, #0]
 800eab6:	4421      	add	r1, r4
 800eab8:	1854      	adds	r4, r2, r1
 800eaba:	42a3      	cmp	r3, r4
 800eabc:	6011      	str	r1, [r2, #0]
 800eabe:	d1e0      	bne.n	800ea82 <_free_r+0x26>
 800eac0:	681c      	ldr	r4, [r3, #0]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	6053      	str	r3, [r2, #4]
 800eac6:	4421      	add	r1, r4
 800eac8:	6011      	str	r1, [r2, #0]
 800eaca:	e7da      	b.n	800ea82 <_free_r+0x26>
 800eacc:	d902      	bls.n	800ead4 <_free_r+0x78>
 800eace:	230c      	movs	r3, #12
 800ead0:	6003      	str	r3, [r0, #0]
 800ead2:	e7d6      	b.n	800ea82 <_free_r+0x26>
 800ead4:	6825      	ldr	r5, [r4, #0]
 800ead6:	1961      	adds	r1, r4, r5
 800ead8:	428b      	cmp	r3, r1
 800eada:	bf04      	itt	eq
 800eadc:	6819      	ldreq	r1, [r3, #0]
 800eade:	685b      	ldreq	r3, [r3, #4]
 800eae0:	6063      	str	r3, [r4, #4]
 800eae2:	bf04      	itt	eq
 800eae4:	1949      	addeq	r1, r1, r5
 800eae6:	6021      	streq	r1, [r4, #0]
 800eae8:	6054      	str	r4, [r2, #4]
 800eaea:	e7ca      	b.n	800ea82 <_free_r+0x26>
 800eaec:	b003      	add	sp, #12
 800eaee:	bd30      	pop	{r4, r5, pc}
 800eaf0:	200021b4 	.word	0x200021b4

0800eaf4 <sbrk_aligned>:
 800eaf4:	b570      	push	{r4, r5, r6, lr}
 800eaf6:	4e0e      	ldr	r6, [pc, #56]	; (800eb30 <sbrk_aligned+0x3c>)
 800eaf8:	460c      	mov	r4, r1
 800eafa:	6831      	ldr	r1, [r6, #0]
 800eafc:	4605      	mov	r5, r0
 800eafe:	b911      	cbnz	r1, 800eb06 <sbrk_aligned+0x12>
 800eb00:	f000 f9e8 	bl	800eed4 <_sbrk_r>
 800eb04:	6030      	str	r0, [r6, #0]
 800eb06:	4621      	mov	r1, r4
 800eb08:	4628      	mov	r0, r5
 800eb0a:	f000 f9e3 	bl	800eed4 <_sbrk_r>
 800eb0e:	1c43      	adds	r3, r0, #1
 800eb10:	d00a      	beq.n	800eb28 <sbrk_aligned+0x34>
 800eb12:	1cc4      	adds	r4, r0, #3
 800eb14:	f024 0403 	bic.w	r4, r4, #3
 800eb18:	42a0      	cmp	r0, r4
 800eb1a:	d007      	beq.n	800eb2c <sbrk_aligned+0x38>
 800eb1c:	1a21      	subs	r1, r4, r0
 800eb1e:	4628      	mov	r0, r5
 800eb20:	f000 f9d8 	bl	800eed4 <_sbrk_r>
 800eb24:	3001      	adds	r0, #1
 800eb26:	d101      	bne.n	800eb2c <sbrk_aligned+0x38>
 800eb28:	f04f 34ff 	mov.w	r4, #4294967295
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	bd70      	pop	{r4, r5, r6, pc}
 800eb30:	200021b8 	.word	0x200021b8

0800eb34 <_malloc_r>:
 800eb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb38:	1ccd      	adds	r5, r1, #3
 800eb3a:	f025 0503 	bic.w	r5, r5, #3
 800eb3e:	3508      	adds	r5, #8
 800eb40:	2d0c      	cmp	r5, #12
 800eb42:	bf38      	it	cc
 800eb44:	250c      	movcc	r5, #12
 800eb46:	2d00      	cmp	r5, #0
 800eb48:	4607      	mov	r7, r0
 800eb4a:	db01      	blt.n	800eb50 <_malloc_r+0x1c>
 800eb4c:	42a9      	cmp	r1, r5
 800eb4e:	d905      	bls.n	800eb5c <_malloc_r+0x28>
 800eb50:	230c      	movs	r3, #12
 800eb52:	603b      	str	r3, [r7, #0]
 800eb54:	2600      	movs	r6, #0
 800eb56:	4630      	mov	r0, r6
 800eb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb5c:	4e2e      	ldr	r6, [pc, #184]	; (800ec18 <_malloc_r+0xe4>)
 800eb5e:	f000 fa25 	bl	800efac <__malloc_lock>
 800eb62:	6833      	ldr	r3, [r6, #0]
 800eb64:	461c      	mov	r4, r3
 800eb66:	bb34      	cbnz	r4, 800ebb6 <_malloc_r+0x82>
 800eb68:	4629      	mov	r1, r5
 800eb6a:	4638      	mov	r0, r7
 800eb6c:	f7ff ffc2 	bl	800eaf4 <sbrk_aligned>
 800eb70:	1c43      	adds	r3, r0, #1
 800eb72:	4604      	mov	r4, r0
 800eb74:	d14d      	bne.n	800ec12 <_malloc_r+0xde>
 800eb76:	6834      	ldr	r4, [r6, #0]
 800eb78:	4626      	mov	r6, r4
 800eb7a:	2e00      	cmp	r6, #0
 800eb7c:	d140      	bne.n	800ec00 <_malloc_r+0xcc>
 800eb7e:	6823      	ldr	r3, [r4, #0]
 800eb80:	4631      	mov	r1, r6
 800eb82:	4638      	mov	r0, r7
 800eb84:	eb04 0803 	add.w	r8, r4, r3
 800eb88:	f000 f9a4 	bl	800eed4 <_sbrk_r>
 800eb8c:	4580      	cmp	r8, r0
 800eb8e:	d13a      	bne.n	800ec06 <_malloc_r+0xd2>
 800eb90:	6821      	ldr	r1, [r4, #0]
 800eb92:	3503      	adds	r5, #3
 800eb94:	1a6d      	subs	r5, r5, r1
 800eb96:	f025 0503 	bic.w	r5, r5, #3
 800eb9a:	3508      	adds	r5, #8
 800eb9c:	2d0c      	cmp	r5, #12
 800eb9e:	bf38      	it	cc
 800eba0:	250c      	movcc	r5, #12
 800eba2:	4629      	mov	r1, r5
 800eba4:	4638      	mov	r0, r7
 800eba6:	f7ff ffa5 	bl	800eaf4 <sbrk_aligned>
 800ebaa:	3001      	adds	r0, #1
 800ebac:	d02b      	beq.n	800ec06 <_malloc_r+0xd2>
 800ebae:	6823      	ldr	r3, [r4, #0]
 800ebb0:	442b      	add	r3, r5
 800ebb2:	6023      	str	r3, [r4, #0]
 800ebb4:	e00e      	b.n	800ebd4 <_malloc_r+0xa0>
 800ebb6:	6822      	ldr	r2, [r4, #0]
 800ebb8:	1b52      	subs	r2, r2, r5
 800ebba:	d41e      	bmi.n	800ebfa <_malloc_r+0xc6>
 800ebbc:	2a0b      	cmp	r2, #11
 800ebbe:	d916      	bls.n	800ebee <_malloc_r+0xba>
 800ebc0:	1961      	adds	r1, r4, r5
 800ebc2:	42a3      	cmp	r3, r4
 800ebc4:	6025      	str	r5, [r4, #0]
 800ebc6:	bf18      	it	ne
 800ebc8:	6059      	strne	r1, [r3, #4]
 800ebca:	6863      	ldr	r3, [r4, #4]
 800ebcc:	bf08      	it	eq
 800ebce:	6031      	streq	r1, [r6, #0]
 800ebd0:	5162      	str	r2, [r4, r5]
 800ebd2:	604b      	str	r3, [r1, #4]
 800ebd4:	4638      	mov	r0, r7
 800ebd6:	f104 060b 	add.w	r6, r4, #11
 800ebda:	f000 f9ed 	bl	800efb8 <__malloc_unlock>
 800ebde:	f026 0607 	bic.w	r6, r6, #7
 800ebe2:	1d23      	adds	r3, r4, #4
 800ebe4:	1af2      	subs	r2, r6, r3
 800ebe6:	d0b6      	beq.n	800eb56 <_malloc_r+0x22>
 800ebe8:	1b9b      	subs	r3, r3, r6
 800ebea:	50a3      	str	r3, [r4, r2]
 800ebec:	e7b3      	b.n	800eb56 <_malloc_r+0x22>
 800ebee:	6862      	ldr	r2, [r4, #4]
 800ebf0:	42a3      	cmp	r3, r4
 800ebf2:	bf0c      	ite	eq
 800ebf4:	6032      	streq	r2, [r6, #0]
 800ebf6:	605a      	strne	r2, [r3, #4]
 800ebf8:	e7ec      	b.n	800ebd4 <_malloc_r+0xa0>
 800ebfa:	4623      	mov	r3, r4
 800ebfc:	6864      	ldr	r4, [r4, #4]
 800ebfe:	e7b2      	b.n	800eb66 <_malloc_r+0x32>
 800ec00:	4634      	mov	r4, r6
 800ec02:	6876      	ldr	r6, [r6, #4]
 800ec04:	e7b9      	b.n	800eb7a <_malloc_r+0x46>
 800ec06:	230c      	movs	r3, #12
 800ec08:	603b      	str	r3, [r7, #0]
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	f000 f9d4 	bl	800efb8 <__malloc_unlock>
 800ec10:	e7a1      	b.n	800eb56 <_malloc_r+0x22>
 800ec12:	6025      	str	r5, [r4, #0]
 800ec14:	e7de      	b.n	800ebd4 <_malloc_r+0xa0>
 800ec16:	bf00      	nop
 800ec18:	200021b4 	.word	0x200021b4

0800ec1c <__ssputs_r>:
 800ec1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec20:	688e      	ldr	r6, [r1, #8]
 800ec22:	429e      	cmp	r6, r3
 800ec24:	4682      	mov	sl, r0
 800ec26:	460c      	mov	r4, r1
 800ec28:	4690      	mov	r8, r2
 800ec2a:	461f      	mov	r7, r3
 800ec2c:	d838      	bhi.n	800eca0 <__ssputs_r+0x84>
 800ec2e:	898a      	ldrh	r2, [r1, #12]
 800ec30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec34:	d032      	beq.n	800ec9c <__ssputs_r+0x80>
 800ec36:	6825      	ldr	r5, [r4, #0]
 800ec38:	6909      	ldr	r1, [r1, #16]
 800ec3a:	eba5 0901 	sub.w	r9, r5, r1
 800ec3e:	6965      	ldr	r5, [r4, #20]
 800ec40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec48:	3301      	adds	r3, #1
 800ec4a:	444b      	add	r3, r9
 800ec4c:	106d      	asrs	r5, r5, #1
 800ec4e:	429d      	cmp	r5, r3
 800ec50:	bf38      	it	cc
 800ec52:	461d      	movcc	r5, r3
 800ec54:	0553      	lsls	r3, r2, #21
 800ec56:	d531      	bpl.n	800ecbc <__ssputs_r+0xa0>
 800ec58:	4629      	mov	r1, r5
 800ec5a:	f7ff ff6b 	bl	800eb34 <_malloc_r>
 800ec5e:	4606      	mov	r6, r0
 800ec60:	b950      	cbnz	r0, 800ec78 <__ssputs_r+0x5c>
 800ec62:	230c      	movs	r3, #12
 800ec64:	f8ca 3000 	str.w	r3, [sl]
 800ec68:	89a3      	ldrh	r3, [r4, #12]
 800ec6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec6e:	81a3      	strh	r3, [r4, #12]
 800ec70:	f04f 30ff 	mov.w	r0, #4294967295
 800ec74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec78:	6921      	ldr	r1, [r4, #16]
 800ec7a:	464a      	mov	r2, r9
 800ec7c:	f7ff fb46 	bl	800e30c <memcpy>
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec8a:	81a3      	strh	r3, [r4, #12]
 800ec8c:	6126      	str	r6, [r4, #16]
 800ec8e:	6165      	str	r5, [r4, #20]
 800ec90:	444e      	add	r6, r9
 800ec92:	eba5 0509 	sub.w	r5, r5, r9
 800ec96:	6026      	str	r6, [r4, #0]
 800ec98:	60a5      	str	r5, [r4, #8]
 800ec9a:	463e      	mov	r6, r7
 800ec9c:	42be      	cmp	r6, r7
 800ec9e:	d900      	bls.n	800eca2 <__ssputs_r+0x86>
 800eca0:	463e      	mov	r6, r7
 800eca2:	6820      	ldr	r0, [r4, #0]
 800eca4:	4632      	mov	r2, r6
 800eca6:	4641      	mov	r1, r8
 800eca8:	f000 f966 	bl	800ef78 <memmove>
 800ecac:	68a3      	ldr	r3, [r4, #8]
 800ecae:	1b9b      	subs	r3, r3, r6
 800ecb0:	60a3      	str	r3, [r4, #8]
 800ecb2:	6823      	ldr	r3, [r4, #0]
 800ecb4:	4433      	add	r3, r6
 800ecb6:	6023      	str	r3, [r4, #0]
 800ecb8:	2000      	movs	r0, #0
 800ecba:	e7db      	b.n	800ec74 <__ssputs_r+0x58>
 800ecbc:	462a      	mov	r2, r5
 800ecbe:	f000 f981 	bl	800efc4 <_realloc_r>
 800ecc2:	4606      	mov	r6, r0
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d1e1      	bne.n	800ec8c <__ssputs_r+0x70>
 800ecc8:	6921      	ldr	r1, [r4, #16]
 800ecca:	4650      	mov	r0, sl
 800eccc:	f7ff fec6 	bl	800ea5c <_free_r>
 800ecd0:	e7c7      	b.n	800ec62 <__ssputs_r+0x46>
	...

0800ecd4 <_svfiprintf_r>:
 800ecd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecd8:	4698      	mov	r8, r3
 800ecda:	898b      	ldrh	r3, [r1, #12]
 800ecdc:	061b      	lsls	r3, r3, #24
 800ecde:	b09d      	sub	sp, #116	; 0x74
 800ece0:	4607      	mov	r7, r0
 800ece2:	460d      	mov	r5, r1
 800ece4:	4614      	mov	r4, r2
 800ece6:	d50e      	bpl.n	800ed06 <_svfiprintf_r+0x32>
 800ece8:	690b      	ldr	r3, [r1, #16]
 800ecea:	b963      	cbnz	r3, 800ed06 <_svfiprintf_r+0x32>
 800ecec:	2140      	movs	r1, #64	; 0x40
 800ecee:	f7ff ff21 	bl	800eb34 <_malloc_r>
 800ecf2:	6028      	str	r0, [r5, #0]
 800ecf4:	6128      	str	r0, [r5, #16]
 800ecf6:	b920      	cbnz	r0, 800ed02 <_svfiprintf_r+0x2e>
 800ecf8:	230c      	movs	r3, #12
 800ecfa:	603b      	str	r3, [r7, #0]
 800ecfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ed00:	e0d1      	b.n	800eea6 <_svfiprintf_r+0x1d2>
 800ed02:	2340      	movs	r3, #64	; 0x40
 800ed04:	616b      	str	r3, [r5, #20]
 800ed06:	2300      	movs	r3, #0
 800ed08:	9309      	str	r3, [sp, #36]	; 0x24
 800ed0a:	2320      	movs	r3, #32
 800ed0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed10:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed14:	2330      	movs	r3, #48	; 0x30
 800ed16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eec0 <_svfiprintf_r+0x1ec>
 800ed1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed1e:	f04f 0901 	mov.w	r9, #1
 800ed22:	4623      	mov	r3, r4
 800ed24:	469a      	mov	sl, r3
 800ed26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed2a:	b10a      	cbz	r2, 800ed30 <_svfiprintf_r+0x5c>
 800ed2c:	2a25      	cmp	r2, #37	; 0x25
 800ed2e:	d1f9      	bne.n	800ed24 <_svfiprintf_r+0x50>
 800ed30:	ebba 0b04 	subs.w	fp, sl, r4
 800ed34:	d00b      	beq.n	800ed4e <_svfiprintf_r+0x7a>
 800ed36:	465b      	mov	r3, fp
 800ed38:	4622      	mov	r2, r4
 800ed3a:	4629      	mov	r1, r5
 800ed3c:	4638      	mov	r0, r7
 800ed3e:	f7ff ff6d 	bl	800ec1c <__ssputs_r>
 800ed42:	3001      	adds	r0, #1
 800ed44:	f000 80aa 	beq.w	800ee9c <_svfiprintf_r+0x1c8>
 800ed48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed4a:	445a      	add	r2, fp
 800ed4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ed4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	f000 80a2 	beq.w	800ee9c <_svfiprintf_r+0x1c8>
 800ed58:	2300      	movs	r3, #0
 800ed5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed62:	f10a 0a01 	add.w	sl, sl, #1
 800ed66:	9304      	str	r3, [sp, #16]
 800ed68:	9307      	str	r3, [sp, #28]
 800ed6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed6e:	931a      	str	r3, [sp, #104]	; 0x68
 800ed70:	4654      	mov	r4, sl
 800ed72:	2205      	movs	r2, #5
 800ed74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed78:	4851      	ldr	r0, [pc, #324]	; (800eec0 <_svfiprintf_r+0x1ec>)
 800ed7a:	f7f1 fa39 	bl	80001f0 <memchr>
 800ed7e:	9a04      	ldr	r2, [sp, #16]
 800ed80:	b9d8      	cbnz	r0, 800edba <_svfiprintf_r+0xe6>
 800ed82:	06d0      	lsls	r0, r2, #27
 800ed84:	bf44      	itt	mi
 800ed86:	2320      	movmi	r3, #32
 800ed88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed8c:	0711      	lsls	r1, r2, #28
 800ed8e:	bf44      	itt	mi
 800ed90:	232b      	movmi	r3, #43	; 0x2b
 800ed92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed96:	f89a 3000 	ldrb.w	r3, [sl]
 800ed9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ed9c:	d015      	beq.n	800edca <_svfiprintf_r+0xf6>
 800ed9e:	9a07      	ldr	r2, [sp, #28]
 800eda0:	4654      	mov	r4, sl
 800eda2:	2000      	movs	r0, #0
 800eda4:	f04f 0c0a 	mov.w	ip, #10
 800eda8:	4621      	mov	r1, r4
 800edaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edae:	3b30      	subs	r3, #48	; 0x30
 800edb0:	2b09      	cmp	r3, #9
 800edb2:	d94e      	bls.n	800ee52 <_svfiprintf_r+0x17e>
 800edb4:	b1b0      	cbz	r0, 800ede4 <_svfiprintf_r+0x110>
 800edb6:	9207      	str	r2, [sp, #28]
 800edb8:	e014      	b.n	800ede4 <_svfiprintf_r+0x110>
 800edba:	eba0 0308 	sub.w	r3, r0, r8
 800edbe:	fa09 f303 	lsl.w	r3, r9, r3
 800edc2:	4313      	orrs	r3, r2
 800edc4:	9304      	str	r3, [sp, #16]
 800edc6:	46a2      	mov	sl, r4
 800edc8:	e7d2      	b.n	800ed70 <_svfiprintf_r+0x9c>
 800edca:	9b03      	ldr	r3, [sp, #12]
 800edcc:	1d19      	adds	r1, r3, #4
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	9103      	str	r1, [sp, #12]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	bfbb      	ittet	lt
 800edd6:	425b      	neglt	r3, r3
 800edd8:	f042 0202 	orrlt.w	r2, r2, #2
 800eddc:	9307      	strge	r3, [sp, #28]
 800edde:	9307      	strlt	r3, [sp, #28]
 800ede0:	bfb8      	it	lt
 800ede2:	9204      	strlt	r2, [sp, #16]
 800ede4:	7823      	ldrb	r3, [r4, #0]
 800ede6:	2b2e      	cmp	r3, #46	; 0x2e
 800ede8:	d10c      	bne.n	800ee04 <_svfiprintf_r+0x130>
 800edea:	7863      	ldrb	r3, [r4, #1]
 800edec:	2b2a      	cmp	r3, #42	; 0x2a
 800edee:	d135      	bne.n	800ee5c <_svfiprintf_r+0x188>
 800edf0:	9b03      	ldr	r3, [sp, #12]
 800edf2:	1d1a      	adds	r2, r3, #4
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	9203      	str	r2, [sp, #12]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	bfb8      	it	lt
 800edfc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee00:	3402      	adds	r4, #2
 800ee02:	9305      	str	r3, [sp, #20]
 800ee04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eed0 <_svfiprintf_r+0x1fc>
 800ee08:	7821      	ldrb	r1, [r4, #0]
 800ee0a:	2203      	movs	r2, #3
 800ee0c:	4650      	mov	r0, sl
 800ee0e:	f7f1 f9ef 	bl	80001f0 <memchr>
 800ee12:	b140      	cbz	r0, 800ee26 <_svfiprintf_r+0x152>
 800ee14:	2340      	movs	r3, #64	; 0x40
 800ee16:	eba0 000a 	sub.w	r0, r0, sl
 800ee1a:	fa03 f000 	lsl.w	r0, r3, r0
 800ee1e:	9b04      	ldr	r3, [sp, #16]
 800ee20:	4303      	orrs	r3, r0
 800ee22:	3401      	adds	r4, #1
 800ee24:	9304      	str	r3, [sp, #16]
 800ee26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee2a:	4826      	ldr	r0, [pc, #152]	; (800eec4 <_svfiprintf_r+0x1f0>)
 800ee2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee30:	2206      	movs	r2, #6
 800ee32:	f7f1 f9dd 	bl	80001f0 <memchr>
 800ee36:	2800      	cmp	r0, #0
 800ee38:	d038      	beq.n	800eeac <_svfiprintf_r+0x1d8>
 800ee3a:	4b23      	ldr	r3, [pc, #140]	; (800eec8 <_svfiprintf_r+0x1f4>)
 800ee3c:	bb1b      	cbnz	r3, 800ee86 <_svfiprintf_r+0x1b2>
 800ee3e:	9b03      	ldr	r3, [sp, #12]
 800ee40:	3307      	adds	r3, #7
 800ee42:	f023 0307 	bic.w	r3, r3, #7
 800ee46:	3308      	adds	r3, #8
 800ee48:	9303      	str	r3, [sp, #12]
 800ee4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee4c:	4433      	add	r3, r6
 800ee4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee50:	e767      	b.n	800ed22 <_svfiprintf_r+0x4e>
 800ee52:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee56:	460c      	mov	r4, r1
 800ee58:	2001      	movs	r0, #1
 800ee5a:	e7a5      	b.n	800eda8 <_svfiprintf_r+0xd4>
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	3401      	adds	r4, #1
 800ee60:	9305      	str	r3, [sp, #20]
 800ee62:	4619      	mov	r1, r3
 800ee64:	f04f 0c0a 	mov.w	ip, #10
 800ee68:	4620      	mov	r0, r4
 800ee6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee6e:	3a30      	subs	r2, #48	; 0x30
 800ee70:	2a09      	cmp	r2, #9
 800ee72:	d903      	bls.n	800ee7c <_svfiprintf_r+0x1a8>
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d0c5      	beq.n	800ee04 <_svfiprintf_r+0x130>
 800ee78:	9105      	str	r1, [sp, #20]
 800ee7a:	e7c3      	b.n	800ee04 <_svfiprintf_r+0x130>
 800ee7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee80:	4604      	mov	r4, r0
 800ee82:	2301      	movs	r3, #1
 800ee84:	e7f0      	b.n	800ee68 <_svfiprintf_r+0x194>
 800ee86:	ab03      	add	r3, sp, #12
 800ee88:	9300      	str	r3, [sp, #0]
 800ee8a:	462a      	mov	r2, r5
 800ee8c:	4b0f      	ldr	r3, [pc, #60]	; (800eecc <_svfiprintf_r+0x1f8>)
 800ee8e:	a904      	add	r1, sp, #16
 800ee90:	4638      	mov	r0, r7
 800ee92:	f7fd ffcb 	bl	800ce2c <_printf_float>
 800ee96:	1c42      	adds	r2, r0, #1
 800ee98:	4606      	mov	r6, r0
 800ee9a:	d1d6      	bne.n	800ee4a <_svfiprintf_r+0x176>
 800ee9c:	89ab      	ldrh	r3, [r5, #12]
 800ee9e:	065b      	lsls	r3, r3, #25
 800eea0:	f53f af2c 	bmi.w	800ecfc <_svfiprintf_r+0x28>
 800eea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eea6:	b01d      	add	sp, #116	; 0x74
 800eea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeac:	ab03      	add	r3, sp, #12
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	462a      	mov	r2, r5
 800eeb2:	4b06      	ldr	r3, [pc, #24]	; (800eecc <_svfiprintf_r+0x1f8>)
 800eeb4:	a904      	add	r1, sp, #16
 800eeb6:	4638      	mov	r0, r7
 800eeb8:	f7fe fa5c 	bl	800d374 <_printf_i>
 800eebc:	e7eb      	b.n	800ee96 <_svfiprintf_r+0x1c2>
 800eebe:	bf00      	nop
 800eec0:	080104b4 	.word	0x080104b4
 800eec4:	080104be 	.word	0x080104be
 800eec8:	0800ce2d 	.word	0x0800ce2d
 800eecc:	0800ec1d 	.word	0x0800ec1d
 800eed0:	080104ba 	.word	0x080104ba

0800eed4 <_sbrk_r>:
 800eed4:	b538      	push	{r3, r4, r5, lr}
 800eed6:	4d06      	ldr	r5, [pc, #24]	; (800eef0 <_sbrk_r+0x1c>)
 800eed8:	2300      	movs	r3, #0
 800eeda:	4604      	mov	r4, r0
 800eedc:	4608      	mov	r0, r1
 800eede:	602b      	str	r3, [r5, #0]
 800eee0:	f7f2 ffe4 	bl	8001eac <_sbrk>
 800eee4:	1c43      	adds	r3, r0, #1
 800eee6:	d102      	bne.n	800eeee <_sbrk_r+0x1a>
 800eee8:	682b      	ldr	r3, [r5, #0]
 800eeea:	b103      	cbz	r3, 800eeee <_sbrk_r+0x1a>
 800eeec:	6023      	str	r3, [r4, #0]
 800eeee:	bd38      	pop	{r3, r4, r5, pc}
 800eef0:	200021bc 	.word	0x200021bc

0800eef4 <__assert_func>:
 800eef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eef6:	4614      	mov	r4, r2
 800eef8:	461a      	mov	r2, r3
 800eefa:	4b09      	ldr	r3, [pc, #36]	; (800ef20 <__assert_func+0x2c>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	4605      	mov	r5, r0
 800ef00:	68d8      	ldr	r0, [r3, #12]
 800ef02:	b14c      	cbz	r4, 800ef18 <__assert_func+0x24>
 800ef04:	4b07      	ldr	r3, [pc, #28]	; (800ef24 <__assert_func+0x30>)
 800ef06:	9100      	str	r1, [sp, #0]
 800ef08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef0c:	4906      	ldr	r1, [pc, #24]	; (800ef28 <__assert_func+0x34>)
 800ef0e:	462b      	mov	r3, r5
 800ef10:	f000 f80e 	bl	800ef30 <fiprintf>
 800ef14:	f000 faac 	bl	800f470 <abort>
 800ef18:	4b04      	ldr	r3, [pc, #16]	; (800ef2c <__assert_func+0x38>)
 800ef1a:	461c      	mov	r4, r3
 800ef1c:	e7f3      	b.n	800ef06 <__assert_func+0x12>
 800ef1e:	bf00      	nop
 800ef20:	2000010c 	.word	0x2000010c
 800ef24:	080104c5 	.word	0x080104c5
 800ef28:	080104d2 	.word	0x080104d2
 800ef2c:	08010500 	.word	0x08010500

0800ef30 <fiprintf>:
 800ef30:	b40e      	push	{r1, r2, r3}
 800ef32:	b503      	push	{r0, r1, lr}
 800ef34:	4601      	mov	r1, r0
 800ef36:	ab03      	add	r3, sp, #12
 800ef38:	4805      	ldr	r0, [pc, #20]	; (800ef50 <fiprintf+0x20>)
 800ef3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef3e:	6800      	ldr	r0, [r0, #0]
 800ef40:	9301      	str	r3, [sp, #4]
 800ef42:	f000 f897 	bl	800f074 <_vfiprintf_r>
 800ef46:	b002      	add	sp, #8
 800ef48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef4c:	b003      	add	sp, #12
 800ef4e:	4770      	bx	lr
 800ef50:	2000010c 	.word	0x2000010c

0800ef54 <__ascii_mbtowc>:
 800ef54:	b082      	sub	sp, #8
 800ef56:	b901      	cbnz	r1, 800ef5a <__ascii_mbtowc+0x6>
 800ef58:	a901      	add	r1, sp, #4
 800ef5a:	b142      	cbz	r2, 800ef6e <__ascii_mbtowc+0x1a>
 800ef5c:	b14b      	cbz	r3, 800ef72 <__ascii_mbtowc+0x1e>
 800ef5e:	7813      	ldrb	r3, [r2, #0]
 800ef60:	600b      	str	r3, [r1, #0]
 800ef62:	7812      	ldrb	r2, [r2, #0]
 800ef64:	1e10      	subs	r0, r2, #0
 800ef66:	bf18      	it	ne
 800ef68:	2001      	movne	r0, #1
 800ef6a:	b002      	add	sp, #8
 800ef6c:	4770      	bx	lr
 800ef6e:	4610      	mov	r0, r2
 800ef70:	e7fb      	b.n	800ef6a <__ascii_mbtowc+0x16>
 800ef72:	f06f 0001 	mvn.w	r0, #1
 800ef76:	e7f8      	b.n	800ef6a <__ascii_mbtowc+0x16>

0800ef78 <memmove>:
 800ef78:	4288      	cmp	r0, r1
 800ef7a:	b510      	push	{r4, lr}
 800ef7c:	eb01 0402 	add.w	r4, r1, r2
 800ef80:	d902      	bls.n	800ef88 <memmove+0x10>
 800ef82:	4284      	cmp	r4, r0
 800ef84:	4623      	mov	r3, r4
 800ef86:	d807      	bhi.n	800ef98 <memmove+0x20>
 800ef88:	1e43      	subs	r3, r0, #1
 800ef8a:	42a1      	cmp	r1, r4
 800ef8c:	d008      	beq.n	800efa0 <memmove+0x28>
 800ef8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef96:	e7f8      	b.n	800ef8a <memmove+0x12>
 800ef98:	4402      	add	r2, r0
 800ef9a:	4601      	mov	r1, r0
 800ef9c:	428a      	cmp	r2, r1
 800ef9e:	d100      	bne.n	800efa2 <memmove+0x2a>
 800efa0:	bd10      	pop	{r4, pc}
 800efa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efaa:	e7f7      	b.n	800ef9c <memmove+0x24>

0800efac <__malloc_lock>:
 800efac:	4801      	ldr	r0, [pc, #4]	; (800efb4 <__malloc_lock+0x8>)
 800efae:	f000 bc1f 	b.w	800f7f0 <__retarget_lock_acquire_recursive>
 800efb2:	bf00      	nop
 800efb4:	200021c0 	.word	0x200021c0

0800efb8 <__malloc_unlock>:
 800efb8:	4801      	ldr	r0, [pc, #4]	; (800efc0 <__malloc_unlock+0x8>)
 800efba:	f000 bc1a 	b.w	800f7f2 <__retarget_lock_release_recursive>
 800efbe:	bf00      	nop
 800efc0:	200021c0 	.word	0x200021c0

0800efc4 <_realloc_r>:
 800efc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc8:	4680      	mov	r8, r0
 800efca:	4614      	mov	r4, r2
 800efcc:	460e      	mov	r6, r1
 800efce:	b921      	cbnz	r1, 800efda <_realloc_r+0x16>
 800efd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efd4:	4611      	mov	r1, r2
 800efd6:	f7ff bdad 	b.w	800eb34 <_malloc_r>
 800efda:	b92a      	cbnz	r2, 800efe8 <_realloc_r+0x24>
 800efdc:	f7ff fd3e 	bl	800ea5c <_free_r>
 800efe0:	4625      	mov	r5, r4
 800efe2:	4628      	mov	r0, r5
 800efe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe8:	f000 fc6a 	bl	800f8c0 <_malloc_usable_size_r>
 800efec:	4284      	cmp	r4, r0
 800efee:	4607      	mov	r7, r0
 800eff0:	d802      	bhi.n	800eff8 <_realloc_r+0x34>
 800eff2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eff6:	d812      	bhi.n	800f01e <_realloc_r+0x5a>
 800eff8:	4621      	mov	r1, r4
 800effa:	4640      	mov	r0, r8
 800effc:	f7ff fd9a 	bl	800eb34 <_malloc_r>
 800f000:	4605      	mov	r5, r0
 800f002:	2800      	cmp	r0, #0
 800f004:	d0ed      	beq.n	800efe2 <_realloc_r+0x1e>
 800f006:	42bc      	cmp	r4, r7
 800f008:	4622      	mov	r2, r4
 800f00a:	4631      	mov	r1, r6
 800f00c:	bf28      	it	cs
 800f00e:	463a      	movcs	r2, r7
 800f010:	f7ff f97c 	bl	800e30c <memcpy>
 800f014:	4631      	mov	r1, r6
 800f016:	4640      	mov	r0, r8
 800f018:	f7ff fd20 	bl	800ea5c <_free_r>
 800f01c:	e7e1      	b.n	800efe2 <_realloc_r+0x1e>
 800f01e:	4635      	mov	r5, r6
 800f020:	e7df      	b.n	800efe2 <_realloc_r+0x1e>

0800f022 <__sfputc_r>:
 800f022:	6893      	ldr	r3, [r2, #8]
 800f024:	3b01      	subs	r3, #1
 800f026:	2b00      	cmp	r3, #0
 800f028:	b410      	push	{r4}
 800f02a:	6093      	str	r3, [r2, #8]
 800f02c:	da08      	bge.n	800f040 <__sfputc_r+0x1e>
 800f02e:	6994      	ldr	r4, [r2, #24]
 800f030:	42a3      	cmp	r3, r4
 800f032:	db01      	blt.n	800f038 <__sfputc_r+0x16>
 800f034:	290a      	cmp	r1, #10
 800f036:	d103      	bne.n	800f040 <__sfputc_r+0x1e>
 800f038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f03c:	f000 b94a 	b.w	800f2d4 <__swbuf_r>
 800f040:	6813      	ldr	r3, [r2, #0]
 800f042:	1c58      	adds	r0, r3, #1
 800f044:	6010      	str	r0, [r2, #0]
 800f046:	7019      	strb	r1, [r3, #0]
 800f048:	4608      	mov	r0, r1
 800f04a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <__sfputs_r>:
 800f050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f052:	4606      	mov	r6, r0
 800f054:	460f      	mov	r7, r1
 800f056:	4614      	mov	r4, r2
 800f058:	18d5      	adds	r5, r2, r3
 800f05a:	42ac      	cmp	r4, r5
 800f05c:	d101      	bne.n	800f062 <__sfputs_r+0x12>
 800f05e:	2000      	movs	r0, #0
 800f060:	e007      	b.n	800f072 <__sfputs_r+0x22>
 800f062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f066:	463a      	mov	r2, r7
 800f068:	4630      	mov	r0, r6
 800f06a:	f7ff ffda 	bl	800f022 <__sfputc_r>
 800f06e:	1c43      	adds	r3, r0, #1
 800f070:	d1f3      	bne.n	800f05a <__sfputs_r+0xa>
 800f072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f074 <_vfiprintf_r>:
 800f074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f078:	460d      	mov	r5, r1
 800f07a:	b09d      	sub	sp, #116	; 0x74
 800f07c:	4614      	mov	r4, r2
 800f07e:	4698      	mov	r8, r3
 800f080:	4606      	mov	r6, r0
 800f082:	b118      	cbz	r0, 800f08c <_vfiprintf_r+0x18>
 800f084:	6983      	ldr	r3, [r0, #24]
 800f086:	b90b      	cbnz	r3, 800f08c <_vfiprintf_r+0x18>
 800f088:	f000 fb14 	bl	800f6b4 <__sinit>
 800f08c:	4b89      	ldr	r3, [pc, #548]	; (800f2b4 <_vfiprintf_r+0x240>)
 800f08e:	429d      	cmp	r5, r3
 800f090:	d11b      	bne.n	800f0ca <_vfiprintf_r+0x56>
 800f092:	6875      	ldr	r5, [r6, #4]
 800f094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f096:	07d9      	lsls	r1, r3, #31
 800f098:	d405      	bmi.n	800f0a6 <_vfiprintf_r+0x32>
 800f09a:	89ab      	ldrh	r3, [r5, #12]
 800f09c:	059a      	lsls	r2, r3, #22
 800f09e:	d402      	bmi.n	800f0a6 <_vfiprintf_r+0x32>
 800f0a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0a2:	f000 fba5 	bl	800f7f0 <__retarget_lock_acquire_recursive>
 800f0a6:	89ab      	ldrh	r3, [r5, #12]
 800f0a8:	071b      	lsls	r3, r3, #28
 800f0aa:	d501      	bpl.n	800f0b0 <_vfiprintf_r+0x3c>
 800f0ac:	692b      	ldr	r3, [r5, #16]
 800f0ae:	b9eb      	cbnz	r3, 800f0ec <_vfiprintf_r+0x78>
 800f0b0:	4629      	mov	r1, r5
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	f000 f96e 	bl	800f394 <__swsetup_r>
 800f0b8:	b1c0      	cbz	r0, 800f0ec <_vfiprintf_r+0x78>
 800f0ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0bc:	07dc      	lsls	r4, r3, #31
 800f0be:	d50e      	bpl.n	800f0de <_vfiprintf_r+0x6a>
 800f0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c4:	b01d      	add	sp, #116	; 0x74
 800f0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ca:	4b7b      	ldr	r3, [pc, #492]	; (800f2b8 <_vfiprintf_r+0x244>)
 800f0cc:	429d      	cmp	r5, r3
 800f0ce:	d101      	bne.n	800f0d4 <_vfiprintf_r+0x60>
 800f0d0:	68b5      	ldr	r5, [r6, #8]
 800f0d2:	e7df      	b.n	800f094 <_vfiprintf_r+0x20>
 800f0d4:	4b79      	ldr	r3, [pc, #484]	; (800f2bc <_vfiprintf_r+0x248>)
 800f0d6:	429d      	cmp	r5, r3
 800f0d8:	bf08      	it	eq
 800f0da:	68f5      	ldreq	r5, [r6, #12]
 800f0dc:	e7da      	b.n	800f094 <_vfiprintf_r+0x20>
 800f0de:	89ab      	ldrh	r3, [r5, #12]
 800f0e0:	0598      	lsls	r0, r3, #22
 800f0e2:	d4ed      	bmi.n	800f0c0 <_vfiprintf_r+0x4c>
 800f0e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0e6:	f000 fb84 	bl	800f7f2 <__retarget_lock_release_recursive>
 800f0ea:	e7e9      	b.n	800f0c0 <_vfiprintf_r+0x4c>
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f0f0:	2320      	movs	r3, #32
 800f0f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0fa:	2330      	movs	r3, #48	; 0x30
 800f0fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f2c0 <_vfiprintf_r+0x24c>
 800f100:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f104:	f04f 0901 	mov.w	r9, #1
 800f108:	4623      	mov	r3, r4
 800f10a:	469a      	mov	sl, r3
 800f10c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f110:	b10a      	cbz	r2, 800f116 <_vfiprintf_r+0xa2>
 800f112:	2a25      	cmp	r2, #37	; 0x25
 800f114:	d1f9      	bne.n	800f10a <_vfiprintf_r+0x96>
 800f116:	ebba 0b04 	subs.w	fp, sl, r4
 800f11a:	d00b      	beq.n	800f134 <_vfiprintf_r+0xc0>
 800f11c:	465b      	mov	r3, fp
 800f11e:	4622      	mov	r2, r4
 800f120:	4629      	mov	r1, r5
 800f122:	4630      	mov	r0, r6
 800f124:	f7ff ff94 	bl	800f050 <__sfputs_r>
 800f128:	3001      	adds	r0, #1
 800f12a:	f000 80aa 	beq.w	800f282 <_vfiprintf_r+0x20e>
 800f12e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f130:	445a      	add	r2, fp
 800f132:	9209      	str	r2, [sp, #36]	; 0x24
 800f134:	f89a 3000 	ldrb.w	r3, [sl]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	f000 80a2 	beq.w	800f282 <_vfiprintf_r+0x20e>
 800f13e:	2300      	movs	r3, #0
 800f140:	f04f 32ff 	mov.w	r2, #4294967295
 800f144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f148:	f10a 0a01 	add.w	sl, sl, #1
 800f14c:	9304      	str	r3, [sp, #16]
 800f14e:	9307      	str	r3, [sp, #28]
 800f150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f154:	931a      	str	r3, [sp, #104]	; 0x68
 800f156:	4654      	mov	r4, sl
 800f158:	2205      	movs	r2, #5
 800f15a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f15e:	4858      	ldr	r0, [pc, #352]	; (800f2c0 <_vfiprintf_r+0x24c>)
 800f160:	f7f1 f846 	bl	80001f0 <memchr>
 800f164:	9a04      	ldr	r2, [sp, #16]
 800f166:	b9d8      	cbnz	r0, 800f1a0 <_vfiprintf_r+0x12c>
 800f168:	06d1      	lsls	r1, r2, #27
 800f16a:	bf44      	itt	mi
 800f16c:	2320      	movmi	r3, #32
 800f16e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f172:	0713      	lsls	r3, r2, #28
 800f174:	bf44      	itt	mi
 800f176:	232b      	movmi	r3, #43	; 0x2b
 800f178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f17c:	f89a 3000 	ldrb.w	r3, [sl]
 800f180:	2b2a      	cmp	r3, #42	; 0x2a
 800f182:	d015      	beq.n	800f1b0 <_vfiprintf_r+0x13c>
 800f184:	9a07      	ldr	r2, [sp, #28]
 800f186:	4654      	mov	r4, sl
 800f188:	2000      	movs	r0, #0
 800f18a:	f04f 0c0a 	mov.w	ip, #10
 800f18e:	4621      	mov	r1, r4
 800f190:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f194:	3b30      	subs	r3, #48	; 0x30
 800f196:	2b09      	cmp	r3, #9
 800f198:	d94e      	bls.n	800f238 <_vfiprintf_r+0x1c4>
 800f19a:	b1b0      	cbz	r0, 800f1ca <_vfiprintf_r+0x156>
 800f19c:	9207      	str	r2, [sp, #28]
 800f19e:	e014      	b.n	800f1ca <_vfiprintf_r+0x156>
 800f1a0:	eba0 0308 	sub.w	r3, r0, r8
 800f1a4:	fa09 f303 	lsl.w	r3, r9, r3
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	9304      	str	r3, [sp, #16]
 800f1ac:	46a2      	mov	sl, r4
 800f1ae:	e7d2      	b.n	800f156 <_vfiprintf_r+0xe2>
 800f1b0:	9b03      	ldr	r3, [sp, #12]
 800f1b2:	1d19      	adds	r1, r3, #4
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	9103      	str	r1, [sp, #12]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	bfbb      	ittet	lt
 800f1bc:	425b      	neglt	r3, r3
 800f1be:	f042 0202 	orrlt.w	r2, r2, #2
 800f1c2:	9307      	strge	r3, [sp, #28]
 800f1c4:	9307      	strlt	r3, [sp, #28]
 800f1c6:	bfb8      	it	lt
 800f1c8:	9204      	strlt	r2, [sp, #16]
 800f1ca:	7823      	ldrb	r3, [r4, #0]
 800f1cc:	2b2e      	cmp	r3, #46	; 0x2e
 800f1ce:	d10c      	bne.n	800f1ea <_vfiprintf_r+0x176>
 800f1d0:	7863      	ldrb	r3, [r4, #1]
 800f1d2:	2b2a      	cmp	r3, #42	; 0x2a
 800f1d4:	d135      	bne.n	800f242 <_vfiprintf_r+0x1ce>
 800f1d6:	9b03      	ldr	r3, [sp, #12]
 800f1d8:	1d1a      	adds	r2, r3, #4
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	9203      	str	r2, [sp, #12]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	bfb8      	it	lt
 800f1e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1e6:	3402      	adds	r4, #2
 800f1e8:	9305      	str	r3, [sp, #20]
 800f1ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f2d0 <_vfiprintf_r+0x25c>
 800f1ee:	7821      	ldrb	r1, [r4, #0]
 800f1f0:	2203      	movs	r2, #3
 800f1f2:	4650      	mov	r0, sl
 800f1f4:	f7f0 fffc 	bl	80001f0 <memchr>
 800f1f8:	b140      	cbz	r0, 800f20c <_vfiprintf_r+0x198>
 800f1fa:	2340      	movs	r3, #64	; 0x40
 800f1fc:	eba0 000a 	sub.w	r0, r0, sl
 800f200:	fa03 f000 	lsl.w	r0, r3, r0
 800f204:	9b04      	ldr	r3, [sp, #16]
 800f206:	4303      	orrs	r3, r0
 800f208:	3401      	adds	r4, #1
 800f20a:	9304      	str	r3, [sp, #16]
 800f20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f210:	482c      	ldr	r0, [pc, #176]	; (800f2c4 <_vfiprintf_r+0x250>)
 800f212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f216:	2206      	movs	r2, #6
 800f218:	f7f0 ffea 	bl	80001f0 <memchr>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	d03f      	beq.n	800f2a0 <_vfiprintf_r+0x22c>
 800f220:	4b29      	ldr	r3, [pc, #164]	; (800f2c8 <_vfiprintf_r+0x254>)
 800f222:	bb1b      	cbnz	r3, 800f26c <_vfiprintf_r+0x1f8>
 800f224:	9b03      	ldr	r3, [sp, #12]
 800f226:	3307      	adds	r3, #7
 800f228:	f023 0307 	bic.w	r3, r3, #7
 800f22c:	3308      	adds	r3, #8
 800f22e:	9303      	str	r3, [sp, #12]
 800f230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f232:	443b      	add	r3, r7
 800f234:	9309      	str	r3, [sp, #36]	; 0x24
 800f236:	e767      	b.n	800f108 <_vfiprintf_r+0x94>
 800f238:	fb0c 3202 	mla	r2, ip, r2, r3
 800f23c:	460c      	mov	r4, r1
 800f23e:	2001      	movs	r0, #1
 800f240:	e7a5      	b.n	800f18e <_vfiprintf_r+0x11a>
 800f242:	2300      	movs	r3, #0
 800f244:	3401      	adds	r4, #1
 800f246:	9305      	str	r3, [sp, #20]
 800f248:	4619      	mov	r1, r3
 800f24a:	f04f 0c0a 	mov.w	ip, #10
 800f24e:	4620      	mov	r0, r4
 800f250:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f254:	3a30      	subs	r2, #48	; 0x30
 800f256:	2a09      	cmp	r2, #9
 800f258:	d903      	bls.n	800f262 <_vfiprintf_r+0x1ee>
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d0c5      	beq.n	800f1ea <_vfiprintf_r+0x176>
 800f25e:	9105      	str	r1, [sp, #20]
 800f260:	e7c3      	b.n	800f1ea <_vfiprintf_r+0x176>
 800f262:	fb0c 2101 	mla	r1, ip, r1, r2
 800f266:	4604      	mov	r4, r0
 800f268:	2301      	movs	r3, #1
 800f26a:	e7f0      	b.n	800f24e <_vfiprintf_r+0x1da>
 800f26c:	ab03      	add	r3, sp, #12
 800f26e:	9300      	str	r3, [sp, #0]
 800f270:	462a      	mov	r2, r5
 800f272:	4b16      	ldr	r3, [pc, #88]	; (800f2cc <_vfiprintf_r+0x258>)
 800f274:	a904      	add	r1, sp, #16
 800f276:	4630      	mov	r0, r6
 800f278:	f7fd fdd8 	bl	800ce2c <_printf_float>
 800f27c:	4607      	mov	r7, r0
 800f27e:	1c78      	adds	r0, r7, #1
 800f280:	d1d6      	bne.n	800f230 <_vfiprintf_r+0x1bc>
 800f282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f284:	07d9      	lsls	r1, r3, #31
 800f286:	d405      	bmi.n	800f294 <_vfiprintf_r+0x220>
 800f288:	89ab      	ldrh	r3, [r5, #12]
 800f28a:	059a      	lsls	r2, r3, #22
 800f28c:	d402      	bmi.n	800f294 <_vfiprintf_r+0x220>
 800f28e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f290:	f000 faaf 	bl	800f7f2 <__retarget_lock_release_recursive>
 800f294:	89ab      	ldrh	r3, [r5, #12]
 800f296:	065b      	lsls	r3, r3, #25
 800f298:	f53f af12 	bmi.w	800f0c0 <_vfiprintf_r+0x4c>
 800f29c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f29e:	e711      	b.n	800f0c4 <_vfiprintf_r+0x50>
 800f2a0:	ab03      	add	r3, sp, #12
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	462a      	mov	r2, r5
 800f2a6:	4b09      	ldr	r3, [pc, #36]	; (800f2cc <_vfiprintf_r+0x258>)
 800f2a8:	a904      	add	r1, sp, #16
 800f2aa:	4630      	mov	r0, r6
 800f2ac:	f7fe f862 	bl	800d374 <_printf_i>
 800f2b0:	e7e4      	b.n	800f27c <_vfiprintf_r+0x208>
 800f2b2:	bf00      	nop
 800f2b4:	0801062c 	.word	0x0801062c
 800f2b8:	0801064c 	.word	0x0801064c
 800f2bc:	0801060c 	.word	0x0801060c
 800f2c0:	080104b4 	.word	0x080104b4
 800f2c4:	080104be 	.word	0x080104be
 800f2c8:	0800ce2d 	.word	0x0800ce2d
 800f2cc:	0800f051 	.word	0x0800f051
 800f2d0:	080104ba 	.word	0x080104ba

0800f2d4 <__swbuf_r>:
 800f2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2d6:	460e      	mov	r6, r1
 800f2d8:	4614      	mov	r4, r2
 800f2da:	4605      	mov	r5, r0
 800f2dc:	b118      	cbz	r0, 800f2e6 <__swbuf_r+0x12>
 800f2de:	6983      	ldr	r3, [r0, #24]
 800f2e0:	b90b      	cbnz	r3, 800f2e6 <__swbuf_r+0x12>
 800f2e2:	f000 f9e7 	bl	800f6b4 <__sinit>
 800f2e6:	4b21      	ldr	r3, [pc, #132]	; (800f36c <__swbuf_r+0x98>)
 800f2e8:	429c      	cmp	r4, r3
 800f2ea:	d12b      	bne.n	800f344 <__swbuf_r+0x70>
 800f2ec:	686c      	ldr	r4, [r5, #4]
 800f2ee:	69a3      	ldr	r3, [r4, #24]
 800f2f0:	60a3      	str	r3, [r4, #8]
 800f2f2:	89a3      	ldrh	r3, [r4, #12]
 800f2f4:	071a      	lsls	r2, r3, #28
 800f2f6:	d52f      	bpl.n	800f358 <__swbuf_r+0x84>
 800f2f8:	6923      	ldr	r3, [r4, #16]
 800f2fa:	b36b      	cbz	r3, 800f358 <__swbuf_r+0x84>
 800f2fc:	6923      	ldr	r3, [r4, #16]
 800f2fe:	6820      	ldr	r0, [r4, #0]
 800f300:	1ac0      	subs	r0, r0, r3
 800f302:	6963      	ldr	r3, [r4, #20]
 800f304:	b2f6      	uxtb	r6, r6
 800f306:	4283      	cmp	r3, r0
 800f308:	4637      	mov	r7, r6
 800f30a:	dc04      	bgt.n	800f316 <__swbuf_r+0x42>
 800f30c:	4621      	mov	r1, r4
 800f30e:	4628      	mov	r0, r5
 800f310:	f000 f93c 	bl	800f58c <_fflush_r>
 800f314:	bb30      	cbnz	r0, 800f364 <__swbuf_r+0x90>
 800f316:	68a3      	ldr	r3, [r4, #8]
 800f318:	3b01      	subs	r3, #1
 800f31a:	60a3      	str	r3, [r4, #8]
 800f31c:	6823      	ldr	r3, [r4, #0]
 800f31e:	1c5a      	adds	r2, r3, #1
 800f320:	6022      	str	r2, [r4, #0]
 800f322:	701e      	strb	r6, [r3, #0]
 800f324:	6963      	ldr	r3, [r4, #20]
 800f326:	3001      	adds	r0, #1
 800f328:	4283      	cmp	r3, r0
 800f32a:	d004      	beq.n	800f336 <__swbuf_r+0x62>
 800f32c:	89a3      	ldrh	r3, [r4, #12]
 800f32e:	07db      	lsls	r3, r3, #31
 800f330:	d506      	bpl.n	800f340 <__swbuf_r+0x6c>
 800f332:	2e0a      	cmp	r6, #10
 800f334:	d104      	bne.n	800f340 <__swbuf_r+0x6c>
 800f336:	4621      	mov	r1, r4
 800f338:	4628      	mov	r0, r5
 800f33a:	f000 f927 	bl	800f58c <_fflush_r>
 800f33e:	b988      	cbnz	r0, 800f364 <__swbuf_r+0x90>
 800f340:	4638      	mov	r0, r7
 800f342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f344:	4b0a      	ldr	r3, [pc, #40]	; (800f370 <__swbuf_r+0x9c>)
 800f346:	429c      	cmp	r4, r3
 800f348:	d101      	bne.n	800f34e <__swbuf_r+0x7a>
 800f34a:	68ac      	ldr	r4, [r5, #8]
 800f34c:	e7cf      	b.n	800f2ee <__swbuf_r+0x1a>
 800f34e:	4b09      	ldr	r3, [pc, #36]	; (800f374 <__swbuf_r+0xa0>)
 800f350:	429c      	cmp	r4, r3
 800f352:	bf08      	it	eq
 800f354:	68ec      	ldreq	r4, [r5, #12]
 800f356:	e7ca      	b.n	800f2ee <__swbuf_r+0x1a>
 800f358:	4621      	mov	r1, r4
 800f35a:	4628      	mov	r0, r5
 800f35c:	f000 f81a 	bl	800f394 <__swsetup_r>
 800f360:	2800      	cmp	r0, #0
 800f362:	d0cb      	beq.n	800f2fc <__swbuf_r+0x28>
 800f364:	f04f 37ff 	mov.w	r7, #4294967295
 800f368:	e7ea      	b.n	800f340 <__swbuf_r+0x6c>
 800f36a:	bf00      	nop
 800f36c:	0801062c 	.word	0x0801062c
 800f370:	0801064c 	.word	0x0801064c
 800f374:	0801060c 	.word	0x0801060c

0800f378 <__ascii_wctomb>:
 800f378:	b149      	cbz	r1, 800f38e <__ascii_wctomb+0x16>
 800f37a:	2aff      	cmp	r2, #255	; 0xff
 800f37c:	bf85      	ittet	hi
 800f37e:	238a      	movhi	r3, #138	; 0x8a
 800f380:	6003      	strhi	r3, [r0, #0]
 800f382:	700a      	strbls	r2, [r1, #0]
 800f384:	f04f 30ff 	movhi.w	r0, #4294967295
 800f388:	bf98      	it	ls
 800f38a:	2001      	movls	r0, #1
 800f38c:	4770      	bx	lr
 800f38e:	4608      	mov	r0, r1
 800f390:	4770      	bx	lr
	...

0800f394 <__swsetup_r>:
 800f394:	4b32      	ldr	r3, [pc, #200]	; (800f460 <__swsetup_r+0xcc>)
 800f396:	b570      	push	{r4, r5, r6, lr}
 800f398:	681d      	ldr	r5, [r3, #0]
 800f39a:	4606      	mov	r6, r0
 800f39c:	460c      	mov	r4, r1
 800f39e:	b125      	cbz	r5, 800f3aa <__swsetup_r+0x16>
 800f3a0:	69ab      	ldr	r3, [r5, #24]
 800f3a2:	b913      	cbnz	r3, 800f3aa <__swsetup_r+0x16>
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	f000 f985 	bl	800f6b4 <__sinit>
 800f3aa:	4b2e      	ldr	r3, [pc, #184]	; (800f464 <__swsetup_r+0xd0>)
 800f3ac:	429c      	cmp	r4, r3
 800f3ae:	d10f      	bne.n	800f3d0 <__swsetup_r+0x3c>
 800f3b0:	686c      	ldr	r4, [r5, #4]
 800f3b2:	89a3      	ldrh	r3, [r4, #12]
 800f3b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3b8:	0719      	lsls	r1, r3, #28
 800f3ba:	d42c      	bmi.n	800f416 <__swsetup_r+0x82>
 800f3bc:	06dd      	lsls	r5, r3, #27
 800f3be:	d411      	bmi.n	800f3e4 <__swsetup_r+0x50>
 800f3c0:	2309      	movs	r3, #9
 800f3c2:	6033      	str	r3, [r6, #0]
 800f3c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f3c8:	81a3      	strh	r3, [r4, #12]
 800f3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ce:	e03e      	b.n	800f44e <__swsetup_r+0xba>
 800f3d0:	4b25      	ldr	r3, [pc, #148]	; (800f468 <__swsetup_r+0xd4>)
 800f3d2:	429c      	cmp	r4, r3
 800f3d4:	d101      	bne.n	800f3da <__swsetup_r+0x46>
 800f3d6:	68ac      	ldr	r4, [r5, #8]
 800f3d8:	e7eb      	b.n	800f3b2 <__swsetup_r+0x1e>
 800f3da:	4b24      	ldr	r3, [pc, #144]	; (800f46c <__swsetup_r+0xd8>)
 800f3dc:	429c      	cmp	r4, r3
 800f3de:	bf08      	it	eq
 800f3e0:	68ec      	ldreq	r4, [r5, #12]
 800f3e2:	e7e6      	b.n	800f3b2 <__swsetup_r+0x1e>
 800f3e4:	0758      	lsls	r0, r3, #29
 800f3e6:	d512      	bpl.n	800f40e <__swsetup_r+0x7a>
 800f3e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3ea:	b141      	cbz	r1, 800f3fe <__swsetup_r+0x6a>
 800f3ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3f0:	4299      	cmp	r1, r3
 800f3f2:	d002      	beq.n	800f3fa <__swsetup_r+0x66>
 800f3f4:	4630      	mov	r0, r6
 800f3f6:	f7ff fb31 	bl	800ea5c <_free_r>
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	6363      	str	r3, [r4, #52]	; 0x34
 800f3fe:	89a3      	ldrh	r3, [r4, #12]
 800f400:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f404:	81a3      	strh	r3, [r4, #12]
 800f406:	2300      	movs	r3, #0
 800f408:	6063      	str	r3, [r4, #4]
 800f40a:	6923      	ldr	r3, [r4, #16]
 800f40c:	6023      	str	r3, [r4, #0]
 800f40e:	89a3      	ldrh	r3, [r4, #12]
 800f410:	f043 0308 	orr.w	r3, r3, #8
 800f414:	81a3      	strh	r3, [r4, #12]
 800f416:	6923      	ldr	r3, [r4, #16]
 800f418:	b94b      	cbnz	r3, 800f42e <__swsetup_r+0x9a>
 800f41a:	89a3      	ldrh	r3, [r4, #12]
 800f41c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f424:	d003      	beq.n	800f42e <__swsetup_r+0x9a>
 800f426:	4621      	mov	r1, r4
 800f428:	4630      	mov	r0, r6
 800f42a:	f000 fa09 	bl	800f840 <__smakebuf_r>
 800f42e:	89a0      	ldrh	r0, [r4, #12]
 800f430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f434:	f010 0301 	ands.w	r3, r0, #1
 800f438:	d00a      	beq.n	800f450 <__swsetup_r+0xbc>
 800f43a:	2300      	movs	r3, #0
 800f43c:	60a3      	str	r3, [r4, #8]
 800f43e:	6963      	ldr	r3, [r4, #20]
 800f440:	425b      	negs	r3, r3
 800f442:	61a3      	str	r3, [r4, #24]
 800f444:	6923      	ldr	r3, [r4, #16]
 800f446:	b943      	cbnz	r3, 800f45a <__swsetup_r+0xc6>
 800f448:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f44c:	d1ba      	bne.n	800f3c4 <__swsetup_r+0x30>
 800f44e:	bd70      	pop	{r4, r5, r6, pc}
 800f450:	0781      	lsls	r1, r0, #30
 800f452:	bf58      	it	pl
 800f454:	6963      	ldrpl	r3, [r4, #20]
 800f456:	60a3      	str	r3, [r4, #8]
 800f458:	e7f4      	b.n	800f444 <__swsetup_r+0xb0>
 800f45a:	2000      	movs	r0, #0
 800f45c:	e7f7      	b.n	800f44e <__swsetup_r+0xba>
 800f45e:	bf00      	nop
 800f460:	2000010c 	.word	0x2000010c
 800f464:	0801062c 	.word	0x0801062c
 800f468:	0801064c 	.word	0x0801064c
 800f46c:	0801060c 	.word	0x0801060c

0800f470 <abort>:
 800f470:	b508      	push	{r3, lr}
 800f472:	2006      	movs	r0, #6
 800f474:	f000 fa54 	bl	800f920 <raise>
 800f478:	2001      	movs	r0, #1
 800f47a:	f7f2 fc9f 	bl	8001dbc <_exit>
	...

0800f480 <__sflush_r>:
 800f480:	898a      	ldrh	r2, [r1, #12]
 800f482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f486:	4605      	mov	r5, r0
 800f488:	0710      	lsls	r0, r2, #28
 800f48a:	460c      	mov	r4, r1
 800f48c:	d458      	bmi.n	800f540 <__sflush_r+0xc0>
 800f48e:	684b      	ldr	r3, [r1, #4]
 800f490:	2b00      	cmp	r3, #0
 800f492:	dc05      	bgt.n	800f4a0 <__sflush_r+0x20>
 800f494:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f496:	2b00      	cmp	r3, #0
 800f498:	dc02      	bgt.n	800f4a0 <__sflush_r+0x20>
 800f49a:	2000      	movs	r0, #0
 800f49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4a2:	2e00      	cmp	r6, #0
 800f4a4:	d0f9      	beq.n	800f49a <__sflush_r+0x1a>
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f4ac:	682f      	ldr	r7, [r5, #0]
 800f4ae:	602b      	str	r3, [r5, #0]
 800f4b0:	d032      	beq.n	800f518 <__sflush_r+0x98>
 800f4b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	075a      	lsls	r2, r3, #29
 800f4b8:	d505      	bpl.n	800f4c6 <__sflush_r+0x46>
 800f4ba:	6863      	ldr	r3, [r4, #4]
 800f4bc:	1ac0      	subs	r0, r0, r3
 800f4be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4c0:	b10b      	cbz	r3, 800f4c6 <__sflush_r+0x46>
 800f4c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f4c4:	1ac0      	subs	r0, r0, r3
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4cc:	6a21      	ldr	r1, [r4, #32]
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	47b0      	blx	r6
 800f4d2:	1c43      	adds	r3, r0, #1
 800f4d4:	89a3      	ldrh	r3, [r4, #12]
 800f4d6:	d106      	bne.n	800f4e6 <__sflush_r+0x66>
 800f4d8:	6829      	ldr	r1, [r5, #0]
 800f4da:	291d      	cmp	r1, #29
 800f4dc:	d82c      	bhi.n	800f538 <__sflush_r+0xb8>
 800f4de:	4a2a      	ldr	r2, [pc, #168]	; (800f588 <__sflush_r+0x108>)
 800f4e0:	40ca      	lsrs	r2, r1
 800f4e2:	07d6      	lsls	r6, r2, #31
 800f4e4:	d528      	bpl.n	800f538 <__sflush_r+0xb8>
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	6062      	str	r2, [r4, #4]
 800f4ea:	04d9      	lsls	r1, r3, #19
 800f4ec:	6922      	ldr	r2, [r4, #16]
 800f4ee:	6022      	str	r2, [r4, #0]
 800f4f0:	d504      	bpl.n	800f4fc <__sflush_r+0x7c>
 800f4f2:	1c42      	adds	r2, r0, #1
 800f4f4:	d101      	bne.n	800f4fa <__sflush_r+0x7a>
 800f4f6:	682b      	ldr	r3, [r5, #0]
 800f4f8:	b903      	cbnz	r3, 800f4fc <__sflush_r+0x7c>
 800f4fa:	6560      	str	r0, [r4, #84]	; 0x54
 800f4fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4fe:	602f      	str	r7, [r5, #0]
 800f500:	2900      	cmp	r1, #0
 800f502:	d0ca      	beq.n	800f49a <__sflush_r+0x1a>
 800f504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f508:	4299      	cmp	r1, r3
 800f50a:	d002      	beq.n	800f512 <__sflush_r+0x92>
 800f50c:	4628      	mov	r0, r5
 800f50e:	f7ff faa5 	bl	800ea5c <_free_r>
 800f512:	2000      	movs	r0, #0
 800f514:	6360      	str	r0, [r4, #52]	; 0x34
 800f516:	e7c1      	b.n	800f49c <__sflush_r+0x1c>
 800f518:	6a21      	ldr	r1, [r4, #32]
 800f51a:	2301      	movs	r3, #1
 800f51c:	4628      	mov	r0, r5
 800f51e:	47b0      	blx	r6
 800f520:	1c41      	adds	r1, r0, #1
 800f522:	d1c7      	bne.n	800f4b4 <__sflush_r+0x34>
 800f524:	682b      	ldr	r3, [r5, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d0c4      	beq.n	800f4b4 <__sflush_r+0x34>
 800f52a:	2b1d      	cmp	r3, #29
 800f52c:	d001      	beq.n	800f532 <__sflush_r+0xb2>
 800f52e:	2b16      	cmp	r3, #22
 800f530:	d101      	bne.n	800f536 <__sflush_r+0xb6>
 800f532:	602f      	str	r7, [r5, #0]
 800f534:	e7b1      	b.n	800f49a <__sflush_r+0x1a>
 800f536:	89a3      	ldrh	r3, [r4, #12]
 800f538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f53c:	81a3      	strh	r3, [r4, #12]
 800f53e:	e7ad      	b.n	800f49c <__sflush_r+0x1c>
 800f540:	690f      	ldr	r7, [r1, #16]
 800f542:	2f00      	cmp	r7, #0
 800f544:	d0a9      	beq.n	800f49a <__sflush_r+0x1a>
 800f546:	0793      	lsls	r3, r2, #30
 800f548:	680e      	ldr	r6, [r1, #0]
 800f54a:	bf08      	it	eq
 800f54c:	694b      	ldreq	r3, [r1, #20]
 800f54e:	600f      	str	r7, [r1, #0]
 800f550:	bf18      	it	ne
 800f552:	2300      	movne	r3, #0
 800f554:	eba6 0807 	sub.w	r8, r6, r7
 800f558:	608b      	str	r3, [r1, #8]
 800f55a:	f1b8 0f00 	cmp.w	r8, #0
 800f55e:	dd9c      	ble.n	800f49a <__sflush_r+0x1a>
 800f560:	6a21      	ldr	r1, [r4, #32]
 800f562:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f564:	4643      	mov	r3, r8
 800f566:	463a      	mov	r2, r7
 800f568:	4628      	mov	r0, r5
 800f56a:	47b0      	blx	r6
 800f56c:	2800      	cmp	r0, #0
 800f56e:	dc06      	bgt.n	800f57e <__sflush_r+0xfe>
 800f570:	89a3      	ldrh	r3, [r4, #12]
 800f572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f576:	81a3      	strh	r3, [r4, #12]
 800f578:	f04f 30ff 	mov.w	r0, #4294967295
 800f57c:	e78e      	b.n	800f49c <__sflush_r+0x1c>
 800f57e:	4407      	add	r7, r0
 800f580:	eba8 0800 	sub.w	r8, r8, r0
 800f584:	e7e9      	b.n	800f55a <__sflush_r+0xda>
 800f586:	bf00      	nop
 800f588:	20400001 	.word	0x20400001

0800f58c <_fflush_r>:
 800f58c:	b538      	push	{r3, r4, r5, lr}
 800f58e:	690b      	ldr	r3, [r1, #16]
 800f590:	4605      	mov	r5, r0
 800f592:	460c      	mov	r4, r1
 800f594:	b913      	cbnz	r3, 800f59c <_fflush_r+0x10>
 800f596:	2500      	movs	r5, #0
 800f598:	4628      	mov	r0, r5
 800f59a:	bd38      	pop	{r3, r4, r5, pc}
 800f59c:	b118      	cbz	r0, 800f5a6 <_fflush_r+0x1a>
 800f59e:	6983      	ldr	r3, [r0, #24]
 800f5a0:	b90b      	cbnz	r3, 800f5a6 <_fflush_r+0x1a>
 800f5a2:	f000 f887 	bl	800f6b4 <__sinit>
 800f5a6:	4b14      	ldr	r3, [pc, #80]	; (800f5f8 <_fflush_r+0x6c>)
 800f5a8:	429c      	cmp	r4, r3
 800f5aa:	d11b      	bne.n	800f5e4 <_fflush_r+0x58>
 800f5ac:	686c      	ldr	r4, [r5, #4]
 800f5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d0ef      	beq.n	800f596 <_fflush_r+0xa>
 800f5b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5b8:	07d0      	lsls	r0, r2, #31
 800f5ba:	d404      	bmi.n	800f5c6 <_fflush_r+0x3a>
 800f5bc:	0599      	lsls	r1, r3, #22
 800f5be:	d402      	bmi.n	800f5c6 <_fflush_r+0x3a>
 800f5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5c2:	f000 f915 	bl	800f7f0 <__retarget_lock_acquire_recursive>
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	4621      	mov	r1, r4
 800f5ca:	f7ff ff59 	bl	800f480 <__sflush_r>
 800f5ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5d0:	07da      	lsls	r2, r3, #31
 800f5d2:	4605      	mov	r5, r0
 800f5d4:	d4e0      	bmi.n	800f598 <_fflush_r+0xc>
 800f5d6:	89a3      	ldrh	r3, [r4, #12]
 800f5d8:	059b      	lsls	r3, r3, #22
 800f5da:	d4dd      	bmi.n	800f598 <_fflush_r+0xc>
 800f5dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5de:	f000 f908 	bl	800f7f2 <__retarget_lock_release_recursive>
 800f5e2:	e7d9      	b.n	800f598 <_fflush_r+0xc>
 800f5e4:	4b05      	ldr	r3, [pc, #20]	; (800f5fc <_fflush_r+0x70>)
 800f5e6:	429c      	cmp	r4, r3
 800f5e8:	d101      	bne.n	800f5ee <_fflush_r+0x62>
 800f5ea:	68ac      	ldr	r4, [r5, #8]
 800f5ec:	e7df      	b.n	800f5ae <_fflush_r+0x22>
 800f5ee:	4b04      	ldr	r3, [pc, #16]	; (800f600 <_fflush_r+0x74>)
 800f5f0:	429c      	cmp	r4, r3
 800f5f2:	bf08      	it	eq
 800f5f4:	68ec      	ldreq	r4, [r5, #12]
 800f5f6:	e7da      	b.n	800f5ae <_fflush_r+0x22>
 800f5f8:	0801062c 	.word	0x0801062c
 800f5fc:	0801064c 	.word	0x0801064c
 800f600:	0801060c 	.word	0x0801060c

0800f604 <std>:
 800f604:	2300      	movs	r3, #0
 800f606:	b510      	push	{r4, lr}
 800f608:	4604      	mov	r4, r0
 800f60a:	e9c0 3300 	strd	r3, r3, [r0]
 800f60e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f612:	6083      	str	r3, [r0, #8]
 800f614:	8181      	strh	r1, [r0, #12]
 800f616:	6643      	str	r3, [r0, #100]	; 0x64
 800f618:	81c2      	strh	r2, [r0, #14]
 800f61a:	6183      	str	r3, [r0, #24]
 800f61c:	4619      	mov	r1, r3
 800f61e:	2208      	movs	r2, #8
 800f620:	305c      	adds	r0, #92	; 0x5c
 800f622:	f7fd fb5b 	bl	800ccdc <memset>
 800f626:	4b05      	ldr	r3, [pc, #20]	; (800f63c <std+0x38>)
 800f628:	6263      	str	r3, [r4, #36]	; 0x24
 800f62a:	4b05      	ldr	r3, [pc, #20]	; (800f640 <std+0x3c>)
 800f62c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f62e:	4b05      	ldr	r3, [pc, #20]	; (800f644 <std+0x40>)
 800f630:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f632:	4b05      	ldr	r3, [pc, #20]	; (800f648 <std+0x44>)
 800f634:	6224      	str	r4, [r4, #32]
 800f636:	6323      	str	r3, [r4, #48]	; 0x30
 800f638:	bd10      	pop	{r4, pc}
 800f63a:	bf00      	nop
 800f63c:	0800f959 	.word	0x0800f959
 800f640:	0800f97b 	.word	0x0800f97b
 800f644:	0800f9b3 	.word	0x0800f9b3
 800f648:	0800f9d7 	.word	0x0800f9d7

0800f64c <_cleanup_r>:
 800f64c:	4901      	ldr	r1, [pc, #4]	; (800f654 <_cleanup_r+0x8>)
 800f64e:	f000 b8af 	b.w	800f7b0 <_fwalk_reent>
 800f652:	bf00      	nop
 800f654:	0800f58d 	.word	0x0800f58d

0800f658 <__sfmoreglue>:
 800f658:	b570      	push	{r4, r5, r6, lr}
 800f65a:	2268      	movs	r2, #104	; 0x68
 800f65c:	1e4d      	subs	r5, r1, #1
 800f65e:	4355      	muls	r5, r2
 800f660:	460e      	mov	r6, r1
 800f662:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f666:	f7ff fa65 	bl	800eb34 <_malloc_r>
 800f66a:	4604      	mov	r4, r0
 800f66c:	b140      	cbz	r0, 800f680 <__sfmoreglue+0x28>
 800f66e:	2100      	movs	r1, #0
 800f670:	e9c0 1600 	strd	r1, r6, [r0]
 800f674:	300c      	adds	r0, #12
 800f676:	60a0      	str	r0, [r4, #8]
 800f678:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f67c:	f7fd fb2e 	bl	800ccdc <memset>
 800f680:	4620      	mov	r0, r4
 800f682:	bd70      	pop	{r4, r5, r6, pc}

0800f684 <__sfp_lock_acquire>:
 800f684:	4801      	ldr	r0, [pc, #4]	; (800f68c <__sfp_lock_acquire+0x8>)
 800f686:	f000 b8b3 	b.w	800f7f0 <__retarget_lock_acquire_recursive>
 800f68a:	bf00      	nop
 800f68c:	200021c1 	.word	0x200021c1

0800f690 <__sfp_lock_release>:
 800f690:	4801      	ldr	r0, [pc, #4]	; (800f698 <__sfp_lock_release+0x8>)
 800f692:	f000 b8ae 	b.w	800f7f2 <__retarget_lock_release_recursive>
 800f696:	bf00      	nop
 800f698:	200021c1 	.word	0x200021c1

0800f69c <__sinit_lock_acquire>:
 800f69c:	4801      	ldr	r0, [pc, #4]	; (800f6a4 <__sinit_lock_acquire+0x8>)
 800f69e:	f000 b8a7 	b.w	800f7f0 <__retarget_lock_acquire_recursive>
 800f6a2:	bf00      	nop
 800f6a4:	200021c2 	.word	0x200021c2

0800f6a8 <__sinit_lock_release>:
 800f6a8:	4801      	ldr	r0, [pc, #4]	; (800f6b0 <__sinit_lock_release+0x8>)
 800f6aa:	f000 b8a2 	b.w	800f7f2 <__retarget_lock_release_recursive>
 800f6ae:	bf00      	nop
 800f6b0:	200021c2 	.word	0x200021c2

0800f6b4 <__sinit>:
 800f6b4:	b510      	push	{r4, lr}
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	f7ff fff0 	bl	800f69c <__sinit_lock_acquire>
 800f6bc:	69a3      	ldr	r3, [r4, #24]
 800f6be:	b11b      	cbz	r3, 800f6c8 <__sinit+0x14>
 800f6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6c4:	f7ff bff0 	b.w	800f6a8 <__sinit_lock_release>
 800f6c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f6cc:	6523      	str	r3, [r4, #80]	; 0x50
 800f6ce:	4b13      	ldr	r3, [pc, #76]	; (800f71c <__sinit+0x68>)
 800f6d0:	4a13      	ldr	r2, [pc, #76]	; (800f720 <__sinit+0x6c>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f6d6:	42a3      	cmp	r3, r4
 800f6d8:	bf04      	itt	eq
 800f6da:	2301      	moveq	r3, #1
 800f6dc:	61a3      	streq	r3, [r4, #24]
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f000 f820 	bl	800f724 <__sfp>
 800f6e4:	6060      	str	r0, [r4, #4]
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	f000 f81c 	bl	800f724 <__sfp>
 800f6ec:	60a0      	str	r0, [r4, #8]
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	f000 f818 	bl	800f724 <__sfp>
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	60e0      	str	r0, [r4, #12]
 800f6f8:	2104      	movs	r1, #4
 800f6fa:	6860      	ldr	r0, [r4, #4]
 800f6fc:	f7ff ff82 	bl	800f604 <std>
 800f700:	68a0      	ldr	r0, [r4, #8]
 800f702:	2201      	movs	r2, #1
 800f704:	2109      	movs	r1, #9
 800f706:	f7ff ff7d 	bl	800f604 <std>
 800f70a:	68e0      	ldr	r0, [r4, #12]
 800f70c:	2202      	movs	r2, #2
 800f70e:	2112      	movs	r1, #18
 800f710:	f7ff ff78 	bl	800f604 <std>
 800f714:	2301      	movs	r3, #1
 800f716:	61a3      	str	r3, [r4, #24]
 800f718:	e7d2      	b.n	800f6c0 <__sinit+0xc>
 800f71a:	bf00      	nop
 800f71c:	08010290 	.word	0x08010290
 800f720:	0800f64d 	.word	0x0800f64d

0800f724 <__sfp>:
 800f724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f726:	4607      	mov	r7, r0
 800f728:	f7ff ffac 	bl	800f684 <__sfp_lock_acquire>
 800f72c:	4b1e      	ldr	r3, [pc, #120]	; (800f7a8 <__sfp+0x84>)
 800f72e:	681e      	ldr	r6, [r3, #0]
 800f730:	69b3      	ldr	r3, [r6, #24]
 800f732:	b913      	cbnz	r3, 800f73a <__sfp+0x16>
 800f734:	4630      	mov	r0, r6
 800f736:	f7ff ffbd 	bl	800f6b4 <__sinit>
 800f73a:	3648      	adds	r6, #72	; 0x48
 800f73c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f740:	3b01      	subs	r3, #1
 800f742:	d503      	bpl.n	800f74c <__sfp+0x28>
 800f744:	6833      	ldr	r3, [r6, #0]
 800f746:	b30b      	cbz	r3, 800f78c <__sfp+0x68>
 800f748:	6836      	ldr	r6, [r6, #0]
 800f74a:	e7f7      	b.n	800f73c <__sfp+0x18>
 800f74c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f750:	b9d5      	cbnz	r5, 800f788 <__sfp+0x64>
 800f752:	4b16      	ldr	r3, [pc, #88]	; (800f7ac <__sfp+0x88>)
 800f754:	60e3      	str	r3, [r4, #12]
 800f756:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f75a:	6665      	str	r5, [r4, #100]	; 0x64
 800f75c:	f000 f847 	bl	800f7ee <__retarget_lock_init_recursive>
 800f760:	f7ff ff96 	bl	800f690 <__sfp_lock_release>
 800f764:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f768:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f76c:	6025      	str	r5, [r4, #0]
 800f76e:	61a5      	str	r5, [r4, #24]
 800f770:	2208      	movs	r2, #8
 800f772:	4629      	mov	r1, r5
 800f774:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f778:	f7fd fab0 	bl	800ccdc <memset>
 800f77c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f780:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f784:	4620      	mov	r0, r4
 800f786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f788:	3468      	adds	r4, #104	; 0x68
 800f78a:	e7d9      	b.n	800f740 <__sfp+0x1c>
 800f78c:	2104      	movs	r1, #4
 800f78e:	4638      	mov	r0, r7
 800f790:	f7ff ff62 	bl	800f658 <__sfmoreglue>
 800f794:	4604      	mov	r4, r0
 800f796:	6030      	str	r0, [r6, #0]
 800f798:	2800      	cmp	r0, #0
 800f79a:	d1d5      	bne.n	800f748 <__sfp+0x24>
 800f79c:	f7ff ff78 	bl	800f690 <__sfp_lock_release>
 800f7a0:	230c      	movs	r3, #12
 800f7a2:	603b      	str	r3, [r7, #0]
 800f7a4:	e7ee      	b.n	800f784 <__sfp+0x60>
 800f7a6:	bf00      	nop
 800f7a8:	08010290 	.word	0x08010290
 800f7ac:	ffff0001 	.word	0xffff0001

0800f7b0 <_fwalk_reent>:
 800f7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7b4:	4606      	mov	r6, r0
 800f7b6:	4688      	mov	r8, r1
 800f7b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f7bc:	2700      	movs	r7, #0
 800f7be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f7c2:	f1b9 0901 	subs.w	r9, r9, #1
 800f7c6:	d505      	bpl.n	800f7d4 <_fwalk_reent+0x24>
 800f7c8:	6824      	ldr	r4, [r4, #0]
 800f7ca:	2c00      	cmp	r4, #0
 800f7cc:	d1f7      	bne.n	800f7be <_fwalk_reent+0xe>
 800f7ce:	4638      	mov	r0, r7
 800f7d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7d4:	89ab      	ldrh	r3, [r5, #12]
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	d907      	bls.n	800f7ea <_fwalk_reent+0x3a>
 800f7da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7de:	3301      	adds	r3, #1
 800f7e0:	d003      	beq.n	800f7ea <_fwalk_reent+0x3a>
 800f7e2:	4629      	mov	r1, r5
 800f7e4:	4630      	mov	r0, r6
 800f7e6:	47c0      	blx	r8
 800f7e8:	4307      	orrs	r7, r0
 800f7ea:	3568      	adds	r5, #104	; 0x68
 800f7ec:	e7e9      	b.n	800f7c2 <_fwalk_reent+0x12>

0800f7ee <__retarget_lock_init_recursive>:
 800f7ee:	4770      	bx	lr

0800f7f0 <__retarget_lock_acquire_recursive>:
 800f7f0:	4770      	bx	lr

0800f7f2 <__retarget_lock_release_recursive>:
 800f7f2:	4770      	bx	lr

0800f7f4 <__swhatbuf_r>:
 800f7f4:	b570      	push	{r4, r5, r6, lr}
 800f7f6:	460e      	mov	r6, r1
 800f7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7fc:	2900      	cmp	r1, #0
 800f7fe:	b096      	sub	sp, #88	; 0x58
 800f800:	4614      	mov	r4, r2
 800f802:	461d      	mov	r5, r3
 800f804:	da08      	bge.n	800f818 <__swhatbuf_r+0x24>
 800f806:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f80a:	2200      	movs	r2, #0
 800f80c:	602a      	str	r2, [r5, #0]
 800f80e:	061a      	lsls	r2, r3, #24
 800f810:	d410      	bmi.n	800f834 <__swhatbuf_r+0x40>
 800f812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f816:	e00e      	b.n	800f836 <__swhatbuf_r+0x42>
 800f818:	466a      	mov	r2, sp
 800f81a:	f000 f903 	bl	800fa24 <_fstat_r>
 800f81e:	2800      	cmp	r0, #0
 800f820:	dbf1      	blt.n	800f806 <__swhatbuf_r+0x12>
 800f822:	9a01      	ldr	r2, [sp, #4]
 800f824:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f828:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f82c:	425a      	negs	r2, r3
 800f82e:	415a      	adcs	r2, r3
 800f830:	602a      	str	r2, [r5, #0]
 800f832:	e7ee      	b.n	800f812 <__swhatbuf_r+0x1e>
 800f834:	2340      	movs	r3, #64	; 0x40
 800f836:	2000      	movs	r0, #0
 800f838:	6023      	str	r3, [r4, #0]
 800f83a:	b016      	add	sp, #88	; 0x58
 800f83c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f840 <__smakebuf_r>:
 800f840:	898b      	ldrh	r3, [r1, #12]
 800f842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f844:	079d      	lsls	r5, r3, #30
 800f846:	4606      	mov	r6, r0
 800f848:	460c      	mov	r4, r1
 800f84a:	d507      	bpl.n	800f85c <__smakebuf_r+0x1c>
 800f84c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f850:	6023      	str	r3, [r4, #0]
 800f852:	6123      	str	r3, [r4, #16]
 800f854:	2301      	movs	r3, #1
 800f856:	6163      	str	r3, [r4, #20]
 800f858:	b002      	add	sp, #8
 800f85a:	bd70      	pop	{r4, r5, r6, pc}
 800f85c:	ab01      	add	r3, sp, #4
 800f85e:	466a      	mov	r2, sp
 800f860:	f7ff ffc8 	bl	800f7f4 <__swhatbuf_r>
 800f864:	9900      	ldr	r1, [sp, #0]
 800f866:	4605      	mov	r5, r0
 800f868:	4630      	mov	r0, r6
 800f86a:	f7ff f963 	bl	800eb34 <_malloc_r>
 800f86e:	b948      	cbnz	r0, 800f884 <__smakebuf_r+0x44>
 800f870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f874:	059a      	lsls	r2, r3, #22
 800f876:	d4ef      	bmi.n	800f858 <__smakebuf_r+0x18>
 800f878:	f023 0303 	bic.w	r3, r3, #3
 800f87c:	f043 0302 	orr.w	r3, r3, #2
 800f880:	81a3      	strh	r3, [r4, #12]
 800f882:	e7e3      	b.n	800f84c <__smakebuf_r+0xc>
 800f884:	4b0d      	ldr	r3, [pc, #52]	; (800f8bc <__smakebuf_r+0x7c>)
 800f886:	62b3      	str	r3, [r6, #40]	; 0x28
 800f888:	89a3      	ldrh	r3, [r4, #12]
 800f88a:	6020      	str	r0, [r4, #0]
 800f88c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f890:	81a3      	strh	r3, [r4, #12]
 800f892:	9b00      	ldr	r3, [sp, #0]
 800f894:	6163      	str	r3, [r4, #20]
 800f896:	9b01      	ldr	r3, [sp, #4]
 800f898:	6120      	str	r0, [r4, #16]
 800f89a:	b15b      	cbz	r3, 800f8b4 <__smakebuf_r+0x74>
 800f89c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8a0:	4630      	mov	r0, r6
 800f8a2:	f000 f8d1 	bl	800fa48 <_isatty_r>
 800f8a6:	b128      	cbz	r0, 800f8b4 <__smakebuf_r+0x74>
 800f8a8:	89a3      	ldrh	r3, [r4, #12]
 800f8aa:	f023 0303 	bic.w	r3, r3, #3
 800f8ae:	f043 0301 	orr.w	r3, r3, #1
 800f8b2:	81a3      	strh	r3, [r4, #12]
 800f8b4:	89a0      	ldrh	r0, [r4, #12]
 800f8b6:	4305      	orrs	r5, r0
 800f8b8:	81a5      	strh	r5, [r4, #12]
 800f8ba:	e7cd      	b.n	800f858 <__smakebuf_r+0x18>
 800f8bc:	0800f64d 	.word	0x0800f64d

0800f8c0 <_malloc_usable_size_r>:
 800f8c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8c4:	1f18      	subs	r0, r3, #4
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	bfbc      	itt	lt
 800f8ca:	580b      	ldrlt	r3, [r1, r0]
 800f8cc:	18c0      	addlt	r0, r0, r3
 800f8ce:	4770      	bx	lr

0800f8d0 <_raise_r>:
 800f8d0:	291f      	cmp	r1, #31
 800f8d2:	b538      	push	{r3, r4, r5, lr}
 800f8d4:	4604      	mov	r4, r0
 800f8d6:	460d      	mov	r5, r1
 800f8d8:	d904      	bls.n	800f8e4 <_raise_r+0x14>
 800f8da:	2316      	movs	r3, #22
 800f8dc:	6003      	str	r3, [r0, #0]
 800f8de:	f04f 30ff 	mov.w	r0, #4294967295
 800f8e2:	bd38      	pop	{r3, r4, r5, pc}
 800f8e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f8e6:	b112      	cbz	r2, 800f8ee <_raise_r+0x1e>
 800f8e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8ec:	b94b      	cbnz	r3, 800f902 <_raise_r+0x32>
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f000 f830 	bl	800f954 <_getpid_r>
 800f8f4:	462a      	mov	r2, r5
 800f8f6:	4601      	mov	r1, r0
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8fe:	f000 b817 	b.w	800f930 <_kill_r>
 800f902:	2b01      	cmp	r3, #1
 800f904:	d00a      	beq.n	800f91c <_raise_r+0x4c>
 800f906:	1c59      	adds	r1, r3, #1
 800f908:	d103      	bne.n	800f912 <_raise_r+0x42>
 800f90a:	2316      	movs	r3, #22
 800f90c:	6003      	str	r3, [r0, #0]
 800f90e:	2001      	movs	r0, #1
 800f910:	e7e7      	b.n	800f8e2 <_raise_r+0x12>
 800f912:	2400      	movs	r4, #0
 800f914:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f918:	4628      	mov	r0, r5
 800f91a:	4798      	blx	r3
 800f91c:	2000      	movs	r0, #0
 800f91e:	e7e0      	b.n	800f8e2 <_raise_r+0x12>

0800f920 <raise>:
 800f920:	4b02      	ldr	r3, [pc, #8]	; (800f92c <raise+0xc>)
 800f922:	4601      	mov	r1, r0
 800f924:	6818      	ldr	r0, [r3, #0]
 800f926:	f7ff bfd3 	b.w	800f8d0 <_raise_r>
 800f92a:	bf00      	nop
 800f92c:	2000010c 	.word	0x2000010c

0800f930 <_kill_r>:
 800f930:	b538      	push	{r3, r4, r5, lr}
 800f932:	4d07      	ldr	r5, [pc, #28]	; (800f950 <_kill_r+0x20>)
 800f934:	2300      	movs	r3, #0
 800f936:	4604      	mov	r4, r0
 800f938:	4608      	mov	r0, r1
 800f93a:	4611      	mov	r1, r2
 800f93c:	602b      	str	r3, [r5, #0]
 800f93e:	f7f2 fa2d 	bl	8001d9c <_kill>
 800f942:	1c43      	adds	r3, r0, #1
 800f944:	d102      	bne.n	800f94c <_kill_r+0x1c>
 800f946:	682b      	ldr	r3, [r5, #0]
 800f948:	b103      	cbz	r3, 800f94c <_kill_r+0x1c>
 800f94a:	6023      	str	r3, [r4, #0]
 800f94c:	bd38      	pop	{r3, r4, r5, pc}
 800f94e:	bf00      	nop
 800f950:	200021bc 	.word	0x200021bc

0800f954 <_getpid_r>:
 800f954:	f7f2 ba1a 	b.w	8001d8c <_getpid>

0800f958 <__sread>:
 800f958:	b510      	push	{r4, lr}
 800f95a:	460c      	mov	r4, r1
 800f95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f960:	f000 f894 	bl	800fa8c <_read_r>
 800f964:	2800      	cmp	r0, #0
 800f966:	bfab      	itete	ge
 800f968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f96a:	89a3      	ldrhlt	r3, [r4, #12]
 800f96c:	181b      	addge	r3, r3, r0
 800f96e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f972:	bfac      	ite	ge
 800f974:	6563      	strge	r3, [r4, #84]	; 0x54
 800f976:	81a3      	strhlt	r3, [r4, #12]
 800f978:	bd10      	pop	{r4, pc}

0800f97a <__swrite>:
 800f97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f97e:	461f      	mov	r7, r3
 800f980:	898b      	ldrh	r3, [r1, #12]
 800f982:	05db      	lsls	r3, r3, #23
 800f984:	4605      	mov	r5, r0
 800f986:	460c      	mov	r4, r1
 800f988:	4616      	mov	r6, r2
 800f98a:	d505      	bpl.n	800f998 <__swrite+0x1e>
 800f98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f990:	2302      	movs	r3, #2
 800f992:	2200      	movs	r2, #0
 800f994:	f000 f868 	bl	800fa68 <_lseek_r>
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f99e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9a2:	81a3      	strh	r3, [r4, #12]
 800f9a4:	4632      	mov	r2, r6
 800f9a6:	463b      	mov	r3, r7
 800f9a8:	4628      	mov	r0, r5
 800f9aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ae:	f000 b817 	b.w	800f9e0 <_write_r>

0800f9b2 <__sseek>:
 800f9b2:	b510      	push	{r4, lr}
 800f9b4:	460c      	mov	r4, r1
 800f9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ba:	f000 f855 	bl	800fa68 <_lseek_r>
 800f9be:	1c43      	adds	r3, r0, #1
 800f9c0:	89a3      	ldrh	r3, [r4, #12]
 800f9c2:	bf15      	itete	ne
 800f9c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9ce:	81a3      	strheq	r3, [r4, #12]
 800f9d0:	bf18      	it	ne
 800f9d2:	81a3      	strhne	r3, [r4, #12]
 800f9d4:	bd10      	pop	{r4, pc}

0800f9d6 <__sclose>:
 800f9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9da:	f000 b813 	b.w	800fa04 <_close_r>
	...

0800f9e0 <_write_r>:
 800f9e0:	b538      	push	{r3, r4, r5, lr}
 800f9e2:	4d07      	ldr	r5, [pc, #28]	; (800fa00 <_write_r+0x20>)
 800f9e4:	4604      	mov	r4, r0
 800f9e6:	4608      	mov	r0, r1
 800f9e8:	4611      	mov	r1, r2
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	602a      	str	r2, [r5, #0]
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	f7f2 fa0b 	bl	8001e0a <_write>
 800f9f4:	1c43      	adds	r3, r0, #1
 800f9f6:	d102      	bne.n	800f9fe <_write_r+0x1e>
 800f9f8:	682b      	ldr	r3, [r5, #0]
 800f9fa:	b103      	cbz	r3, 800f9fe <_write_r+0x1e>
 800f9fc:	6023      	str	r3, [r4, #0]
 800f9fe:	bd38      	pop	{r3, r4, r5, pc}
 800fa00:	200021bc 	.word	0x200021bc

0800fa04 <_close_r>:
 800fa04:	b538      	push	{r3, r4, r5, lr}
 800fa06:	4d06      	ldr	r5, [pc, #24]	; (800fa20 <_close_r+0x1c>)
 800fa08:	2300      	movs	r3, #0
 800fa0a:	4604      	mov	r4, r0
 800fa0c:	4608      	mov	r0, r1
 800fa0e:	602b      	str	r3, [r5, #0]
 800fa10:	f7f2 fa17 	bl	8001e42 <_close>
 800fa14:	1c43      	adds	r3, r0, #1
 800fa16:	d102      	bne.n	800fa1e <_close_r+0x1a>
 800fa18:	682b      	ldr	r3, [r5, #0]
 800fa1a:	b103      	cbz	r3, 800fa1e <_close_r+0x1a>
 800fa1c:	6023      	str	r3, [r4, #0]
 800fa1e:	bd38      	pop	{r3, r4, r5, pc}
 800fa20:	200021bc 	.word	0x200021bc

0800fa24 <_fstat_r>:
 800fa24:	b538      	push	{r3, r4, r5, lr}
 800fa26:	4d07      	ldr	r5, [pc, #28]	; (800fa44 <_fstat_r+0x20>)
 800fa28:	2300      	movs	r3, #0
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	4608      	mov	r0, r1
 800fa2e:	4611      	mov	r1, r2
 800fa30:	602b      	str	r3, [r5, #0]
 800fa32:	f7f2 fa12 	bl	8001e5a <_fstat>
 800fa36:	1c43      	adds	r3, r0, #1
 800fa38:	d102      	bne.n	800fa40 <_fstat_r+0x1c>
 800fa3a:	682b      	ldr	r3, [r5, #0]
 800fa3c:	b103      	cbz	r3, 800fa40 <_fstat_r+0x1c>
 800fa3e:	6023      	str	r3, [r4, #0]
 800fa40:	bd38      	pop	{r3, r4, r5, pc}
 800fa42:	bf00      	nop
 800fa44:	200021bc 	.word	0x200021bc

0800fa48 <_isatty_r>:
 800fa48:	b538      	push	{r3, r4, r5, lr}
 800fa4a:	4d06      	ldr	r5, [pc, #24]	; (800fa64 <_isatty_r+0x1c>)
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	4604      	mov	r4, r0
 800fa50:	4608      	mov	r0, r1
 800fa52:	602b      	str	r3, [r5, #0]
 800fa54:	f7f2 fa11 	bl	8001e7a <_isatty>
 800fa58:	1c43      	adds	r3, r0, #1
 800fa5a:	d102      	bne.n	800fa62 <_isatty_r+0x1a>
 800fa5c:	682b      	ldr	r3, [r5, #0]
 800fa5e:	b103      	cbz	r3, 800fa62 <_isatty_r+0x1a>
 800fa60:	6023      	str	r3, [r4, #0]
 800fa62:	bd38      	pop	{r3, r4, r5, pc}
 800fa64:	200021bc 	.word	0x200021bc

0800fa68 <_lseek_r>:
 800fa68:	b538      	push	{r3, r4, r5, lr}
 800fa6a:	4d07      	ldr	r5, [pc, #28]	; (800fa88 <_lseek_r+0x20>)
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	4608      	mov	r0, r1
 800fa70:	4611      	mov	r1, r2
 800fa72:	2200      	movs	r2, #0
 800fa74:	602a      	str	r2, [r5, #0]
 800fa76:	461a      	mov	r2, r3
 800fa78:	f7f2 fa0a 	bl	8001e90 <_lseek>
 800fa7c:	1c43      	adds	r3, r0, #1
 800fa7e:	d102      	bne.n	800fa86 <_lseek_r+0x1e>
 800fa80:	682b      	ldr	r3, [r5, #0]
 800fa82:	b103      	cbz	r3, 800fa86 <_lseek_r+0x1e>
 800fa84:	6023      	str	r3, [r4, #0]
 800fa86:	bd38      	pop	{r3, r4, r5, pc}
 800fa88:	200021bc 	.word	0x200021bc

0800fa8c <_read_r>:
 800fa8c:	b538      	push	{r3, r4, r5, lr}
 800fa8e:	4d07      	ldr	r5, [pc, #28]	; (800faac <_read_r+0x20>)
 800fa90:	4604      	mov	r4, r0
 800fa92:	4608      	mov	r0, r1
 800fa94:	4611      	mov	r1, r2
 800fa96:	2200      	movs	r2, #0
 800fa98:	602a      	str	r2, [r5, #0]
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	f7f2 f998 	bl	8001dd0 <_read>
 800faa0:	1c43      	adds	r3, r0, #1
 800faa2:	d102      	bne.n	800faaa <_read_r+0x1e>
 800faa4:	682b      	ldr	r3, [r5, #0]
 800faa6:	b103      	cbz	r3, 800faaa <_read_r+0x1e>
 800faa8:	6023      	str	r3, [r4, #0]
 800faaa:	bd38      	pop	{r3, r4, r5, pc}
 800faac:	200021bc 	.word	0x200021bc

0800fab0 <atan2>:
 800fab0:	f000 b82e 	b.w	800fb10 <__ieee754_atan2>

0800fab4 <sqrt>:
 800fab4:	b538      	push	{r3, r4, r5, lr}
 800fab6:	ed2d 8b02 	vpush	{d8}
 800faba:	ec55 4b10 	vmov	r4, r5, d0
 800fabe:	f000 f8f1 	bl	800fca4 <__ieee754_sqrt>
 800fac2:	4622      	mov	r2, r4
 800fac4:	462b      	mov	r3, r5
 800fac6:	4620      	mov	r0, r4
 800fac8:	4629      	mov	r1, r5
 800faca:	eeb0 8a40 	vmov.f32	s16, s0
 800face:	eef0 8a60 	vmov.f32	s17, s1
 800fad2:	f7f1 f833 	bl	8000b3c <__aeabi_dcmpun>
 800fad6:	b990      	cbnz	r0, 800fafe <sqrt+0x4a>
 800fad8:	2200      	movs	r2, #0
 800fada:	2300      	movs	r3, #0
 800fadc:	4620      	mov	r0, r4
 800fade:	4629      	mov	r1, r5
 800fae0:	f7f1 f804 	bl	8000aec <__aeabi_dcmplt>
 800fae4:	b158      	cbz	r0, 800fafe <sqrt+0x4a>
 800fae6:	f7fd f8cf 	bl	800cc88 <__errno>
 800faea:	2321      	movs	r3, #33	; 0x21
 800faec:	6003      	str	r3, [r0, #0]
 800faee:	2200      	movs	r2, #0
 800faf0:	2300      	movs	r3, #0
 800faf2:	4610      	mov	r0, r2
 800faf4:	4619      	mov	r1, r3
 800faf6:	f7f0 feb1 	bl	800085c <__aeabi_ddiv>
 800fafa:	ec41 0b18 	vmov	d8, r0, r1
 800fafe:	eeb0 0a48 	vmov.f32	s0, s16
 800fb02:	eef0 0a68 	vmov.f32	s1, s17
 800fb06:	ecbd 8b02 	vpop	{d8}
 800fb0a:	bd38      	pop	{r3, r4, r5, pc}
 800fb0c:	0000      	movs	r0, r0
	...

0800fb10 <__ieee754_atan2>:
 800fb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb14:	ec57 6b11 	vmov	r6, r7, d1
 800fb18:	4273      	negs	r3, r6
 800fb1a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800fca0 <__ieee754_atan2+0x190>
 800fb1e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fb22:	4333      	orrs	r3, r6
 800fb24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fb28:	4573      	cmp	r3, lr
 800fb2a:	ec51 0b10 	vmov	r0, r1, d0
 800fb2e:	ee11 8a10 	vmov	r8, s2
 800fb32:	d80a      	bhi.n	800fb4a <__ieee754_atan2+0x3a>
 800fb34:	4244      	negs	r4, r0
 800fb36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fb3a:	4304      	orrs	r4, r0
 800fb3c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fb40:	4574      	cmp	r4, lr
 800fb42:	ee10 9a10 	vmov	r9, s0
 800fb46:	468c      	mov	ip, r1
 800fb48:	d907      	bls.n	800fb5a <__ieee754_atan2+0x4a>
 800fb4a:	4632      	mov	r2, r6
 800fb4c:	463b      	mov	r3, r7
 800fb4e:	f7f0 fba5 	bl	800029c <__adddf3>
 800fb52:	ec41 0b10 	vmov	d0, r0, r1
 800fb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb5a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800fb5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fb62:	4334      	orrs	r4, r6
 800fb64:	d103      	bne.n	800fb6e <__ieee754_atan2+0x5e>
 800fb66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb6a:	f000 b94d 	b.w	800fe08 <atan>
 800fb6e:	17bc      	asrs	r4, r7, #30
 800fb70:	f004 0402 	and.w	r4, r4, #2
 800fb74:	ea53 0909 	orrs.w	r9, r3, r9
 800fb78:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fb7c:	d107      	bne.n	800fb8e <__ieee754_atan2+0x7e>
 800fb7e:	2c02      	cmp	r4, #2
 800fb80:	d060      	beq.n	800fc44 <__ieee754_atan2+0x134>
 800fb82:	2c03      	cmp	r4, #3
 800fb84:	d1e5      	bne.n	800fb52 <__ieee754_atan2+0x42>
 800fb86:	a142      	add	r1, pc, #264	; (adr r1, 800fc90 <__ieee754_atan2+0x180>)
 800fb88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb8c:	e7e1      	b.n	800fb52 <__ieee754_atan2+0x42>
 800fb8e:	ea52 0808 	orrs.w	r8, r2, r8
 800fb92:	d106      	bne.n	800fba2 <__ieee754_atan2+0x92>
 800fb94:	f1bc 0f00 	cmp.w	ip, #0
 800fb98:	da5f      	bge.n	800fc5a <__ieee754_atan2+0x14a>
 800fb9a:	a13f      	add	r1, pc, #252	; (adr r1, 800fc98 <__ieee754_atan2+0x188>)
 800fb9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fba0:	e7d7      	b.n	800fb52 <__ieee754_atan2+0x42>
 800fba2:	4572      	cmp	r2, lr
 800fba4:	d10f      	bne.n	800fbc6 <__ieee754_atan2+0xb6>
 800fba6:	4293      	cmp	r3, r2
 800fba8:	f104 34ff 	add.w	r4, r4, #4294967295
 800fbac:	d107      	bne.n	800fbbe <__ieee754_atan2+0xae>
 800fbae:	2c02      	cmp	r4, #2
 800fbb0:	d84c      	bhi.n	800fc4c <__ieee754_atan2+0x13c>
 800fbb2:	4b35      	ldr	r3, [pc, #212]	; (800fc88 <__ieee754_atan2+0x178>)
 800fbb4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800fbb8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fbbc:	e7c9      	b.n	800fb52 <__ieee754_atan2+0x42>
 800fbbe:	2c02      	cmp	r4, #2
 800fbc0:	d848      	bhi.n	800fc54 <__ieee754_atan2+0x144>
 800fbc2:	4b32      	ldr	r3, [pc, #200]	; (800fc8c <__ieee754_atan2+0x17c>)
 800fbc4:	e7f6      	b.n	800fbb4 <__ieee754_atan2+0xa4>
 800fbc6:	4573      	cmp	r3, lr
 800fbc8:	d0e4      	beq.n	800fb94 <__ieee754_atan2+0x84>
 800fbca:	1a9b      	subs	r3, r3, r2
 800fbcc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800fbd0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fbd4:	da1e      	bge.n	800fc14 <__ieee754_atan2+0x104>
 800fbd6:	2f00      	cmp	r7, #0
 800fbd8:	da01      	bge.n	800fbde <__ieee754_atan2+0xce>
 800fbda:	323c      	adds	r2, #60	; 0x3c
 800fbdc:	db1e      	blt.n	800fc1c <__ieee754_atan2+0x10c>
 800fbde:	4632      	mov	r2, r6
 800fbe0:	463b      	mov	r3, r7
 800fbe2:	f7f0 fe3b 	bl	800085c <__aeabi_ddiv>
 800fbe6:	ec41 0b10 	vmov	d0, r0, r1
 800fbea:	f000 faad 	bl	8010148 <fabs>
 800fbee:	f000 f90b 	bl	800fe08 <atan>
 800fbf2:	ec51 0b10 	vmov	r0, r1, d0
 800fbf6:	2c01      	cmp	r4, #1
 800fbf8:	d013      	beq.n	800fc22 <__ieee754_atan2+0x112>
 800fbfa:	2c02      	cmp	r4, #2
 800fbfc:	d015      	beq.n	800fc2a <__ieee754_atan2+0x11a>
 800fbfe:	2c00      	cmp	r4, #0
 800fc00:	d0a7      	beq.n	800fb52 <__ieee754_atan2+0x42>
 800fc02:	a319      	add	r3, pc, #100	; (adr r3, 800fc68 <__ieee754_atan2+0x158>)
 800fc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc08:	f7f0 fb46 	bl	8000298 <__aeabi_dsub>
 800fc0c:	a318      	add	r3, pc, #96	; (adr r3, 800fc70 <__ieee754_atan2+0x160>)
 800fc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc12:	e014      	b.n	800fc3e <__ieee754_atan2+0x12e>
 800fc14:	a118      	add	r1, pc, #96	; (adr r1, 800fc78 <__ieee754_atan2+0x168>)
 800fc16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc1a:	e7ec      	b.n	800fbf6 <__ieee754_atan2+0xe6>
 800fc1c:	2000      	movs	r0, #0
 800fc1e:	2100      	movs	r1, #0
 800fc20:	e7e9      	b.n	800fbf6 <__ieee754_atan2+0xe6>
 800fc22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc26:	4619      	mov	r1, r3
 800fc28:	e793      	b.n	800fb52 <__ieee754_atan2+0x42>
 800fc2a:	a30f      	add	r3, pc, #60	; (adr r3, 800fc68 <__ieee754_atan2+0x158>)
 800fc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc30:	f7f0 fb32 	bl	8000298 <__aeabi_dsub>
 800fc34:	4602      	mov	r2, r0
 800fc36:	460b      	mov	r3, r1
 800fc38:	a10d      	add	r1, pc, #52	; (adr r1, 800fc70 <__ieee754_atan2+0x160>)
 800fc3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc3e:	f7f0 fb2b 	bl	8000298 <__aeabi_dsub>
 800fc42:	e786      	b.n	800fb52 <__ieee754_atan2+0x42>
 800fc44:	a10a      	add	r1, pc, #40	; (adr r1, 800fc70 <__ieee754_atan2+0x160>)
 800fc46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc4a:	e782      	b.n	800fb52 <__ieee754_atan2+0x42>
 800fc4c:	a10c      	add	r1, pc, #48	; (adr r1, 800fc80 <__ieee754_atan2+0x170>)
 800fc4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc52:	e77e      	b.n	800fb52 <__ieee754_atan2+0x42>
 800fc54:	2000      	movs	r0, #0
 800fc56:	2100      	movs	r1, #0
 800fc58:	e77b      	b.n	800fb52 <__ieee754_atan2+0x42>
 800fc5a:	a107      	add	r1, pc, #28	; (adr r1, 800fc78 <__ieee754_atan2+0x168>)
 800fc5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc60:	e777      	b.n	800fb52 <__ieee754_atan2+0x42>
 800fc62:	bf00      	nop
 800fc64:	f3af 8000 	nop.w
 800fc68:	33145c07 	.word	0x33145c07
 800fc6c:	3ca1a626 	.word	0x3ca1a626
 800fc70:	54442d18 	.word	0x54442d18
 800fc74:	400921fb 	.word	0x400921fb
 800fc78:	54442d18 	.word	0x54442d18
 800fc7c:	3ff921fb 	.word	0x3ff921fb
 800fc80:	54442d18 	.word	0x54442d18
 800fc84:	3fe921fb 	.word	0x3fe921fb
 800fc88:	08010670 	.word	0x08010670
 800fc8c:	08010688 	.word	0x08010688
 800fc90:	54442d18 	.word	0x54442d18
 800fc94:	c00921fb 	.word	0xc00921fb
 800fc98:	54442d18 	.word	0x54442d18
 800fc9c:	bff921fb 	.word	0xbff921fb
 800fca0:	7ff00000 	.word	0x7ff00000

0800fca4 <__ieee754_sqrt>:
 800fca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca8:	ec55 4b10 	vmov	r4, r5, d0
 800fcac:	4e55      	ldr	r6, [pc, #340]	; (800fe04 <__ieee754_sqrt+0x160>)
 800fcae:	43ae      	bics	r6, r5
 800fcb0:	ee10 0a10 	vmov	r0, s0
 800fcb4:	ee10 3a10 	vmov	r3, s0
 800fcb8:	462a      	mov	r2, r5
 800fcba:	4629      	mov	r1, r5
 800fcbc:	d110      	bne.n	800fce0 <__ieee754_sqrt+0x3c>
 800fcbe:	ee10 2a10 	vmov	r2, s0
 800fcc2:	462b      	mov	r3, r5
 800fcc4:	f7f0 fca0 	bl	8000608 <__aeabi_dmul>
 800fcc8:	4602      	mov	r2, r0
 800fcca:	460b      	mov	r3, r1
 800fccc:	4620      	mov	r0, r4
 800fcce:	4629      	mov	r1, r5
 800fcd0:	f7f0 fae4 	bl	800029c <__adddf3>
 800fcd4:	4604      	mov	r4, r0
 800fcd6:	460d      	mov	r5, r1
 800fcd8:	ec45 4b10 	vmov	d0, r4, r5
 800fcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fce0:	2d00      	cmp	r5, #0
 800fce2:	dc10      	bgt.n	800fd06 <__ieee754_sqrt+0x62>
 800fce4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fce8:	4330      	orrs	r0, r6
 800fcea:	d0f5      	beq.n	800fcd8 <__ieee754_sqrt+0x34>
 800fcec:	b15d      	cbz	r5, 800fd06 <__ieee754_sqrt+0x62>
 800fcee:	ee10 2a10 	vmov	r2, s0
 800fcf2:	462b      	mov	r3, r5
 800fcf4:	ee10 0a10 	vmov	r0, s0
 800fcf8:	f7f0 face 	bl	8000298 <__aeabi_dsub>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	460b      	mov	r3, r1
 800fd00:	f7f0 fdac 	bl	800085c <__aeabi_ddiv>
 800fd04:	e7e6      	b.n	800fcd4 <__ieee754_sqrt+0x30>
 800fd06:	1512      	asrs	r2, r2, #20
 800fd08:	d074      	beq.n	800fdf4 <__ieee754_sqrt+0x150>
 800fd0a:	07d4      	lsls	r4, r2, #31
 800fd0c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fd10:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fd14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fd18:	bf5e      	ittt	pl
 800fd1a:	0fda      	lsrpl	r2, r3, #31
 800fd1c:	005b      	lslpl	r3, r3, #1
 800fd1e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fd22:	2400      	movs	r4, #0
 800fd24:	0fda      	lsrs	r2, r3, #31
 800fd26:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fd2a:	107f      	asrs	r7, r7, #1
 800fd2c:	005b      	lsls	r3, r3, #1
 800fd2e:	2516      	movs	r5, #22
 800fd30:	4620      	mov	r0, r4
 800fd32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fd36:	1886      	adds	r6, r0, r2
 800fd38:	428e      	cmp	r6, r1
 800fd3a:	bfde      	ittt	le
 800fd3c:	1b89      	suble	r1, r1, r6
 800fd3e:	18b0      	addle	r0, r6, r2
 800fd40:	18a4      	addle	r4, r4, r2
 800fd42:	0049      	lsls	r1, r1, #1
 800fd44:	3d01      	subs	r5, #1
 800fd46:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800fd4a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fd4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fd52:	d1f0      	bne.n	800fd36 <__ieee754_sqrt+0x92>
 800fd54:	462a      	mov	r2, r5
 800fd56:	f04f 0e20 	mov.w	lr, #32
 800fd5a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fd5e:	4281      	cmp	r1, r0
 800fd60:	eb06 0c05 	add.w	ip, r6, r5
 800fd64:	dc02      	bgt.n	800fd6c <__ieee754_sqrt+0xc8>
 800fd66:	d113      	bne.n	800fd90 <__ieee754_sqrt+0xec>
 800fd68:	459c      	cmp	ip, r3
 800fd6a:	d811      	bhi.n	800fd90 <__ieee754_sqrt+0xec>
 800fd6c:	f1bc 0f00 	cmp.w	ip, #0
 800fd70:	eb0c 0506 	add.w	r5, ip, r6
 800fd74:	da43      	bge.n	800fdfe <__ieee754_sqrt+0x15a>
 800fd76:	2d00      	cmp	r5, #0
 800fd78:	db41      	blt.n	800fdfe <__ieee754_sqrt+0x15a>
 800fd7a:	f100 0801 	add.w	r8, r0, #1
 800fd7e:	1a09      	subs	r1, r1, r0
 800fd80:	459c      	cmp	ip, r3
 800fd82:	bf88      	it	hi
 800fd84:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800fd88:	eba3 030c 	sub.w	r3, r3, ip
 800fd8c:	4432      	add	r2, r6
 800fd8e:	4640      	mov	r0, r8
 800fd90:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800fd94:	f1be 0e01 	subs.w	lr, lr, #1
 800fd98:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800fd9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fda0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fda4:	d1db      	bne.n	800fd5e <__ieee754_sqrt+0xba>
 800fda6:	430b      	orrs	r3, r1
 800fda8:	d006      	beq.n	800fdb8 <__ieee754_sqrt+0x114>
 800fdaa:	1c50      	adds	r0, r2, #1
 800fdac:	bf13      	iteet	ne
 800fdae:	3201      	addne	r2, #1
 800fdb0:	3401      	addeq	r4, #1
 800fdb2:	4672      	moveq	r2, lr
 800fdb4:	f022 0201 	bicne.w	r2, r2, #1
 800fdb8:	1063      	asrs	r3, r4, #1
 800fdba:	0852      	lsrs	r2, r2, #1
 800fdbc:	07e1      	lsls	r1, r4, #31
 800fdbe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fdc2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fdc6:	bf48      	it	mi
 800fdc8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fdcc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800fdd0:	4614      	mov	r4, r2
 800fdd2:	e781      	b.n	800fcd8 <__ieee754_sqrt+0x34>
 800fdd4:	0ad9      	lsrs	r1, r3, #11
 800fdd6:	3815      	subs	r0, #21
 800fdd8:	055b      	lsls	r3, r3, #21
 800fdda:	2900      	cmp	r1, #0
 800fddc:	d0fa      	beq.n	800fdd4 <__ieee754_sqrt+0x130>
 800fdde:	02cd      	lsls	r5, r1, #11
 800fde0:	d50a      	bpl.n	800fdf8 <__ieee754_sqrt+0x154>
 800fde2:	f1c2 0420 	rsb	r4, r2, #32
 800fde6:	fa23 f404 	lsr.w	r4, r3, r4
 800fdea:	1e55      	subs	r5, r2, #1
 800fdec:	4093      	lsls	r3, r2
 800fdee:	4321      	orrs	r1, r4
 800fdf0:	1b42      	subs	r2, r0, r5
 800fdf2:	e78a      	b.n	800fd0a <__ieee754_sqrt+0x66>
 800fdf4:	4610      	mov	r0, r2
 800fdf6:	e7f0      	b.n	800fdda <__ieee754_sqrt+0x136>
 800fdf8:	0049      	lsls	r1, r1, #1
 800fdfa:	3201      	adds	r2, #1
 800fdfc:	e7ef      	b.n	800fdde <__ieee754_sqrt+0x13a>
 800fdfe:	4680      	mov	r8, r0
 800fe00:	e7bd      	b.n	800fd7e <__ieee754_sqrt+0xda>
 800fe02:	bf00      	nop
 800fe04:	7ff00000 	.word	0x7ff00000

0800fe08 <atan>:
 800fe08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	ec55 4b10 	vmov	r4, r5, d0
 800fe10:	4bc3      	ldr	r3, [pc, #780]	; (8010120 <atan+0x318>)
 800fe12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fe16:	429e      	cmp	r6, r3
 800fe18:	46ab      	mov	fp, r5
 800fe1a:	dd18      	ble.n	800fe4e <atan+0x46>
 800fe1c:	4bc1      	ldr	r3, [pc, #772]	; (8010124 <atan+0x31c>)
 800fe1e:	429e      	cmp	r6, r3
 800fe20:	dc01      	bgt.n	800fe26 <atan+0x1e>
 800fe22:	d109      	bne.n	800fe38 <atan+0x30>
 800fe24:	b144      	cbz	r4, 800fe38 <atan+0x30>
 800fe26:	4622      	mov	r2, r4
 800fe28:	462b      	mov	r3, r5
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	4629      	mov	r1, r5
 800fe2e:	f7f0 fa35 	bl	800029c <__adddf3>
 800fe32:	4604      	mov	r4, r0
 800fe34:	460d      	mov	r5, r1
 800fe36:	e006      	b.n	800fe46 <atan+0x3e>
 800fe38:	f1bb 0f00 	cmp.w	fp, #0
 800fe3c:	f300 8131 	bgt.w	80100a2 <atan+0x29a>
 800fe40:	a59b      	add	r5, pc, #620	; (adr r5, 80100b0 <atan+0x2a8>)
 800fe42:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe46:	ec45 4b10 	vmov	d0, r4, r5
 800fe4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe4e:	4bb6      	ldr	r3, [pc, #728]	; (8010128 <atan+0x320>)
 800fe50:	429e      	cmp	r6, r3
 800fe52:	dc14      	bgt.n	800fe7e <atan+0x76>
 800fe54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fe58:	429e      	cmp	r6, r3
 800fe5a:	dc0d      	bgt.n	800fe78 <atan+0x70>
 800fe5c:	a396      	add	r3, pc, #600	; (adr r3, 80100b8 <atan+0x2b0>)
 800fe5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe62:	ee10 0a10 	vmov	r0, s0
 800fe66:	4629      	mov	r1, r5
 800fe68:	f7f0 fa18 	bl	800029c <__adddf3>
 800fe6c:	4baf      	ldr	r3, [pc, #700]	; (801012c <atan+0x324>)
 800fe6e:	2200      	movs	r2, #0
 800fe70:	f7f0 fe5a 	bl	8000b28 <__aeabi_dcmpgt>
 800fe74:	2800      	cmp	r0, #0
 800fe76:	d1e6      	bne.n	800fe46 <atan+0x3e>
 800fe78:	f04f 3aff 	mov.w	sl, #4294967295
 800fe7c:	e02b      	b.n	800fed6 <atan+0xce>
 800fe7e:	f000 f963 	bl	8010148 <fabs>
 800fe82:	4bab      	ldr	r3, [pc, #684]	; (8010130 <atan+0x328>)
 800fe84:	429e      	cmp	r6, r3
 800fe86:	ec55 4b10 	vmov	r4, r5, d0
 800fe8a:	f300 80bf 	bgt.w	801000c <atan+0x204>
 800fe8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fe92:	429e      	cmp	r6, r3
 800fe94:	f300 80a0 	bgt.w	800ffd8 <atan+0x1d0>
 800fe98:	ee10 2a10 	vmov	r2, s0
 800fe9c:	ee10 0a10 	vmov	r0, s0
 800fea0:	462b      	mov	r3, r5
 800fea2:	4629      	mov	r1, r5
 800fea4:	f7f0 f9fa 	bl	800029c <__adddf3>
 800fea8:	4ba0      	ldr	r3, [pc, #640]	; (801012c <atan+0x324>)
 800feaa:	2200      	movs	r2, #0
 800feac:	f7f0 f9f4 	bl	8000298 <__aeabi_dsub>
 800feb0:	2200      	movs	r2, #0
 800feb2:	4606      	mov	r6, r0
 800feb4:	460f      	mov	r7, r1
 800feb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800feba:	4620      	mov	r0, r4
 800febc:	4629      	mov	r1, r5
 800febe:	f7f0 f9ed 	bl	800029c <__adddf3>
 800fec2:	4602      	mov	r2, r0
 800fec4:	460b      	mov	r3, r1
 800fec6:	4630      	mov	r0, r6
 800fec8:	4639      	mov	r1, r7
 800feca:	f7f0 fcc7 	bl	800085c <__aeabi_ddiv>
 800fece:	f04f 0a00 	mov.w	sl, #0
 800fed2:	4604      	mov	r4, r0
 800fed4:	460d      	mov	r5, r1
 800fed6:	4622      	mov	r2, r4
 800fed8:	462b      	mov	r3, r5
 800feda:	4620      	mov	r0, r4
 800fedc:	4629      	mov	r1, r5
 800fede:	f7f0 fb93 	bl	8000608 <__aeabi_dmul>
 800fee2:	4602      	mov	r2, r0
 800fee4:	460b      	mov	r3, r1
 800fee6:	4680      	mov	r8, r0
 800fee8:	4689      	mov	r9, r1
 800feea:	f7f0 fb8d 	bl	8000608 <__aeabi_dmul>
 800feee:	a374      	add	r3, pc, #464	; (adr r3, 80100c0 <atan+0x2b8>)
 800fef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef4:	4606      	mov	r6, r0
 800fef6:	460f      	mov	r7, r1
 800fef8:	f7f0 fb86 	bl	8000608 <__aeabi_dmul>
 800fefc:	a372      	add	r3, pc, #456	; (adr r3, 80100c8 <atan+0x2c0>)
 800fefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff02:	f7f0 f9cb 	bl	800029c <__adddf3>
 800ff06:	4632      	mov	r2, r6
 800ff08:	463b      	mov	r3, r7
 800ff0a:	f7f0 fb7d 	bl	8000608 <__aeabi_dmul>
 800ff0e:	a370      	add	r3, pc, #448	; (adr r3, 80100d0 <atan+0x2c8>)
 800ff10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff14:	f7f0 f9c2 	bl	800029c <__adddf3>
 800ff18:	4632      	mov	r2, r6
 800ff1a:	463b      	mov	r3, r7
 800ff1c:	f7f0 fb74 	bl	8000608 <__aeabi_dmul>
 800ff20:	a36d      	add	r3, pc, #436	; (adr r3, 80100d8 <atan+0x2d0>)
 800ff22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff26:	f7f0 f9b9 	bl	800029c <__adddf3>
 800ff2a:	4632      	mov	r2, r6
 800ff2c:	463b      	mov	r3, r7
 800ff2e:	f7f0 fb6b 	bl	8000608 <__aeabi_dmul>
 800ff32:	a36b      	add	r3, pc, #428	; (adr r3, 80100e0 <atan+0x2d8>)
 800ff34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff38:	f7f0 f9b0 	bl	800029c <__adddf3>
 800ff3c:	4632      	mov	r2, r6
 800ff3e:	463b      	mov	r3, r7
 800ff40:	f7f0 fb62 	bl	8000608 <__aeabi_dmul>
 800ff44:	a368      	add	r3, pc, #416	; (adr r3, 80100e8 <atan+0x2e0>)
 800ff46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4a:	f7f0 f9a7 	bl	800029c <__adddf3>
 800ff4e:	4642      	mov	r2, r8
 800ff50:	464b      	mov	r3, r9
 800ff52:	f7f0 fb59 	bl	8000608 <__aeabi_dmul>
 800ff56:	a366      	add	r3, pc, #408	; (adr r3, 80100f0 <atan+0x2e8>)
 800ff58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5c:	4680      	mov	r8, r0
 800ff5e:	4689      	mov	r9, r1
 800ff60:	4630      	mov	r0, r6
 800ff62:	4639      	mov	r1, r7
 800ff64:	f7f0 fb50 	bl	8000608 <__aeabi_dmul>
 800ff68:	a363      	add	r3, pc, #396	; (adr r3, 80100f8 <atan+0x2f0>)
 800ff6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6e:	f7f0 f993 	bl	8000298 <__aeabi_dsub>
 800ff72:	4632      	mov	r2, r6
 800ff74:	463b      	mov	r3, r7
 800ff76:	f7f0 fb47 	bl	8000608 <__aeabi_dmul>
 800ff7a:	a361      	add	r3, pc, #388	; (adr r3, 8010100 <atan+0x2f8>)
 800ff7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff80:	f7f0 f98a 	bl	8000298 <__aeabi_dsub>
 800ff84:	4632      	mov	r2, r6
 800ff86:	463b      	mov	r3, r7
 800ff88:	f7f0 fb3e 	bl	8000608 <__aeabi_dmul>
 800ff8c:	a35e      	add	r3, pc, #376	; (adr r3, 8010108 <atan+0x300>)
 800ff8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff92:	f7f0 f981 	bl	8000298 <__aeabi_dsub>
 800ff96:	4632      	mov	r2, r6
 800ff98:	463b      	mov	r3, r7
 800ff9a:	f7f0 fb35 	bl	8000608 <__aeabi_dmul>
 800ff9e:	a35c      	add	r3, pc, #368	; (adr r3, 8010110 <atan+0x308>)
 800ffa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa4:	f7f0 f978 	bl	8000298 <__aeabi_dsub>
 800ffa8:	4632      	mov	r2, r6
 800ffaa:	463b      	mov	r3, r7
 800ffac:	f7f0 fb2c 	bl	8000608 <__aeabi_dmul>
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	460b      	mov	r3, r1
 800ffb4:	4640      	mov	r0, r8
 800ffb6:	4649      	mov	r1, r9
 800ffb8:	f7f0 f970 	bl	800029c <__adddf3>
 800ffbc:	4622      	mov	r2, r4
 800ffbe:	462b      	mov	r3, r5
 800ffc0:	f7f0 fb22 	bl	8000608 <__aeabi_dmul>
 800ffc4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ffc8:	4602      	mov	r2, r0
 800ffca:	460b      	mov	r3, r1
 800ffcc:	d14b      	bne.n	8010066 <atan+0x25e>
 800ffce:	4620      	mov	r0, r4
 800ffd0:	4629      	mov	r1, r5
 800ffd2:	f7f0 f961 	bl	8000298 <__aeabi_dsub>
 800ffd6:	e72c      	b.n	800fe32 <atan+0x2a>
 800ffd8:	ee10 0a10 	vmov	r0, s0
 800ffdc:	4b53      	ldr	r3, [pc, #332]	; (801012c <atan+0x324>)
 800ffde:	2200      	movs	r2, #0
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	f7f0 f959 	bl	8000298 <__aeabi_dsub>
 800ffe6:	4b51      	ldr	r3, [pc, #324]	; (801012c <atan+0x324>)
 800ffe8:	4606      	mov	r6, r0
 800ffea:	460f      	mov	r7, r1
 800ffec:	2200      	movs	r2, #0
 800ffee:	4620      	mov	r0, r4
 800fff0:	4629      	mov	r1, r5
 800fff2:	f7f0 f953 	bl	800029c <__adddf3>
 800fff6:	4602      	mov	r2, r0
 800fff8:	460b      	mov	r3, r1
 800fffa:	4630      	mov	r0, r6
 800fffc:	4639      	mov	r1, r7
 800fffe:	f7f0 fc2d 	bl	800085c <__aeabi_ddiv>
 8010002:	f04f 0a01 	mov.w	sl, #1
 8010006:	4604      	mov	r4, r0
 8010008:	460d      	mov	r5, r1
 801000a:	e764      	b.n	800fed6 <atan+0xce>
 801000c:	4b49      	ldr	r3, [pc, #292]	; (8010134 <atan+0x32c>)
 801000e:	429e      	cmp	r6, r3
 8010010:	da1d      	bge.n	801004e <atan+0x246>
 8010012:	ee10 0a10 	vmov	r0, s0
 8010016:	4b48      	ldr	r3, [pc, #288]	; (8010138 <atan+0x330>)
 8010018:	2200      	movs	r2, #0
 801001a:	4629      	mov	r1, r5
 801001c:	f7f0 f93c 	bl	8000298 <__aeabi_dsub>
 8010020:	4b45      	ldr	r3, [pc, #276]	; (8010138 <atan+0x330>)
 8010022:	4606      	mov	r6, r0
 8010024:	460f      	mov	r7, r1
 8010026:	2200      	movs	r2, #0
 8010028:	4620      	mov	r0, r4
 801002a:	4629      	mov	r1, r5
 801002c:	f7f0 faec 	bl	8000608 <__aeabi_dmul>
 8010030:	4b3e      	ldr	r3, [pc, #248]	; (801012c <atan+0x324>)
 8010032:	2200      	movs	r2, #0
 8010034:	f7f0 f932 	bl	800029c <__adddf3>
 8010038:	4602      	mov	r2, r0
 801003a:	460b      	mov	r3, r1
 801003c:	4630      	mov	r0, r6
 801003e:	4639      	mov	r1, r7
 8010040:	f7f0 fc0c 	bl	800085c <__aeabi_ddiv>
 8010044:	f04f 0a02 	mov.w	sl, #2
 8010048:	4604      	mov	r4, r0
 801004a:	460d      	mov	r5, r1
 801004c:	e743      	b.n	800fed6 <atan+0xce>
 801004e:	462b      	mov	r3, r5
 8010050:	ee10 2a10 	vmov	r2, s0
 8010054:	4939      	ldr	r1, [pc, #228]	; (801013c <atan+0x334>)
 8010056:	2000      	movs	r0, #0
 8010058:	f7f0 fc00 	bl	800085c <__aeabi_ddiv>
 801005c:	f04f 0a03 	mov.w	sl, #3
 8010060:	4604      	mov	r4, r0
 8010062:	460d      	mov	r5, r1
 8010064:	e737      	b.n	800fed6 <atan+0xce>
 8010066:	4b36      	ldr	r3, [pc, #216]	; (8010140 <atan+0x338>)
 8010068:	4e36      	ldr	r6, [pc, #216]	; (8010144 <atan+0x33c>)
 801006a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801006e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010072:	e9da 2300 	ldrd	r2, r3, [sl]
 8010076:	f7f0 f90f 	bl	8000298 <__aeabi_dsub>
 801007a:	4622      	mov	r2, r4
 801007c:	462b      	mov	r3, r5
 801007e:	f7f0 f90b 	bl	8000298 <__aeabi_dsub>
 8010082:	4602      	mov	r2, r0
 8010084:	460b      	mov	r3, r1
 8010086:	e9d6 0100 	ldrd	r0, r1, [r6]
 801008a:	f7f0 f905 	bl	8000298 <__aeabi_dsub>
 801008e:	f1bb 0f00 	cmp.w	fp, #0
 8010092:	4604      	mov	r4, r0
 8010094:	460d      	mov	r5, r1
 8010096:	f6bf aed6 	bge.w	800fe46 <atan+0x3e>
 801009a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801009e:	461d      	mov	r5, r3
 80100a0:	e6d1      	b.n	800fe46 <atan+0x3e>
 80100a2:	a51d      	add	r5, pc, #116	; (adr r5, 8010118 <atan+0x310>)
 80100a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80100a8:	e6cd      	b.n	800fe46 <atan+0x3e>
 80100aa:	bf00      	nop
 80100ac:	f3af 8000 	nop.w
 80100b0:	54442d18 	.word	0x54442d18
 80100b4:	bff921fb 	.word	0xbff921fb
 80100b8:	8800759c 	.word	0x8800759c
 80100bc:	7e37e43c 	.word	0x7e37e43c
 80100c0:	e322da11 	.word	0xe322da11
 80100c4:	3f90ad3a 	.word	0x3f90ad3a
 80100c8:	24760deb 	.word	0x24760deb
 80100cc:	3fa97b4b 	.word	0x3fa97b4b
 80100d0:	a0d03d51 	.word	0xa0d03d51
 80100d4:	3fb10d66 	.word	0x3fb10d66
 80100d8:	c54c206e 	.word	0xc54c206e
 80100dc:	3fb745cd 	.word	0x3fb745cd
 80100e0:	920083ff 	.word	0x920083ff
 80100e4:	3fc24924 	.word	0x3fc24924
 80100e8:	5555550d 	.word	0x5555550d
 80100ec:	3fd55555 	.word	0x3fd55555
 80100f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80100f4:	bfa2b444 	.word	0xbfa2b444
 80100f8:	52defd9a 	.word	0x52defd9a
 80100fc:	3fadde2d 	.word	0x3fadde2d
 8010100:	af749a6d 	.word	0xaf749a6d
 8010104:	3fb3b0f2 	.word	0x3fb3b0f2
 8010108:	fe231671 	.word	0xfe231671
 801010c:	3fbc71c6 	.word	0x3fbc71c6
 8010110:	9998ebc4 	.word	0x9998ebc4
 8010114:	3fc99999 	.word	0x3fc99999
 8010118:	54442d18 	.word	0x54442d18
 801011c:	3ff921fb 	.word	0x3ff921fb
 8010120:	440fffff 	.word	0x440fffff
 8010124:	7ff00000 	.word	0x7ff00000
 8010128:	3fdbffff 	.word	0x3fdbffff
 801012c:	3ff00000 	.word	0x3ff00000
 8010130:	3ff2ffff 	.word	0x3ff2ffff
 8010134:	40038000 	.word	0x40038000
 8010138:	3ff80000 	.word	0x3ff80000
 801013c:	bff00000 	.word	0xbff00000
 8010140:	080106c0 	.word	0x080106c0
 8010144:	080106a0 	.word	0x080106a0

08010148 <fabs>:
 8010148:	ec51 0b10 	vmov	r0, r1, d0
 801014c:	ee10 2a10 	vmov	r2, s0
 8010150:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010154:	ec43 2b10 	vmov	d0, r2, r3
 8010158:	4770      	bx	lr
	...

0801015c <_init>:
 801015c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801015e:	bf00      	nop
 8010160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010162:	bc08      	pop	{r3}
 8010164:	469e      	mov	lr, r3
 8010166:	4770      	bx	lr

08010168 <_fini>:
 8010168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801016a:	bf00      	nop
 801016c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801016e:	bc08      	pop	{r3}
 8010170:	469e      	mov	lr, r3
 8010172:	4770      	bx	lr
